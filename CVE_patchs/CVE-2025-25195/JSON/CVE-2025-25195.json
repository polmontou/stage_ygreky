"diff --git a/zerver/lib/streams.py b/zerver/lib/streams.py\nindex ea5685e15d..afbb495427 100644\n--- a/zerver/lib/streams.py\n+++ b/zerver/lib/streams.py\n@@ -1550,7 +1550,7 @@ def notify_stream_is_recently_active_update(stream: Stream, value: bool) -> None\n         name=stream.name,\n     )\n \n-    send_event_on_commit(stream.realm, event, active_user_ids(stream.realm_id))\n+    send_event_on_commit(stream.realm, event, can_access_stream_metadata_user_ids(stream))\n \n \n @transaction.atomic(durable=True)\ndiff --git a/zerver/tests/test_message_move_stream.py b/zerver/tests/test_message_move_stream.py\nindex b09f273aaf..e8c90452c0 100644\n--- a/zerver/tests/test_message_move_stream.py\n+++ b/zerver/tests/test_message_move_stream.py\n@@ -1,16 +1,21 @@\n from datetime import timedelta\n+from unittest import mock\n \n import orjson\n+from django.utils.timezone import now as timezone_now\n \n from zerver.actions.message_delete import do_delete_messages\n from zerver.actions.realm_settings import (\n     do_change_realm_permission_group_setting,\n     do_set_realm_property,\n )\n-from zerver.actions.streams import do_change_stream_group_based_setting\n+from zerver.actions.streams import do_change_stream_group_based_setting, do_change_stream_permission\n from zerver.actions.user_groups import check_add_user_group\n from zerver.lib.message import has_message_access\n-from zerver.lib.streams import check_update_all_streams_active_status\n+from zerver.lib.streams import (\n+    can_access_stream_metadata_user_ids,\n+    update_stream_active_status_for_realm,\n+)\n from zerver.lib.test_classes import ZulipTestCase, get_topic_messages\n from zerver.lib.test_helpers import queries_captured\n from zerver.lib.url_encoding import near_stream_message_url\n@@ -18,6 +23,7 @@ from zerver.models import Message, NamedUserGroup, Stream, UserMessage, UserProf\n from zerver.models.groups import SystemGroups\n from zerver.models.realms import get_realm\n from zerver.models.streams import get_stream\n+from zerver.tornado.django_api import send_event_on_commit\n \n \n class MessageMoveStreamTest(ZulipTestCase):\n@@ -1932,7 +1938,84 @@ class MessageMoveStreamTest(ZulipTestCase):\n         # Delete all messages in new stream and mark it as inactive.\n         Message.objects.filter(recipient__type_id=new_stream.id, realm=user_profile.realm).delete()\n \n-        check_update_all_streams_active_status()\n+        with mock.patch(\"zerver.lib.streams.send_event_on_commit\", wraps=send_event_on_commit) as m:\n+            update_stream_active_status_for_realm(\n+                user_profile.realm, timezone_now() - timedelta(days=10)\n+            )\n+            self.assertEqual(\n+                m.call_args.args,\n+                (\n+                    new_stream.realm,\n+                    dict(\n+                        type=\"stream\",\n+                        op=\"update\",\n+                        property=\"is_recently_active\",\n+                        value=False,\n+                        stream_id=new_stream.id,\n+                        name=new_stream.name,\n+                    ),\n+                    can_access_stream_metadata_user_ids(new_stream),\n+                ),\n+            )\n+\n+        new_stream.refresh_from_db()\n+        self.assertFalse(new_stream.is_recently_active)\n+\n+        # Move the message to new stream should make active again.\n+        result = self.client_patch(\n+            f\"/json/messages/{msg_id_later}\",\n+            {\n+                \"stream_id\": new_stream.id,\n+                \"propagate_mode\": \"change_later\",\n+                \"send_notification_to_new_thread\": \"false\",\n+            },\n+        )\n+        self.assert_json_success(result)\n+\n+        new_stream.refresh_from_db()\n+        self.assertTrue(new_stream.is_recently_active)\n+\n+    def test_move_message_update_private_stream_active_status(self) -> None:\n+        # Goal is to test that we only send the stream status update to subscribers.\n+        (user_profile, old_stream, new_stream, msg_id, msg_id_later) = self.prepare_move_topics(\n+            \"iago\", \"test move stream\", \"new stream\", \"test\"\n+        )\n+\n+        # Mark stream as private\n+        do_change_stream_permission(\n+            new_stream,\n+            invite_only=True,\n+            history_public_to_subscribers=False,\n+            is_web_public=False,\n+            acting_user=user_profile,\n+        )\n+        # Delete all messages in new stream and mark it as inactive.\n+        Message.objects.filter(recipient__type_id=new_stream.id, realm=user_profile.realm).delete()\n+\n+        with mock.patch(\"zerver.lib.streams.send_event_on_commit\", wraps=send_event_on_commit) as m:\n+            update_stream_active_status_for_realm(\n+                user_profile.realm, timezone_now() - timedelta(days=10)\n+            )\n+            self.assertEqual(\n+                m.call_args.args,\n+                (\n+                    new_stream.realm,\n+                    dict(\n+                        type=\"stream\",\n+                        op=\"update\",\n+                        property=\"is_recently_active\",\n+                        value=False,\n+                        stream_id=new_stream.id,\n+                        name=new_stream.name,\n+                    ),\n+                    # Only send the event to users with stream access.\n+                    {\n+                        9,  # Realm owner (Desdemona)\n+                        11,  # Subscriber (iago)\n+                    },\n+                ),\n+            )\n+\n         new_stream.refresh_from_db()\n         self.assertFalse(new_stream.is_recently_active)\n "