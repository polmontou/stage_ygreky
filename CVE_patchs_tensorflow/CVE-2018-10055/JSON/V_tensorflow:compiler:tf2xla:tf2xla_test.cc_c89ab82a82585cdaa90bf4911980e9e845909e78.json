"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/compiler/tf2xla/tf2xla.h\"\n\n#include \"tensorflow/compiler/tf2xla/tf2xla.pb.h\"\n#include \"tensorflow/compiler/xla/client/client_library.h\"\n#include \"tensorflow/compiler/xla/client/local_client.h\"\n#include \"tensorflow/compiler/xla/literal_util.h\"\n#include \"tensorflow/compiler/xla/statusor.h\"\n#include \"tensorflow/core/framework/attr_value.pb.h\"\n#include \"tensorflow/core/framework/attr_value_util.h\"\n#include \"tensorflow/core/framework/graph.pb.h\"\n#include \"tensorflow/core/framework/node_def.pb.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/lib/core/status_test_util.h\"\n#include \"tensorflow/core/platform/test.h\"\n\nnamespace tensorflow {\nnamespace {\n\nAttrValue TypeAttrValue(DataType type) {\n  AttrValue attr_value;\n  SetAttrValue(type, &attr_value);\n  return attr_value;\n}\n\nGraphDef SumGraph() {\n  GraphDef graph_def;\n  NodeDef* x = graph_def.add_node();\n  x->set_name(\"x\");\n  x->set_op(\"Placeholder\");\n  (*x->mutable_attr())[\"dtype\"] = TypeAttrValue(DT_INT32);\n  NodeDef* y = graph_def.add_node();\n  y->set_name(\"y\");\n  y->set_op(\"Placeholder\");\n  (*y->mutable_attr())[\"dtype\"] = TypeAttrValue(DT_INT32);\n  NodeDef* sum = graph_def.add_node();\n  sum->set_name(\"sum\");\n  sum->set_op(\"Add\");\n  sum->add_input(\"x\");\n  sum->add_input(\"y\");\n  (*sum->mutable_attr())[\"T\"] = TypeAttrValue(DT_INT32);\n  return graph_def;\n}\n\ntf2xla::Config SumConfig() {\n  tf2xla::Config config;\n  config.add_feed()->mutable_id()->set_node_name(\"x\");\n  config.add_feed()->mutable_id()->set_node_name(\"y\");\n  config.add_fetch()->mutable_id()->set_node_name(\"sum\");\n  return config;\n}\n\nTEST(ConvertGraphDefToXla, Sum) {\n  GraphDef graph_def = SumGraph();\n  tf2xla::Config config = SumConfig();\n\n  xla::LocalClient* client = xla::ClientLibrary::LocalClientOrDie();\n  xla::Computation computation;\n  TF_EXPECT_OK(ConvertGraphDefToXla(graph_def, config, client, &computation));\n\n  // Set up arguments.\n  auto x_literal = xla::Literal::CreateR0<int32>(10);\n  auto y_literal = xla::Literal::CreateR0<int32>(32);\n  auto x_global_or = client->TransferToServer(*x_literal);\n  auto y_global_or = client->TransferToServer(*y_literal);\n  TF_EXPECT_OK(x_global_or.status());\n  TF_EXPECT_OK(y_global_or.status());\n  std::unique_ptr<xla::GlobalData> x_global =\n      std::move(x_global_or.ValueOrDie());\n  std::unique_ptr<xla::GlobalData> y_global =\n      std::move(y_global_or.ValueOrDie());\n\n  // Execute and check result.\n  auto result_or =\n      client->ExecuteAndTransfer(computation, {x_global.get(), y_global.get()});\n  TF_EXPECT_OK(result_or.status());\n  std::unique_ptr<xla::Literal> result = std::move(result_or.ValueOrDie());\n  EXPECT_EQ(\"(s32[]) (\\n42\\n)\", result->ToString());\n}\n\n}  // namespace\n}  // namespace tensorflow"