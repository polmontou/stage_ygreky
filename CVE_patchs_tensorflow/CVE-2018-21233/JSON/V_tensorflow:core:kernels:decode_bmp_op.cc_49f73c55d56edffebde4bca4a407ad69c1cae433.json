"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/image_ops.cc\n\n#include <memory>\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/framework/types.pb.h\"\n#include \"tensorflow/core/kernels/bounds_check.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/platform/logging.h\"\n\nnamespace tensorflow {\n\n// Decode the contents of a BMP file\nclass DecodeBmpOp : public OpKernel {\n public:\n  explicit DecodeBmpOp(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"channels\", &channels_));\n    OP_REQUIRES(\n        context,\n        channels_ == 0 || channels_ == 1 || channels_ == 3 || channels_ == 4,\n        errors::InvalidArgument(\"channels must be 0, 1, 3 or 4, got \",\n                                channels_));\n  }\n  inline int32 ByteSwapInt32ForBigEndian(int32 x) {\n#if (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)\n    return le32toh(x);\n#else\n    return x;\n#endif\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& contents = context->input(0);\n    OP_REQUIRES(context, TensorShapeUtils::IsScalar(contents.shape()),\n                errors::InvalidArgument(\"contents must be scalar, got shape \",\n                                        contents.shape().DebugString()));\n\n    // Start decoding image to get shape details\n    const StringPiece input = contents.scalar<string>()();\n\n    OP_REQUIRES(context, (32 <= input.size()),\n                errors::InvalidArgument(\"Incomplete bmp content, requires at \"\n                                        \"least 32 bytes to find the header \"\n                                        \"size, width, height, and bpp, got \",\n                                        input.size(), \" bytes\"));\n\n    const uint8* img_bytes = reinterpret_cast<const uint8*>(input.data());\n    int32 header_size_ = internal::SubtleMustCopy(\n        *(reinterpret_cast<const int32*>(img_bytes + 10)));\n    const int32 header_size = ByteSwapInt32ForBigEndian(header_size_);\n    int32 width_ = internal::SubtleMustCopy(\n        *(reinterpret_cast<const int32*>(img_bytes + 18)));\n    const int32 width = ByteSwapInt32ForBigEndian(width_);\n    int32 height_ = internal::SubtleMustCopy(\n        *(reinterpret_cast<const int32*>(img_bytes + 22)));\n    const int32 height = ByteSwapInt32ForBigEndian(height_);\n    int32 bpp_ = internal::SubtleMustCopy(\n        *(reinterpret_cast<const int32*>(img_bytes + 28)));\n    const int32 bpp = ByteSwapInt32ForBigEndian(bpp_);\n\n    if (channels_) {\n      OP_REQUIRES(context, (channels_ == bpp / 8),\n                  errors::InvalidArgument(\n                      \"channels attribute \", channels_,\n                      \" does not match bits per pixel from file \", bpp / 8));\n    } else {\n      channels_ = bpp / 8;\n    }\n\n    // Current implementation only supports 1, 3 or 4 channel\n    // bitmaps.\n    OP_REQUIRES(context, (channels_ == 1 || channels_ == 3 || channels_ == 4),\n                errors::InvalidArgument(\n                    \"Number of channels must be 1, 3 or 4, was \", channels_));\n\n    // there may be padding bytes when the width is not a multiple of 4 bytes\n    // 8 * channels == bits per pixel\n    const int row_size = (8 * channels_ * width + 31) / 32 * 4;\n\n    const int last_pixel_offset =\n        header_size + (abs(height) - 1) * row_size + (width - 1) * channels_;\n\n    // [expected file size] = [last pixel offset] + [last pixel size=channels]\n    const int expected_file_size = last_pixel_offset + channels_;\n\n    OP_REQUIRES(\n        context, (expected_file_size <= input.size()),\n        errors::InvalidArgument(\"Incomplete bmp content, requires at least \",\n                                expected_file_size, \" bytes, got \",\n                                input.size(), \" bytes\"));\n\n    // if height is negative, data layout is top down\n    // otherwise, it's bottom up\n    bool top_down = (height < 0);\n\n    // Decode image, allocating tensor once the image size is known\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(\n        context, context->allocate_output(\n                     0, TensorShape({abs(height), width, channels_}), &output));\n\n    const uint8* bmp_pixels = &img_bytes[header_size];\n\n    Decode(bmp_pixels, row_size, output->flat<uint8>().data(), width,\n           abs(height), channels_, top_down);\n  }\n\n  uint8* Decode(const uint8* input, const int row_size, uint8* const output,\n                const int width, const int height, const int channles,\n                bool top_down);\n\n private:\n  int channels_;\n};\nREGISTER_KERNEL_BUILDER(Name(\"DecodeBmp\").Device(DEVICE_CPU), DecodeBmpOp);\n\nuint8* DecodeBmpOp::Decode(const uint8* input, const int row_size,\n                           uint8* const output, const int width,\n                           const int height, const int channels,\n                           bool top_down) {\n  for (int i = 0; i < height; i++) {\n    int src_pos;\n    int dst_pos;\n\n    for (int j = 0; j < width; j++) {\n      if (!top_down) {\n        src_pos = ((height - 1 - i) * row_size) + j * channels;\n      } else {\n        src_pos = i * row_size + j * channels;\n      }\n\n      dst_pos = (i * width + j) * channels;\n\n      switch (channels) {\n        case 1:\n          output[dst_pos] = input[src_pos];\n          break;\n        case 3:\n          // BGR -> RGB\n          output[dst_pos] = input[src_pos + 2];\n          output[dst_pos + 1] = input[src_pos + 1];\n          output[dst_pos + 2] = input[src_pos];\n          break;\n        case 4:\n          // BGRA -> RGBA\n          output[dst_pos] = input[src_pos + 2];\n          output[dst_pos + 1] = input[src_pos + 1];\n          output[dst_pos + 2] = input[src_pos];\n          output[dst_pos + 3] = input[src_pos + 3];\n          break;\n        default:\n          LOG(FATAL) << \"Unexpected number of channels: \" << channels;\n          break;\n      }\n    }\n  }\n\n  return output;\n}\n\n}  // namespace tensorflow"