"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/lib/io/format.h\"\n\n#include \"tensorflow/core/lib/core/coding.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/hash/crc32c.h\"\n#include \"tensorflow/core/lib/io/block.h\"\n#include \"tensorflow/core/platform/env.h\"\n#include \"tensorflow/core/platform/snappy.h\"\n\nnamespace tensorflow {\nnamespace table {\n\nvoid BlockHandle::EncodeTo(string* dst) const {\n  // Sanity check that all fields have been set\n  assert(offset_ != ~static_cast<uint64>(0));\n  assert(size_ != ~static_cast<uint64>(0));\n  core::PutVarint64(dst, offset_);\n  core::PutVarint64(dst, size_);\n}\n\nStatus BlockHandle::DecodeFrom(StringPiece* input) {\n  if (core::GetVarint64(input, &offset_) && core::GetVarint64(input, &size_)) {\n    return Status::OK();\n  } else {\n    return errors::DataLoss(\"bad block handle\");\n  }\n}\n\nvoid Footer::EncodeTo(string* dst) const {\n#ifndef NDEBUG\n  const size_t original_size = dst->size();\n#endif\n  metaindex_handle_.EncodeTo(dst);\n  index_handle_.EncodeTo(dst);\n  dst->resize(2 * BlockHandle::kMaxEncodedLength);  // Padding\n  core::PutFixed32(dst, static_cast<uint32>(kTableMagicNumber & 0xffffffffu));\n  core::PutFixed32(dst, static_cast<uint32>(kTableMagicNumber >> 32));\n  assert(dst->size() == original_size + kEncodedLength);\n}\n\nStatus Footer::DecodeFrom(StringPiece* input) {\n  const char* magic_ptr = input->data() + kEncodedLength - 8;\n  const uint32 magic_lo = core::DecodeFixed32(magic_ptr);\n  const uint32 magic_hi = core::DecodeFixed32(magic_ptr + 4);\n  const uint64 magic =\n      ((static_cast<uint64>(magic_hi) << 32) | (static_cast<uint64>(magic_lo)));\n  if (magic != kTableMagicNumber) {\n    return errors::DataLoss(\"not an sstable (bad magic number)\");\n  }\n\n  Status result = metaindex_handle_.DecodeFrom(input);\n  if (result.ok()) {\n    result = index_handle_.DecodeFrom(input);\n  }\n  if (result.ok()) {\n    // We skip over any leftover data (just padding for now) in \"input\"\n    const char* end = magic_ptr + 8;\n    *input = StringPiece(end, input->data() + input->size() - end);\n  }\n  return result;\n}\n\nStatus ReadBlock(RandomAccessFile* file, const BlockHandle& handle,\n                 BlockContents* result) {\n  result->data = StringPiece();\n  result->cachable = false;\n  result->heap_allocated = false;\n\n  // Read the block contents as well as the type/crc footer.\n  // See table_builder.cc for the code that built this structure.\n  size_t n = static_cast<size_t>(handle.size());\n  char* buf = new char[n + kBlockTrailerSize];\n  StringPiece contents;\n  Status s = file->Read(handle.offset(), n + kBlockTrailerSize, &contents, buf);\n  if (!s.ok()) {\n    delete[] buf;\n    return s;\n  }\n  if (contents.size() != n + kBlockTrailerSize) {\n    delete[] buf;\n    return errors::DataLoss(\"truncated block read\");\n  }\n\n  // Check the crc of the type and the block contents\n  const char* data = contents.data();  // Pointer to where Read put the data\n  // This checksum verification is optional.  We leave it on for now\n  const bool verify_checksum = true;\n  if (verify_checksum) {\n    const uint32 crc = crc32c::Unmask(core::DecodeFixed32(data + n + 1));\n    const uint32 actual = crc32c::Value(data, n + 1);\n    if (actual != crc) {\n      delete[] buf;\n      s = errors::DataLoss(\"block checksum mismatch\");\n      return s;\n    }\n  }\n\n  switch (data[n]) {\n    case kNoCompression:\n      if (data != buf) {\n        // File implementation gave us pointer to some other data.\n        // Use it directly under the assumption that it will be live\n        // while the file is open.\n        delete[] buf;\n        result->data = StringPiece(data, n);\n        result->heap_allocated = false;\n        result->cachable = false;  // Do not double-cache\n      } else {\n        result->data = StringPiece(buf, n);\n        result->heap_allocated = true;\n        result->cachable = true;\n      }\n\n      // Ok\n      break;\n    case kSnappyCompression: {\n      size_t ulength = 0;\n      if (!port::Snappy_GetUncompressedLength(data, n, &ulength)) {\n        delete[] buf;\n        return errors::DataLoss(\"corrupted compressed block contents\");\n      }\n      char* ubuf = new char[ulength];\n      if (!port::Snappy_Uncompress(data, n, ubuf)) {\n        delete[] buf;\n        delete[] ubuf;\n        return errors::DataLoss(\"corrupted compressed block contents\");\n      }\n      delete[] buf;\n      result->data = StringPiece(ubuf, ulength);\n      result->heap_allocated = true;\n      result->cachable = true;\n      break;\n    }\n    default:\n      delete[] buf;\n      return errors::DataLoss(\"bad block type\");\n  }\n\n  return Status::OK();\n}\n\n}  // namespace table\n}  // namespace tensorflow"