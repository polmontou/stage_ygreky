"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// Functions to read images in GIF format.\n\n#include \"tensorflow/core/lib/gif/gif_io.h\"\n#include \"tensorflow/core/lib/gtl/cleanup.h\"\n#include \"tensorflow/core/lib/strings/strcat.h\"\n#include \"tensorflow/core/platform/gif.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/mem.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\nnamespace gif {\n\nstruct InputBufferInfo {\n  const uint8_t* buf;\n  int bytes_left;\n};\n\nint input_callback(GifFileType* gif_file, GifByteType* buf, int size) {\n  InputBufferInfo* const info =\n      reinterpret_cast<InputBufferInfo*>(gif_file->UserData);\n  if (info != nullptr) {\n    if (size > info->bytes_left) size = info->bytes_left;\n    memcpy(buf, info->buf, size);\n    info->buf += size;\n    info->bytes_left -= size;\n    return size;\n  }\n  return 0;\n}\n\nstatic const char* GifErrorStringNonNull(int error_code) {\n  const char* error_string = GifErrorString(error_code);\n  if (error_string == nullptr) {\n    return \"Unknown error\";\n  }\n  return error_string;\n}\n\nuint8* Decode(const void* srcdata, int datasize,\n              const std::function<uint8*(int, int, int, int)>& allocate_output,\n              string* error_string) {\n  int error_code = D_GIF_SUCCEEDED;\n  InputBufferInfo info = {reinterpret_cast<const uint8*>(srcdata), datasize};\n  GifFileType* gif_file =\n      DGifOpen(static_cast<void*>(&info), &input_callback, &error_code);\n  const auto cleanup = gtl::MakeCleanup([gif_file]() {\n    int error_code = D_GIF_SUCCEEDED;\n    if (gif_file && DGifCloseFile(gif_file, &error_code) != GIF_OK) {\n      LOG(WARNING) << \"Fail to close gif file, reason: \"\n                   << GifErrorStringNonNull(error_code);\n    }\n  });\n  if (error_code != D_GIF_SUCCEEDED) {\n    *error_string = strings::StrCat(\"failed to open gif file: \",\n                                    GifErrorStringNonNull(error_code));\n    return nullptr;\n  }\n  if (DGifSlurp(gif_file) != GIF_OK) {\n    *error_string = strings::StrCat(\"failed to slurp gif file: \",\n                                    GifErrorStringNonNull(gif_file->Error));\n    return nullptr;\n  }\n  if (gif_file->ImageCount <= 0) {\n    *error_string = strings::StrCat(\"gif file does not contain any image\");\n    return nullptr;\n  }\n\n  const int num_frames = gif_file->ImageCount;\n  const int width = gif_file->SWidth;\n  const int height = gif_file->SHeight;\n  const int channel = 3;\n\n  uint8* const dstdata = allocate_output(num_frames, width, height, channel);\n  if (!dstdata) return nullptr;\n  for (int k = 0; k < num_frames; k++) {\n    SavedImage* this_image = &gif_file->SavedImages[k];\n    GifImageDesc* img_desc = &this_image->ImageDesc;\n    if (img_desc->Left != 0 || img_desc->Top != 0 || img_desc->Width != width ||\n        img_desc->Height != height) {\n      *error_string = strings::StrCat(\"can't process optimized gif\");\n      return nullptr;\n    }\n\n    ColorMapObject* color_map = this_image->ImageDesc.ColorMap\n                                    ? this_image->ImageDesc.ColorMap\n                                    : gif_file->SColorMap;\n\n    uint8* this_dst = dstdata + k * width * channel * height;\n    for (int i = 0; i < height; ++i) {\n      uint8* p_dst = this_dst + i * width * channel;\n      for (int j = 0; j < width; ++j) {\n        GifByteType color_index = this_image->RasterBits[i * width + j];\n        const GifColorType& gif_color = color_map->Colors[color_index];\n        p_dst[j * channel + 0] = gif_color.Red;\n        p_dst[j * channel + 1] = gif_color.Green;\n        p_dst[j * channel + 2] = gif_color.Blue;\n      }\n    }\n  }\n\n  return dstdata;\n}\n\n}  // namespace gif\n}  // namespace tensorflow"