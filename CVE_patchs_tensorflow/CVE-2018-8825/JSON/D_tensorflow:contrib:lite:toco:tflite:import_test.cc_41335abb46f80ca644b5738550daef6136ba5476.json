"diff --git a/tensorflow/contrib/lite/toco/tflite/import_test.cc b/tensorflow/contrib/lite/toco/tflite/import_test.cc\nindex 937a291cf7b..edd22f783f0 100644\n--- a/tensorflow/contrib/lite/toco/tflite/import_test.cc\n+++ b/tensorflow/contrib/lite/toco/tflite/import_test.cc\n@@ -36,12 +36,13 @@ class ImportTest : public ::testing::Test {\n     return builder_.CreateVector(reinterpret_cast<const uint8_t*>(data.data()),\n                                  sizeof(T) * data.size());\n   }\n+\n   Offset<Vector<Offset<::tflite::Buffer>>> BuildBuffers() {\n     auto buf0 = ::tflite::CreateBuffer(builder_, CreateDataVector<float>({}));\n-    auto buf1 =\n-        ::tflite::CreateBuffer(builder_, CreateDataVector<float>({1.0f, 2.0f}));\n+    auto buf1 = ::tflite::CreateBuffer(\n+        builder_, CreateDataVector<float>({1.0f, 2.0f, 3.0f, 4.0f}));\n     auto buf2 =\n-        ::tflite::CreateBuffer(builder_, CreateDataVector<float>({3.0f}));\n+        ::tflite::CreateBuffer(builder_, CreateDataVector<float>({3.0f, 4.0f}));\n     return builder_.CreateVector(\n         std::vector<Offset<::tflite::Buffer>>({buf0, buf1, buf2}));\n   }\n@@ -53,10 +54,10 @@ class ImportTest : public ::testing::Test {\n         /*max=*/builder_.CreateVector<float>({0.2f}),\n         /*scale=*/builder_.CreateVector<float>({0.3f}),\n         /*zero_point=*/builder_.CreateVector<int64_t>({100ll}));\n-    auto t1 = ::tflite::CreateTensor(builder_,\n-                                     builder_.CreateVector<int>({1, 2, 3, 4}),\n-                                     ::tflite::TensorType_FLOAT32, 1,\n-                                     builder_.CreateString(\"tensor_one\"), q);\n+    auto t1 =\n+        ::tflite::CreateTensor(builder_, builder_.CreateVector<int>({1, 2, 2}),\n+                               ::tflite::TensorType_FLOAT32, 1,\n+                               builder_.CreateString(\"tensor_one\"), q);\n     auto t2 =\n         ::tflite::CreateTensor(builder_, builder_.CreateVector<int>({2, 1}),\n                                ::tflite::TensorType_FLOAT32, 2,\n@@ -65,18 +66,26 @@ class ImportTest : public ::testing::Test {\n         std::vector<Offset<::tflite::Tensor>>({t1, t2}));\n   }\n \n+  Offset<Vector<Offset<::tflite::OperatorCode>>> BuildOpCodes(\n+      std::initializer_list<::tflite::BuiltinOperator> op_codes) {\n+    std::vector<Offset<::tflite::OperatorCode>> op_codes_vector;\n+    for (auto op : op_codes) {\n+      op_codes_vector.push_back(::tflite::CreateOperatorCode(builder_, op, 0));\n+    }\n+    return builder_.CreateVector(op_codes_vector);\n+  }\n+\n   Offset<Vector<Offset<::tflite::OperatorCode>>> BuildOpCodes() {\n-    auto c1 = ::tflite::CreateOperatorCode(\n-        builder_, ::tflite::BuiltinOperator_MAX_POOL_2D, 0);\n-    auto c2 = ::tflite::CreateOperatorCode(\n-        builder_, ::tflite::BuiltinOperator_CONV_2D, 0);\n-    return builder_.CreateVector(\n-        std::vector<Offset<::tflite::OperatorCode>>({c1, c2}));\n+    return BuildOpCodes({::tflite::BuiltinOperator_MAX_POOL_2D,\n+                         ::tflite::BuiltinOperator_CONV_2D});\n   }\n \n-  Offset<Vector<Offset<::tflite::Operator>>> BuildOperators() {\n-    auto is = builder_.CreateVector<int>({0});\n-    auto os = builder_.CreateVector<int>({1});\n+  Offset<Vector<Offset<::tflite::Operator>>> BuildOperators(\n+      std::initializer_list<int> inputs, std::initializer_list<int> outputs) {\n+    auto is = builder_.CreateVector<int>(inputs);\n+    if (inputs.size() == 0) is = 0;\n+    auto os = builder_.CreateVector<int>(outputs);\n+    if (outputs.size() == 0) os = 0;\n     auto op = ::tflite::CreateOperator(\n         builder_, 0, is, os, ::tflite::BuiltinOptions_Conv2DOptions,\n         ::tflite::CreateConv2DOptions(builder_, ::tflite::Padding_VALID, 1, 1,\n@@ -87,6 +96,10 @@ class ImportTest : public ::testing::Test {\n     return builder_.CreateVector(std::vector<Offset<::tflite::Operator>>({op}));\n   }\n \n+  Offset<Vector<Offset<::tflite::Operator>>> BuildOperators() {\n+    return BuildOperators({0}, {1});\n+  }\n+\n   Offset<Vector<Offset<::tflite::SubGraph>>> BuildSubGraphs(\n       Offset<Vector<Offset<::tflite::Tensor>>> tensors,\n       Offset<Vector<Offset<::tflite::Operator>>> operators,\n@@ -154,9 +167,9 @@ TEST_F(ImportTest, Tensors) {\n   Array& a1 = model->GetArray(\"tensor_one\");\n   EXPECT_EQ(ArrayDataType::kFloat, a1.data_type);\n   EXPECT_THAT(a1.GetBuffer<ArrayDataType::kFloat>().data,\n-              ElementsAre(1.0f, 2.0f));\n+              ElementsAre(1.0f, 2.0f, 3.0f, 4.0f));\n   ASSERT_TRUE(a1.has_shape());\n-  EXPECT_THAT(a1.shape().dims(), ElementsAre(1, 2, 3, 4));\n+  EXPECT_THAT(a1.shape().dims(), ElementsAre(1, 2, 2));\n \n   const auto& mm = a1.minmax;\n   ASSERT_TRUE(mm.get());\n@@ -169,6 +182,63 @@ TEST_F(ImportTest, Tensors) {\n   EXPECT_EQ(100, q->zero_point);\n }\n \n+TEST_F(ImportTest, NoBuffers) {\n+  auto buffers = 0;\n+  auto tensors = BuildTensors();\n+  auto opcodes = BuildOpCodes();\n+  auto operators = BuildOperators();\n+  auto subgraphs = BuildSubGraphs(tensors, operators);\n+  auto comment = builder_.CreateString(\"\");\n+  ::tflite::FinishModelBuffer(\n+      builder_, ::tflite::CreateModel(builder_, TFLITE_SCHEMA_VERSION, opcodes,\n+                                      subgraphs, comment, buffers));\n+  EXPECT_DEATH(Import(ModelFlags(), InputModelAsString()),\n+               \"Missing 'buffers' section.\");\n+}\n+\n+TEST_F(ImportTest, NoInputs) {\n+  auto buffers = BuildBuffers();\n+  auto tensors = BuildTensors();\n+  auto opcodes = BuildOpCodes();\n+  auto operators = BuildOperators({}, {1});\n+  auto subgraphs = BuildSubGraphs(tensors, operators);\n+  auto comment = builder_.CreateString(\"\");\n+  ::tflite::FinishModelBuffer(\n+      builder_, ::tflite::CreateModel(builder_, TFLITE_SCHEMA_VERSION, opcodes,\n+                                      subgraphs, comment, buffers));\n+  EXPECT_DEATH(Import(ModelFlags(), InputModelAsString()),\n+               \"Missing 'inputs' for operator.\");\n+}\n+\n+TEST_F(ImportTest, NoOutputs) {\n+  auto buffers = BuildBuffers();\n+  auto tensors = BuildTensors();\n+  auto opcodes = BuildOpCodes();\n+  auto operators = BuildOperators({0}, {});\n+  auto subgraphs = BuildSubGraphs(tensors, operators);\n+  auto comment = builder_.CreateString(\"\");\n+  ::tflite::FinishModelBuffer(\n+      builder_, ::tflite::CreateModel(builder_, TFLITE_SCHEMA_VERSION, opcodes,\n+                                      subgraphs, comment, buffers));\n+  EXPECT_DEATH(Import(ModelFlags(), InputModelAsString()),\n+               \"Missing 'outputs' for operator.\");\n+}\n+\n+TEST_F(ImportTest, InvalidOpCode) {\n+  auto buffers = BuildBuffers();\n+  auto tensors = BuildTensors();\n+  auto opcodes = BuildOpCodes({static_cast<::tflite::BuiltinOperator>(-1),\n+                               ::tflite::BuiltinOperator_CONV_2D});\n+  auto operators = BuildOperators();\n+  auto subgraphs = BuildSubGraphs(tensors, operators);\n+  auto comment = builder_.CreateString(\"\");\n+  ::tflite::FinishModelBuffer(\n+      builder_, ::tflite::CreateModel(builder_, TFLITE_SCHEMA_VERSION, opcodes,\n+                                      subgraphs, comment, buffers));\n+  EXPECT_DEATH(Import(ModelFlags(), InputModelAsString()),\n+               \"Operator id '-1' is out of range.\");\n+}\n+\n TEST_F(ImportTest, MultipleSubGraphs) {\n   auto buffers = BuildBuffers();\n   auto tensors = BuildTensors();"