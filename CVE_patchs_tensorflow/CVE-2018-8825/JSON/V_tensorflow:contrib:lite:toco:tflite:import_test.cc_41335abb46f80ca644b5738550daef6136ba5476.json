"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/contrib/lite/toco/tflite/import.h\"\n\n#include \"flatbuffers/flexbuffers.h\"\n#include <gmock/gmock.h>\n#include <gtest/gtest.h>\n#include \"tensorflow/contrib/lite/schema/schema_generated.h\"\n#include \"tensorflow/contrib/lite/version.h\"\n\nnamespace toco {\n\nnamespace tflite {\nnamespace {\n\nusing ::testing::ElementsAre;\n\nusing flatbuffers::Offset;\nusing flatbuffers::Vector;\nclass ImportTest : public ::testing::Test {\n protected:\n  template <typename T>\n  Offset<Vector<unsigned char>> CreateDataVector(const std::vector<T>& data) {\n    return builder_.CreateVector(reinterpret_cast<const uint8_t*>(data.data()),\n                                 sizeof(T) * data.size());\n  }\n  Offset<Vector<Offset<::tflite::Buffer>>> BuildBuffers() {\n    auto buf0 = ::tflite::CreateBuffer(builder_, CreateDataVector<float>({}));\n    auto buf1 =\n        ::tflite::CreateBuffer(builder_, CreateDataVector<float>({1.0f, 2.0f}));\n    auto buf2 =\n        ::tflite::CreateBuffer(builder_, CreateDataVector<float>({3.0f}));\n    return builder_.CreateVector(\n        std::vector<Offset<::tflite::Buffer>>({buf0, buf1, buf2}));\n  }\n\n  Offset<Vector<Offset<::tflite::Tensor>>> BuildTensors() {\n    auto q = ::tflite::CreateQuantizationParameters(\n        builder_,\n        /*min=*/builder_.CreateVector<float>({0.1f}),\n        /*max=*/builder_.CreateVector<float>({0.2f}),\n        /*scale=*/builder_.CreateVector<float>({0.3f}),\n        /*zero_point=*/builder_.CreateVector<int64_t>({100ll}));\n    auto t1 = ::tflite::CreateTensor(builder_,\n                                     builder_.CreateVector<int>({1, 2, 3, 4}),\n                                     ::tflite::TensorType_FLOAT32, 1,\n                                     builder_.CreateString(\"tensor_one\"), q);\n    auto t2 =\n        ::tflite::CreateTensor(builder_, builder_.CreateVector<int>({2, 1}),\n                               ::tflite::TensorType_FLOAT32, 2,\n                               builder_.CreateString(\"tensor_two\"), q);\n    return builder_.CreateVector(\n        std::vector<Offset<::tflite::Tensor>>({t1, t2}));\n  }\n\n  Offset<Vector<Offset<::tflite::OperatorCode>>> BuildOpCodes() {\n    auto c1 = ::tflite::CreateOperatorCode(\n        builder_, ::tflite::BuiltinOperator_MAX_POOL_2D, 0);\n    auto c2 = ::tflite::CreateOperatorCode(\n        builder_, ::tflite::BuiltinOperator_CONV_2D, 0);\n    return builder_.CreateVector(\n        std::vector<Offset<::tflite::OperatorCode>>({c1, c2}));\n  }\n\n  Offset<Vector<Offset<::tflite::Operator>>> BuildOperators() {\n    auto is = builder_.CreateVector<int>({0});\n    auto os = builder_.CreateVector<int>({1});\n    auto op = ::tflite::CreateOperator(\n        builder_, 0, is, os, ::tflite::BuiltinOptions_Conv2DOptions,\n        ::tflite::CreateConv2DOptions(builder_, ::tflite::Padding_VALID, 1, 1,\n                                      ::tflite::ActivationFunctionType_NONE)\n            .Union(),\n        /*custom_options=*/0, ::tflite::CustomOptionsFormat_FLEXBUFFERS);\n\n    return builder_.CreateVector(std::vector<Offset<::tflite::Operator>>({op}));\n  }\n\n  Offset<Vector<Offset<::tflite::SubGraph>>> BuildSubGraphs(\n      Offset<Vector<Offset<::tflite::Tensor>>> tensors,\n      Offset<Vector<Offset<::tflite::Operator>>> operators,\n      int num_sub_graphs = 1) {\n    std::vector<int32_t> inputs = {0};\n    std::vector<int32_t> outputs = {1};\n    std::vector<Offset<::tflite::SubGraph>> v;\n    for (int i = 0; i < num_sub_graphs; ++i) {\n      v.push_back(::tflite::CreateSubGraph(\n          builder_, tensors, builder_.CreateVector(inputs),\n          builder_.CreateVector(outputs), operators,\n          builder_.CreateString(\"subgraph\")));\n    }\n    return builder_.CreateVector(v);\n  }\n\n  // This is a very simplistic model. We are not interested in testing all the\n  // details here, since tf.mini's testing framework will be exercising all the\n  // conversions multiple times, and the conversion of operators is tested by\n  // separate unittests.\n  void BuildTestModel() {\n    auto buffers = BuildBuffers();\n    auto tensors = BuildTensors();\n    auto opcodes = BuildOpCodes();\n    auto operators = BuildOperators();\n    auto subgraphs = BuildSubGraphs(tensors, operators);\n    auto s = builder_.CreateString(\"\");\n\n    ::tflite::FinishModelBuffer(\n        builder_, ::tflite::CreateModel(builder_, TFLITE_SCHEMA_VERSION,\n                                        opcodes, subgraphs, s, buffers));\n\n    input_model_ = ::tflite::GetModel(builder_.GetBufferPointer());\n  }\n  string InputModelAsString() {\n    return string(reinterpret_cast<char*>(builder_.GetBufferPointer()),\n                  builder_.GetSize());\n  }\n  flatbuffers::FlatBufferBuilder builder_;\n  const ::tflite::Model* input_model_ = nullptr;\n};\n\nTEST_F(ImportTest, LoadTensorsTable) {\n  BuildTestModel();\n\n  details::TensorsTable tensors;\n  details::LoadTensorsTable(*input_model_, &tensors);\n  EXPECT_THAT(tensors, ElementsAre(\"tensor_one\", \"tensor_two\"));\n}\n\nTEST_F(ImportTest, LoadOperatorsTable) {\n  BuildTestModel();\n\n  details::OperatorsTable operators;\n  details::LoadOperatorsTable(*input_model_, &operators);\n  EXPECT_THAT(operators, ElementsAre(\"MAX_POOL_2D\", \"CONV_2D\"));\n}\n\nTEST_F(ImportTest, Tensors) {\n  BuildTestModel();\n\n  auto model = Import(ModelFlags(), InputModelAsString());\n\n  ASSERT_GT(model->HasArray(\"tensor_one\"), 0);\n  Array& a1 = model->GetArray(\"tensor_one\");\n  EXPECT_EQ(ArrayDataType::kFloat, a1.data_type);\n  EXPECT_THAT(a1.GetBuffer<ArrayDataType::kFloat>().data,\n              ElementsAre(1.0f, 2.0f));\n  ASSERT_TRUE(a1.has_shape());\n  EXPECT_THAT(a1.shape().dims(), ElementsAre(1, 2, 3, 4));\n\n  const auto& mm = a1.minmax;\n  ASSERT_TRUE(mm.get());\n  EXPECT_FLOAT_EQ(0.1, mm->min);\n  EXPECT_FLOAT_EQ(0.2, mm->max);\n\n  const auto& q = a1.quantization_params;\n  ASSERT_TRUE(q.get());\n  EXPECT_FLOAT_EQ(0.3, q->scale);\n  EXPECT_EQ(100, q->zero_point);\n}\n\nTEST_F(ImportTest, MultipleSubGraphs) {\n  auto buffers = BuildBuffers();\n  auto tensors = BuildTensors();\n  auto opcodes = BuildOpCodes();\n  auto operators = BuildOperators();\n  auto subgraphs = BuildSubGraphs(tensors, operators, 2);\n  auto comment = builder_.CreateString(\"\");\n  ::tflite::FinishModelBuffer(\n      builder_, ::tflite::CreateModel(builder_, TFLITE_SCHEMA_VERSION, opcodes,\n                                      subgraphs, comment, buffers));\n\n  input_model_ = ::tflite::GetModel(builder_.GetBufferPointer());\n\n  EXPECT_DEATH(Import(ModelFlags(), InputModelAsString()),\n               \"Number of subgraphs in tflite should be exactly 1.\");\n}\n\n// TODO(ahentz): still need tests for Operators and IOTensors.\n\n}  // namespace\n}  // namespace tflite\n\n}  // namespace toco"