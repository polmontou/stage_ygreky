"# Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for DLPack functions.\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom absl.testing import parameterized\nimport numpy as np\n\nfrom tensorflow.python.dlpack import dlpack\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.platform import test\nfrom tensorflow.python.ops import array_ops\n\nint_dtypes = [\n    np.int8, np.int16, np.int32, np.int64, np.uint8, np.uint16, np.uint32,\n    np.uint64\n]\nfloat_dtypes = [np.float16, np.float32, np.float64]\ncomplex_dtypes = [np.complex64, np.complex128]\ndlpack_dtypes = int_dtypes + float_dtypes + [dtypes.bfloat16]\n\ntestcase_shapes = [(), (1,), (2, 3), (2, 0), (0, 7), (4, 1, 2)]\n\n\ndef FormatShapeAndDtype(shape, dtype):\n  return \"_{}[{}]\".format(str(dtype), \",\".join(map(str, shape)))\n\n\ndef GetNamedTestParameters():\n  result = []\n  for dtype in dlpack_dtypes:\n    for shape in testcase_shapes:\n      result.append({\n          \"testcase_name\": FormatShapeAndDtype(shape, dtype),\n          \"dtype\": dtype,\n          \"shape\": shape\n      })\n  return result\n\n\nclass DLPackTest(parameterized.TestCase, test.TestCase):\n\n  @parameterized.named_parameters(GetNamedTestParameters())\n  def testRoundTrip(self, dtype, shape):\n    np.random.seed(42)\n    np_array = np.random.randint(0, 10, shape)\n    # copy to gpu if available\n    tf_tensor = array_ops.identity(constant_op.constant(np_array, dtype=dtype))\n    tf_tensor_device = tf_tensor.device\n    tf_tensor_dtype = tf_tensor.dtype\n    dlcapsule = dlpack.to_dlpack(tf_tensor)\n    del tf_tensor  # should still work\n    tf_tensor2 = dlpack.from_dlpack(dlcapsule)\n    self.assertAllClose(np_array, tf_tensor2)\n    if tf_tensor_dtype == dtypes.int32:\n      # int32 tensor is always on cpu for now\n      self.assertEqual(tf_tensor2.device,\n                       \"/job:localhost/replica:0/task:0/device:CPU:0\")\n    else:\n      self.assertEqual(tf_tensor_device, tf_tensor2.device)\n\n  def testTensorsCanBeConsumedOnceOnly(self):\n    np.random.seed(42)\n    np_array = np.random.randint(0, 10, (2, 3, 4))\n    tf_tensor = constant_op.constant(np_array, dtype=np.float32)\n    dlcapsule = dlpack.to_dlpack(tf_tensor)\n    del tf_tensor  # should still work\n    _ = dlpack.from_dlpack(dlcapsule)\n\n    def ConsumeDLPackTensor():\n      dlpack.from_dlpack(dlcapsule)  # Should can be consumed only once\n\n    self.assertRaisesRegex(Exception,\n                           \".*a DLPack tensor may be consumed at most once.*\",\n                           ConsumeDLPackTensor)\n\n  def testUnsupportedTypeToDLPack(self):\n\n    def UnsupportedQint16():\n      tf_tensor = constant_op.constant([[1, 4], [5, 2]], dtype=dtypes.qint16)\n      _ = dlpack.to_dlpack(tf_tensor)\n\n    def UnsupportedComplex64():\n      tf_tensor = constant_op.constant([[1, 4], [5, 2]], dtype=dtypes.complex64)\n      _ = dlpack.to_dlpack(tf_tensor)\n\n    self.assertRaisesRegex(Exception, \".* is not supported by dlpack\",\n                           UnsupportedQint16)\n    self.assertRaisesRegex(Exception, \".* is not supported by dlpack\",\n                           UnsupportedComplex64)\n\n\nif __name__ == \"__main__\":\n  ops.enable_eager_execution()\n  test.main()"