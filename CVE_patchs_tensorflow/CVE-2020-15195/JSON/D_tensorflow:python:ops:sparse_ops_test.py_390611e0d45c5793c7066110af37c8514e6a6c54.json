"diff --git a/tensorflow/python/ops/sparse_ops_test.py b/tensorflow/python/ops/sparse_ops_test.py\nindex 829971b1af1..74e150ad6c7 100644\n--- a/tensorflow/python/ops/sparse_ops_test.py\n+++ b/tensorflow/python/ops/sparse_ops_test.py\n@@ -21,6 +21,7 @@ from __future__ import print_function\n from absl.testing import parameterized\n import numpy as np\n \n+from tensorflow.python.eager import context\n from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n from tensorflow.python.framework import errors\n@@ -30,6 +31,7 @@ from tensorflow.python.framework import test_util\n # Need array_grad to register gradient for Identity.\n from tensorflow.python.ops import array_grad  # pylint: disable=unused-import\n from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import gen_sparse_ops\n from tensorflow.python.ops import gradient_checker_v2 as gradient_checker\n from tensorflow.python.ops import math_ops\n # Need sparse_grad to register gradient for SparseToDense.\n@@ -234,5 +236,57 @@ class SparseOpsTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n     self.assertAllEqual([5], result.dense_shape)\n \n \n+@test_util.run_all_in_graph_and_eager_modes\n+class RawOpsTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n+\n+  def testSparseFillEmptyRowsGrad(self):\n+    reverse_index_map = [2, 1]\n+    grad_values = [0, 1, 2, 3]\n+    d_values, d_default_value = self.evaluate(\n+        gen_sparse_ops.SparseFillEmptyRowsGrad(\n+            reverse_index_map=reverse_index_map, grad_values=grad_values))\n+    self.assertAllEqual([2, 1], d_values)\n+    self.assertEqual(3, d_default_value)\n+\n+  def testSparseFillEmptyRowsGradNegativeIndexMapValue(self):\n+    reverse_index_map = [2, -1]\n+    grad_values = [0, 1, 2, 3]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        r'Elements in reverse index must be in \\[0, 4\\)'):\n+      self.evaluate(\n+          gen_sparse_ops.SparseFillEmptyRowsGrad(\n+              reverse_index_map=reverse_index_map, grad_values=grad_values))\n+\n+  def testSparseFillEmptyRowsGradLargeIndexMapValue(self):\n+    reverse_index_map = [2, 10]\n+    grad_values = [0, 1, 2, 3]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        r'Elements in reverse index must be in \\[0, 4\\)'):\n+      self.evaluate(\n+          gen_sparse_ops.SparseFillEmptyRowsGrad(\n+              reverse_index_map=reverse_index_map, grad_values=grad_values))\n+\n+  def testSparseFillEmptyRowsGradMatrix(self):\n+    reverse_index_map = [0, 1]\n+    grad_values = [[0, 1], [2, 3]]\n+    # Note: Eager mode and graph mode throw different errors here. Graph mode\n+    # will fail with a ValueError from the shape checking logic, while Eager\n+    # will fail with an InvalidArgumentError from the kernel itself.\n+    if context.executing_eagerly():\n+      with self.assertRaisesRegex(errors.InvalidArgumentError,\n+                                  r'grad_values must be a vector'):\n+        self.evaluate(\n+            gen_sparse_ops.SparseFillEmptyRowsGrad(\n+                reverse_index_map=reverse_index_map, grad_values=grad_values))\n+    else:\n+      with self.assertRaisesRegex(ValueError,\n+                                  r'Shape must be rank 1 but is rank 2'):\n+        self.evaluate(\n+            gen_sparse_ops.SparseFillEmptyRowsGrad(\n+                reverse_index_map=reverse_index_map, grad_values=grad_values))\n+\n+\n if __name__ == '__main__':\n   googletest.main()"