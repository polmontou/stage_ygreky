"/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"absl/container/flat_hash_map.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/op_requires.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/platform/errors.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\ntemplate <class T>\nusing BatchedMap = std::vector<absl::flat_hash_map<int64, T>>;\n\nnamespace {\n// TODO(momernick): Extend this function to work with outputs of rank > 2.\ntemplate <class T>\nStatus OutputSparse(const BatchedMap<T>& per_batch_counts, int num_values,\n                    bool is_1d, OpKernelContext* context) {\n  int total_values = 0;\n  int num_batches = per_batch_counts.size();\n  for (const auto& per_batch_count : per_batch_counts) {\n    total_values += per_batch_count.size();\n  }\n\n  Tensor* indices;\n  int inner_dim = is_1d ? 1 : 2;\n  TF_RETURN_IF_ERROR(context->allocate_output(\n      0, TensorShape({total_values, inner_dim}), &indices));\n\n  Tensor* values;\n  TF_RETURN_IF_ERROR(\n      context->allocate_output(1, TensorShape({total_values}), &values));\n\n  auto output_indices = indices->matrix<int64>();\n  auto output_values = values->flat<T>();\n  int64 value_loc = 0;\n  for (int b = 0; b < num_batches; ++b) {\n    const auto& per_batch_count = per_batch_counts[b];\n    std::vector<std::pair<int, T>> pairs(per_batch_count.begin(),\n                                         per_batch_count.end());\n    std::sort(pairs.begin(), pairs.end());\n    for (const auto& x : pairs) {\n      if (is_1d) {\n        output_indices(value_loc, 0) = x.first;\n      } else {\n        output_indices(value_loc, 0) = b;\n        output_indices(value_loc, 1) = x.first;\n      }\n      output_values(value_loc) = x.second;\n      ++value_loc;\n    }\n  }\n  Tensor* dense_shape;\n  if (is_1d) {\n    TF_RETURN_IF_ERROR(\n        context->allocate_output(2, TensorShape({1}), &dense_shape));\n    dense_shape->flat<int64>().data()[0] = num_values;\n  } else {\n    TF_RETURN_IF_ERROR(\n        context->allocate_output(2, TensorShape({2}), &dense_shape));\n    dense_shape->flat<int64>().data()[0] = num_batches;\n    dense_shape->flat<int64>().data()[1] = num_values;\n  }\n\n  return Status::OK();\n}\n\nint GetOutputSize(int max_seen, int max_length, int min_length) {\n  return max_length > 0 ? max_length : std::max((max_seen + 1), min_length);\n}\n\n}  // namespace\n\ntemplate <class T, class W>\nclass DenseCount : public OpKernel {\n public:\n  explicit DenseCount(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"minlength\", &minlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"maxlength\", &maxlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& data = context->input(0);\n    const Tensor& weights = context->input(1);\n    bool use_weights = weights.NumElements() > 0;\n\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsVector(data.shape()) ||\n                    TensorShapeUtils::IsMatrix(data.shape()),\n                errors::InvalidArgument(\n                    \"Input must be a 1 or 2-dimensional tensor. Got: \",\n                    data.shape().DebugString()));\n\n    if (use_weights) {\n      OP_REQUIRES(\n          context, weights.shape() == data.shape(),\n          errors::InvalidArgument(\n              \"Weights and data must have the same shape. Weight shape: \",\n              weights.shape().DebugString(),\n              \"; data shape: \", data.shape().DebugString()));\n    }\n\n    bool is_1d = TensorShapeUtils::IsVector(data.shape());\n    int negative_valued_axis = -1;\n    int num_batch_dimensions = (data.shape().dims() + negative_valued_axis);\n\n    int num_batch_elements = 1;\n    for (int i = 0; i < num_batch_dimensions; ++i) {\n      num_batch_elements *= data.shape().dim_size(i);\n    }\n    int num_value_elements = data.shape().num_elements() / num_batch_elements;\n    auto per_batch_counts = BatchedMap<W>(num_batch_elements);\n\n    T max_value = 0;\n\n    const auto data_values = data.flat<T>();\n    const auto weight_values = weights.flat<W>();\n    int i = 0;\n    for (int b = 0; b < num_batch_elements; ++b) {\n      for (int v = 0; v < num_value_elements; ++v) {\n        const auto& value = data_values(i);\n        if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {\n          if (binary_output_) {\n            per_batch_counts[b][value] = 1;\n          } else if (use_weights) {\n            per_batch_counts[b][value] += weight_values(i);\n          } else {\n            per_batch_counts[b][value]++;\n          }\n          if (value > max_value) {\n            max_value = value;\n          }\n        }\n        ++i;\n      }\n    }\n\n    int num_output_values = GetOutputSize(max_value, maxlength_, minlength_);\n    OP_REQUIRES_OK(context, OutputSparse<W>(per_batch_counts, num_output_values,\n                                            is_1d, context));\n  }\n\n private:\n  int maxlength_;\n  int minlength_;\n  bool binary_output_;\n};\n\ntemplate <class T, class W>\nclass SparseCount : public OpKernel {\n public:\n  explicit SparseCount(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"minlength\", &minlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"maxlength\", &maxlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& indices = context->input(0);\n    const Tensor& values = context->input(1);\n    const Tensor& shape = context->input(2);\n    const Tensor& weights = context->input(3);\n    bool use_weights = weights.NumElements() > 0;\n\n    bool is_1d = shape.NumElements() == 1;\n    int num_batches = is_1d ? 1 : shape.flat<int64>()(0);\n    int num_values = values.NumElements();\n\n    const auto indices_values = indices.matrix<int64>();\n    const auto values_values = values.flat<T>();\n    const auto weight_values = weights.flat<W>();\n\n    auto per_batch_counts = BatchedMap<W>(num_batches);\n\n    T max_value = 0;\n\n    for (int idx = 0; idx < num_values; ++idx) {\n      int batch = is_1d ? 0 : indices_values(idx, 0);\n      const auto& value = values_values(idx);\n      if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {\n        if (binary_output_) {\n          per_batch_counts[batch][value] = 1;\n        } else if (use_weights) {\n          per_batch_counts[batch][value] += weight_values(idx);\n        } else {\n          per_batch_counts[batch][value]++;\n        }\n        if (value > max_value) {\n          max_value = value;\n        }\n      }\n    }\n\n    int num_output_values = GetOutputSize(max_value, maxlength_, minlength_);\n    OP_REQUIRES_OK(context, OutputSparse<W>(per_batch_counts, num_output_values,\n                                            is_1d, context));\n  }\n\n private:\n  int maxlength_;\n  int minlength_;\n  bool binary_output_;\n  bool validate_;\n};\n\ntemplate <class T, class W>\nclass RaggedCount : public OpKernel {\n public:\n  explicit RaggedCount(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"minlength\", &minlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"maxlength\", &maxlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& splits = context->input(0);\n    const Tensor& values = context->input(1);\n    const Tensor& weights = context->input(2);\n    bool use_weights = weights.NumElements() > 0;\n    bool is_1d = false;\n\n    const auto splits_values = splits.flat<int64>();\n    const auto values_values = values.flat<T>();\n    const auto weight_values = weights.flat<W>();\n    int num_batches = splits.NumElements() - 1;\n    int num_values = values.NumElements();\n\n    auto per_batch_counts = BatchedMap<W>(num_batches);\n    T max_value = 0;\n    int batch_idx = 0;\n\n    for (int idx = 0; idx < num_values; ++idx) {\n      while (idx >= splits_values(batch_idx)) {\n        batch_idx++;\n      }\n      const auto& value = values_values(idx);\n      if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {\n        if (binary_output_) {\n          per_batch_counts[batch_idx - 1][value] = 1;\n        } else if (use_weights) {\n          per_batch_counts[batch_idx - 1][value] += weight_values(idx);\n        } else {\n          per_batch_counts[batch_idx - 1][value]++;\n        }\n        if (value > max_value) {\n          max_value = value;\n        }\n      }\n    }\n\n    int num_output_values = GetOutputSize(max_value, maxlength_, minlength_);\n    OP_REQUIRES_OK(context, OutputSparse<W>(per_batch_counts, num_output_values,\n                                            is_1d, context));\n  }\n\n private:\n  int maxlength_;\n  int minlength_;\n  bool binary_output_;\n  bool validate_;\n};\n\n#define REGISTER_W(W_TYPE) \\\n  REGISTER(int32, W_TYPE)  \\\n  REGISTER(int64, W_TYPE)\n\n#define REGISTER(I_TYPE, W_TYPE)                                     \\\n                                                                     \\\n  REGISTER_KERNEL_BUILDER(Name(\"DenseCountSparseOutput\")             \\\n                              .TypeConstraint<I_TYPE>(\"T\")           \\\n                              .TypeConstraint<W_TYPE>(\"output_type\") \\\n                              .Device(DEVICE_CPU),                   \\\n                          DenseCount<I_TYPE, W_TYPE>)                \\\n                                                                     \\\n  REGISTER_KERNEL_BUILDER(Name(\"SparseCountSparseOutput\")            \\\n                              .TypeConstraint<I_TYPE>(\"T\")           \\\n                              .TypeConstraint<W_TYPE>(\"output_type\") \\\n                              .Device(DEVICE_CPU),                   \\\n                          SparseCount<I_TYPE, W_TYPE>)               \\\n                                                                     \\\n  REGISTER_KERNEL_BUILDER(Name(\"RaggedCountSparseOutput\")            \\\n                              .TypeConstraint<I_TYPE>(\"T\")           \\\n                              .TypeConstraint<W_TYPE>(\"output_type\") \\\n                              .Device(DEVICE_CPU),                   \\\n                          RaggedCount<I_TYPE, W_TYPE>)\n\nTF_CALL_INTEGRAL_TYPES(REGISTER_W);\nTF_CALL_float(REGISTER_W);\nTF_CALL_double(REGISTER_W);\n\n#undef REGISTER_W\n#undef REGISTER\n\n}  // namespace tensorflow"