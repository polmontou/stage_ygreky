"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/nn_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/kernels/topk_op.h\"\n\n#include <algorithm>\n#include <numeric>\n#include <vector>\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/lib/gtl/top_n.h\"\n#include \"tensorflow/core/util/work_sharder.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\ntemplate <typename Device, typename T>\nclass TopK : public OpKernel {\n public:\n  explicit TopK(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"sorted\", &sorted_));\n    if (num_inputs() < 2) {  // k is an attr (TopK).\n      OP_REQUIRES_OK(context, context->GetAttr(\"k\", &k_));\n    } else {  // k is an input (TopKV2), so we won't know it until Compute.\n      k_ = -1;\n    }\n  }\n\n  void Compute(OpKernelContext* context) override {\n    int k = k_;\n    if (num_inputs() >= 2) {\n      const auto& k_in = context->input(1);\n      OP_REQUIRES(context, TensorShapeUtils::IsScalar(k_in.shape()),\n                  errors::InvalidArgument(\"k must be scalar, got shape \",\n                                          k_in.shape().DebugString()));\n      k = k_in.scalar<int32>()();\n    }\n    OP_REQUIRES(context, k >= 0,\n                errors::InvalidArgument(\"Need k >= 0, got \", k));\n    const auto& input_in = context->input(0);\n    OP_REQUIRES(context, input_in.dims() >= 1,\n                errors::InvalidArgument(\"input must be >= 1-D, got shape \",\n                                        input_in.shape().DebugString()));\n    OP_REQUIRES(context, input_in.dim_size(input_in.dims() - 1) >= k,\n                errors::InvalidArgument(\n                    \"input must have at least k columns. Had \",\n                    input_in.dim_size(input_in.dims() - 1), \", needed \", k));\n\n    const auto& input = input_in.flat_inner_dims<T>();\n\n    const int64 num_rows = input.dimension(0);  // generally batch_size\n    const int64 num_cols = input.dimension(1);\n\n    TensorShape output_shape = input_in.shape();\n    output_shape.set_dim(input_in.dims() - 1, k);\n    Tensor* values_out = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, output_shape, &values_out));\n    Tensor* indices_out = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(1, output_shape, &indices_out));\n\n    // Nothing to do for top-nothing or over nothing.\n    if (k == 0 || num_rows == 0) return;\n\n    auto values = values_out->flat_inner_dims<T>();\n    auto indices = indices_out->flat_inner_dims<int32>();\n    Status s = functor::TopKFunctor<Device, T>::Compute(\n        context, sorted_, k, input, num_rows, num_cols, values, indices);\n    OP_REQUIRES_OK(context, s);\n  }\n\n private:\n  int k_;\n  bool sorted_;\n};\n\nnamespace functor {\n\ntemplate <typename T>\nstruct TopKFunctor<CPUDevice, T> {\n  static EIGEN_ALWAYS_INLINE Status\n  Compute(OpKernelContext* context, bool sorted, int k,\n          const typename TTypes<T, 2>::ConstTensor& input, const int64 num_rows,\n          const int64 num_cols, typename TTypes<T, 2>::Tensor values,\n          typename TTypes<int, 2>::Tensor indices) {\n    const CPUDevice& d = context->eigen_device<CPUDevice>();\n\n    // Special case for k == 1.\n    if (k == 1) {\n#ifdef EIGEN_HAS_INDEX_LIST\n      typename Eigen::IndexList<Eigen::type2index<1>> reduce_on_cols;\n      typename Eigen::IndexList<int, Eigen::type2index<1>> rows_by_one;\n      rows_by_one.set(0, num_rows);\n#else\n      Eigen::array<int, 1> reduce_on_cols = {1};\n      Eigen::array<int, 2> rows_by_one = {static_cast<int>(num_rows), 1};\n#endif\n\n      values.device(d) =\n          input.maximum(/*dims=*/reduce_on_cols).eval().reshape(rows_by_one);\n      // Get the indices of the maximum values.\n      for (int r = 0; r < num_rows; ++r) {\n        indices(r, 0) = 0;\n        for (int c = 0; c < num_cols; ++c) {\n          if (values(r, 0) == input(r, c)) {\n            indices(r, 0) = c;\n            break;\n          }\n        }\n        values(r, 0) = input(r, indices(r, 0));\n      }\n\n      return Status::OK();\n    }\n\n    auto SortIndices = [&](int64 start_batch, int64 limit_batch) {\n      for (int32 b = start_batch; b < limit_batch; ++b) {\n        const T* input_data = &input(b, 0);\n        const auto stable_comp = [input_data](const int32 a, const int32 b) {\n          if (input_data[b] < input_data[a]) {\n            return true;\n          } else if (input_data[b] > input_data[a]) {\n            return false;\n          } else {\n            return a < b;\n          }\n        };\n        const auto comp = [input_data](const int32 a, const int32 b) {\n          return input_data[b] < input_data[a];\n        };\n        // TODO(ebrevdo): For large k < num_cols, instead of using\n        // TopN, it may be faster to create a temporary vector of\n        // values 0..num_cols - 1 and then use std::partial_sort_copy\n        // of this into indices. Choosing the appropriate minimum k or\n        // ratio of k/num_cols will require some experimentation.\n        if (k == num_cols) {\n          auto* begin = &indices(b, 0);\n          auto* end = &indices(b, k);\n          // Set the initial array of indices 0 ... k - 1.\n          std::iota(begin, end, 0);\n          // We want an in-place sort, but we can cheat because we're sorting\n          // indices that started out sorted.  First, do a std::sort, which\n          // is notably faster than std::stable_sort.\n          std::sort(begin, end, comp);\n          // Then, for runs of adjacent elements that were equal, sort the\n          // indices in those runs in increasing order.\n          for (auto* run_begin = begin; run_begin != end;) {\n            auto* run_end = run_begin + 1;\n            if (run_end == end) break;\n            if (input_data[*run_begin] == input_data[*run_end]) {\n              while (++run_end != end) {\n                if (input_data[*run_begin] != input_data[*run_end]) break;\n              }\n              std::sort(run_begin, run_end);\n            }\n            run_begin = run_end;\n          }\n        } else {\n          // Use the TopN heap object to sort.\n          gtl::TopN<int32, decltype(stable_comp)> filter(k, stable_comp);\n          filter.reserve(num_cols);\n          for (int32 c = 0; c < num_cols; ++c) {\n            filter.push(c);\n          }\n\n          int32 i = 0;\n          if (sorted) {\n            std::unique_ptr<std::vector<int32>> top_k(filter.Extract());\n            for (auto top_k_it = top_k->begin(); top_k_it != top_k->end();\n                 ++top_k_it, ++i) {\n              indices(b, i) = *top_k_it;\n            }\n          } else {\n            for (auto top_k_it = filter.unsorted_begin();\n                 top_k_it != filter.unsorted_end(); ++top_k_it, ++i) {\n              indices(b, i) = *top_k_it;\n            }\n          }\n        }\n        // Now that the indices are sorted, copy the values over in\n        // sorted order.\n        std::transform(&indices(b, 0), &indices(b, k), &values(b, 0),\n                       [b, &input](const int32 loc) { return input(b, loc); });\n      }  // for (int32 b = ...\n    };\n\n    // Guesstimate of cost; 4*N*log(K) where N == num_cols.\n    // If K == N, assume the cost is N*log(K + 1).\n    const double cmp_cost = 3 * Eigen::TensorOpCost::AddCost<int32>() +\n                            Eigen::TensorOpCost::AddCost<T>();\n    const double base_cost =\n        cmp_cost *\n        static_cast<double>(num_cols *\n                            Eigen::numext::log2(static_cast<float>(k + 1)));\n    const double sort_cost = (k == num_cols) ? base_cost : 4 * base_cost;\n    const double copy_cost = 2 * k * Eigen::TensorOpCost::AddCost<T>();\n    const double total_cost = sort_cost + copy_cost;\n    const int64 final_cost = (total_cost >= static_cast<double>(kint64max))\n                                 ? kint64max\n                                 : static_cast<int64>(total_cost);\n    auto worker_threads = *(context->device()->tensorflow_cpu_worker_threads());\n    Shard(worker_threads.num_threads, worker_threads.workers, num_rows,\n          final_cost, SortIndices);\n\n    return Status::OK();\n  }\n};\n\n}  // namespace functor\n\n#define REGISTER_KERNELS_NAME(name, type)                       \\\n  REGISTER_KERNEL_BUILDER(                                      \\\n      Name(#name).Device(DEVICE_CPU).TypeConstraint<type>(\"T\"), \\\n      TopK<CPUDevice, type>)\n\n#define REGISTER_KERNELS(type)       \\\n  REGISTER_KERNELS_NAME(TopK, type); \\\n  REGISTER_KERNELS_NAME(TopKV2, type)\n\nTF_CALL_REAL_NUMBER_TYPES(REGISTER_KERNELS);\n#undef REGISTER_KERNELS_NAME\n#undef REGISTER_KERNELS\n\n#ifdef GOOGLE_CUDA\n\nnamespace functor {\n#define DECLARE_GPU_SPEC(T)                                                  \\\n  template <>                                                                \\\n  Status TopKFunctor<GPUDevice, T>::Compute(                                 \\\n      OpKernelContext* context, bool sorted, int k,                          \\\n      const typename TTypes<T, 2>::ConstTensor& input, const int64 num_rows, \\\n      const int64 num_cols, typename TTypes<T, 2>::Tensor values,            \\\n      typename TTypes<int, 2>::Tensor indices);                              \\\n  extern template struct functor::TopKFunctor<GPUDevice, T>;\n\nTF_CALL_GPU_NUMBER_TYPES(DECLARE_GPU_SPEC);\nTF_CALL_INTEGRAL_TYPES(DECLARE_GPU_SPEC);\n\n#undef DECLARE_GPU_SPEC\n\n}  // namespace functor\n\n#define REGISTER_KERNELS(type)                                   \\\n  REGISTER_KERNEL_BUILDER(                                       \\\n      Name(\"TopK\").Device(DEVICE_GPU).TypeConstraint<type>(\"T\"), \\\n      TopK<GPUDevice, type>)                                     \\\n  REGISTER_KERNEL_BUILDER(Name(\"TopKV2\")                         \\\n                              .Device(DEVICE_GPU)                \\\n                              .TypeConstraint<type>(\"T\")         \\\n                              .HostMemory(\"k\"),                  \\\n                          TopK<GPUDevice, type>)\n\nTF_CALL_GPU_NUMBER_TYPES(REGISTER_KERNELS);\nTF_CALL_INTEGRAL_TYPES(REGISTER_KERNELS);\n#undef REGISTER_KERNELS\n\n#endif  // end GOOGLE_CUDA\n\n}  // end namespace tensorflow"