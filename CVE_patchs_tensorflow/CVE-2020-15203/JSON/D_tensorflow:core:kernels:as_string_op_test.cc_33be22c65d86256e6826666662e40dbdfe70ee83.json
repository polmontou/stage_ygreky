"diff --git a/tensorflow/core/kernels/as_string_op_test.cc b/tensorflow/core/kernels/as_string_op_test.cc\nnew file mode 100644\nindex 00000000000..dff78e25e72\n--- /dev/null\n+++ b/tensorflow/core/kernels/as_string_op_test.cc\n@@ -0,0 +1,245 @@\n+/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/core/framework/fake_input.h\"\n+#include \"tensorflow/core/framework/node_def_builder.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_testutil.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/kernels/ops_testutil.h\"\n+#include \"tensorflow/core/kernels/ops_util.h\"\n+#include \"tensorflow/core/lib/core/status_test_util.h\"\n+\n+namespace tensorflow {\n+namespace {\n+\n+class AsStringGraphTest : public OpsTestBase {\n+ protected:\n+  Status Init(DataType input_type, const string& fill = \"\", int width = -1,\n+              int precision = -1, bool scientific = false,\n+              bool shortest = false) {\n+    TF_CHECK_OK(NodeDefBuilder(\"op\", \"AsString\")\n+                    .Input(FakeInput(input_type))\n+                    .Attr(\"fill\", fill)\n+                    .Attr(\"precision\", precision)\n+                    .Attr(\"scientific\", scientific)\n+                    .Attr(\"shortest\", shortest)\n+                    .Attr(\"width\", width)\n+                    .Finalize(node_def()));\n+    return InitOp();\n+  }\n+};\n+\n+TEST_F(AsStringGraphTest, Int8) {\n+  TF_ASSERT_OK(Init(DT_INT8));\n+\n+  AddInputFromArray<int8>(TensorShape({3}), {-42, 0, 42});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({3}));\n+  test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, Int64) {\n+  TF_ASSERT_OK(Init(DT_INT64));\n+\n+  AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({3}));\n+  test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, FloatDefault) {\n+  TF_ASSERT_OK(Init(DT_FLOAT));\n+\n+  AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({4}));\n+  test::FillValues<tstring>(\n+      &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, FloatScientific) {\n+  TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,\n+                    /*scientific=*/true));\n+\n+  AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({4}));\n+  test::FillValues<tstring>(&expected, {\"-4.200000e+01\", \"0.000000e+00\",\n+                                        \"3.141590e+00\", \"4.200000e+01\"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, FloatShortest) {\n+  TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,\n+                    /*scientific=*/false, /*shortest=*/true));\n+\n+  AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({4}));\n+  test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"3.14159\", \"42\"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, FloatPrecisionOnly) {\n+  TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/2));\n+\n+  AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({4}));\n+  test::FillValues<tstring>(&expected, {\"-42.00\", \"0.00\", \"3.14\", \"42.00\"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, FloatWidthOnly) {\n+  TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5));\n+\n+  AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({4}));\n+  test::FillValues<tstring>(\n+      &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, Float_5_2_Format) {\n+  TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5, /*precision=*/2));\n+\n+  AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({4}));\n+  test::FillValues<tstring>(&expected, {\"-42.00\", \" 0.00\", \" 3.14\", \"42.00\"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, Complex) {\n+  TF_ASSERT_OK(Init(DT_COMPLEX64, /*fill=*/\"\", /*width=*/5, /*precision=*/2));\n+\n+  AddInputFromArray<complex64>(TensorShape({3}), {{-4, 2}, {0}, {3.14159, -1}});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({3}));\n+  test::FillValues<tstring>(\n+      &expected, {\"(-4.00, 2.00)\", \"( 0.00, 0.00)\", \"( 3.14,-1.00)\"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, Bool) {\n+  TF_ASSERT_OK(Init(DT_BOOL));\n+\n+  AddInputFromArray<bool>(TensorShape({2}), {true, false});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({2}));\n+  test::FillValues<tstring>(&expected, {\"true\", \"false\"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, String) {\n+  Status s = Init(DT_STRING);\n+  ASSERT_EQ(error::INVALID_ARGUMENT, s.code());\n+  ASSERT_TRUE(absl::StrContains(\n+      s.error_message(),\n+      \"Value for attr 'T' of string is not in the list of allowed values\"));\n+}\n+\n+TEST_F(AsStringGraphTest, OnlyOneOfScientificAndShortest) {\n+  Status s = Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,\n+                  /*scientific=*/true, /*shortest=*/true);\n+  ASSERT_EQ(error::INVALID_ARGUMENT, s.code());\n+  ASSERT_TRUE(\n+      absl::StrContains(s.error_message(),\n+                        \"Cannot select both scientific and shortest notation\"));\n+}\n+\n+TEST_F(AsStringGraphTest, NoShortestForNonFloat) {\n+  Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,\n+                  /*scientific=*/false, /*shortest=*/true);\n+  ASSERT_EQ(error::INVALID_ARGUMENT, s.code());\n+  ASSERT_TRUE(absl::StrContains(\n+      s.error_message(),\n+      \"scientific and shortest format not supported for datatype\"));\n+}\n+\n+TEST_F(AsStringGraphTest, NoScientificForNonFloat) {\n+  Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,\n+                  /*scientific=*/true);\n+  ASSERT_EQ(error::INVALID_ARGUMENT, s.code());\n+  ASSERT_TRUE(absl::StrContains(\n+      s.error_message(),\n+      \"scientific and shortest format not supported for datatype\"));\n+}\n+\n+TEST_F(AsStringGraphTest, NoPrecisionForNonFloat) {\n+  Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/5);\n+  ASSERT_EQ(error::INVALID_ARGUMENT, s.code());\n+  ASSERT_TRUE(absl::StrContains(s.error_message(),\n+                                \"precision not supported for datatype\"));\n+}\n+\n+TEST_F(AsStringGraphTest, LongFill) {\n+  Status s = Init(DT_INT32, /*fill=*/\"asdf\");\n+  ASSERT_EQ(error::INVALID_ARGUMENT, s.code());\n+  ASSERT_TRUE(absl::StrContains(s.error_message(),\n+                                \"Fill string must be one or fewer characters\"));\n+}\n+\n+TEST_F(AsStringGraphTest, FillWithZero) {\n+  TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"0\", /*width=*/4));\n+\n+  AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({3}));\n+  test::FillValues<tstring>(&expected, {\"-042\", \"0000\", \"0042\"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, FillWithSpace) {\n+  TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\" \", /*width=*/4));\n+\n+  AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({3}));\n+  test::FillValues<tstring>(&expected, {\" -42\", \"   0\", \"  42\"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, FillWithChar1) {\n+  TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"-\", /*width=*/4));\n+\n+  AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});\n+  TF_ASSERT_OK(RunOpKernel());\n+  Tensor expected(allocator(), DT_STRING, TensorShape({3}));\n+  test::FillValues<tstring>(&expected, {\"-42 \", \"0   \", \"42  \"});\n+  test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));\n+}\n+\n+TEST_F(AsStringGraphTest, FillWithChar3) {\n+  Status s = Init(DT_INT32, /*fill=*/\"s\");\n+  ASSERT_EQ(error::INVALID_ARGUMENT, s.code());\n+  ASSERT_TRUE(\n+      absl::StrContains(s.error_message(), \"Fill argument not supported\"));\n+}\n+\n+TEST_F(AsStringGraphTest, FillWithChar4) {\n+  Status s = Init(DT_INT32, /*fill=*/\"n\");\n+  ASSERT_EQ(error::INVALID_ARGUMENT, s.code());\n+  ASSERT_TRUE(\n+      absl::StrContains(s.error_message(), \"Fill argument not supported\"));\n+}\n+\n+}  // end namespace\n+}  // end namespace tensorflow"