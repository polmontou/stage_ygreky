"# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Raw ops tests.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom tensorflow.python.eager import context\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import gen_math_ops\nfrom tensorflow.python.platform import test\n\n\n@test_util.run_all_in_graph_and_eager_modes\nclass RawOpsTest(test.TestCase):\n\n  def testSimple(self):\n    x = constant_op.constant(1)\n    self.assertEqual([2], self.evaluate(gen_math_ops.Add(x=x, y=x)))\n\n  def testRequiresKwargs(self):\n    with self.assertRaisesRegex(TypeError, \"only takes keyword args\"):\n      gen_math_ops.Add(1., 1.)\n\n  def testRequiresKwargs_providesSuggestion(self):\n    msg = \"possible keys: \\\\['x', 'y', 'name'\\\\]\"\n    with self.assertRaisesRegex(TypeError, msg):\n      gen_math_ops.Add(1., y=2.)\n\n  def testName(self):\n    x = constant_op.constant(1)\n    op = gen_math_ops.Add(x=x, y=x, name=\"double\")\n    if not context.executing_eagerly():\n      # `Tensor.name` is not available in eager.\n      self.assertEqual(op.name, \"double:0\")\n\n  def testDoc(self):\n    self.assertEqual(gen_math_ops.add.__doc__, gen_math_ops.Add.__doc__)\n\n  def testDefaults(self):\n    x = constant_op.constant([[True]])\n    self.assertAllClose(\n        gen_math_ops.Any(input=x, axis=0),\n        gen_math_ops.Any(input=x, axis=0, keep_dims=False))\n\n\nif __name__ == \"__main__\":\n  ops.enable_eager_execution()\n  test.main()"