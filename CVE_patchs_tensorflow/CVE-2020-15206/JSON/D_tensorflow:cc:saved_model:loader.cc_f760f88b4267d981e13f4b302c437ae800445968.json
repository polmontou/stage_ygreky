"diff --git a/tensorflow/cc/saved_model/loader.cc b/tensorflow/cc/saved_model/loader.cc\nindex 3bb4660e449..d193679ec19 100644\n--- a/tensorflow/cc/saved_model/loader.cc\n+++ b/tensorflow/cc/saved_model/loader.cc\n@@ -19,12 +19,16 @@ limitations under the License.\n \n #include \"tensorflow/cc/saved_model/constants.h\"\n #include \"tensorflow/cc/saved_model/reader.h\"\n+#include \"tensorflow/core/framework/attr_value.pb.h\"\n+#include \"tensorflow/core/framework/node_def.pb.h\"\n+#include \"tensorflow/core/framework/tensor.pb.h\"\n #include \"tensorflow/core/lib/io/path.h\"\n #include \"tensorflow/core/lib/monitoring/counter.h\"\n #include \"tensorflow/core/lib/monitoring/sampler.h\"\n #include \"tensorflow/core/lib/strings/str_util.h\"\n #include \"tensorflow/core/lib/strings/strcat.h\"\n #include \"tensorflow/core/platform/env.h\"\n+#include \"tensorflow/core/platform/errors.h\"\n #include \"tensorflow/core/platform/protobuf_internal.h\"\n #include \"tensorflow/core/protobuf/graph_debug_info.pb.h\"\n #include \"tensorflow/core/protobuf/saver.pb.h\"\n@@ -65,12 +69,34 @@ uint64 GetLatencyMicroseconds(const uint64 start_microseconds) {\n   return end_microseconds - start_microseconds;\n }\n \n+// Ensure that constant tensors loaded from the saved model have valid shape.\n+// TODO(b/154763635): this is temporary and will be replaced with a better audit\n+static Status ValidateSavedTensors(const GraphDef& graph_def) {\n+  for (const auto& node : graph_def.node()) {\n+    const auto node_iterator = node.attr().find(\"value\");\n+    if (node_iterator != node.attr().end()) {\n+      AttrValue node_value = node_iterator->second;\n+      if (node_value.has_tensor()) {\n+        const PartialTensorShape node_shape(node_value.tensor().tensor_shape());\n+        if (node_shape.num_elements() < 0) {\n+          return errors::FailedPrecondition(\n+              \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\",\n+              node.op(), \"\\\") which initializes from a tensor with \",\n+              node_shape.num_elements(), \" elements\");\n+        }\n+      }\n+    }\n+  }\n+  return Status::OK();\n+}\n+\n Status LoadMetaGraphIntoSession(const MetaGraphDef& meta_graph_def,\n                                 const SessionOptions& session_options,\n                                 std::unique_ptr<Session>* session) {\n   Session* session_p = nullptr;\n   TF_RETURN_IF_ERROR(NewSession(session_options, &session_p));\n   session->reset(session_p);\n+  TF_RETURN_IF_ERROR(ValidateSavedTensors(meta_graph_def.graph_def()));\n   return (*session)->Create(meta_graph_def.graph_def());\n }\n "