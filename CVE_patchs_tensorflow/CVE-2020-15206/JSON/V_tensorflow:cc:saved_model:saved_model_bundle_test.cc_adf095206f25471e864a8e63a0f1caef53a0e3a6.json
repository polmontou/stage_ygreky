"/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/cc/saved_model/constants.h\"\n#include \"tensorflow/cc/saved_model/loader.h\"\n#include \"tensorflow/cc/saved_model/reader.h\"\n#include \"tensorflow/cc/saved_model/signature_constants.h\"\n#include \"tensorflow/cc/saved_model/tag_constants.h\"\n#include \"tensorflow/core/example/example.pb.h\"\n#include \"tensorflow/core/example/feature.pb.h\"\n#include \"tensorflow/core/framework/tensor_testutil.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/lib/core/status_test_util.h\"\n#include \"tensorflow/core/lib/io/path.h\"\n#include \"tensorflow/core/lib/strings/str_util.h\"\n#include \"tensorflow/core/platform/test.h\"\n#include \"tensorflow/core/protobuf/meta_graph.pb.h\"\n\nnamespace tensorflow {\nnamespace {\n\nconstexpr char kTestDataPbTxt[] =\n    \"cc/saved_model/testdata/half_plus_two_pbtxt/00000123\";\nconstexpr char kTestDataMainOp[] =\n    \"cc/saved_model/testdata/half_plus_two_main_op/00000123\";\nconstexpr char kTestDataSharded[] =\n    \"cc/saved_model/testdata/half_plus_two/00000123\";\nconstexpr char kTestDataInitOpV2[] =\n    \"cc/saved_model/testdata/half_plus_two_v2/00000123\";\nconstexpr char kTestDataV2DebugInfo[] =\n    \"cc/saved_model/testdata/x_plus_y_v2_debuginfo\";\nconstexpr char kTestFuzzGeneratedNegativeShape[] =\n    \"cc/saved_model/testdata/fuzz_generated/negative_shape\";\nconstexpr char kTestFuzzGeneratedConstWithNoValue[] =\n    \"cc/saved_model/testdata/fuzz_generated/const_with_no_value\";\n\nclass LoaderTest : public ::testing::Test {\n protected:\n  LoaderTest() {}\n\n  string MakeSerializedExample(float x) {\n    tensorflow::Example example;\n    auto* feature_map = example.mutable_features()->mutable_feature();\n    (*feature_map)[\"x\"].mutable_float_list()->add_value(x);\n    return example.SerializeAsString();\n  }\n\n  void ValidateAssets(const string& export_dir,\n                      const SavedModelBundle& bundle) {\n    const string asset_directory =\n        io::JoinPath(export_dir, kSavedModelAssetsDirectory);\n    const string asset_filename = \"foo.txt\";\n    const string asset_filepath = io::JoinPath(asset_directory, asset_filename);\n    TF_EXPECT_OK(Env::Default()->FileExists(asset_filepath));\n\n    std::vector<Tensor> path_outputs;\n    TF_ASSERT_OK(\n        bundle.session->Run({}, {\"filename_tensor:0\"}, {}, &path_outputs));\n    ASSERT_EQ(1, path_outputs.size());\n\n    test::ExpectTensorEqual<tstring>(\n        test::AsTensor<tstring>({\"foo.txt\"}, TensorShape({})), path_outputs[0]);\n  }\n\n  void CheckSavedModelBundle(const string& export_dir,\n                             const SavedModelBundle& bundle) {\n    ValidateAssets(export_dir, bundle);\n    // Retrieve the regression signature from meta graph def.\n    const auto& signature_def = bundle.GetSignatures().at(\"regress_x_to_y\");\n\n    const string input_name = signature_def.inputs().at(kRegressInputs).name();\n    const string output_name =\n        signature_def.outputs().at(kRegressOutputs).name();\n\n    std::vector<tstring> serialized_examples;\n    for (float x : {0, 1, 2, 3}) {\n      serialized_examples.push_back(MakeSerializedExample(x));\n    }\n\n    // Validate the half plus two behavior.\n    Tensor input =\n        test::AsTensor<tstring>(serialized_examples, TensorShape({4}));\n    std::vector<Tensor> outputs;\n    TF_ASSERT_OK(bundle.session->Run({{input_name, input}}, {output_name}, {},\n                                     &outputs));\n    ASSERT_EQ(outputs.size(), 1);\n    test::ExpectTensorEqual<float>(\n        outputs[0],\n        test::AsTensor<float>({2, 2.5, 3, 3.5}, TensorShape({4, 1})));\n  }\n};\n\n// Test for resource leaks related to TensorFlow session closing requirements\n// when loading and unloading large numbers of SavedModelBundles.\n// TODO(sukritiramesh): Increase run iterations and move outside of the test\n// suite.\nTEST_F(LoaderTest, ResourceLeakTest) {\n  SavedModelBundle bundle;\n  SessionOptions session_options;\n  RunOptions run_options;\n\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), kTestDataSharded);\n  for (int i = 0; i < 100; ++i) {\n    TF_ASSERT_OK(LoadSavedModel(session_options, run_options, export_dir,\n                                {kSavedModelTagServe}, &bundle));\n    CheckSavedModelBundle(export_dir, bundle);\n  }\n}\n\nTEST_F(LoaderTest, TagMatch) {\n  SavedModelBundle bundle;\n  SessionOptions session_options;\n  RunOptions run_options;\n\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), kTestDataSharded);\n  TF_ASSERT_OK(LoadSavedModel(session_options, run_options, export_dir,\n                              {kSavedModelTagServe}, &bundle));\n  CheckSavedModelBundle(export_dir, bundle);\n}\n\nTEST_F(LoaderTest, ReadMetaGraphFromSavedModel) {\n  SavedModelBundle bundle;\n  SessionOptions session_options;\n  RunOptions run_options;\n\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), kTestDataSharded);\n  TF_ASSERT_OK(LoadSavedModel(session_options, run_options, export_dir,\n                              {kSavedModelTagServe}, &bundle));\n  MetaGraphDef actual_metagraph;\n  TF_ASSERT_OK(ReadMetaGraphDefFromSavedModel(export_dir, {kSavedModelTagServe},\n                                              &actual_metagraph));\n  EXPECT_EQ(actual_metagraph.DebugString(),\n            bundle.meta_graph_def.DebugString());\n}\n\nTEST_F(LoaderTest, RestoreSession) {\n  SavedModelBundle bundle;\n  SessionOptions session_options;\n  RunOptions run_options;\n\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), kTestDataSharded);\n  TF_ASSERT_OK(LoadSavedModel(session_options, run_options, export_dir,\n                              {kSavedModelTagServe}, &bundle));\n\n  SavedModelBundle actual_bundle;\n  const std::unordered_set<std::string> tags = {kSavedModelTagServe};\n  TF_ASSERT_OK(ReadMetaGraphDefFromSavedModel(export_dir, tags,\n                                              &actual_bundle.meta_graph_def));\n  TF_ASSERT_OK(LoadMetagraphIntoSession(\n      session_options, actual_bundle.meta_graph_def, &actual_bundle.session));\n  TF_ASSERT_OK(RestoreSession(run_options, actual_bundle.meta_graph_def,\n                              export_dir, &actual_bundle.session));\n  CheckSavedModelBundle(export_dir, actual_bundle);\n}\n\nTEST_F(LoaderTest, NoTagMatch) {\n  SavedModelBundle bundle;\n  RunOptions run_options;\n  SessionOptions session_options;\n\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), kTestDataSharded);\n  Status st = LoadSavedModel(session_options, run_options, export_dir,\n                             {\"missing-tag\"}, &bundle);\n  EXPECT_FALSE(st.ok());\n  EXPECT_TRUE(absl::StrContains(\n      st.error_message(),\n      \"Could not find meta graph def matching supplied tags: { missing-tag }\"))\n      << st.error_message();\n}\n\nTEST_F(LoaderTest, NoTagMatchMultiple) {\n  SavedModelBundle bundle;\n  RunOptions run_options;\n  SessionOptions session_options;\n\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), kTestDataSharded);\n  Status st = LoadSavedModel(session_options, run_options, export_dir,\n                             {kSavedModelTagServe, \"missing-tag\"}, &bundle);\n  EXPECT_FALSE(st.ok());\n  EXPECT_TRUE(absl::StrContains(\n      st.error_message(),\n      \"Could not find meta graph def matching supplied tags: \"))\n      << st.error_message();\n}\n\nTEST_F(LoaderTest, SessionCreationFailure) {\n  SavedModelBundle bundle;\n  // Use invalid SessionOptions to cause session creation to fail.  Default\n  // options work, so provide an invalid value for the target field.\n  SessionOptions session_options;\n  constexpr char kInvalidTarget[] = \"invalid target\";\n  session_options.target = kInvalidTarget;\n  RunOptions run_options;\n\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), kTestDataSharded);\n  Status st = LoadSavedModel(session_options, run_options, export_dir,\n                             {kSavedModelTagServe}, &bundle);\n  EXPECT_FALSE(st.ok());\n  EXPECT_TRUE(absl::StrContains(st.error_message(), kInvalidTarget))\n      << st.error_message();\n}\n\nTEST_F(LoaderTest, PbtxtFormat) {\n  SavedModelBundle bundle;\n  SessionOptions session_options;\n  RunOptions run_options;\n\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), kTestDataPbTxt);\n  TF_ASSERT_OK(LoadSavedModel(session_options, run_options, export_dir,\n                              {kSavedModelTagServe}, &bundle));\n  CheckSavedModelBundle(export_dir, bundle);\n}\n\nTEST_F(LoaderTest, MainOpFormat) {\n  SavedModelBundle bundle;\n  SessionOptions session_options;\n  RunOptions run_options;\n\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), kTestDataMainOp);\n  TF_ASSERT_OK(LoadSavedModel(session_options, run_options, export_dir,\n                              {kSavedModelTagServe}, &bundle));\n  CheckSavedModelBundle(export_dir, bundle);\n}\n\nTEST_F(LoaderTest, InvalidExportPath) {\n  SavedModelBundle bundle;\n  RunOptions run_options;\n  SessionOptions session_options;\n\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), \"missing-path\");\n  Status st = LoadSavedModel(session_options, run_options, export_dir,\n                             {kSavedModelTagServe}, &bundle);\n  EXPECT_FALSE(st.ok());\n}\n\nTEST_F(LoaderTest, MaybeSavedModelDirectory) {\n  // Valid SavedModel directory.\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), kTestDataSharded);\n  EXPECT_TRUE(MaybeSavedModelDirectory(export_dir));\n\n  // Directory that does not exist.\n  const string missing_export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), \"missing-path\");\n  EXPECT_FALSE(MaybeSavedModelDirectory(missing_export_dir));\n\n  // Directory that exists but is an invalid SavedModel location.\n  const string invalid_export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), \"cc/saved_model\");\n  EXPECT_FALSE(MaybeSavedModelDirectory(invalid_export_dir));\n}\n\nTEST_F(LoaderTest, SavedModelInitOpV2Format) {\n  SavedModelBundle bundle;\n  SessionOptions session_options;\n  RunOptions run_options;\n\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), kTestDataInitOpV2);\n  TF_ASSERT_OK(LoadSavedModel(session_options, run_options, export_dir,\n                              {kSavedModelTagServe}, &bundle));\n  CheckSavedModelBundle(export_dir, bundle);\n}\n\nTEST_F(LoaderTest, SavedModelV2DebugInfo) {\n  SavedModelBundle bundle;\n  SessionOptions session_options;\n  RunOptions run_options;\n\n  const string export_dir =\n      io::JoinPath(testing::TensorFlowSrcRoot(), kTestDataV2DebugInfo);\n  TF_ASSERT_OK(LoadSavedModel(session_options, run_options, export_dir,\n                              {kSavedModelTagServe}, &bundle));\n\n  // This SavedModel has debug info, so we should have loaded it.\n  EXPECT_NE(bundle.debug_info.get(), nullptr);\n}\n\nTEST_F(LoaderTest, NegativeShapeDimension) {\n  SavedModelBundle bundle;\n  RunOptions run_options;\n  SessionOptions session_options;\n\n  const string export_dir = io::JoinPath(testing::TensorFlowSrcRoot(),\n                                         kTestFuzzGeneratedNegativeShape);\n  Status st = LoadSavedModel(session_options, run_options, export_dir,\n                             {kSavedModelTagServe}, &bundle);\n  EXPECT_FALSE(st.ok());\n  EXPECT_NE(\n      st.error_message().find(\"initializes from a tensor with -1 elements\"),\n      std::string::npos);\n}\n\nTEST_F(LoaderTest, ConstNoValue) {\n  SavedModelBundle bundle;\n  RunOptions run_options;\n  SessionOptions session_options;\n\n  const string export_dir = io::JoinPath(testing::TensorFlowSrcRoot(),\n                                         kTestFuzzGeneratedConstWithNoValue);\n  Status st = LoadSavedModel(session_options, run_options, export_dir,\n                             {kSavedModelTagServe}, &bundle);\n  EXPECT_FALSE(st.ok());\n  EXPECT_NE(\n      st.error_message().find(\"constant tensor but no value has been provided\"),\n      std::string::npos);\n}\n\n}  // namespace\n}  // namespace tensorflow"