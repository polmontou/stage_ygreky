"diff --git a/tensorflow/lite/kernels/arg_min_max.cc b/tensorflow/lite/kernels/arg_min_max.cc\nindex 4a3902ac57c..f782f94a9b0 100644\n--- a/tensorflow/lite/kernels/arg_min_max.cc\n+++ b/tensorflow/lite/kernels/arg_min_max.cc\n@@ -58,15 +58,19 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n \n-  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n-  const TfLiteTensor* axis = GetInput(context, node, kAxis);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n+  const TfLiteTensor* axis;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));\n   // Make sure the axis is only 1 dimension.\n   TF_LITE_ENSURE_EQ(context, NumElements(axis), 1);\n   // Make sure the axis is only either int32 or int64.\n   TF_LITE_ENSURE(context,\n                  axis->type == kTfLiteInt32 || axis->type == kTfLiteInt64);\n \n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n \n   auto* params = reinterpret_cast<TfLiteArgMaxParams*>(node->builtin_data);\n   switch (params->output_type) {\n@@ -119,9 +123,13 @@ std::function<bool(T, T)> GetComparefunction(bool is_arg_max) {\n }\n \n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {\n-  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n-  const TfLiteTensor* axis = GetInput(context, node, kAxis);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n+  const TfLiteTensor* axis;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n   if (IsDynamicTensor(output)) {\n     TF_LITE_ENSURE_STATUS(ResizeOutput(context, input, axis, output));\n   }"