"diff --git a/tensorflow/lite/kernels/comparisons.cc b/tensorflow/lite/kernels/comparisons.cc\nindex 7d1c6b7804e..d0a1876c5c6 100644\n--- a/tensorflow/lite/kernels/comparisons.cc\n+++ b/tensorflow/lite/kernels/comparisons.cc\n@@ -41,9 +41,15 @@ TfLiteStatus ComparisonPrepareCommon(TfLiteContext* context, TfLiteNode* node,\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n \n-  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n-  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* input1;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor1, &input1));\n+  const TfLiteTensor* input2;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor2, &input2));\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n \n   // Don't support string.\n   if (!is_string_allowed) {\n@@ -145,9 +151,15 @@ void ComparisonString(bool (*opname)(const StringRef&, const StringRef&),\n }\n \n TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n-  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* input1;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor1, &input1));\n+  const TfLiteTensor* input2;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor2, &input2));\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n   bool requires_broadcast = !HaveSameShapes(input1, input2);\n   switch (input1->type) {\n     case kTfLiteBool:\n@@ -189,9 +201,15 @@ TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {\n }\n \n TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n-  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* input1;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor1, &input1));\n+  const TfLiteTensor* input2;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor2, &input2));\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n   bool requires_broadcast = !HaveSameShapes(input1, input2);\n   switch (input1->type) {\n     case kTfLiteBool:\n@@ -233,9 +251,15 @@ TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {\n }\n \n TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n-  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* input1;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor1, &input1));\n+  const TfLiteTensor* input2;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor2, &input2));\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n   bool requires_broadcast = !HaveSameShapes(input1, input2);\n   switch (input1->type) {\n     case kTfLiteFloat32:\n@@ -268,9 +292,15 @@ TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {\n }\n \n TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n-  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* input1;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor1, &input1));\n+  const TfLiteTensor* input2;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor2, &input2));\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n   bool requires_broadcast = !HaveSameShapes(input1, input2);\n   switch (input1->type) {\n     case kTfLiteFloat32:\n@@ -303,9 +333,15 @@ TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {\n }\n \n TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n-  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* input1;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor1, &input1));\n+  const TfLiteTensor* input2;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor2, &input2));\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n   bool requires_broadcast = !HaveSameShapes(input1, input2);\n   switch (input1->type) {\n     case kTfLiteFloat32:\n@@ -338,9 +374,15 @@ TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {\n }\n \n TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n-  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* input1;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor1, &input1));\n+  const TfLiteTensor* input2;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensor2, &input2));\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n   bool requires_broadcast = !HaveSameShapes(input1, input2);\n   switch (input1->type) {\n     case kTfLiteFloat32:"