"diff --git a/tensorflow/lite/kernels/detection_postprocess.cc b/tensorflow/lite/kernels/detection_postprocess.cc\nindex c0b5b2ddf7c..3e1b7a3a034 100644\n--- a/tensorflow/lite/kernels/detection_postprocess.cc\n+++ b/tensorflow/lite/kernels/detection_postprocess.cc\n@@ -146,12 +146,17 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   auto* op_data = static_cast<OpData*>(node->user_data);\n   // Inputs: box_encodings, scores, anchors\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n-  const TfLiteTensor* input_box_encodings =\n-      GetInput(context, node, kInputTensorBoxEncodings);\n-  const TfLiteTensor* input_class_predictions =\n-      GetInput(context, node, kInputTensorClassPredictions);\n-  const TfLiteTensor* input_anchors =\n-      GetInput(context, node, kInputTensorAnchors);\n+  const TfLiteTensor* input_box_encodings;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorBoxEncodings,\n+                                 &input_box_encodings));\n+  const TfLiteTensor* input_class_predictions;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorClassPredictions,\n+                                 &input_class_predictions));\n+  const TfLiteTensor* input_anchors;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensorAnchors,\n+                                          &input_anchors));\n   TF_LITE_ENSURE_EQ(context, NumDimensions(input_box_encodings), 3);\n   TF_LITE_ENSURE_EQ(context, NumDimensions(input_class_predictions), 3);\n   TF_LITE_ENSURE_EQ(context, NumDimensions(input_anchors), 2);\n@@ -163,27 +168,35 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   // num_detections\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 4);\n   // Output Tensor detection_boxes: size is set to (1, num_detected_boxes, 4)\n-  TfLiteTensor* detection_boxes =\n-      GetOutput(context, node, kOutputTensorDetectionBoxes);\n+  TfLiteTensor* detection_boxes;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensorDetectionBoxes,\n+                                  &detection_boxes));\n   detection_boxes->type = kTfLiteFloat32;\n   SetTensorSizes(context, detection_boxes,\n                  {kBatchSize, num_detected_boxes, kNumCoordBox});\n \n   // Output Tensor detection_classes: size is set to (1, num_detected_boxes)\n-  TfLiteTensor* detection_classes =\n-      GetOutput(context, node, kOutputTensorDetectionClasses);\n+  TfLiteTensor* detection_classes;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensorDetectionClasses,\n+                                  &detection_classes));\n   detection_classes->type = kTfLiteFloat32;\n   SetTensorSizes(context, detection_classes, {kBatchSize, num_detected_boxes});\n \n   // Output Tensor detection_scores: size is set to (1, num_detected_boxes)\n-  TfLiteTensor* detection_scores =\n-      GetOutput(context, node, kOutputTensorDetectionScores);\n+  TfLiteTensor* detection_scores;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensorDetectionScores,\n+                                  &detection_scores));\n   detection_scores->type = kTfLiteFloat32;\n   SetTensorSizes(context, detection_scores, {kBatchSize, num_detected_boxes});\n \n   // Output Tensor num_detections: size is set to 1\n-  TfLiteTensor* num_detections =\n-      GetOutput(context, node, kOutputTensorNumDetections);\n+  TfLiteTensor* num_detections;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensorNumDetections,\n+                                  &num_detections));\n   num_detections->type = kTfLiteFloat32;\n   // TODO (chowdhery): Make it a scalar when available\n   SetTensorSizes(context, num_detections, {1});\n@@ -269,13 +282,16 @@ T ReInterpretTensor(TfLiteTensor* tensor) {\n TfLiteStatus DecodeCenterSizeBoxes(TfLiteContext* context, TfLiteNode* node,\n                                    OpData* op_data) {\n   // Parse input tensor boxencodings\n-  const TfLiteTensor* input_box_encodings =\n-      GetInput(context, node, kInputTensorBoxEncodings);\n+  const TfLiteTensor* input_box_encodings;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorBoxEncodings,\n+                                 &input_box_encodings));\n   TF_LITE_ENSURE_EQ(context, input_box_encodings->dims->data[0], kBatchSize);\n   const int num_boxes = input_box_encodings->dims->data[1];\n   TF_LITE_ENSURE(context, input_box_encodings->dims->data[2] >= kNumCoordBox);\n-  const TfLiteTensor* input_anchors =\n-      GetInput(context, node, kInputTensorAnchors);\n+  const TfLiteTensor* input_anchors;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensorAnchors,\n+                                          &input_anchors));\n \n   // Decode the boxes to get (ymin, xmin, ymax, xmax) based on the anchors\n   CenterSizeEncoding box_centersize;\n@@ -389,8 +405,10 @@ TfLiteStatus NonMaxSuppressionSingleClassHelper(\n     TfLiteContext* context, TfLiteNode* node, OpData* op_data,\n     const std::vector<float>& scores, std::vector<int>* selected,\n     int max_detections) {\n-  const TfLiteTensor* input_box_encodings =\n-      GetInput(context, node, kInputTensorBoxEncodings);\n+  const TfLiteTensor* input_box_encodings;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorBoxEncodings,\n+                                 &input_box_encodings));\n   const TfLiteTensor* decoded_boxes =\n       &context->tensors[op_data->decoded_boxes_index];\n   const int num_boxes = input_box_encodings->dims->data[1];\n@@ -468,21 +486,33 @@ TfLiteStatus NonMaxSuppressionMultiClassRegularHelper(TfLiteContext* context,\n                                                       TfLiteNode* node,\n                                                       OpData* op_data,\n                                                       const float* scores) {\n-  const TfLiteTensor* input_box_encodings =\n-      GetInput(context, node, kInputTensorBoxEncodings);\n-  const TfLiteTensor* input_class_predictions =\n-      GetInput(context, node, kInputTensorClassPredictions);\n+  const TfLiteTensor* input_box_encodings;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorBoxEncodings,\n+                                 &input_box_encodings));\n+  const TfLiteTensor* input_class_predictions;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorClassPredictions,\n+                                 &input_class_predictions));\n   const TfLiteTensor* decoded_boxes =\n       &context->tensors[op_data->decoded_boxes_index];\n \n-  TfLiteTensor* detection_boxes =\n-      GetOutput(context, node, kOutputTensorDetectionBoxes);\n-  TfLiteTensor* detection_classes =\n-      GetOutput(context, node, kOutputTensorDetectionClasses);\n-  TfLiteTensor* detection_scores =\n-      GetOutput(context, node, kOutputTensorDetectionScores);\n-  TfLiteTensor* num_detections =\n-      GetOutput(context, node, kOutputTensorNumDetections);\n+  TfLiteTensor* detection_boxes;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensorDetectionBoxes,\n+                                  &detection_boxes));\n+  TfLiteTensor* detection_classes;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensorDetectionClasses,\n+                                  &detection_classes));\n+  TfLiteTensor* detection_scores;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensorDetectionScores,\n+                                  &detection_scores));\n+  TfLiteTensor* num_detections;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensorNumDetections,\n+                                  &num_detections));\n \n   const int num_boxes = input_box_encodings->dims->data[1];\n   const int num_classes = op_data->num_classes;\n@@ -595,21 +625,33 @@ TfLiteStatus NonMaxSuppressionMultiClassFastHelper(TfLiteContext* context,\n                                                    TfLiteNode* node,\n                                                    OpData* op_data,\n                                                    const float* scores) {\n-  const TfLiteTensor* input_box_encodings =\n-      GetInput(context, node, kInputTensorBoxEncodings);\n-  const TfLiteTensor* input_class_predictions =\n-      GetInput(context, node, kInputTensorClassPredictions);\n+  const TfLiteTensor* input_box_encodings;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorBoxEncodings,\n+                                 &input_box_encodings));\n+  const TfLiteTensor* input_class_predictions;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorClassPredictions,\n+                                 &input_class_predictions));\n   const TfLiteTensor* decoded_boxes =\n       &context->tensors[op_data->decoded_boxes_index];\n \n-  TfLiteTensor* detection_boxes =\n-      GetOutput(context, node, kOutputTensorDetectionBoxes);\n-  TfLiteTensor* detection_classes =\n-      GetOutput(context, node, kOutputTensorDetectionClasses);\n-  TfLiteTensor* detection_scores =\n-      GetOutput(context, node, kOutputTensorDetectionScores);\n-  TfLiteTensor* num_detections =\n-      GetOutput(context, node, kOutputTensorNumDetections);\n+  TfLiteTensor* detection_boxes;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensorDetectionBoxes,\n+                                  &detection_boxes));\n+  TfLiteTensor* detection_classes;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensorDetectionClasses,\n+                                  &detection_classes));\n+  TfLiteTensor* detection_scores;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensorDetectionScores,\n+                                  &detection_scores));\n+  TfLiteTensor* num_detections;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensorNumDetections,\n+                                  &num_detections));\n \n   const int num_boxes = input_box_encodings->dims->data[1];\n   const int num_classes = op_data->num_classes;\n@@ -680,10 +722,14 @@ void DequantizeClassPredictions(const TfLiteTensor* input_class_predictions,\n TfLiteStatus NonMaxSuppressionMultiClass(TfLiteContext* context,\n                                          TfLiteNode* node, OpData* op_data) {\n   // Get the input tensors\n-  const TfLiteTensor* input_box_encodings =\n-      GetInput(context, node, kInputTensorBoxEncodings);\n-  const TfLiteTensor* input_class_predictions =\n-      GetInput(context, node, kInputTensorClassPredictions);\n+  const TfLiteTensor* input_box_encodings;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorBoxEncodings,\n+                                 &input_box_encodings));\n+  const TfLiteTensor* input_class_predictions;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorClassPredictions,\n+                                 &input_class_predictions));\n   const int num_boxes = input_box_encodings->dims->data[1];\n   const int num_classes = op_data->num_classes;\n   TF_LITE_ENSURE_EQ(context, input_class_predictions->dims->data[0],"