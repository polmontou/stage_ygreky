"diff --git a/tensorflow/lite/kernels/embedding_lookup_sparse.cc b/tensorflow/lite/kernels/embedding_lookup_sparse.cc\nindex 745b5090094..e9ad7e50cf1 100644\n--- a/tensorflow/lite/kernels/embedding_lookup_sparse.cc\n+++ b/tensorflow/lite/kernels/embedding_lookup_sparse.cc\n@@ -83,19 +83,23 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 5);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n \n-  const TfLiteTensor* ids = GetInput(context, node, 0);\n+  const TfLiteTensor* ids;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &ids));\n   TF_LITE_ENSURE_EQ(context, NumDimensions(ids), 1);\n   TF_LITE_ENSURE_EQ(context, ids->type, kTfLiteInt32);\n \n-  const TfLiteTensor* indices = GetInput(context, node, 1);\n+  const TfLiteTensor* indices;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &indices));\n   TF_LITE_ENSURE_EQ(context, NumDimensions(indices), 2);\n   TF_LITE_ENSURE_EQ(context, indices->type, kTfLiteInt32);\n \n-  const TfLiteTensor* shape = GetInput(context, node, 2);\n+  const TfLiteTensor* shape;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &shape));\n   TF_LITE_ENSURE_EQ(context, NumDimensions(shape), 1);\n   TF_LITE_ENSURE_EQ(context, shape->type, kTfLiteInt32);\n \n-  const TfLiteTensor* weights = GetInput(context, node, 3);\n+  const TfLiteTensor* weights;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 3, &weights));\n   TF_LITE_ENSURE_EQ(context, NumDimensions(weights), 1);\n   TF_LITE_ENSURE_EQ(context, weights->type, kTfLiteFloat32);\n \n@@ -104,11 +108,13 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, SizeOfDimension(indices, 0),\n                     SizeOfDimension(weights, 0));\n \n-  const TfLiteTensor* value = GetInput(context, node, 4);\n+  const TfLiteTensor* value;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 4, &value));\n   TF_LITE_ENSURE(context, NumDimensions(value) >= 2);\n \n   // Mark the output as a dynamic tensor.\n-  TfLiteTensor* output = GetOutput(context, node, 0);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n   TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);\n   output->allocation_type = kTfLiteDynamic;\n \n@@ -140,12 +146,18 @@ void FinalizeAggregation(TfLiteCombinerType combiner, int num_elements,\n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n   auto* params =\n       reinterpret_cast<TfLiteEmbeddingLookupSparseParams*>(node->builtin_data);\n-  TfLiteTensor* output = GetOutput(context, node, 0);\n-  const TfLiteTensor* ids = GetInput(context, node, 0);\n-  const TfLiteTensor* indices = GetInput(context, node, 1);\n-  const TfLiteTensor* dense_shape = GetInput(context, node, 2);\n-  const TfLiteTensor* weights = GetInput(context, node, 3);\n-  const TfLiteTensor* value = GetInput(context, node, 4);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n+  const TfLiteTensor* ids;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &ids));\n+  const TfLiteTensor* indices;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &indices));\n+  const TfLiteTensor* dense_shape;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &dense_shape));\n+  const TfLiteTensor* weights;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 3, &weights));\n+  const TfLiteTensor* value;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 4, &value));\n \n   const int lookup_rank = SizeOfDimension(indices, 1);\n   const int embedding_rank = NumDimensions(value);"