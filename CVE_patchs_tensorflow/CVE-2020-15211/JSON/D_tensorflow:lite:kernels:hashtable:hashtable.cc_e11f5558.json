"diff --git a/tensorflow/lite/kernels/hashtable/hashtable.cc b/tensorflow/lite/kernels/hashtable/hashtable.cc\nindex d1f9551ddf0..bca8f2c9208 100644\n--- a/tensorflow/lite/kernels/hashtable/hashtable.cc\n+++ b/tensorflow/lite/kernels/hashtable/hashtable.cc\n@@ -80,9 +80,9 @@ TfLiteStatus PrepareHashtable(TfLiteContext* context, TfLiteNode* node) {\n                               (params->key_dtype == kTfLiteString &&\n                                params->value_dtype == kTfLiteInt64));\n \n-  TfLiteTensor* resource_handle_tensor =\n-      GetOutput(context, node, kResourceHandleTensor);\n-  TF_LITE_ENSURE(context, resource_handle_tensor != nullptr);\n+  TfLiteTensor* resource_handle_tensor;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, kResourceHandleTensor,\n+                                           &resource_handle_tensor));\n   TF_LITE_ENSURE_EQ(context, resource_handle_tensor->type, kTfLiteInt32);\n   TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);\n   outputSize->data[0] = 1;\n@@ -97,8 +97,9 @@ TfLiteStatus EvalHashtable(TfLiteContext* context, TfLiteNode* node) {\n   // The resource id is generated based on the given table name.\n   const int resource_id = std::hash<std::string>{}(params->table_name);\n \n-  TfLiteTensor* resource_handle_tensor =\n-      GetOutput(context, node, kResourceHandleTensor);\n+  TfLiteTensor* resource_handle_tensor;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, kResourceHandleTensor,\n+                                           &resource_handle_tensor));\n   auto* resource_handle_data =\n       GetTensorData<std::int32_t>(resource_handle_tensor);\n   resource_handle_data[0] = resource_id;"