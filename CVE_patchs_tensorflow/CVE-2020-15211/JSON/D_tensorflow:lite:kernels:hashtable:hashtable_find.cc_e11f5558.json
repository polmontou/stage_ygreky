"diff --git a/tensorflow/lite/kernels/hashtable/hashtable_find.cc b/tensorflow/lite/kernels/hashtable/hashtable_find.cc\nindex 10236cfce07..f26fe824b4c 100644\n--- a/tensorflow/lite/kernels/hashtable/hashtable_find.cc\n+++ b/tensorflow/lite/kernels/hashtable/hashtable_find.cc\n@@ -34,17 +34,23 @@ TfLiteStatus PrepareHashtableFind(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n \n-  const TfLiteTensor* input_resource_id_tensor =\n-      GetInput(context, node, kInputResourceIdTensor);\n+  const TfLiteTensor* input_resource_id_tensor;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,\n+                                          &input_resource_id_tensor));\n   TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);\n   TF_LITE_ENSURE_EQ(context, NumDimensions(input_resource_id_tensor), 1);\n   TF_LITE_ENSURE_EQ(context, SizeOfDimension(input_resource_id_tensor, 0), 1);\n \n-  const TfLiteTensor* default_value_tensor =\n-      GetInput(context, node, kDefaultValueTensor);\n+  const TfLiteTensor* default_value_tensor;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDefaultValueTensor,\n+                                          &default_value_tensor));\n \n-  const TfLiteTensor* key_tensor = GetInput(context, node, kKeyTensor);\n-  TfLiteTensor* output_tensor = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* key_tensor;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kKeyTensor, &key_tensor));\n+  TfLiteTensor* output_tensor;\n+  TF_LITE_ENSURE_OK(\n+      context, GetOutputSafe(context, node, kOutputTensor, &output_tensor));\n   TF_LITE_ENSURE_EQ(context, default_value_tensor->type, output_tensor->type);\n   TF_LITE_ENSURE(context, (key_tensor->type == kTfLiteInt64 &&\n                            output_tensor->type == kTfLiteString) ||\n@@ -55,14 +61,19 @@ TfLiteStatus PrepareHashtableFind(TfLiteContext* context, TfLiteNode* node) {\n }\n \n TfLiteStatus EvalHashtableFind(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* input_resource_id_tensor =\n-      GetInput(context, node, kInputResourceIdTensor);\n+  const TfLiteTensor* input_resource_id_tensor;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,\n+                                          &input_resource_id_tensor));\n   int resource_id = input_resource_id_tensor->data.i32[0];\n \n-  const TfLiteTensor* key_tensor = GetInput(context, node, kKeyTensor);\n-  const TfLiteTensor* default_value_tensor =\n-      GetInput(context, node, kDefaultValueTensor);\n-  TfLiteTensor* output_tensor = GetOutput(context, node, 0);\n+  const TfLiteTensor* key_tensor;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kKeyTensor, &key_tensor));\n+  const TfLiteTensor* default_value_tensor;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDefaultValueTensor,\n+                                          &default_value_tensor));\n+  TfLiteTensor* output_tensor;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output_tensor));\n \n   Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);\n   auto& resources = subgraph->resources();"