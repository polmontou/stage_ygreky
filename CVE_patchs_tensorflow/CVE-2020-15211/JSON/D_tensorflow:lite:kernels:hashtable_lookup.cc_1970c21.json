"diff --git a/tensorflow/lite/kernels/hashtable_lookup.cc b/tensorflow/lite/kernels/hashtable_lookup.cc\nindex 65e50fe41c2..2563d8ade5f 100644\n--- a/tensorflow/lite/kernels/hashtable_lookup.cc\n+++ b/tensorflow/lite/kernels/hashtable_lookup.cc\n@@ -37,6 +37,7 @@ limitations under the License.\n #include <cstring>\n \n #include \"tensorflow/lite/c/common.h\"\n+#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n #include \"tensorflow/lite/kernels/kernel_util.h\"\n #include \"tensorflow/lite/string_util.h\"\n \n@@ -54,15 +55,18 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);\n \n-  const TfLiteTensor* lookup = GetInput(context, node, 0);\n+  const TfLiteTensor* lookup;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));\n   TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);\n   TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);\n \n-  const TfLiteTensor* key = GetInput(context, node, 1);\n+  const TfLiteTensor* key;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &key));\n   TF_LITE_ENSURE_EQ(context, NumDimensions(key), 1);\n   TF_LITE_ENSURE_EQ(context, key->type, kTfLiteInt32);\n \n-  const TfLiteTensor* value = GetInput(context, node, 2);\n+  const TfLiteTensor* value;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &value));\n   TF_LITE_ENSURE(context, NumDimensions(value) >= 1);\n   TF_LITE_ENSURE_EQ(context, SizeOfDimension(key, 0),\n                     SizeOfDimension(value, 0));\n@@ -70,12 +74,14 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n     TF_LITE_ENSURE_EQ(context, NumDimensions(value), 1);\n   }\n \n-  TfLiteTensor* hits = GetOutput(context, node, 1);\n+  TfLiteTensor* hits;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &hits));\n   TF_LITE_ENSURE_EQ(context, hits->type, kTfLiteUInt8);\n   TfLiteIntArray* hitSize = TfLiteIntArrayCreate(1);\n   hitSize->data[0] = SizeOfDimension(lookup, 0);\n \n-  TfLiteTensor* output = GetOutput(context, node, 0);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n   TF_LITE_ENSURE_EQ(context, value->type, output->type);\n \n   TfLiteStatus status = kTfLiteOk;\n@@ -94,11 +100,16 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n }\n \n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n-  TfLiteTensor* output = GetOutput(context, node, 0);\n-  TfLiteTensor* hits = GetOutput(context, node, 1);\n-  const TfLiteTensor* lookup = GetInput(context, node, 0);\n-  const TfLiteTensor* key = GetInput(context, node, 1);\n-  const TfLiteTensor* value = GetInput(context, node, 2);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n+  TfLiteTensor* hits;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &hits));\n+  const TfLiteTensor* lookup;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));\n+  const TfLiteTensor* key;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &key));\n+  const TfLiteTensor* value;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &value));\n \n   const int num_rows = SizeOfDimension(value, 0);\n   const int row_bytes = value->bytes / num_rows;"