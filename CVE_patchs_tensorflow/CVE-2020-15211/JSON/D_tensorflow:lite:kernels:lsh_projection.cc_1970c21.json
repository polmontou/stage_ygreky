"diff --git a/tensorflow/lite/kernels/lsh_projection.cc b/tensorflow/lite/kernels/lsh_projection.cc\nindex b809748c59c..81f97ecf9a9 100644\n--- a/tensorflow/lite/kernels/lsh_projection.cc\n+++ b/tensorflow/lite/kernels/lsh_projection.cc\n@@ -73,22 +73,26 @@ TfLiteStatus Resize(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n \n-  const TfLiteTensor* hash = GetInput(context, node, 0);\n+  const TfLiteTensor* hash;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &hash));\n   TF_LITE_ENSURE_EQ(context, NumDimensions(hash), 2);\n   // Support up to 32 bits.\n   TF_LITE_ENSURE(context, SizeOfDimension(hash, 1) <= 32);\n \n-  const TfLiteTensor* input = GetInput(context, node, 1);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input));\n   TF_LITE_ENSURE(context, NumDimensions(input) >= 1);\n \n   if (NumInputs(node) == 3) {\n-    const TfLiteTensor* weight = GetInput(context, node, 2);\n+    const TfLiteTensor* weight;\n+    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &weight));\n     TF_LITE_ENSURE_EQ(context, NumDimensions(weight), 1);\n     TF_LITE_ENSURE_EQ(context, SizeOfDimension(weight, 0),\n                       SizeOfDimension(input, 0));\n   }\n \n-  TfLiteTensor* output = GetOutput(context, node, 0);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n   TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);\n   switch (params->type) {\n     case kTfLiteLshProjectionSparse:\n@@ -170,9 +174,13 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n   auto* params =\n       reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);\n \n-  int32_t* out_buf = GetOutput(context, node, 0)->data.i32;\n-  const TfLiteTensor* hash = GetInput(context, node, 0);\n-  const TfLiteTensor* input = GetInput(context, node, 1);\n+  TfLiteTensor* out_tensor;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));\n+  int32_t* out_buf = out_tensor->data.i32;\n+  const TfLiteTensor* hash;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &hash));\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input));\n   const TfLiteTensor* weight =\n       NumInputs(node) == 2 ? nullptr : GetInput(context, node, 2);\n "