"diff --git a/tensorflow/lite/kernels/mirror_pad.cc b/tensorflow/lite/kernels/mirror_pad.cc\nindex 8f4f02f7848..f5427d193c7 100644\n--- a/tensorflow/lite/kernels/mirror_pad.cc\n+++ b/tensorflow/lite/kernels/mirror_pad.cc\n@@ -162,8 +162,10 @@ struct MirrorPadWorkerTask : cpu_backend_threadpool::Task {\n \n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n   ruy::profiler::ScopeLabel label(\"MirrorPad\");\n-  const TfLiteTensor* input_tensor = GetInput(context, node, 0);\n-  const TfLiteTensor* padding_matrix = GetInput(context, node, 1);\n+  const TfLiteTensor* input_tensor;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input_tensor));\n+  const TfLiteTensor* padding_matrix;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &padding_matrix));\n   auto* params =\n       reinterpret_cast<TfLiteMirrorPaddingParams*>(node->builtin_data);\n \n@@ -172,7 +174,8 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n   }\n   const int input_dims = NumDimensions(input_tensor);\n \n-  TfLiteTensor* output_tensor = GetOutput(context, node, 0);\n+  TfLiteTensor* output_tensor;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output_tensor));\n   if (IsDynamicTensor(output_tensor)) {\n     auto output_size = GetPaddedOutputShape(input_tensor, padding_matrix);\n     if (output_size == nullptr) {\n@@ -258,9 +261,12 @@ void* Init(TfLiteContext* context, const char* buffer, size_t length) {\n void Free(TfLiteContext* context, void* buffer) {}\n \n TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* input_tensor = GetInput(context, node, 0);\n-  const TfLiteTensor* padding_matrix = GetInput(context, node, 1);\n-  TfLiteTensor* output_tensor = GetOutput(context, node, 0);\n+  const TfLiteTensor* input_tensor;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input_tensor));\n+  const TfLiteTensor* padding_matrix;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &padding_matrix));\n+  TfLiteTensor* output_tensor;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output_tensor));\n \n   TF_LITE_ENSURE_EQ(context, NumDimensions(padding_matrix), 2);\n   TF_LITE_ENSURE_EQ(context, SizeOfDimension(padding_matrix, 0),"