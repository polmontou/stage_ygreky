"diff --git a/tensorflow/lite/kernels/non_max_suppression.cc b/tensorflow/lite/kernels/non_max_suppression.cc\nindex d6e13cdbd33..70f80e68cd0 100644\n--- a/tensorflow/lite/kernels/non_max_suppression.cc\n+++ b/tensorflow/lite/kernels/non_max_suppression.cc\n@@ -79,20 +79,25 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   }\n \n   // Boxes & Scores.\n-  const TfLiteTensor* input_boxes = GetInput(context, node, kInputTensorBoxes);\n+  const TfLiteTensor* input_boxes;\n+  TF_LITE_ENSURE_OK(\n+      context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));\n   TF_LITE_ENSURE_EQ(context, input_boxes->type, kTfLiteFloat32);\n   TF_LITE_ENSURE_EQ(context, NumDimensions(input_boxes), 2);\n   TF_LITE_ENSURE_EQ(context, SizeOfDimension(input_boxes, 1), 4);\n   const int num_boxes = SizeOfDimension(input_boxes, 0);\n-  const TfLiteTensor* input_scores =\n-      GetInput(context, node, kInputTensorScores);\n+  const TfLiteTensor* input_scores;\n+  TF_LITE_ENSURE_OK(\n+      context, GetInputSafe(context, node, kInputTensorScores, &input_scores));\n   TF_LITE_ENSURE_EQ(context, input_scores->type, kTfLiteFloat32);\n   TF_LITE_ENSURE_EQ(context, NumDimensions(input_scores), 1);\n   TF_LITE_ENSURE_EQ(context, num_boxes, SizeOfDimension(input_scores, 0));\n \n   // Max output size.\n-  const TfLiteTensor* input_max_output_size =\n-      GetInput(context, node, kInputTensorMaxOutputSize);\n+  const TfLiteTensor* input_max_output_size;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorMaxOutputSize,\n+                                 &input_max_output_size));\n   TF_LITE_ENSURE_EQ(context, input_max_output_size->type, kTfLiteInt32);\n   TF_LITE_ENSURE_EQ(context, NumDimensions(input_max_output_size), 0);\n   const bool is_max_output_size_const = IsConstantTensor(input_max_output_size);\n@@ -103,30 +108,43 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   }\n \n   // IoU & Score thresholds.\n-  const TfLiteTensor* input_iou_threshold =\n-      GetInput(context, node, kInputTensorIouThreshold);\n+  const TfLiteTensor* input_iou_threshold;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorIouThreshold,\n+                                 &input_iou_threshold));\n   TF_LITE_ENSURE_EQ(context, input_iou_threshold->type, kTfLiteFloat32);\n   TF_LITE_ENSURE_EQ(context, NumDimensions(input_iou_threshold), 0);\n-  const TfLiteTensor* input_score_threshold =\n-      GetInput(context, node, kInputTensorScoreThreshold);\n+  const TfLiteTensor* input_score_threshold;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorScoreThreshold,\n+                                 &input_score_threshold));\n   TF_LITE_ENSURE_EQ(context, input_iou_threshold->type, kTfLiteFloat32);\n   TF_LITE_ENSURE_EQ(context, NumDimensions(input_score_threshold), 0);\n \n   if (is_soft_nms) {\n-    const TfLiteTensor* input_sigma =\n-        GetInput(context, node, kInputTensorSigma);\n+    const TfLiteTensor* input_sigma;\n+    TF_LITE_ENSURE_OK(\n+        context, GetInputSafe(context, node, kInputTensorSigma, &input_sigma));\n     TF_LITE_ENSURE_EQ(context, input_sigma->type, kTfLiteFloat32);\n     TF_LITE_ENSURE_EQ(context, NumDimensions(input_sigma), 0);\n \n     TF_LITE_ENSURE_EQ(context, NumOutputs(node), 3);\n-    TfLiteTensor* output_selected_indices =\n-        GetOutput(context, node, kSoftNMSOutputTensorSelectedIndices);\n+    TfLiteTensor* output_selected_indices;\n+    TF_LITE_ENSURE_OK(\n+        context,\n+        GetOutputSafe(context, node, kSoftNMSOutputTensorSelectedIndices,\n+                      &output_selected_indices));\n     output_selected_indices->type = kTfLiteInt32;\n-    TfLiteTensor* output_selected_scores =\n-        GetOutput(context, node, kSoftNMSOutputTensorSelectedScores);\n+    TfLiteTensor* output_selected_scores;\n+    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node,\n+                                             kSoftNMSOutputTensorSelectedScores,\n+                                             &output_selected_scores));\n     output_selected_scores->type = kTfLiteFloat32;\n-    TfLiteTensor* output_num_selected_indices =\n-        GetOutput(context, node, kSoftNMSOutputTensorNumSelectedIndices);\n+    TfLiteTensor* output_num_selected_indices;\n+    TF_LITE_ENSURE_OK(\n+        context,\n+        GetOutputSafe(context, node, kSoftNMSOutputTensorNumSelectedIndices,\n+                      &output_num_selected_indices));\n     output_num_selected_indices->type = kTfLiteInt32;\n     SetTensorSizes(context, output_num_selected_indices, {});\n \n@@ -139,11 +157,15 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n     }\n   } else {\n     TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);\n-    TfLiteTensor* output_selected_indices =\n-        GetOutput(context, node, kNMSOutputTensorSelectedIndices);\n+    TfLiteTensor* output_selected_indices;\n+    TF_LITE_ENSURE_OK(\n+        context, GetOutputSafe(context, node, kNMSOutputTensorSelectedIndices,\n+                               &output_selected_indices));\n     output_selected_indices->type = kTfLiteInt32;\n-    TfLiteTensor* output_num_selected_indices =\n-        GetOutput(context, node, kNMSOutputTensorNumSelectedIndices);\n+    TfLiteTensor* output_num_selected_indices;\n+    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node,\n+                                             kNMSOutputTensorNumSelectedIndices,\n+                                             &output_num_selected_indices));\n     output_num_selected_indices->type = kTfLiteInt32;\n     SetTensorSizes(context, output_num_selected_indices, {});\n \n@@ -179,20 +201,29 @@ void ResetUnusedElementsToZeroes(const int max_output_size,\n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n   const bool is_soft_nms = NumInputs(node) == 6;\n \n-  const TfLiteTensor* input_boxes = GetInput(context, node, kInputTensorBoxes);\n+  const TfLiteTensor* input_boxes;\n+  TF_LITE_ENSURE_OK(\n+      context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));\n   const int num_boxes = SizeOfDimension(input_boxes, 0);\n-  const TfLiteTensor* input_scores =\n-      GetInput(context, node, kInputTensorScores);\n-  const TfLiteTensor* input_max_output_size =\n-      GetInput(context, node, kInputTensorMaxOutputSize);\n+  const TfLiteTensor* input_scores;\n+  TF_LITE_ENSURE_OK(\n+      context, GetInputSafe(context, node, kInputTensorScores, &input_scores));\n+  const TfLiteTensor* input_max_output_size;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorMaxOutputSize,\n+                                 &input_max_output_size));\n   const int max_output_size_value = *GetTensorData<int>(input_max_output_size);\n   TF_LITE_ENSURE(context, (max_output_size_value >= 0));\n   const bool is_max_output_size_const = IsConstantTensor(input_max_output_size);\n-  const TfLiteTensor* input_iou_threshold =\n-      GetInput(context, node, kInputTensorIouThreshold);\n+  const TfLiteTensor* input_iou_threshold;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorIouThreshold,\n+                                 &input_iou_threshold));\n   const float iou_threshold = *GetTensorData<float>(input_iou_threshold);\n-  const TfLiteTensor* input_score_threshold =\n-      GetInput(context, node, kInputTensorScoreThreshold);\n+  const TfLiteTensor* input_score_threshold;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kInputTensorScoreThreshold,\n+                                 &input_score_threshold));\n   const float score_threshold = *GetTensorData<float>(input_score_threshold);\n \n   TfLiteTensor* output_selected_indices = nullptr;\n@@ -200,8 +231,9 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n   TfLiteTensor* output_num_selected_indices = nullptr;\n \n   if (is_soft_nms) {\n-    const TfLiteTensor* input_sigma =\n-        GetInput(context, node, kInputTensorSigma);\n+    const TfLiteTensor* input_sigma;\n+    TF_LITE_ENSURE_OK(\n+        context, GetInputSafe(context, node, kInputTensorSigma, &input_sigma));\n     const float soft_nms_sigma = *GetTensorData<float>(input_sigma);\n     if (soft_nms_sigma < 0) {\n       context->ReportError(context, \"Invalid sigma value for soft NMS: %f\",\n@@ -209,12 +241,17 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n       return kTfLiteError;\n     }\n \n-    output_selected_indices =\n-        GetOutput(context, node, kSoftNMSOutputTensorSelectedIndices);\n-    output_selected_scores =\n-        GetOutput(context, node, kSoftNMSOutputTensorSelectedScores);\n-    output_num_selected_indices =\n-        GetOutput(context, node, kSoftNMSOutputTensorNumSelectedIndices);\n+    TF_LITE_ENSURE_OK(\n+        context,\n+        GetOutputSafe(context, node, kSoftNMSOutputTensorSelectedIndices,\n+                      &output_selected_indices));\n+    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node,\n+                                             kSoftNMSOutputTensorSelectedScores,\n+                                             &output_selected_scores));\n+    TF_LITE_ENSURE_OK(\n+        context,\n+        GetOutputSafe(context, node, kSoftNMSOutputTensorNumSelectedIndices,\n+                      &output_num_selected_indices));\n     if (!is_max_output_size_const) {\n       SetTensorSizes(context, output_selected_indices, {max_output_size_value});\n       SetTensorSizes(context, output_selected_scores, {max_output_size_value});\n@@ -228,10 +265,12 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n         max_output_size_value, *output_num_selected_indices->data.i32,\n         output_selected_indices->data.i32, output_selected_scores->data.f);\n   } else {\n-    output_selected_indices =\n-        GetOutput(context, node, kNMSOutputTensorSelectedIndices);\n-    output_num_selected_indices =\n-        GetOutput(context, node, kNMSOutputTensorNumSelectedIndices);\n+    TF_LITE_ENSURE_OK(\n+        context, GetOutputSafe(context, node, kNMSOutputTensorSelectedIndices,\n+                               &output_selected_indices));\n+    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node,\n+                                             kNMSOutputTensorNumSelectedIndices,\n+                                             &output_num_selected_indices));\n     if (!is_max_output_size_const) {\n       SetTensorSizes(context, output_selected_indices, {max_output_size_value});\n     }"