"diff --git a/tensorflow/lite/kernels/range.cc b/tensorflow/lite/kernels/range.cc\nindex 71ee4208ed9..6cc3e52e6fa 100644\n--- a/tensorflow/lite/kernels/range.cc\n+++ b/tensorflow/lite/kernels/range.cc\n@@ -83,9 +83,12 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n \n-  const TfLiteTensor* start = GetInput(context, node, kStartTensor);\n-  const TfLiteTensor* limit = GetInput(context, node, kLimitTensor);\n-  const TfLiteTensor* delta = GetInput(context, node, kDeltaTensor);\n+  const TfLiteTensor* start;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kStartTensor, &start));\n+  const TfLiteTensor* limit;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kLimitTensor, &limit));\n+  const TfLiteTensor* delta;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDeltaTensor, &delta));\n   // Make sure all the inputs are scalars.\n   TF_LITE_ENSURE_EQ(context, NumDimensions(start), 0);\n   TF_LITE_ENSURE_EQ(context, NumDimensions(limit), 0);\n@@ -103,7 +106,9 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_TYPES_EQ(context, limit->type, dtype);\n   TF_LITE_ENSURE_TYPES_EQ(context, delta->type, dtype);\n \n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n   output->type = dtype;\n \n   if (IsConstantTensor(start) && IsConstantTensor(limit) &&\n@@ -130,11 +135,16 @@ void EvalImpl(const TfLiteTensor* start, const TfLiteTensor* delta,\n }\n \n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* start = GetInput(context, node, kStartTensor);\n-  const TfLiteTensor* limit = GetInput(context, node, kLimitTensor);\n-  const TfLiteTensor* delta = GetInput(context, node, kDeltaTensor);\n-\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* start;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kStartTensor, &start));\n+  const TfLiteTensor* limit;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kLimitTensor, &limit));\n+  const TfLiteTensor* delta;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDeltaTensor, &delta));\n+\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n \n   if (IsDynamicTensor(output)) {\n     TF_LITE_ENSURE_OK(context,"