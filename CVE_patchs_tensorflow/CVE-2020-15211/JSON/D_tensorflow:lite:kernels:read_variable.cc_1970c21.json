"diff --git a/tensorflow/lite/kernels/read_variable.cc b/tensorflow/lite/kernels/read_variable.cc\nindex 78b6a136be4..942cd4b7c36 100644\n--- a/tensorflow/lite/kernels/read_variable.cc\n+++ b/tensorflow/lite/kernels/read_variable.cc\n@@ -34,12 +34,15 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, node->inputs->size, 1);\n   TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);\n \n-  const TfLiteTensor* input_resource_id_tensor =\n-      GetInput(context, node, kInputVariableId);\n+  const TfLiteTensor* input_resource_id_tensor;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,\n+                                          &input_resource_id_tensor));\n   TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);\n   TF_LITE_ENSURE_EQ(context, NumElements(input_resource_id_tensor), 1);\n \n-  TfLiteTensor* output = GetOutput(context, node, kOutputValue);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputValue, &output));\n   SetTensorToDynamic(output);\n \n   return kTfLiteOk;\n@@ -48,15 +51,18 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n   Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);\n \n-  const TfLiteTensor* input_resource_id_tensor =\n-      GetInput(context, node, kInputVariableId);\n+  const TfLiteTensor* input_resource_id_tensor;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,\n+                                          &input_resource_id_tensor));\n   int resource_id = input_resource_id_tensor->data.i32[0];\n   auto& resources = subgraph->resources();\n   auto* variable = resource::GetResourceVariable(&resources, resource_id);\n   TF_LITE_ENSURE(context, variable != nullptr);\n \n   TfLiteTensor* variable_tensor = variable->GetTensor();\n-  TfLiteTensor* output = GetOutput(context, node, kOutputValue);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputValue, &output));\n \n   TF_LITE_ENSURE_TYPES_EQ(context, variable_tensor->type, output->type);\n   TF_LITE_ENSURE_OK("