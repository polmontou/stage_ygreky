"diff --git a/tensorflow/lite/kernels/reduce.cc b/tensorflow/lite/kernels/reduce.cc\nindex 10fd7b02b61..8caf7952ddc 100644\n--- a/tensorflow/lite/kernels/reduce.cc\n+++ b/tensorflow/lite/kernels/reduce.cc\n@@ -170,7 +170,9 @@ TfLiteStatus InitializeTemporaries(TfLiteContext* context, TfLiteNode* node,\n   TfLiteIntArrayFree(node->temporaries);\n   node->temporaries = TfLiteIntArrayCreate(3);\n   node->temporaries->data[0] = op_data->scratch_tensor_index;\n-  TfLiteTensor* scratch_tensor = GetTemporary(context, node, /*index=*/0);\n+  TfLiteTensor* scratch_tensor;\n+  TF_LITE_ENSURE_OK(\n+      context, GetTemporarySafe(context, node, /*index=*/0, &scratch_tensor));\n   scratch_tensor->type = kTfLiteInt32;\n   scratch_tensor->allocation_type = kTfLiteArenaRw;\n   TfLiteIntArray* index_size = TfLiteIntArrayCreate(1);\n@@ -180,11 +182,15 @@ TfLiteStatus InitializeTemporaries(TfLiteContext* context, TfLiteNode* node,\n \n   // Creates a temp tensor to store resolved axis given input data.\n   node->temporaries->data[1] = op_data->scratch_tensor_index + 1;\n-  TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);\n+  TfLiteTensor* resolved_axis;\n+  TF_LITE_ENSURE_OK(\n+      context, GetTemporarySafe(context, node, /*index=*/1, &resolved_axis));\n   resolved_axis->type = kTfLiteInt32;\n   // Creates a temp tensor to store temp sums when calculating mean.\n   node->temporaries->data[2] = op_data->scratch_tensor_index + 2;\n-  TfLiteTensor* temp_sum = GetTemporary(context, node, /*index=*/2);\n+  TfLiteTensor* temp_sum;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetTemporarySafe(context, node, /*index=*/2, &temp_sum));\n   switch (op_context->input->type) {\n     case kTfLiteFloat32:\n       temp_sum->type = kTfLiteFloat32;\n@@ -217,7 +223,9 @@ TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_TYPES_EQ(context, op_context.axis->type, kTfLiteInt32);\n   TF_LITE_ENSURE_OK(context, InitializeTemporaries(context, node, &op_context));\n \n-  TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);\n+  TfLiteTensor* resolved_axis;\n+  TF_LITE_ENSURE_OK(\n+      context, GetTemporarySafe(context, node, /*index=*/1, &resolved_axis));\n   // Leaves work to Eval if axis is not constant; else resizes output.\n   if (!IsConstantTensor(op_context.axis)) {\n     SetTensorToDynamic(op_context.output);\n@@ -233,7 +241,8 @@ TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {\n \n TfLiteStatus PrepareAny(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n-  const TfLiteTensor* input = GetInput(context, node, 0);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n   TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteBool);\n   return PrepareSimple(context, node);\n }\n@@ -254,7 +263,9 @@ TfLiteStatus PrepareMeanOrSum(TfLiteContext* context, TfLiteNode* node) {\n     QuantizeMultiplier(real_multiplier, &data->multiplier, &exponent);\n     data->shift = exponent;\n   }\n-  TfLiteTensor* temp_sum = GetTemporary(context, node, /*index=*/2);\n+  TfLiteTensor* temp_sum;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetTemporarySafe(context, node, /*index=*/2, &temp_sum));\n   if (!IsConstantTensor(op_context.axis)) {\n     SetTensorToDynamic(temp_sum);\n     return kTfLiteOk;\n@@ -343,9 +354,15 @@ TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {\n   OpData* data = reinterpret_cast<OpData*>(node->user_data);\n \n   int num_axis = static_cast<int>(NumElements(op_context.axis));\n-  TfLiteTensor* temp_index = GetTemporary(context, node, /*index=*/0);\n-  TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);\n-  TfLiteTensor* temp_sum = GetTemporary(context, node, /*index=*/2);\n+  TfLiteTensor* temp_index;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetTemporarySafe(context, node, /*index=*/0, &temp_index));\n+  TfLiteTensor* resolved_axis;\n+  TF_LITE_ENSURE_OK(\n+      context, GetTemporarySafe(context, node, /*index=*/1, &resolved_axis));\n+  TfLiteTensor* temp_sum;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetTemporarySafe(context, node, /*index=*/2, &temp_sum));\n   // Resize the output tensor if the output tensor is dynamic.\n   if (IsDynamicTensor(op_context.output)) {\n     TF_LITE_ENSURE_OK(context,\n@@ -490,8 +507,12 @@ TfLiteStatus EvalLogic(TfLiteContext* context, TfLiteNode* node,\n                        OpContext* op_context, T init_value,\n                        T reducer(const T current, const T in)) {\n   int64_t num_axis = NumElements(op_context->axis);\n-  TfLiteTensor* temp_index = GetTemporary(context, node, /*index=*/0);\n-  TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);\n+  TfLiteTensor* temp_index;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetTemporarySafe(context, node, /*index=*/0, &temp_index));\n+  TfLiteTensor* resolved_axis;\n+  TF_LITE_ENSURE_OK(\n+      context, GetTemporarySafe(context, node, /*index=*/1, &resolved_axis));\n   // Resize the output tensor if the output tensor is dynamic.\n   if (IsDynamicTensor(op_context->output)) {\n     TF_LITE_ENSURE_OK(context,\n@@ -621,9 +642,15 @@ TfLiteStatus EvalSum(TfLiteContext* context, TfLiteNode* node) {\n   if (need_rescale) {\n     // Rescaling 8bit reduce sum.\n     int num_axis = static_cast<int>(NumElements(op_context.axis));\n-    TfLiteTensor* temp_index = GetTemporary(context, node, /*index=*/0);\n-    TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);\n-    TfLiteTensor* temp_sum = GetTemporary(context, node, /*index=*/2);\n+    TfLiteTensor* temp_index;\n+    TF_LITE_ENSURE_OK(\n+        context, GetTemporarySafe(context, node, /*index=*/0, &temp_index));\n+    TfLiteTensor* resolved_axis;\n+    TF_LITE_ENSURE_OK(\n+        context, GetTemporarySafe(context, node, /*index=*/1, &resolved_axis));\n+    TfLiteTensor* temp_sum;\n+    TF_LITE_ENSURE_OK(context,\n+                      GetTemporarySafe(context, node, /*index=*/2, &temp_sum));\n     // Resize the output tensor if the output tensor is dynamic.\n     if (IsDynamicTensor(op_context.output)) {\n       TF_LITE_ENSURE_OK(context,"