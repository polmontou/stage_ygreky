"diff --git a/tensorflow/lite/kernels/reverse.cc b/tensorflow/lite/kernels/reverse.cc\nindex 34cc92da5d8..a7ef54dae12 100644\n--- a/tensorflow/lite/kernels/reverse.cc\n+++ b/tensorflow/lite/kernels/reverse.cc\n@@ -35,8 +35,10 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n \n-  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n-  const TfLiteTensor* axis = GetInput(context, node, kAxisTensor);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n+  const TfLiteTensor* axis;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxisTensor, &axis));\n   TF_LITE_ENSURE_EQ(context, NumDimensions(axis), 1);\n   TF_LITE_ENSURE(context, NumDimensions(input) >= NumElements(axis));\n \n@@ -59,7 +61,9 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n     context->ReportError(context, \"Current does not support more than 1 axis.\");\n   }\n \n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n   TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);\n   TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);\n \n@@ -67,8 +71,11 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n }\n \n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n-  const TfLiteTensor* axis_tensor = GetInput(context, node, kAxisTensor);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n+  const TfLiteTensor* axis_tensor;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kAxisTensor, &axis_tensor));\n   int axis = GetTensorData<int32_t>(axis_tensor)[0];\n   const int rank = NumDimensions(input);\n   if (axis < 0) {\n@@ -76,7 +83,9 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n   }\n \n   TF_LITE_ENSURE(context, axis >= 0 && axis < rank);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n \n   switch (output->type) {\n     case kTfLiteFloat32: {"