"diff --git a/tensorflow/lite/kernels/reverse_sequence.cc b/tensorflow/lite/kernels/reverse_sequence.cc\nindex b36b1f803ca..dbbdf3003a2 100644\n--- a/tensorflow/lite/kernels/reverse_sequence.cc\n+++ b/tensorflow/lite/kernels/reverse_sequence.cc\n@@ -36,8 +36,11 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n \n-  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n-  const TfLiteTensor* seq_lengths = GetInput(context, node, kSeqLengthsTensor);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n+  const TfLiteTensor* seq_lengths;\n+  TF_LITE_ENSURE_OK(\n+      context, GetInputSafe(context, node, kSeqLengthsTensor, &seq_lengths));\n   TF_LITE_ENSURE_EQ(context, NumDimensions(seq_lengths), 1);\n \n   if (input->type != kTfLiteInt32 && input->type != kTfLiteFloat32 &&\n@@ -56,7 +59,9 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n     return kTfLiteError;\n   }\n \n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n   TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);\n   TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);\n \n@@ -65,9 +70,11 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n \n template <typename T, typename TS>\n TfLiteStatus ReverseSequenceImpl(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n-  const TfLiteTensor* seq_lengths_tensor =\n-      GetInput(context, node, kSeqLengthsTensor);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n+  const TfLiteTensor* seq_lengths_tensor;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSeqLengthsTensor,\n+                                          &seq_lengths_tensor));\n   const TS* seq_lengths = GetTensorData<TS>(seq_lengths_tensor);\n \n   auto* params =\n@@ -86,7 +93,9 @@ TfLiteStatus ReverseSequenceImpl(TfLiteContext* context, TfLiteNode* node) {\n     TF_LITE_ENSURE(context, seq_lengths[i] <= SizeOfDimension(input, seq_dim));\n   }\n \n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n \n   reference_ops::ReverseSequence<T, TS>(\n       seq_lengths, seq_dim, batch_dim, GetTensorShape(input),\n@@ -98,8 +107,9 @@ TfLiteStatus ReverseSequenceImpl(TfLiteContext* context, TfLiteNode* node) {\n \n template <typename T>\n TfLiteStatus ReverseSequenceHelper(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* seq_lengths_tensor =\n-      GetInput(context, node, kSeqLengthsTensor);\n+  const TfLiteTensor* seq_lengths_tensor;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSeqLengthsTensor,\n+                                          &seq_lengths_tensor));\n   switch (seq_lengths_tensor->type) {\n     case kTfLiteInt32: {\n       return ReverseSequenceImpl<T, int32_t>(context, node);\n@@ -119,7 +129,9 @@ TfLiteStatus ReverseSequenceHelper(TfLiteContext* context, TfLiteNode* node) {\n }\n \n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n \n   switch (output->type) {\n     case kTfLiteFloat32: {"