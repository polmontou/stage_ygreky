"diff --git a/tensorflow/lite/kernels/scatter_nd.cc b/tensorflow/lite/kernels/scatter_nd.cc\nindex 4e904f66692..93e2fe36c3f 100644\n--- a/tensorflow/lite/kernels/scatter_nd.cc\n+++ b/tensorflow/lite/kernels/scatter_nd.cc\n@@ -74,9 +74,12 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n \n-  const TfLiteTensor* indices = GetInput(context, node, kIndices);\n-  const TfLiteTensor* updates = GetInput(context, node, kUpdates);\n-  const TfLiteTensor* shape = GetInput(context, node, kShape);\n+  const TfLiteTensor* indices;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kIndices, &indices));\n+  const TfLiteTensor* updates;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kUpdates, &updates));\n+  const TfLiteTensor* shape;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kShape, &shape));\n \n   switch (updates->type) {\n     case kTfLiteFloat32:\n@@ -96,7 +99,9 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n     return kTfLiteError;\n   }\n \n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n   output->type = updates->type;\n \n   if (IsConstantTensor(shape)) {\n@@ -163,10 +168,15 @@ TfLiteStatus EvalScatterNd(TfLiteContext* context, const TfLiteTensor* indices,\n }\n \n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* indices = GetInput(context, node, kIndices);\n-  const TfLiteTensor* updates = GetInput(context, node, kUpdates);\n-  const TfLiteTensor* shape = GetInput(context, node, kShape);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* indices;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kIndices, &indices));\n+  const TfLiteTensor* updates;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kUpdates, &updates));\n+  const TfLiteTensor* shape;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kShape, &shape));\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n \n   switch (indices->type) {\n     case kTfLiteInt32:"