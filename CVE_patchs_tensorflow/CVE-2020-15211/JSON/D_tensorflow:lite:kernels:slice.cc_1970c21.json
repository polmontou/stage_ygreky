"diff --git a/tensorflow/lite/kernels/slice.cc b/tensorflow/lite/kernels/slice.cc\nindex 3f6eb73e843..246d061d168 100644\n--- a/tensorflow/lite/kernels/slice.cc\n+++ b/tensorflow/lite/kernels/slice.cc\n@@ -113,10 +113,15 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n \n-  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n-  const TfLiteTensor* begin = GetInput(context, node, kBeginTensor);\n-  const TfLiteTensor* size = GetInput(context, node, kSizeTensor);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n+  const TfLiteTensor* begin;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBeginTensor, &begin));\n+  const TfLiteTensor* size;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSizeTensor, &size));\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n \n   // Ensure validity of input tensor and its dimension.\n   TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n@@ -142,10 +147,15 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n \n template <KernelType kernel_type>\n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n-  const TfLiteTensor* begin = GetInput(context, node, kBeginTensor);\n-  const TfLiteTensor* size = GetInput(context, node, kSizeTensor);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n+  const TfLiteTensor* begin;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBeginTensor, &begin));\n+  const TfLiteTensor* size;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSizeTensor, &size));\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n \n   if (IsDynamicTensor(output)) {\n     TF_LITE_ENSURE_OK(context,"