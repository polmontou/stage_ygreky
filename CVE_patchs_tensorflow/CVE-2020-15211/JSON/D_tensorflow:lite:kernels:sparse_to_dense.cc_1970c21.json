"diff --git a/tensorflow/lite/kernels/sparse_to_dense.cc b/tensorflow/lite/kernels/sparse_to_dense.cc\nindex 4aea0f491bc..566a89ce75c 100644\n--- a/tensorflow/lite/kernels/sparse_to_dense.cc\n+++ b/tensorflow/lite/kernels/sparse_to_dense.cc\n@@ -143,12 +143,18 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n \n-  const TfLiteTensor* indices = GetInput(context, node, kIndicesTensor);\n-  const TfLiteTensor* output_shape =\n-      GetInput(context, node, kOutputShapeTensor);\n-  const TfLiteTensor* values = GetInput(context, node, kValueInputTensor);\n-  const TfLiteTensor* default_value =\n-      GetInput(context, node, kDefaultValueTensor);\n+  const TfLiteTensor* indices;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kIndicesTensor, &indices));\n+  const TfLiteTensor* output_shape;\n+  TF_LITE_ENSURE_OK(\n+      context, GetInputSafe(context, node, kOutputShapeTensor, &output_shape));\n+  const TfLiteTensor* values;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kValueInputTensor, &values));\n+  const TfLiteTensor* default_value;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDefaultValueTensor,\n+                                          &default_value));\n \n   // TODO(renjieliu): Handle validate_indices.\n \n@@ -178,7 +184,9 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_OK(\n       context, CheckDimensionsMatch(context, indices, output_shape, values));\n \n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n   output->type = values->type;\n   TF_LITE_ENSURE_EQ(context, NumDimensions(output_shape), 1);\n \n@@ -191,13 +199,21 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n \n template <typename T, typename TI>\n TfLiteStatus SparseToDenseImpl(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* indices = GetInput(context, node, kIndicesTensor);\n-  const TfLiteTensor* output_shape =\n-      GetInput(context, node, kOutputShapeTensor);\n-  const TfLiteTensor* values = GetInput(context, node, kValueInputTensor);\n-  const TfLiteTensor* default_value =\n-      GetInput(context, node, kDefaultValueTensor);\n-  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n+  const TfLiteTensor* indices;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kIndicesTensor, &indices));\n+  const TfLiteTensor* output_shape;\n+  TF_LITE_ENSURE_OK(\n+      context, GetInputSafe(context, node, kOutputShapeTensor, &output_shape));\n+  const TfLiteTensor* values;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kValueInputTensor, &values));\n+  const TfLiteTensor* default_value;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDefaultValueTensor,\n+                                          &default_value));\n+  TfLiteTensor* output;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, kOutputTensor, &output));\n \n   if (IsDynamicTensor(output)) {\n     TF_LITE_ENSURE_OK(context,\n@@ -238,8 +254,12 @@ TfLiteStatus EvalForIndexType(TfLiteContext* context, TfLiteNode* node,\n }\n \n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* indices = GetInput(context, node, kIndicesTensor);\n-  const TfLiteTensor* values = GetInput(context, node, kValueInputTensor);\n+  const TfLiteTensor* indices;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kIndicesTensor, &indices));\n+  const TfLiteTensor* values;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetInputSafe(context, node, kValueInputTensor, &values));\n \n   switch (values->type) {\n     case kTfLiteFloat32:"