"diff --git a/tensorflow/lite/kernels/unique.cc b/tensorflow/lite/kernels/unique.cc\nindex dd5c801b468..db2610fd642 100644\n--- a/tensorflow/lite/kernels/unique.cc\n+++ b/tensorflow/lite/kernels/unique.cc\n@@ -44,11 +44,14 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n \n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);\n-  const TfLiteTensor* input = GetInput(context, node, 0);\n-  TfLiteTensor* output_unique_tensor =\n-      GetOutput(context, node, kOutputUniqueTensor);\n-  TfLiteTensor* output_index_tensor =\n-      GetOutput(context, node, kOutputIndexTensor);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n+  TfLiteTensor* output_unique_tensor;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, kOutputUniqueTensor,\n+                                           &output_unique_tensor));\n+  TfLiteTensor* output_index_tensor;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, kOutputIndexTensor,\n+                                           &output_index_tensor));\n \n   // The op only supports 1D input.\n   TF_LITE_ENSURE_EQ(context, NumDimensions(input), 1);\n@@ -70,7 +73,8 @@ TfLiteStatus EvalImpl(TfLiteContext* context, const TfLiteTensor* input,\n   // Note that we prefer to use map than unordered_map as it showed less\n   // increase in the binary size.\n   std::map<T, int> unique_values;\n-  TfLiteTensor* output_indexes = GetOutput(context, node, 1);\n+  TfLiteTensor* output_indexes;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &output_indexes));\n   std::vector<T> output_values;\n   I* indexes = GetTensorData<I>(output_indexes);\n   const T* data = GetTensorData<T>(input);\n@@ -88,7 +92,8 @@ TfLiteStatus EvalImpl(TfLiteContext* context, const TfLiteTensor* input,\n     }\n   }\n   // Allocate output tensor.\n-  TfLiteTensor* unique_output = GetOutput(context, node, 0);\n+  TfLiteTensor* unique_output;\n+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &unique_output));\n   std::unique_ptr<TfLiteIntArray, void (*)(TfLiteIntArray*)> shape(\n       TfLiteIntArrayCreate(NumDimensions(input)), TfLiteIntArrayFree);\n   shape->data[0] = unique_values.size();\n@@ -127,8 +132,11 @@ TfLiteStatus EvalImpl(TfLiteContext* context, const TfLiteTensor* input,\n }  // namespace\n \n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n-  const TfLiteTensor* input = GetInput(context, node, 0);\n-  TfLiteTensor* output_index_tensor = GetOutput(context, node, 1);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n+  TfLiteTensor* output_index_tensor;\n+  TF_LITE_ENSURE_OK(context,\n+                    GetOutputSafe(context, node, 1, &output_index_tensor));\n   TF_LITE_ENSURE_EQ(context, NumElements(output_index_tensor),\n                     NumElements(input));\n "