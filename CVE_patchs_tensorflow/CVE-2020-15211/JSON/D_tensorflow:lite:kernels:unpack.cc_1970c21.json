"diff --git a/tensorflow/lite/kernels/unpack.cc b/tensorflow/lite/kernels/unpack.cc\nindex a41556ed079..685d19bdd07 100644\n--- a/tensorflow/lite/kernels/unpack.cc\n+++ b/tensorflow/lite/kernels/unpack.cc\n@@ -38,7 +38,8 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n   TF_LITE_ENSURE_EQ(context, NumOutputs(node), data->num);\n \n-  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n   TF_LITE_ENSURE(context, NumElements(input) > 0);\n   int axis = data->axis;\n   if (axis < 0) {\n@@ -67,7 +68,8 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n   TF_LITE_ENSURE_EQ(context, data->num, input_shape->data[axis]);\n   for (int i = 0; i < data->num; ++i) {\n     TfLiteIntArray* copied_output_shape = TfLiteIntArrayCopy(output_shape);\n-    TfLiteTensor* output = GetOutput(context, node, i);\n+    TfLiteTensor* output;\n+    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));\n     TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);\n     // Guarantee input/output quantization params match as we do not support\n     // rescaling of unpacked quantized tensors.\n@@ -98,7 +100,8 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n   const TfLiteUnpackParams* data =\n       reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);\n \n-  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n+  const TfLiteTensor* input;\n+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n   switch (input->type) {\n     case kTfLiteFloat32: {\n       UnpackImpl<float>(context, node, input, data->num, data->axis);"