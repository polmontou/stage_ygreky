"/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/experimental/delegates/coreml/builders/pad_op_builder.h\"\n\n#include \"tensorflow/lite/builtin_ops.h\"\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/experimental/delegates/coreml/builders/op_factory.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace delegates {\nnamespace coreml {\n\nconst char* PadOpBuilder::DebugName() {\n  if (str_debug_name_[0]) return str_debug_name_;\n  GetDebugName(padding_type_ == PadType::kPad ? \"PadOpBuilder (PAD)\"\n                                              : \"PadOpBuilder (MIRROR_PAD)\",\n               node_id_, str_debug_name_);\n  return str_debug_name_;\n}\n\nCoreML::Specification::NeuralNetworkLayer* PadOpBuilder::Build() {\n  layer_->set_name(DebugName());\n  if (padding_type_ == PadType::kPad) {\n    layer_->mutable_padding()->mutable_constant();\n  } else if (padding_type_ == PadType::kMirrorPad) {\n    layer_->mutable_padding()->mutable_reflection();\n  }\n  return layer_.release();\n}\n\n// padding is d x 2 tensor, where d is the dimension of input.\n// only paddings for width and height are considered.\nvoid PadOpBuilder::SetPadding(const TfLiteTensor* padding) {\n  const int32_t* padding_data = GetTensorData<int32_t>(padding);\n  for (int i = 1; i <= 2; ++i) {\n    auto* borderamount = layer_->mutable_padding()\n                             ->mutable_paddingamounts()\n                             ->add_borderamounts();\n    borderamount->set_startedgesize(padding_data[i * 2]);\n    borderamount->set_endedgesize(padding_data[i * 2 + 1]);\n  }\n}\n\nvoid PadOpBuilder::SetConstantValue(const TfLiteTensor* constant_value) {\n  layer_->mutable_padding()->mutable_constant()->set_value(\n      GetTensorData<float>(constant_value)[0]);\n}\n\nTfLiteStatus PadOpBuilder::RegisterInputs(const TfLiteIntArray* inputs,\n                                          TfLiteContext* context) {\n  if (!(inputs->size == 2 || inputs->size == 3)) {\n    TF_LITE_KERNEL_LOG(context, \"Wrong # of inputs to Padding!.\");\n    return kTfLiteError;\n  }\n  AddInput(inputs->data[0]);\n  SetPadding(GetInput(context, tflite_node_, 1));\n  if (inputs->size == 3) {\n    SetConstantValue(GetInput(context, tflite_node_, 2));\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus PadOpBuilder::RegisterOutputs(const TfLiteIntArray* outputs,\n                                           TfLiteContext* context) {\n  if (outputs->size != 1) {\n    TF_LITE_KERNEL_LOG(context, \"Wrong # of outputs to Padding!.\");\n    return kTfLiteError;\n  }\n  graph_builder_->AddTensorWithID(outputs->data[0], GetOutput(context));\n  return kTfLiteOk;\n}\n\nOpBuilder* CreatePadOpBuilder(GraphBuilder* graph_builder) {\n  return new PadOpBuilder(graph_builder, PadType::kPad);\n}\n\nOpBuilder* CreateMirrorPadOpBuilder(GraphBuilder* graph_builder) {\n  return new PadOpBuilder(graph_builder, PadType::kMirrorPad);\n}\n\nbool IsPadOpSupported(const TfLiteRegistration* registration,\n                      const TfLiteNode* node, TfLiteContext* context) {\n  // padding is d x 2 tensor, where d is the dimension of input.\n  const TfLiteTensor* padding;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &padding));\n  if (!IsConstantTensor(padding)) {\n    TF_LITE_KERNEL_LOG(context,\n                       \"%s: Only constant padding is supported for PAD.\",\n                       padding->name);\n    return false;\n  }\n  if (padding->dims->data[0] != 4 || padding->dims->data[1] != 2) {\n    TF_LITE_KERNEL_LOG(context, \"%s: Only 4D inputs are supported for PAD.\",\n                       padding->name);\n    return false;\n  }\n  const int32_t* padding_data = GetTensorData<int32_t>(padding);\n  if (!(padding_data[0] == 0 && padding_data[1] == 0)) {\n    TF_LITE_KERNEL_LOG(\n        context, \"%s: Padding for batch dimension is not supported in PAD.\",\n        padding->name);\n    return false;\n  }\n\n  if (!(padding_data[6] == 0 && padding_data[7] == 0)) {\n    TF_LITE_KERNEL_LOG(\n        context, \"%s: Padding for channel dimension is not supported in PAD.\",\n        padding->name);\n    return false;\n  }\n  return true;\n}\n\nbool IsMirrorPadOpSupported(const TfLiteRegistration* registration,\n                            const TfLiteNode* node, TfLiteContext* context) {\n  auto* params =\n      reinterpret_cast<TfLiteMirrorPaddingParams*>(node->builtin_data);\n  if (params->mode != kTfLiteMirrorPaddingReflect) {\n    TF_LITE_KERNEL_LOG(context,\n                       \"Only REFLECT mode is supported for MIRROR_PAD.\");\n    return false;\n  }\n  return IsPadOpSupported(registration, node, context);\n}\n\n}  // namespace coreml\n}  // namespace delegates\n}  // namespace tflite"