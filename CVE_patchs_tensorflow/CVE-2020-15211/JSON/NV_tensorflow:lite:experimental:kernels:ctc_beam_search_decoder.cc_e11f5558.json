"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <vector>\n\n#include \"flatbuffers/flexbuffers.h\"  // from @flatbuffers\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/experimental/kernels/ctc_beam_search.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/op_macros.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace experimental {\nnamespace ctc_beam_search_decoder {\n\nconstexpr int kInputsTensor = 0;\nconstexpr int kSequenceLengthTensor = 1;\n\ntypedef struct {\n  int beam_width;\n  int top_paths;\n  bool merge_repeated;\n} CTCBeamSearchDecoderParams;\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_CHECK(buffer != nullptr);\n  const uint8_t* buffer_t = reinterpret_cast<const uint8_t*>(buffer);\n  const flexbuffers::Map& m = flexbuffers::GetRoot(buffer_t, length).AsMap();\n\n  CTCBeamSearchDecoderParams* option = new CTCBeamSearchDecoderParams;\n  option->beam_width = m[\"beam_width\"].AsInt32();\n  option->top_paths = m[\"top_paths\"].AsInt32();\n  option->merge_repeated = m[\"merge_repeated\"].AsBool();\n\n  return option;\n}\n\nvoid Free(TfLiteContext* context, void* buffer) {\n  delete reinterpret_cast<CTCBeamSearchDecoderParams*>(buffer);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  const CTCBeamSearchDecoderParams* option =\n      reinterpret_cast<CTCBeamSearchDecoderParams*>(node->user_data);\n  const int top_paths = option->top_paths;\n  TF_LITE_ENSURE(context, option->beam_width >= top_paths);\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  // The outputs should be top_paths * 3 + 1.\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 3 * top_paths + 1);\n\n  const TfLiteTensor* inputs;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputsTensor, &inputs));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(inputs), 3);\n  // TensorFlow only supports float.\n  TF_LITE_ENSURE_EQ(context, inputs->type, kTfLiteFloat32);\n  const int batch_size = SizeOfDimension(inputs, 1);\n\n  const TfLiteTensor* sequence_length;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSequenceLengthTensor,\n                                          &sequence_length));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(sequence_length), 1);\n  TF_LITE_ENSURE_EQ(context, NumElements(sequence_length), batch_size);\n  // TensorFlow only supports int32.\n  TF_LITE_ENSURE_EQ(context, sequence_length->type, kTfLiteInt32);\n\n  // Resize decoded outputs.\n  // Do not resize indices & values cause we don't know the values yet.\n  for (int i = 0; i < top_paths; ++i) {\n    TfLiteTensor* indices;\n    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &indices));\n    SetTensorToDynamic(indices);\n    TfLiteTensor* values;\n    TF_LITE_ENSURE_OK(context,\n                      GetOutputSafe(context, node, i + top_paths, &values));\n    SetTensorToDynamic(values);\n    TfLiteTensor* output_shape;\n    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i + 2 * top_paths,\n                                             &output_shape));\n    SetTensorToDynamic(output_shape);\n  }\n\n  // Resize log probability outputs.\n  TfLiteTensor* log_probability_output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, top_paths * 3,\n                                           &log_probability_output));\n  TfLiteIntArray* log_probability_output_shape_array = TfLiteIntArrayCreate(2);\n  log_probability_output_shape_array->data[0] = batch_size;\n  log_probability_output_shape_array->data[1] = top_paths;\n  return context->ResizeTensor(context, log_probability_output,\n                               log_probability_output_shape_array);\n}\n\nTfLiteStatus Resize(TfLiteContext* context,\n                    std::initializer_list<int32_t> output_shape,\n                    TfLiteTensor* output) {\n  const int dimensions = output_shape.size();\n  TfLiteIntArray* output_shape_array = TfLiteIntArrayCreate(dimensions);\n  int i = 0;\n  for (const int v : output_shape) {\n    output_shape_array->data[i++] = v;\n  }\n  return context->ResizeTensor(context, output, output_shape_array);\n}\n\nTfLiteStatus StoreAllDecodedSequences(\n    TfLiteContext* context,\n    const std::vector<std::vector<std::vector<int>>>& sequences,\n    TfLiteNode* node, int top_paths) {\n  const int32_t batch_size = sequences.size();\n  std::vector<int32_t> num_entries(top_paths, 0);\n\n  // Calculate num_entries per path\n  for (const auto& batch_s : sequences) {\n    TF_LITE_ENSURE_EQ(context, batch_s.size(), top_paths);\n    for (int p = 0; p < top_paths; ++p) {\n      num_entries[p] += batch_s[p].size();\n    }\n  }\n\n  for (int p = 0; p < top_paths; ++p) {\n    const int32_t p_num = num_entries[p];\n\n    // Resize the decoded outputs.\n    TfLiteTensor* indices;\n    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, p, &indices));\n    TF_LITE_ENSURE_OK(context, Resize(context, {p_num, 2}, indices));\n\n    TfLiteTensor* values;\n    TF_LITE_ENSURE_OK(context,\n                      GetOutputSafe(context, node, p + top_paths, &values));\n    TF_LITE_ENSURE_OK(context, Resize(context, {p_num}, values));\n\n    TfLiteTensor* decoded_shape;\n    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, p + 2 * top_paths,\n                                             &decoded_shape));\n    TF_LITE_ENSURE_OK(context, Resize(context, {2}, decoded_shape));\n\n    int32_t max_decoded = 0;\n    int32_t offset = 0;\n\n    int32_t* indices_data = GetTensorData<int32_t>(indices);\n    int32_t* values_data = GetTensorData<int32_t>(values);\n    int32_t* decoded_shape_data = GetTensorData<int32_t>(decoded_shape);\n    for (int b = 0; b < batch_size; ++b) {\n      auto& p_batch = sequences[b][p];\n      int32_t num_decoded = p_batch.size();\n      max_decoded = std::max(max_decoded, num_decoded);\n\n      std::copy_n(p_batch.begin(), num_decoded, values_data + offset);\n      for (int32_t t = 0; t < num_decoded; ++t, ++offset) {\n        indices_data[offset * 2] = b;\n        indices_data[offset * 2 + 1] = t;\n      }\n    }\n\n    decoded_shape_data[0] = batch_size;\n    decoded_shape_data[1] = max_decoded;\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* inputs;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputsTensor, &inputs));\n  const TfLiteTensor* sequence_length;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSequenceLengthTensor,\n                                          &sequence_length));\n  const CTCBeamSearchDecoderParams* option =\n      reinterpret_cast<CTCBeamSearchDecoderParams*>(node->user_data);\n\n  const int max_time = SizeOfDimension(inputs, 0);\n  const int batch_size = SizeOfDimension(inputs, 1);\n  const int num_classes = SizeOfDimension(inputs, 2);\n\n  const int beam_width = option->beam_width;\n  const int top_paths = option->top_paths;\n  const bool merge_repeated = option->merge_repeated;\n\n  // Validate sequence length is less or equal than max time.\n  for (int i = 0; i < batch_size; ++i) {\n    TF_LITE_ENSURE(context,\n                   max_time >= GetTensorData<int32_t>(sequence_length)[i]);\n  }\n\n  // The following logic is implemented like\n  // tensorflow/core/kernels/ctc_decoder_ops.cc\n  std::vector<optimized_ops::TTypes<float>::UnalignedConstMatrix> input_list_t;\n\n  for (std::size_t t = 0; t < max_time; ++t) {\n    input_list_t.emplace_back(\n        GetTensorData<float>(inputs) + t * batch_size * num_classes, batch_size,\n        num_classes);\n  }\n\n  ::tflite::experimental::ctc::CTCBeamSearchDecoder<>::DefaultBeamScorer\n      beam_scorer;\n  ::tflite::experimental::ctc::CTCBeamSearchDecoder<> beam_search(\n      num_classes, beam_width, &beam_scorer, 1 /* batch_size */,\n      merge_repeated);\n\n  // Allocate temporary memory for holding chip operation data.\n  float* input_chip_t_data =\n      static_cast<float*>(malloc(num_classes * sizeof(float)));\n  Eigen::array<Eigen::DenseIndex, 1> dims;\n  dims[0] = num_classes;\n  optimized_ops::TTypes<float>::Flat input_chip_t(input_chip_t_data, dims);\n\n  std::vector<std::vector<std::vector<int>>> best_paths(batch_size);\n  std::vector<float> log_probs;\n\n  TfLiteTensor* log_probabilities;\n  TF_LITE_ENSURE_OK(\n      context, GetOutputSafe(context, node, 3 * top_paths, &log_probabilities));\n  float* log_probabilities_output = GetTensorData<float>(log_probabilities);\n\n  // Assumption: the blank index is num_classes - 1\n  for (int b = 0; b < batch_size; ++b) {\n    auto& best_paths_b = best_paths[b];\n    best_paths_b.resize(top_paths);\n    for (int t = 0; t < GetTensorData<int32_t>(sequence_length)[b]; ++t) {\n      input_chip_t = input_list_t[t].chip(b, 0);\n      auto input_bi =\n          Eigen::Map<const Eigen::ArrayXf>(input_chip_t.data(), num_classes);\n      beam_search.Step(input_bi);\n    }\n    TF_LITE_ENSURE(context, beam_search.TopPaths(top_paths, &best_paths_b,\n                                                 &log_probs, merge_repeated));\n    beam_search.Reset();\n\n    // Fill in log_probabilities output.\n    for (int bp = 0; bp < top_paths; ++bp) {\n      log_probabilities_output[b * top_paths + bp] = log_probs[bp];\n    }\n  }\n\n  free(input_chip_t_data);\n  return StoreAllDecodedSequences(context, best_paths, node, top_paths);\n}\n\n}  // namespace ctc_beam_search_decoder\n\nTfLiteRegistration* Register_CTC_BEAM_SEARCH_DECODER() {\n  static TfLiteRegistration r = {\n      ctc_beam_search_decoder::Init, ctc_beam_search_decoder::Free,\n      ctc_beam_search_decoder::Prepare, ctc_beam_search_decoder::Eval};\n  return &r;\n}\n\n}  // namespace experimental\n}  // namespace ops\n}  // namespace tflite"