"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <jni.h>\n\n#include <algorithm>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nJNIEXPORT jlong JNICALL\nJava_org_tensorflow_lite_InterpreterTest_getNativeHandleForDelegate(\n    JNIEnv* env, jclass clazz) {\n  // A simple op which outputs a tensor with values of 7.\n  static TfLiteRegistration registration = {\n      .init = nullptr,\n      .free = nullptr,\n      .prepare =\n          [](TfLiteContext* context, TfLiteNode* node) {\n            const TfLiteTensor* input;\n            TF_LITE_ENSURE_OK(context,\n                              tflite::GetInputSafe(context, node, 0, &input));\n            TfLiteTensor* output;\n            TF_LITE_ENSURE_OK(context,\n                              tflite::GetOutputSafe(context, node, 0, &output));\n            TfLiteIntArray* output_dims = TfLiteIntArrayCopy(input->dims);\n            output->type = kTfLiteFloat32;\n            return context->ResizeTensor(context, output, output_dims);\n          },\n      .invoke =\n          [](TfLiteContext* context, TfLiteNode* node) {\n            TfLiteTensor* output;\n            TF_LITE_ENSURE_OK(context,\n                              tflite::GetOutputSafe(context, node, 0, &output));\n            std::fill(output->data.f,\n                      output->data.f + tflite::NumElements(output), 7.0f);\n            return kTfLiteOk;\n          },\n      .profiling_string = nullptr,\n      .builtin_code = 0,\n      .custom_name = \"\",\n      .version = 1,\n  };\n  static TfLiteDelegate delegate = {\n      .data_ = nullptr,\n      .Prepare = [](TfLiteContext* context,\n                    TfLiteDelegate* delegate) -> TfLiteStatus {\n        TfLiteIntArray* execution_plan;\n        TF_LITE_ENSURE_STATUS(\n            context->GetExecutionPlan(context, &execution_plan));\n        context->ReplaceNodeSubsetsWithDelegateKernels(\n            context, registration, execution_plan, delegate);\n        // Now bind delegate buffer handles for all tensors.\n        for (size_t i = 0; i < context->tensors_size; ++i) {\n          context->tensors[i].delegate = delegate;\n          context->tensors[i].buffer_handle = static_cast<int>(i);\n        }\n        return kTfLiteOk;\n      },\n      .CopyFromBufferHandle = nullptr,\n      .CopyToBufferHandle = nullptr,\n      .FreeBufferHandle = nullptr,\n      .flags = kTfLiteDelegateFlagsAllowDynamicTensors,\n  };\n  return reinterpret_cast<jlong>(&delegate);\n}\n\nJNIEXPORT jlong JNICALL\nJava_org_tensorflow_lite_InterpreterTest_getNativeHandleForInvalidDelegate(\n    JNIEnv* env, jclass clazz) {\n  // A simple delegate that fails during preparation.\n  static TfLiteDelegate delegate = {\n      .data_ = nullptr,\n      .Prepare = [](TfLiteContext* context, TfLiteDelegate* delegate)\n          -> TfLiteStatus { return kTfLiteError; },\n      .CopyFromBufferHandle = nullptr,\n      .CopyToBufferHandle = nullptr,\n      .FreeBufferHandle = nullptr,\n      .flags = kTfLiteDelegateFlagsNone,\n  };\n  return reinterpret_cast<jlong>(&delegate);\n}\n\n#ifdef __cplusplus\n}  // extern \"C\"\n#endif  // __cplusplus"