"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace add_n {\n\nconstexpr int kInputTensor1 = 0;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  int num_inputs = NumInputs(node);\n  TF_LITE_ENSURE(context, num_inputs >= 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input1;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensor1, &input1));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  output->type = input1->type;\n\n  // Check that all input tensors have the same shape and type.\n  for (int i = kInputTensor1 + 1; i < num_inputs; ++i) {\n    const TfLiteTensor* input;\n    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i, &input));\n    TF_LITE_ENSURE(context, HaveSameShapes(input1, input));\n    TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input->type);\n  }\n\n  // Use the first input node's dimension to be the dimension of the output\n  // node.\n  TfLiteIntArray* input1_dims = input1->dims;\n  TfLiteIntArray* output_dims = TfLiteIntArrayCopy(input1_dims);\n  return context->ResizeTensor(context, output, output_dims);\n}\n\ntemplate <typename T>\nvoid EvalAddN(TfLiteContext* context, TfLiteNode* node) {\n  // TODO(haoliang): Initialize all_inputs only once during init.\n  VectorOfTensors<T> all_inputs(*context, *node->inputs);\n  // Safe to use unchecked since caller checks that tensor is valid\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  int num_inputs = NumInputs(node);\n  // Safe to use unchecked since caller checks that tensor is valid\n  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n  reference_ops::AddN<T>(GetTensorShape(input1), num_inputs, all_inputs.data(),\n                         GetTensorData<T>(output));\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input1;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensor1, &input1));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  if (output->type == kTfLiteFloat32) {\n    EvalAddN<float>(context, node);\n  } else if (output->type == kTfLiteInt32) {\n    EvalAddN<int32_t>(context, node);\n  } else {\n    context->ReportError(context,\n                         \"AddN only supports FLOAT32|INT32 now, got %s.\",\n                         TfLiteTypeGetName(output->type));\n    return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace add_n\n\nTfLiteRegistration* Register_ADD_N() {\n  static TfLiteRegistration r = {/*init*/ nullptr, /*free*/ nullptr,\n                                 add_n::Prepare, add_n::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"