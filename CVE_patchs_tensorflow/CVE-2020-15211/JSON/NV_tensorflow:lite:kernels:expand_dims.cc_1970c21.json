"\n#include <stdint.h>\n/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <string.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace expand_dims {\n\n// Input indices\nenum { kInput = 0, kAxis };\n\nnamespace {\nTfLiteStatus ExpandTensorDim(TfLiteContext* context, const TfLiteTensor& input,\n                             int axis, TfLiteTensor* output) {\n  const TfLiteIntArray& input_dims = *input.dims;\n  if (axis < 0) {\n    axis = input_dims.size + 1 + axis;\n  }\n  TF_LITE_ENSURE(context, axis <= input_dims.size);\n\n  TfLiteIntArray* output_dims = TfLiteIntArrayCreate(input_dims.size + 1);\n  for (int i = 0; i < output_dims->size; ++i) {\n    if (i < axis) {\n      output_dims->data[i] = input_dims.data[i];\n    } else if (i == axis) {\n      output_dims->data[i] = 1;\n    } else {\n      output_dims->data[i] = input_dims.data[i - 1];\n    }\n  }\n\n  return context->ResizeTensor(context, output, output_dims);\n}\n\nTfLiteStatus GetAxisValueFromTensor(TfLiteContext* context,\n                                    const TfLiteTensor& axis, int* axis_value) {\n  TF_LITE_ENSURE_EQ(context, NumElements(&axis), 1);\n  switch (axis.type) {\n    case kTfLiteInt32:\n      *axis_value = *GetTensorData<int32_t>(&axis);\n      return kTfLiteOk;\n    case kTfLiteInt64:\n      *axis_value = *GetTensorData<int64_t>(&axis);\n      return kTfLiteOk;\n    default:\n      return kTfLiteError;\n  }\n}\n\n}  // namespace\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInput, &input));\n  const TfLiteTensor* axis;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  output->type = input->type;\n  if (IsConstantTensor(axis)) {\n    int axis_value;\n    TF_LITE_ENSURE_OK(context,\n                      GetAxisValueFromTensor(context, *axis, &axis_value));\n    return ExpandTensorDim(context, *input, axis_value, output);\n  }\n  SetTensorToDynamic(output);\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  // Just copy input to output.\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInput, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* axis;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));\n  if (IsDynamicTensor(output)) {\n    int axis_value;\n    TF_LITE_ENSURE_OK(context,\n                      GetAxisValueFromTensor(context, *axis, &axis_value));\n    TF_LITE_ENSURE_OK(context,\n                      ExpandTensorDim(context, *input, axis_value, output));\n  }\n  if (output->type == kTfLiteString) {\n    TfLiteTensorRealloc(input->bytes, output);\n  }\n  memcpy(output->data.raw, input->data.raw, input->bytes);\n  return kTfLiteOk;\n}\n\n}  // namespace expand_dims\nTfLiteRegistration* Register_EXPAND_DIMS() {\n  static TfLiteRegistration r = {nullptr, nullptr, expand_dims::Prepare,\n                                 expand_dims::Eval};\n  return &r;\n}\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"