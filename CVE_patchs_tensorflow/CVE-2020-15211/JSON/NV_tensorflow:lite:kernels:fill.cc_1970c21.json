"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/string_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace fill {\n\nnamespace {\n\nconstexpr int kDimsTensor = 0;\nconstexpr int kValueTensor = 1;\nconstexpr int kOutputTensor = 0;\n\ntemplate <typename T>\nTfLiteStatus ResizeOutputImpl(TfLiteContext* context, const TfLiteTensor* dims,\n                              TfLiteTensor* output) {\n  TfLiteIntArray* output_shape = TfLiteIntArrayCreate(dims->dims->data[0]);\n  for (int i = 0; i < output_shape->size; ++i) {\n    T data = GetTensorData<T>(dims)[i];\n    if (data < 0) {\n      TfLiteIntArrayFree(output_shape);\n      context->ReportError(context, \"Fill dimensions must be >= 0\", dims->type);\n      return kTfLiteError;\n    }\n    output_shape->data[i] = data;\n  }\n  return context->ResizeTensor(context, output, output_shape);\n}\n\nTfLiteStatus ResizeOutput(TfLiteContext* context, const TfLiteTensor* dims,\n                          TfLiteTensor* output) {\n  switch (dims->type) {\n    case kTfLiteInt32:\n      return ResizeOutputImpl<int32_t>(context, dims, output);\n    case kTfLiteInt64:\n      return ResizeOutputImpl<int64_t>(context, dims, output);\n    default:\n      context->ReportError(\n          context,\n          \"Fill only currently supports int32, int64 for input 0, \"\n          \"got %d.\",\n          dims->type);\n      return kTfLiteError;\n  }\n}\n\n}  // namespace\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* dims;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDimsTensor, &dims));\n  const TfLiteTensor* value;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kValueTensor, &value));\n\n  // Make sure the 1st input tensor is 1-D.\n  TF_LITE_ENSURE_EQ(context, NumDimensions(dims), 1);\n\n  // Make sure the 1st input tensor is int32 or int64.\n  const auto dtype = dims->type;\n  TF_LITE_ENSURE(context, dtype == kTfLiteInt32 || dtype == kTfLiteInt64);\n\n  // Make sure the 2nd input tensor is a scalar.\n  TF_LITE_ENSURE_EQ(context, NumDimensions(value), 0);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  output->type = value->type;\n\n  if (IsConstantTensor(dims)) {\n    TF_LITE_ENSURE_OK(context, ResizeOutput(context, dims, output));\n  } else {\n    SetTensorToDynamic(output);\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus FillString(const TfLiteTensor* value, TfLiteTensor* output) {\n  DynamicBuffer buffer;\n  const auto string_ref = GetString(value, 0);\n  int n = 1;\n  for (int i = 0; i < output->dims->size; ++i) {\n    n *= output->dims->data[i];\n  }\n  for (int i = 0; i < n; ++i) {\n    buffer.AddString(string_ref.str, string_ref.len);\n  }\n  buffer.WriteToTensor(output, /*new_shape=*/nullptr);\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* value;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kValueTensor, &value));\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  if (IsDynamicTensor(output)) {\n    const TfLiteTensor* dims;\n    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDimsTensor, &dims));\n    TF_LITE_ENSURE_OK(context, ResizeOutput(context, dims, output));\n  }\n#define TF_LITE_FILL(data_type)                                               \\\n  reference_ops::Fill(GetTensorShape(value), GetTensorData<data_type>(value), \\\n                      GetTensorShape(output),                                 \\\n                      GetTensorData<data_type>(output))\n  switch (output->type) {\n    case kTfLiteInt32:\n      TF_LITE_FILL(int32_t);\n      break;\n    case kTfLiteInt64:\n      TF_LITE_FILL(int64_t);\n      break;\n    case kTfLiteFloat32:\n      TF_LITE_FILL(float);\n      break;\n    case kTfLiteBool:\n      TF_LITE_FILL(bool);\n      break;\n    case kTfLiteString:\n      FillString(value, output);\n      break;\n    default:\n      context->ReportError(\n          context,\n          \"Fill only currently supports int32, int64, float32, bool, string \"\n          \"for input 1, got %d.\",\n          value->type);\n      return kTfLiteError;\n  }\n#undef TF_LITE_FILL\n  return kTfLiteOk;\n}\n\n}  // namespace fill\n\nTfLiteRegistration* Register_FILL() {\n  static TfLiteRegistration r = {/*init=*/nullptr, /*free=*/nullptr,\n                                 fill::Prepare, fill::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"