"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stddef.h>\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/reference/binary_function.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\n// TODO(b/117523611): We should factor out a binary_op and put binary ops there.\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace floor_mod {\nnamespace {\n\n// Input/output tensor index.\nconstexpr int kInputTensor1 = 0;\nconstexpr int kInputTensor2 = 1;\nconstexpr int kOutputTensor = 0;\n\n// Op data for floor_mod op.\nstruct OpData {\n  bool requires_broadcast;\n};\n\n// TODO(b/117912880): Support quantization.\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  auto* data = new OpData;\n  data->requires_broadcast = false;\n  return data;\n}\n\nvoid Free(TfLiteContext* context, void* buffer) {\n  delete reinterpret_cast<OpData*>(buffer);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  // Reinterprete the opaque data provided by user.\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  const TfLiteTensor* input1;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensor1, &input1));\n  const TfLiteTensor* input2;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensor2, &input2));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);\n\n  const TfLiteType type = input1->type;\n  if (type != kTfLiteInt32 && type != kTfLiteFloat32 && type != kTfLiteInt64) {\n    context->ReportError(context, \"Type '%s' is not supported by floor_mod.\",\n                         TfLiteTypeGetName(type));\n    return kTfLiteError;\n  }\n  output->type = type;\n\n  data->requires_broadcast = !HaveSameShapes(input1, input2);\n\n  TfLiteIntArray* output_size = nullptr;\n  if (data->requires_broadcast) {\n    TF_LITE_ENSURE_OK(context, CalculateShapeForBroadcast(\n                                   context, input1, input2, &output_size));\n  } else {\n    output_size = TfLiteIntArrayCopy(input1->dims);\n  }\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <typename T>\nTfLiteStatus EvalImpl(TfLiteContext* context, bool requires_broadcast,\n                      const TfLiteTensor* input1, const TfLiteTensor* input2,\n                      TfLiteTensor* output) {\n  const T* denominator_data = GetTensorData<T>(input2);\n\n  if (input2->type == kTfLiteInt32 || input2->type == kTfLiteInt64) {\n    // Validate the denominator only for integer.\n    const int num_elements = NumElements(input2);\n    for (int i = 0; i < num_elements; ++i) {\n      if (denominator_data[i] == 0) {\n        context->ReportError(context, \"Division by 0\");\n        return kTfLiteError;\n      }\n    }\n  }\n  if (requires_broadcast) {\n    reference_ops::BroadcastBinaryFunction4DSlow<T, T, T>(\n        GetTensorShape(input1), GetTensorData<T>(input1),\n        GetTensorShape(input2), denominator_data, GetTensorShape(output),\n        GetTensorData<T>(output), reference_ops::FloorMod<T>);\n  } else {\n    reference_ops::BinaryFunction<T, T, T>(\n        GetTensorShape(input1), GetTensorData<T>(input1),\n        GetTensorShape(input2), GetTensorData<T>(input2),\n        GetTensorShape(output), GetTensorData<T>(output),\n        reference_ops::FloorMod<T>);\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  const TfLiteTensor* input1;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensor1, &input1));\n  const TfLiteTensor* input2;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensor2, &input2));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  switch (input1->type) {\n    case kTfLiteInt32: {\n      return EvalImpl<int32_t>(context, data->requires_broadcast, input1,\n                               input2, output);\n    }\n    case kTfLiteInt64: {\n      return EvalImpl<int64_t>(context, data->requires_broadcast, input1,\n                               input2, output);\n    }\n    case kTfLiteFloat32: {\n      return EvalImpl<float>(context, data->requires_broadcast, input1, input2,\n                             output);\n    }\n    default: {\n      context->ReportError(context, \"Type '%s' is not supported by floor_mod.\",\n                           TfLiteTypeGetName(input1->type));\n      return kTfLiteError;\n    }\n  }\n}\n\n}  // namespace\n}  // namespace floor_mod\n\nTfLiteRegistration* Register_FLOOR_MOD() {\n  // Init, Free, Prepare, Eval are satisfying the Interface required by\n  // TfLiteRegistration.\n  static TfLiteRegistration r = {floor_mod::Init, floor_mod::Free,\n                                 floor_mod::Prepare, floor_mod::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"