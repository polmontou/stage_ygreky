"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/mfcc.h\"\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include <vector>\n\n#include \"flatbuffers/flexbuffers.h\"  // from @flatbuffers\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/mfcc_dct.h\"\n#include \"tensorflow/lite/kernels/internal/mfcc_mel_filterbank.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace custom {\nnamespace mfcc {\n\nenum KernelType {\n  kReference,\n};\n\ntypedef struct {\n  float upper_frequency_limit;\n  float lower_frequency_limit;\n  int filterbank_channel_count;\n  int dct_coefficient_count;\n} TfLiteMfccParams;\n\nconstexpr int kInputTensorWav = 0;\nconstexpr int kInputTensorRate = 1;\nconstexpr int kOutputTensor = 0;\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  auto* data = new TfLiteMfccParams;\n\n  const uint8_t* buffer_t = reinterpret_cast<const uint8_t*>(buffer);\n\n  const flexbuffers::Map& m = flexbuffers::GetRoot(buffer_t, length).AsMap();\n  data->upper_frequency_limit = m[\"upper_frequency_limit\"].AsInt64();\n  data->lower_frequency_limit = m[\"lower_frequency_limit\"].AsInt64();\n  data->filterbank_channel_count = m[\"filterbank_channel_count\"].AsInt64();\n  data->dct_coefficient_count = m[\"dct_coefficient_count\"].AsInt64();\n  return data;\n}\n\nvoid Free(TfLiteContext* context, void* buffer) {\n  delete reinterpret_cast<TfLiteMfccParams*>(buffer);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLiteMfccParams*>(node->user_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input_wav;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorWav, &input_wav));\n  const TfLiteTensor* input_rate;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorRate, &input_rate));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input_wav), 3);\n  TF_LITE_ENSURE_EQ(context, NumElements(input_rate), 1);\n\n  TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);\n  TF_LITE_ENSURE_TYPES_EQ(context, input_wav->type, output->type);\n  TF_LITE_ENSURE_TYPES_EQ(context, input_rate->type, kTfLiteInt32);\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(3);\n  output_size->data[0] = input_wav->dims->data[0];\n  output_size->data[1] = input_wav->dims->data[1];\n  output_size->data[2] = params->dct_coefficient_count;\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\n// Input is a single squared-magnitude spectrogram frame. The input spectrum\n// is converted to linear magnitude and weighted into bands using a\n// triangular mel filterbank, and a discrete cosine transform (DCT) of the\n// values is taken. Output is populated with the lowest dct_coefficient_count\n// of these values.\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLiteMfccParams*>(node->user_data);\n\n  const TfLiteTensor* input_wav;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorWav, &input_wav));\n  const TfLiteTensor* input_rate;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorRate, &input_rate));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  const int32 sample_rate = *GetTensorData<int>(input_rate);\n\n  const int spectrogram_channels = input_wav->dims->data[2];\n  const int spectrogram_samples = input_wav->dims->data[1];\n  const int audio_channels = input_wav->dims->data[0];\n\n  internal::Mfcc mfcc;\n  mfcc.set_upper_frequency_limit(params->upper_frequency_limit);\n  mfcc.set_lower_frequency_limit(params->lower_frequency_limit);\n  mfcc.set_filterbank_channel_count(params->filterbank_channel_count);\n  mfcc.set_dct_coefficient_count(params->dct_coefficient_count);\n\n  mfcc.Initialize(spectrogram_channels, sample_rate);\n\n  const float* spectrogram_flat = GetTensorData<float>(input_wav);\n  float* output_flat = GetTensorData<float>(output);\n\n  for (int audio_channel = 0; audio_channel < audio_channels; ++audio_channel) {\n    for (int spectrogram_sample = 0; spectrogram_sample < spectrogram_samples;\n         ++spectrogram_sample) {\n      const float* sample_data =\n          spectrogram_flat +\n          (audio_channel * spectrogram_samples * spectrogram_channels) +\n          (spectrogram_sample * spectrogram_channels);\n      std::vector<double> mfcc_input(sample_data,\n                                     sample_data + spectrogram_channels);\n      std::vector<double> mfcc_output;\n      mfcc.Compute(mfcc_input, &mfcc_output);\n      TF_LITE_ENSURE_EQ(context, params->dct_coefficient_count,\n                        mfcc_output.size());\n      float* output_data = output_flat +\n                           (audio_channel * spectrogram_samples *\n                            params->dct_coefficient_count) +\n                           (spectrogram_sample * params->dct_coefficient_count);\n      for (int i = 0; i < params->dct_coefficient_count; ++i) {\n        output_data[i] = mfcc_output[i];\n      }\n    }\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace mfcc\n\nTfLiteRegistration* Register_MFCC() {\n  static TfLiteRegistration r = {mfcc::Init, mfcc::Free, mfcc::Prepare,\n                                 mfcc::Eval<mfcc::kReference>};\n  return &r;\n}\n\n}  // namespace custom\n}  // namespace ops\n}  // namespace tflite"