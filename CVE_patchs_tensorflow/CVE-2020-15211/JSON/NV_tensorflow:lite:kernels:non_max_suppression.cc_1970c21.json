"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/non_max_suppression.h\"\n\n#include <initializer_list>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace non_max_suppression {\n\n// Boxes in format [y1, x1, y2, x2]. Shape: [num_boxes, 4]\n// Type: Float.\nconstexpr int kInputTensorBoxes = 0;\n// Shape: [num_boxes]\n// Type: Float.\nconstexpr int kInputTensorScores = 1;\n// Max number of boxes to output. Actual output can be smaller.\n// The output tensors (indices/scores) are of this length.\n// Type: Int32.\nconstexpr int kInputTensorMaxOutputSize = 2;\n// Type: Float.\nconstexpr int kInputTensorIouThreshold = 3;\n// Type: Float.\nconstexpr int kInputTensorScoreThreshold = 4;\n// Only applies to NON_MAX_SUPPRESSION_V5.\n// Type: Float.\nconstexpr int kInputTensorSigma = 5;\n\n// Indices of selected boxes. Shape: [num_selected_indices]\n// Type: Int32.\nconstexpr int kNMSOutputTensorSelectedIndices = 0;\n// Type: Int32.\nconstexpr int kNMSOutputTensorNumSelectedIndices = 1;\n\n// Indices of selected boxes. Shape: [num_selected_indices]\n// Type: Int32.\nconstexpr int kSoftNMSOutputTensorSelectedIndices = 0;\n// Scores of selected boxes. Shape: [num_selected_indices]\n// Type: Float.\nconstexpr int kSoftNMSOutputTensorSelectedScores = 1;\n// Type: Int32.\nconstexpr int kSoftNMSOutputTensorNumSelectedIndices = 2;\n\nTfLiteStatus SetTensorSizes(TfLiteContext* context, TfLiteTensor* tensor,\n                            std::initializer_list<int> values) {\n  TfLiteIntArray* size = TfLiteIntArrayCreate(values.size());\n  int index = 0;\n  for (const auto& v : values) {\n    size->data[index++] = v;\n  }\n  return context->ResizeTensor(context, tensor, size);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  const int num_inputs = NumInputs(node);\n  const bool is_soft_nms = num_inputs == 6;\n  if (num_inputs != 5 && num_inputs != 6) {\n    context->ReportError(context, \"Found NMS op with invalid num inputs: %d\",\n                         NumInputs(node));\n    return kTfLiteError;\n  }\n\n  // Boxes & Scores.\n  const TfLiteTensor* input_boxes;\n  TF_LITE_ENSURE_OK(\n      context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));\n  TF_LITE_ENSURE_EQ(context, input_boxes->type, kTfLiteFloat32);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input_boxes), 2);\n  TF_LITE_ENSURE_EQ(context, SizeOfDimension(input_boxes, 1), 4);\n  const int num_boxes = SizeOfDimension(input_boxes, 0);\n  const TfLiteTensor* input_scores;\n  TF_LITE_ENSURE_OK(\n      context, GetInputSafe(context, node, kInputTensorScores, &input_scores));\n  TF_LITE_ENSURE_EQ(context, input_scores->type, kTfLiteFloat32);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input_scores), 1);\n  TF_LITE_ENSURE_EQ(context, num_boxes, SizeOfDimension(input_scores, 0));\n\n  // Max output size.\n  const TfLiteTensor* input_max_output_size;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorMaxOutputSize,\n                                 &input_max_output_size));\n  TF_LITE_ENSURE_EQ(context, input_max_output_size->type, kTfLiteInt32);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input_max_output_size), 0);\n  const bool is_max_output_size_const = IsConstantTensor(input_max_output_size);\n  int max_output_size_value = 0;\n  if (is_max_output_size_const) {\n    max_output_size_value = *GetTensorData<int>(input_max_output_size);\n    TF_LITE_ENSURE(context, (max_output_size_value >= 0));\n  }\n\n  // IoU & Score thresholds.\n  const TfLiteTensor* input_iou_threshold;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorIouThreshold,\n                                 &input_iou_threshold));\n  TF_LITE_ENSURE_EQ(context, input_iou_threshold->type, kTfLiteFloat32);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input_iou_threshold), 0);\n  const TfLiteTensor* input_score_threshold;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorScoreThreshold,\n                                 &input_score_threshold));\n  TF_LITE_ENSURE_EQ(context, input_iou_threshold->type, kTfLiteFloat32);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input_score_threshold), 0);\n\n  if (is_soft_nms) {\n    const TfLiteTensor* input_sigma;\n    TF_LITE_ENSURE_OK(\n        context, GetInputSafe(context, node, kInputTensorSigma, &input_sigma));\n    TF_LITE_ENSURE_EQ(context, input_sigma->type, kTfLiteFloat32);\n    TF_LITE_ENSURE_EQ(context, NumDimensions(input_sigma), 0);\n\n    TF_LITE_ENSURE_EQ(context, NumOutputs(node), 3);\n    TfLiteTensor* output_selected_indices;\n    TF_LITE_ENSURE_OK(\n        context,\n        GetOutputSafe(context, node, kSoftNMSOutputTensorSelectedIndices,\n                      &output_selected_indices));\n    output_selected_indices->type = kTfLiteInt32;\n    TfLiteTensor* output_selected_scores;\n    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node,\n                                             kSoftNMSOutputTensorSelectedScores,\n                                             &output_selected_scores));\n    output_selected_scores->type = kTfLiteFloat32;\n    TfLiteTensor* output_num_selected_indices;\n    TF_LITE_ENSURE_OK(\n        context,\n        GetOutputSafe(context, node, kSoftNMSOutputTensorNumSelectedIndices,\n                      &output_num_selected_indices));\n    output_num_selected_indices->type = kTfLiteInt32;\n    SetTensorSizes(context, output_num_selected_indices, {});\n\n    if (is_max_output_size_const) {\n      SetTensorSizes(context, output_selected_indices, {max_output_size_value});\n      SetTensorSizes(context, output_selected_scores, {max_output_size_value});\n    } else {\n      SetTensorToDynamic(output_selected_indices);\n      SetTensorToDynamic(output_selected_scores);\n    }\n  } else {\n    TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);\n    TfLiteTensor* output_selected_indices;\n    TF_LITE_ENSURE_OK(\n        context, GetOutputSafe(context, node, kNMSOutputTensorSelectedIndices,\n                               &output_selected_indices));\n    output_selected_indices->type = kTfLiteInt32;\n    TfLiteTensor* output_num_selected_indices;\n    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node,\n                                             kNMSOutputTensorNumSelectedIndices,\n                                             &output_num_selected_indices));\n    output_num_selected_indices->type = kTfLiteInt32;\n    SetTensorSizes(context, output_num_selected_indices, {});\n\n    if (is_max_output_size_const) {\n      SetTensorSizes(context, output_selected_indices, {max_output_size_value});\n    } else {\n      SetTensorToDynamic(output_selected_indices);\n    }\n  }\n\n  return kTfLiteOk;\n}\n\n// If num_selected_indices < max_output_size, the output tensor can contain\n// garbage values initially present in memory. This causes segfault in\n// downstream ops such as GATHER, since one of the outputs denotes indices and\n// int garbage values can be pretty large. This method zeroes-out the remaining\n// values.\n// NOTE: We ensure memory being reset is valid, by setting pertinent output\n// tensors to max_output_size length in Prepare.\nvoid ResetUnusedElementsToZeroes(const int max_output_size,\n                                 const int num_selected_indices,\n                                 int* selected_indices,\n                                 float* selected_scores) {\n  for (int i = num_selected_indices; i < max_output_size; ++i) {\n    selected_indices[i] = 0;\n    if (selected_scores) {\n      selected_scores[i] = 0.0;\n    }\n  }\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const bool is_soft_nms = NumInputs(node) == 6;\n\n  const TfLiteTensor* input_boxes;\n  TF_LITE_ENSURE_OK(\n      context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));\n  const int num_boxes = SizeOfDimension(input_boxes, 0);\n  const TfLiteTensor* input_scores;\n  TF_LITE_ENSURE_OK(\n      context, GetInputSafe(context, node, kInputTensorScores, &input_scores));\n  const TfLiteTensor* input_max_output_size;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorMaxOutputSize,\n                                 &input_max_output_size));\n  const int max_output_size_value = *GetTensorData<int>(input_max_output_size);\n  TF_LITE_ENSURE(context, (max_output_size_value >= 0));\n  const bool is_max_output_size_const = IsConstantTensor(input_max_output_size);\n  const TfLiteTensor* input_iou_threshold;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorIouThreshold,\n                                 &input_iou_threshold));\n  const float iou_threshold = *GetTensorData<float>(input_iou_threshold);\n  const TfLiteTensor* input_score_threshold;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorScoreThreshold,\n                                 &input_score_threshold));\n  const float score_threshold = *GetTensorData<float>(input_score_threshold);\n\n  TfLiteTensor* output_selected_indices = nullptr;\n  TfLiteTensor* output_selected_scores = nullptr;\n  TfLiteTensor* output_num_selected_indices = nullptr;\n\n  if (is_soft_nms) {\n    const TfLiteTensor* input_sigma;\n    TF_LITE_ENSURE_OK(\n        context, GetInputSafe(context, node, kInputTensorSigma, &input_sigma));\n    const float soft_nms_sigma = *GetTensorData<float>(input_sigma);\n    if (soft_nms_sigma < 0) {\n      context->ReportError(context, \"Invalid sigma value for soft NMS: %f\",\n                           soft_nms_sigma);\n      return kTfLiteError;\n    }\n\n    TF_LITE_ENSURE_OK(\n        context,\n        GetOutputSafe(context, node, kSoftNMSOutputTensorSelectedIndices,\n                      &output_selected_indices));\n    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node,\n                                             kSoftNMSOutputTensorSelectedScores,\n                                             &output_selected_scores));\n    TF_LITE_ENSURE_OK(\n        context,\n        GetOutputSafe(context, node, kSoftNMSOutputTensorNumSelectedIndices,\n                      &output_num_selected_indices));\n    if (!is_max_output_size_const) {\n      SetTensorSizes(context, output_selected_indices, {max_output_size_value});\n      SetTensorSizes(context, output_selected_scores, {max_output_size_value});\n    }\n    reference_ops::NonMaxSuppression(\n        input_boxes->data.f, num_boxes, input_scores->data.f,\n        max_output_size_value, iou_threshold, score_threshold, soft_nms_sigma,\n        output_selected_indices->data.i32, output_selected_scores->data.f,\n        output_num_selected_indices->data.i32);\n    ResetUnusedElementsToZeroes(\n        max_output_size_value, *output_num_selected_indices->data.i32,\n        output_selected_indices->data.i32, output_selected_scores->data.f);\n  } else {\n    TF_LITE_ENSURE_OK(\n        context, GetOutputSafe(context, node, kNMSOutputTensorSelectedIndices,\n                               &output_selected_indices));\n    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node,\n                                             kNMSOutputTensorNumSelectedIndices,\n                                             &output_num_selected_indices));\n    if (!is_max_output_size_const) {\n      SetTensorSizes(context, output_selected_indices, {max_output_size_value});\n    }\n    reference_ops::NonMaxSuppression(\n        input_boxes->data.f, num_boxes, input_scores->data.f,\n        max_output_size_value, iou_threshold, score_threshold, /**sigma=**/ 0.0,\n        output_selected_indices->data.i32, /**selected_scores=**/ nullptr,\n        output_num_selected_indices->data.i32);\n    ResetUnusedElementsToZeroes(max_output_size_value,\n                                *output_num_selected_indices->data.i32,\n                                output_selected_indices->data.i32, nullptr);\n  }\n\n  return kTfLiteOk;\n}\n}  // namespace non_max_suppression\n\nTfLiteRegistration* Register_NON_MAX_SUPPRESSION_V4() {\n  static TfLiteRegistration r = {nullptr, nullptr, non_max_suppression::Prepare,\n                                 non_max_suppression::Eval};\n  return &r;\n}\n\nTfLiteRegistration* Register_NON_MAX_SUPPRESSION_V5() {\n  static TfLiteRegistration r = {nullptr, nullptr, non_max_suppression::Prepare,\n                                 non_max_suppression::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"