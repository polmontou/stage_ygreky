"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace pack {\nnamespace {\n\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TfLitePackParams* data =\n      reinterpret_cast<TfLitePackParams*>(node->builtin_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), data->values_count);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input0;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input0));\n  const int dimension_size = NumDimensions(input0) + 1;\n  if (data->axis < 0) {\n    data->axis += dimension_size;\n  }\n  TF_LITE_ENSURE(context, NumDimensions(input0) >= data->axis);\n  TF_LITE_ENSURE(context, data->axis >= 0);\n\n  if (input0->type != kTfLiteInt32 && input0->type != kTfLiteFloat32 &&\n      input0->type != kTfLiteUInt8 && input0->type != kTfLiteInt8 &&\n      input0->type != kTfLiteInt16 && input0->type != kTfLiteInt64) {\n    context->ReportError(context, \"Type '%s' is not supported by pack.\",\n                         TfLiteTypeGetName(input0->type));\n    return kTfLiteError;\n  }\n  // Make sure all inputs have the same shape and type.\n  for (int i = 1; i < data->values_count; ++i) {\n    const TfLiteTensor* input;\n    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i, &input));\n    TF_LITE_ENSURE(context, HaveSameShapes(input0, input));\n    TF_LITE_ENSURE_TYPES_EQ(context, input0->type, input->type);\n  }\n\n  // Resize output. rank R will become rank R + 1\n  const TfLiteIntArray* input_shape = input0->dims;\n  TfLiteIntArray* output_shape = TfLiteIntArrayCreate(dimension_size);\n  int i = 0;\n  for (int index = 0; index < dimension_size; ++index) {\n    if (index == data->axis) {\n      output_shape->data[index] = data->values_count;\n    } else {\n      output_shape->data[index] = input_shape->data[i++];\n    }\n  }\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input0->type);\n\n  // Guarantee input/output quantization params match as we do not support\n  // packing quantized tensors.\n  for (int i = 0; i < data->values_count; i++) {\n    const TfLiteTensor* input;\n    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i, &input));\n    TF_LITE_ENSURE_EQ(context, input->params.zero_point,\n                      output->params.zero_point);\n    TF_LITE_ENSURE_EQ(context, input->params.scale, output->params.scale);\n  }\n\n  return context->ResizeTensor(context, output, output_shape);\n}\n\ntemplate <typename T>\nTfLiteStatus PackImpl(TfLiteContext* context, TfLiteNode* node,\n                      TfLiteTensor* output, int values_count, int axis) {\n  TF_LITE_ENSURE(context, axis >= 0);\n\n  VectorOfTensors<T> all_inputs(*context, *node->inputs);\n  tflite::PackParams op_params;\n  op_params.axis = axis;\n  op_params.inputs_count = values_count;\n\n  reference_ops::Pack<T>(op_params, all_inputs.shapes(), all_inputs.data(),\n                         GetTensorShape(output), GetTensorData<T>(output));\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLitePackParams* data =\n      reinterpret_cast<TfLitePackParams*>(node->builtin_data);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  switch (output->type) {\n    case kTfLiteFloat32: {\n      return PackImpl<float>(context, node, output, data->values_count,\n                             data->axis);\n    }\n    case kTfLiteUInt8: {\n      return PackImpl<uint8_t>(context, node, output, data->values_count,\n                               data->axis);\n    }\n    case kTfLiteInt8: {\n      return PackImpl<int8_t>(context, node, output, data->values_count,\n                              data->axis);\n    }\n    case kTfLiteInt16: {\n      return PackImpl<int16_t>(context, node, output, data->values_count,\n                               data->axis);\n    }\n    case kTfLiteInt32: {\n      return PackImpl<int32_t>(context, node, output, data->values_count,\n                               data->axis);\n    }\n    case kTfLiteInt64: {\n      return PackImpl<int64_t>(context, node, output, data->values_count,\n                               data->axis);\n    }\n    default: {\n      context->ReportError(context, \"Type '%s' is not supported by pack.\",\n                           TfLiteTypeGetName(output->type));\n      return kTfLiteError;\n    }\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace\n}  // namespace pack\n\nTfLiteRegistration* Register_PACK() {\n  static TfLiteRegistration r = {nullptr, nullptr, pack::Prepare, pack::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"