"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stddef.h>\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace pow {\nnamespace {\n\n// Input/output tensor index.\nconstexpr int kInputTensor1 = 0;\nconstexpr int kInputTensor2 = 1;\nconstexpr int kOutputTensor = 0;\n\n// Op data for pow op.\nstruct OpData {\n  bool requires_broadcast;\n};\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  auto* data = new OpData;\n  data->requires_broadcast = false;\n  return data;\n}\n\nvoid Free(TfLiteContext* context, void* buffer) {\n  delete reinterpret_cast<OpData*>(buffer);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  const TfLiteTensor* input1;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensor1, &input1));\n  const TfLiteTensor* input2;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensor2, &input2));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);\n\n  const TfLiteType type = input1->type;\n  if (type != kTfLiteInt32 && type != kTfLiteFloat32) {\n    TF_LITE_KERNEL_LOG(context, \"Unsupported data type %s.\",\n                       TfLiteTypeGetName(type));\n    return kTfLiteError;\n  }\n  output->type = type;\n\n  data->requires_broadcast = !HaveSameShapes(input1, input2);\n\n  TfLiteIntArray* output_size = nullptr;\n  if (data->requires_broadcast) {\n    TF_LITE_ENSURE_OK(context, CalculateShapeForBroadcast(\n                                   context, input1, input2, &output_size));\n  } else {\n    output_size = TfLiteIntArrayCopy(input1->dims);\n  }\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <typename T>\nvoid PowImpl(const TfLiteTensor* input1, const TfLiteTensor* input2,\n             TfLiteTensor* output, bool requires_broadcast) {\n  if (requires_broadcast) {\n    optimized_ops::BroadcastPow4D(\n        GetTensorShape(input1), GetTensorData<T>(input1),\n        GetTensorShape(input2), GetTensorData<T>(input2),\n        GetTensorShape(output), GetTensorData<T>(output));\n  } else {\n    reference_ops::Pow(GetTensorShape(input1), GetTensorData<T>(input1),\n                       GetTensorShape(input2), GetTensorData<T>(input2),\n                       GetTensorShape(output), GetTensorData<T>(output));\n  }\n}\n\nTfLiteStatus CheckValue(TfLiteContext* context, const TfLiteTensor* input) {\n  const int64_t num_elements = NumElements(input);\n  const int32_t* data = GetTensorData<int32_t>(input);\n  for (int i = 0; i < num_elements; ++i) {\n    if (data[i] < 0) {\n      context->ReportError(context,\n                           \"POW does not support negative value for int32.\");\n      return kTfLiteError;\n    }\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  const TfLiteTensor* input1;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensor1, &input1));\n  const TfLiteTensor* input2;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensor2, &input2));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  switch (output->type) {\n    case kTfLiteInt32: {\n      // TensorFlow does not support negative for int32.\n      TF_LITE_ENSURE_OK(context, CheckValue(context, input2));\n      PowImpl<int32_t>(input1, input2, output, data->requires_broadcast);\n      break;\n    }\n    case kTfLiteFloat32: {\n      PowImpl<float>(input1, input2, output, data->requires_broadcast);\n      break;\n    }\n    default: {\n      context->ReportError(context, \"Unsupported data type: %d\", output->type);\n      return kTfLiteError;\n    }\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace\n}  // namespace pow\n\nTfLiteRegistration* Register_POW() {\n  static TfLiteRegistration r = {pow::Init, pow::Free, pow::Prepare, pow::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"