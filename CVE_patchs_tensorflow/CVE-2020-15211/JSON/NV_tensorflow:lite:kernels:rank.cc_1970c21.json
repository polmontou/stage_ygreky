"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace rank {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  output->type = kTfLiteInt32;\n\n  // By design, the input shape is always known at the time of Prepare, even\n  // if the preceding op that generates |input| is dynamic. Thus, we can\n  // always compute the rank immediately, without waiting for Eval.\n  SetTensorToPersistentRo(output);\n\n  // Rank produces a 0-D int32 Tensor representing the rank of input.\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(0);\n  TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_size));\n\n  TF_LITE_ENSURE_EQ(context, NumDimensions(output), 0);\n\n  // Immediately propagate the known rank to the output tensor. This allows\n  // downstream ops that rely on the value to use it during prepare.\n  if (output->type == kTfLiteInt32) {\n    int32_t* output_data = GetTensorData<int32_t>(output);\n    *output_data = NumDimensions(input);\n  } else {\n    return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  return kTfLiteOk;\n}\n\n}  // namespace rank\n\nTfLiteRegistration* Register_RANK() {\n  static TfLiteRegistration r = {nullptr, nullptr, rank::Prepare, rank::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"