"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/neon_check.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace resize_bilinear {\n\n// This file has three implementation of RESIZE_BILINEAR.\nenum KernelType {\n  kReference,\n  kGenericOptimized,  // Neon-free\n  kNeonOptimized,\n};\n\nconstexpr int kInputTensor = 0;\nconstexpr int kSizeTensor = 1;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus ResizeOutputTensor(TfLiteContext* context,\n                                const TfLiteTensor* input,\n                                const TfLiteTensor* size,\n                                TfLiteTensor* output) {\n  const int32* size_data = GetTensorData<int32>(size);\n  // Sanity check, the up/down sampling size should always be positive.\n  TF_LITE_ENSURE(context, size_data[0] > 0);\n  TF_LITE_ENSURE(context, size_data[1] > 0);\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);\n  output_size->data[0] = input->dims->data[0];\n  output_size->data[1] = size_data[0];\n  output_size->data[2] = size_data[1];\n  output_size->data[3] = input->dims->data[3];\n  return context->ResizeTensor(context, output, output_size);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const TfLiteTensor* size;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSizeTensor, &size));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  // TODO(ahentz): Our current implementations rely on the inputs being 4D.\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(size), 1);\n\n  TF_LITE_ENSURE_EQ(context, size->type, kTfLiteInt32);\n  // ResizeBilinear creates a float tensor even when the input is made of\n  // integers.\n  output->type = input->type;\n\n  if (!IsConstantTensor(size)) {\n    SetTensorToDynamic(output);\n    return kTfLiteOk;\n  }\n\n  // Ensure params are valid.\n  auto* params =\n      reinterpret_cast<TfLiteResizeBilinearParams*>(node->builtin_data);\n  if (params->half_pixel_centers && params->align_corners) {\n    context->ReportError(\n        context, \"If half_pixel_centers is True, align_corners must be False.\");\n    return kTfLiteError;\n  }\n\n  return ResizeOutputTensor(context, input, size, output);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteResizeBilinearParams*>(node->builtin_data);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  const TfLiteTensor* size;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSizeTensor, &size));\n\n  if (IsDynamicTensor(output)) {\n    TF_LITE_ENSURE_OK(context,\n                      ResizeOutputTensor(context, input, size, output));\n  }\n\n  if (output->type == kTfLiteFloat32) {\n#define TF_LITE_RESIZE_BILINEAR(type, datatype)                              \\\n  tflite::ResizeBilinearParams op_params;                                    \\\n  op_params.align_corners = params->align_corners;                           \\\n  op_params.half_pixel_centers = params->half_pixel_centers;                 \\\n  type::ResizeBilinear(op_params, GetTensorShape(input),                     \\\n                       GetTensorData<datatype>(input), GetTensorShape(size), \\\n                       GetTensorData<int32>(size), GetTensorShape(output),   \\\n                       GetTensorData<datatype>(output))\n\n    if (kernel_type == kReference) {\n      TF_LITE_RESIZE_BILINEAR(reference_ops, float);\n    }\n    if (kernel_type == kGenericOptimized || kernel_type == kNeonOptimized) {\n      TF_LITE_RESIZE_BILINEAR(optimized_ops, float);\n    }\n  } else if (output->type == kTfLiteUInt8) {\n    if (kernel_type == kReference) {\n      TF_LITE_RESIZE_BILINEAR(reference_ops, uint8_t);\n    }\n    if (kernel_type == kGenericOptimized || kernel_type == kNeonOptimized) {\n      TF_LITE_RESIZE_BILINEAR(optimized_ops, uint8_t);\n    }\n  } else if (output->type == kTfLiteInt8) {\n    TF_LITE_RESIZE_BILINEAR(reference_ops, int8_t);\n#undef TF_LITE_RESIZE_BILINEAR\n  } else {\n    context->ReportError(context, \"Output type is %d, requires float.\",\n                         output->type);\n    return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace resize_bilinear\n\nTfLiteRegistration* Register_RESIZE_BILINEAR_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, resize_bilinear::Prepare,\n      resize_bilinear::Eval<resize_bilinear::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_RESIZE_BILINEAR_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, resize_bilinear::Prepare,\n      resize_bilinear::Eval<resize_bilinear::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_RESIZE_BILINEAR_NEON_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, resize_bilinear::Prepare,\n      resize_bilinear::Eval<resize_bilinear::kNeonOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_RESIZE_BILINEAR() {\n#ifdef USE_NEON\n  return Register_RESIZE_BILINEAR_NEON_OPT();\n#else\n  return Register_RESIZE_BILINEAR_GENERIC_OPT();\n#endif\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"