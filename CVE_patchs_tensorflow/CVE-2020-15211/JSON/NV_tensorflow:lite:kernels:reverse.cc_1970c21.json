"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace reverse {\nnamespace {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kAxisTensor = 1;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const TfLiteTensor* axis;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxisTensor, &axis));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(axis), 1);\n  TF_LITE_ENSURE(context, NumDimensions(input) >= NumElements(axis));\n\n  if (input->type != kTfLiteInt32 && input->type != kTfLiteFloat32 &&\n      input->type != kTfLiteUInt8 && input->type != kTfLiteInt16 &&\n      input->type != kTfLiteInt64 && input->type != kTfLiteBool) {\n    context->ReportError(context, \"Type '%s' is not supported by reverse.\",\n                         TfLiteTypeGetName(input->type));\n    return kTfLiteError;\n  }\n\n  if (axis->type != kTfLiteInt32) {\n    context->ReportError(context, \"Axis Type '%s' is not supported by reverse.\",\n                         TfLiteTypeGetName(axis->type));\n    return kTfLiteError;\n  }\n\n  // TODO(renjieliu): support multi-axis case.\n  if (NumElements(axis) > 1) {\n    context->ReportError(context, \"Current does not support more than 1 axis.\");\n  }\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);\n  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);\n\n  return context->ResizeTensor(context, output, output_shape);\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const TfLiteTensor* axis_tensor;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kAxisTensor, &axis_tensor));\n  int axis = GetTensorData<int32_t>(axis_tensor)[0];\n  const int rank = NumDimensions(input);\n  if (axis < 0) {\n    axis += rank;\n  }\n\n  TF_LITE_ENSURE(context, axis >= 0 && axis < rank);\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  switch (output->type) {\n    case kTfLiteFloat32: {\n      reference_ops::Reverse<float>(\n          axis, GetTensorShape(input), GetTensorData<float>(input),\n          GetTensorShape(output), GetTensorData<float>(output));\n      break;\n    }\n    case kTfLiteUInt8: {\n      reference_ops::Reverse<uint8_t>(\n          axis, GetTensorShape(input), GetTensorData<uint8_t>(input),\n          GetTensorShape(output), GetTensorData<uint8_t>(output));\n      break;\n    }\n    case kTfLiteInt16: {\n      reference_ops::Reverse<int16_t>(\n          axis, GetTensorShape(input), GetTensorData<int16_t>(input),\n          GetTensorShape(output), GetTensorData<int16_t>(output));\n      break;\n    }\n    case kTfLiteInt32: {\n      reference_ops::Reverse<int32_t>(\n          axis, GetTensorShape(input), GetTensorData<int32_t>(input),\n          GetTensorShape(output), GetTensorData<int32_t>(output));\n      break;\n    }\n    case kTfLiteInt64: {\n      reference_ops::Reverse<int64_t>(\n          axis, GetTensorShape(input), GetTensorData<int64_t>(input),\n          GetTensorShape(output), GetTensorData<int64_t>(output));\n      break;\n    }\n    case kTfLiteBool: {\n      reference_ops::Reverse<bool>(\n          axis, GetTensorShape(input), GetTensorData<bool>(input),\n          GetTensorShape(output), GetTensorData<bool>(output));\n      break;\n    }\n    default: {\n      context->ReportError(context, \"Type '%s' is not supported by reverse.\",\n                           TfLiteTypeGetName(output->type));\n      return kTfLiteError;\n    }\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace\n}  // namespace reverse\n\nTfLiteRegistration* Register_REVERSE_V2() {\n  static TfLiteRegistration r = {nullptr, nullptr, reverse::Prepare,\n                                 reverse::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"