"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace scatter_nd {\nconstexpr int kIndices = 0;\nconstexpr int kUpdates = 1;\nconstexpr int kShape = 2;\nconstexpr int kOutputTensor = 0;\n\ntemplate <typename IndicesT>\nTfLiteStatus ResizeOutputTensor(TfLiteContext* context,\n                                const TfLiteTensor* shape,\n                                TfLiteTensor* output) {\n  const int shape_rank = SizeOfDimension(shape, 0);\n  TfLiteIntArray* output_shape = TfLiteIntArrayCreate(shape_rank);\n  const auto* shape_data = GetTensorData<IndicesT>(shape);\n\n  for (int i = 0; i < shape_rank; i++) {\n    output_shape->data[i] = shape_data[i];\n  }\n  return context->ResizeTensor(context, output, output_shape);\n}\n\ntemplate <typename IndicesT>\nTfLiteStatus CheckShapes(TfLiteContext* context, const RuntimeShape& indices,\n                         const RuntimeShape& updates,\n                         const RuntimeShape& shape_shape,\n                         const IndicesT* shape_data) {\n  TF_LITE_ENSURE(context, (indices.DimensionsCount() >= 1) &&\n                              (updates.DimensionsCount() >= 1) &&\n                              (shape_shape.DimensionsCount() == 1));\n\n  const int outer_dims = indices.DimensionsCount() - 1;\n  for (int i = 0; i < outer_dims; ++i) {\n    TF_LITE_ENSURE_EQ(context, indices.Dims(i), updates.Dims(i));\n  }\n\n  const int ix = indices.Dims(outer_dims);\n  TF_LITE_ENSURE_EQ(context, updates.DimensionsCount() - outer_dims,\n                    shape_shape.Dims(0) - ix);\n  for (int i = 0; i + outer_dims < updates.DimensionsCount(); ++i) {\n    TF_LITE_ENSURE_EQ(context, updates.Dims(i + outer_dims),\n                      shape_data[ix + i]);\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* indices;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kIndices, &indices));\n  const TfLiteTensor* updates;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kUpdates, &updates));\n  const TfLiteTensor* shape;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kShape, &shape));\n\n  switch (updates->type) {\n    case kTfLiteFloat32:\n    case kTfLiteUInt8:\n    case kTfLiteInt8:\n    case kTfLiteInt64:\n    case kTfLiteInt32:\n      break;\n    default:\n      context->ReportError(\n          context, \"Updates of type '%s' are not supported by scatter_nd.\",\n          TfLiteTypeGetName(updates->type));\n      return kTfLiteError;\n  }\n  if (indices->type != shape->type) {\n    context->ReportError(context, \"Indices and shape must have the same type.\");\n    return kTfLiteError;\n  }\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  output->type = updates->type;\n\n  if (IsConstantTensor(shape)) {\n    switch (indices->type) {\n      case kTfLiteInt32:\n        TF_LITE_ENSURE_OK(\n            context,\n            CheckShapes<int32_t>(context, GetTensorShape(indices),\n                                 GetTensorShape(updates), GetTensorShape(shape),\n                                 GetTensorData<int32_t>(shape)));\n        return ResizeOutputTensor<int32_t>(context, shape, output);\n      default:\n        context->ReportError(\n            context, \"Indices of type '%s' are not supported by scatter_nd.\",\n            TfLiteTypeGetName(indices->type));\n        return kTfLiteError;\n    }\n  } else {\n    SetTensorToDynamic(output);\n    return kTfLiteOk;\n  }\n}\n\ntemplate <typename IndicesT, typename UpdatesT>\nTfLiteStatus ScatterNd(const TfLiteTensor* indices, const TfLiteTensor* updates,\n                       TfLiteTensor* output) {\n  reference_ops::ScatterNd(\n      GetTensorShape(indices), GetTensorData<IndicesT>(indices),\n      GetTensorShape(updates), GetTensorData<UpdatesT>(updates),\n      GetTensorShape(output), GetTensorData<UpdatesT>(output));\n  return kTfLiteOk;\n}\n\ntemplate <typename IndicesT>\nTfLiteStatus EvalScatterNd(TfLiteContext* context, const TfLiteTensor* indices,\n                           const TfLiteTensor* updates,\n                           const TfLiteTensor* shape, TfLiteTensor* output) {\n  if (IsDynamicTensor(output)) {\n    TF_LITE_ENSURE_OK(\n        context, CheckShapes<IndicesT>(\n                     context, GetTensorShape(indices), GetTensorShape(updates),\n                     GetTensorShape(shape), GetTensorData<IndicesT>(shape)));\n    TF_LITE_ENSURE_OK(context,\n                      ResizeOutputTensor<IndicesT>(context, shape, output));\n  }\n\n  switch (updates->type) {\n    case kTfLiteFloat32:\n      return ScatterNd<IndicesT, float>(indices, updates, output);\n    case kTfLiteUInt8:\n      return ScatterNd<IndicesT, uint8_t>(indices, updates, output);\n    case kTfLiteInt8:\n      return ScatterNd<IndicesT, int8_t>(indices, updates, output);\n    case kTfLiteInt32:\n      return ScatterNd<IndicesT, int32_t>(indices, updates, output);\n    case kTfLiteInt64:\n      return ScatterNd<IndicesT, int64_t>(indices, updates, output);\n    default:\n      context->ReportError(\n          context, \"Updates of type '%s' are not supported by scatter_nd.\",\n          TfLiteTypeGetName(updates->type));\n      return kTfLiteError;\n  }\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* indices;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kIndices, &indices));\n  const TfLiteTensor* updates;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kUpdates, &updates));\n  const TfLiteTensor* shape;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kShape, &shape));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  switch (indices->type) {\n    case kTfLiteInt32:\n      return EvalScatterNd<int32_t>(context, indices, updates, shape, output);\n    default:\n      context->ReportError(\n          context, \"Indices of type '%s' are not supported by scatter_nd.\",\n          TfLiteTypeGetName(indices->type));\n      return kTfLiteError;\n  }\n}\n\n}  // namespace scatter_nd\n\nTfLiteRegistration* Register_SCATTER_ND() {\n  static TfLiteRegistration r = {/*init*/ nullptr, /*free*/ nullptr,\n                                 scatter_nd::Prepare, scatter_nd::Eval};\n  return &r;\n}\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"