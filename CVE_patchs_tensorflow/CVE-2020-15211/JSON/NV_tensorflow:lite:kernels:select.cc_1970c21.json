"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stddef.h>\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace select {\n\nconstexpr int kInputTensorCondition = 0;\nconstexpr int kInputTensorX = 1;\nconstexpr int kInputTensorY = 2;\nconstexpr int kOutputTensor = 0;\n\nenum KernelType {\n  kVersionOne,\n  kVersionTwo,\n};\n\nstruct OpData {\n  bool requires_broadcast;\n  // True if input condition is scalar or input condition has rank one and\n  // matches the first dimension of other inputs.\n  bool has_low_rank_input_condition;\n};\n\nvoid* SelectInit(TfLiteContext* context, const char* buffer, size_t length) {\n  auto* data = new OpData;\n  data->requires_broadcast = false;\n  data->has_low_rank_input_condition = false;\n  return data;\n}\n\nvoid SelectFree(TfLiteContext* context, void* buffer) {\n  delete reinterpret_cast<OpData*>(buffer);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus SelectPrepare(TfLiteContext* context, TfLiteNode* node) {\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input_condition;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensorCondition,\n                                          &input_condition));\n  const TfLiteTensor* input_x;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorX, &input_x));\n  const TfLiteTensor* input_y;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorY, &input_y));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  // Input must be bool.\n  TF_LITE_ENSURE_TYPES_EQ(context, input_condition->type, kTfLiteBool);\n  TF_LITE_ENSURE_TYPES_EQ(context, input_x->type, input_y->type);\n  output->type = input_x->type;\n\n  bool same_shape = HaveSameShapes(input_condition, input_x) &&\n                    HaveSameShapes(input_x, input_y);\n  TfLiteIntArray* output_size;\n  if (!same_shape) {\n    switch (kernel_type) {\n      case kVersionOne: {\n        bool is_input_condition_scalar = NumDimensions(input_condition) == 0;\n        bool has_rank_one_input_condition =\n            NumDimensions(input_condition) == 1 &&\n            SizeOfDimension(input_condition, 0) == SizeOfDimension(input_x, 0);\n        data->has_low_rank_input_condition =\n            is_input_condition_scalar || has_rank_one_input_condition;\n        TF_LITE_ENSURE(context, data->has_low_rank_input_condition);\n\n        output_size = TfLiteIntArrayCopy(input_x->dims);\n\n        // Input tensors must have the same type and size\n        TF_LITE_ENSURE(context, HaveSameShapes(input_x, input_y));\n        break;\n      }\n      case kVersionTwo: {\n        TF_LITE_ENSURE_OK(context, CalculateShapeForBroadcast(\n                                       context, input_condition, input_x,\n                                       input_y, &output_size));\n        data->requires_broadcast = true;\n        break;\n      }\n      default:\n        return kTfLiteError;\n    }\n  } else {\n    output_size = TfLiteIntArrayCopy(input_x->dims);\n  }\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\nTfLiteStatus SelectEval(TfLiteContext* context, TfLiteNode* node) {\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n  const TfLiteTensor* input_condition;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensorCondition,\n                                          &input_condition));\n  const TfLiteTensor* input_x;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorX, &input_x));\n  const TfLiteTensor* input_y;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputTensorY, &input_y));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n#define TF_LITE_SELECT(type, op)                                           \\\n  reference_ops::op(GetTensorShape(input_condition),                       \\\n                    GetTensorData<bool>(input_condition),                  \\\n                    GetTensorShape(input_x), GetTensorData<type>(input_x), \\\n                    GetTensorShape(input_y), GetTensorData<type>(input_y), \\\n                    GetTensorShape(output), GetTensorData<type>(output));\n\n#define TF_LITE_SWITCH(type, op)                                               \\\n  switch (type) {                                                              \\\n    break;                                                                     \\\n    case kTfLiteBool:                                                          \\\n      TF_LITE_SELECT(bool, op);                                                \\\n      break;                                                                   \\\n    case kTfLiteFloat32:                                                       \\\n      TF_LITE_SELECT(float, op);                                               \\\n      break;                                                                   \\\n    case kTfLiteUInt8:                                                         \\\n      TF_LITE_SELECT(uint8_t, op);                                             \\\n      break;                                                                   \\\n    case kTfLiteInt8:                                                          \\\n      TF_LITE_SELECT(int8_t, op);                                              \\\n      break;                                                                   \\\n    case kTfLiteInt16:                                                         \\\n      TF_LITE_SELECT(int16_t, op);                                             \\\n      break;                                                                   \\\n    case kTfLiteInt32:                                                         \\\n      TF_LITE_SELECT(int32_t, op);                                             \\\n      break;                                                                   \\\n    case kTfLiteInt64:                                                         \\\n      TF_LITE_SELECT(int64_t, op);                                             \\\n      break;                                                                   \\\n    default:                                                                   \\\n      context->ReportError(context,                                            \\\n                           \"Does not support type other than bool|float|int, \" \\\n                           \"got %d\",                                           \\\n                           type);                                              \\\n      return kTfLiteError;                                                     \\\n  }\n\n  if (data->has_low_rank_input_condition) {\n    TF_LITE_SWITCH(input_x->type, RankOneSelect);\n  } else if (data->requires_broadcast) {\n    TF_LITE_SWITCH(input_x->type, BroadcastSelect4DSlow);\n  } else {\n    TF_LITE_SWITCH(input_x->type, Select);\n  }\n\n#undef TF_LITE_SELECT\n#undef TF_LITE_SWITCH\n  return kTfLiteOk;\n}\n\n}  // namespace select\n\n// Select op selects values of 'x' if the corresponding value of 'condition' is\n// true or the value of 'y' if false. There are valid condition input sizes:\n//\n// 1. Either the same shape (in which case the select is elementwise), or\n// 2. condition must be Rank 1 and match over the first dimension, or\n// 3. condition is scalar\nTfLiteRegistration* Register_SELECT() {\n  static TfLiteRegistration r = {select::SelectInit, select::SelectFree,\n                                 select::SelectPrepare<select::kVersionOne>,\n                                 select::SelectEval};\n  return &r;\n}\n\n// SelectV2 op selects values of 'x' if the corresponding value of 'condition'\n// is true or the value of 'y' if false. There are valid condition input sizes:\n//\n// 1. Either the same shape (in which case the select is elementwise), or\n// 2. Broadcastable shapes between 'condition', 'x' and 'y'.\nTfLiteRegistration* Register_SELECT_V2() {\n  static TfLiteRegistration r = {select::SelectInit, select::SelectFree,\n                                 select::SelectPrepare<select::kVersionTwo>,\n                                 select::SelectEval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"