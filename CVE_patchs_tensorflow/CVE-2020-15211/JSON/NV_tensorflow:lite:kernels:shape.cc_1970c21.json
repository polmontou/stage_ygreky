"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace shape {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\ntemplate <typename OutType>\nvoid ExtractShape(const TfLiteTensor* input, OutType* output_data) {\n  for (int i = 0; i < NumDimensions(input); ++i) {\n    output_data[i] = SizeOfDimension(input, i);\n  }\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  auto* params = reinterpret_cast<TfLiteShapeParams*>(node->builtin_data);\n  switch (params->out_type) {\n    case kTfLiteInt32:\n      output->type = kTfLiteInt32;\n      break;\n    case kTfLiteInt64:\n      output->type = kTfLiteInt64;\n      break;\n    default:\n      context->ReportError(context, \"Unknown shape output data type: %d\",\n                           params->out_type);\n      return kTfLiteError;\n  }\n\n  // By design, the input shape is always known at the time of Prepare, even\n  // if the preceding op that generates |input| is dynamic. Thus, we can\n  // always compute the shape immediately, without waiting for Eval.\n  SetTensorToPersistentRo(output);\n\n  // Shape always produces a 1-dimensional output tensor, where each output\n  // element is the length of the corresponding input tensor's dimension.\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(1);\n  output_size->data[0] = NumDimensions(input);\n  TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_size));\n\n  TFLITE_DCHECK_EQ(NumDimensions(output), 1);\n  TFLITE_DCHECK_EQ(SizeOfDimension(output, 0), NumDimensions(input));\n\n  // Immediately propagate the known shape to the output tensor. This allows\n  // downstream ops that rely on the value to use it during prepare.\n  switch (output->type) {\n    case kTfLiteInt32:\n      ExtractShape(input, GetTensorData<int32_t>(output));\n      break;\n    case kTfLiteInt64:\n      ExtractShape(input, GetTensorData<int64_t>(output));\n      break;\n    default:\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  return kTfLiteOk;\n}\n\n}  // namespace shape\n\nTfLiteRegistration* Register_SHAPE() {\n  static TfLiteRegistration r = {nullptr, nullptr, shape::Prepare, shape::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"