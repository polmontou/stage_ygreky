"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include <algorithm>\n#include <tuple>\n#include <utility>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/string_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace tile {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kInputMultipliers = 1;\nconstexpr int kOutputTensor = 0;\n\nnamespace {\ntemplate <typename T>\nTfLiteIntArray* MultiplyShapeDims(const TfLiteIntArray& shape,\n                                  const TfLiteTensor* multipliers,\n                                  int num_dimensions) {\n  const T* multipliers_v = GetTensorData<T>(multipliers);\n\n  TfLiteIntArray* output_shape = TfLiteIntArrayCreate(num_dimensions);\n  for (int i = 0; i < num_dimensions; ++i) {\n    output_shape->data[i] = shape.data[i] * multipliers_v[i];\n  }\n  return output_shape;\n}\n\nTfLiteStatus ResizeOutput(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  const TfLiteTensor* multipliers;\n  TF_LITE_ENSURE_OK(\n      context, GetInputSafe(context, node, kInputMultipliers, &multipliers));\n\n  const int num_dimensions = NumDimensions(input);\n  const int num_multipliers = NumElements(multipliers);\n  TF_LITE_ENSURE_EQ(context, num_dimensions, num_multipliers);\n  switch (multipliers->type) {\n    case kTfLiteInt32:\n      return context->ResizeTensor(\n          context, output,\n          MultiplyShapeDims<int32_t>(*input->dims, multipliers,\n                                     num_dimensions));\n    case kTfLiteInt64:\n      return context->ResizeTensor(\n          context, output,\n          MultiplyShapeDims<int64_t>(*input->dims, multipliers,\n                                     num_dimensions));\n    default:\n      context->ReportError(\n          context, \"Multipliers of type '%s' are not supported by tile.\",\n          TfLiteTypeGetName(multipliers->type));\n      return kTfLiteError;\n  }\n}\n\ntemplate <typename T, typename M>\nvoid CopyMultipleTimes(const T* in_data, int32_t in_size, M multiplier,\n                       T* out_data) {\n  for (M i = 0; i < multiplier; ++i) {\n    const T* in_end = in_data + in_size;\n    T* new_out_data = std::copy(in_data, in_end, out_data);\n    in_data = out_data;\n    out_data = new_out_data;\n  }\n}\n\ntemplate <typename M>\nvoid CopyStringMultipleTimes(const TfLiteTensor* in_data, int in_data_index,\n                             const int dimension_size, M multiplier,\n                             DynamicBuffer* buffer) {\n  for (M i = 0; i < multiplier; ++i) {\n    for (int j = 0; j < dimension_size; ++j) {\n      const auto string_ref = GetString(in_data, in_data_index + j);\n      buffer->AddString(string_ref.str, string_ref.len);\n    }\n  }\n}\n\ntemplate <typename T, typename M>\nstd::pair<int, int> TileOneDimension(const TfLiteIntArray& in_dimensions,\n                                     const T* in_data, const M* multipliers,\n                                     T* out_data, int dimension) {\n  const int dimension_size = in_dimensions.data[dimension];\n  if (dimension == in_dimensions.size - 1) {\n    CopyMultipleTimes(in_data, dimension_size, multipliers[dimension],\n                      out_data);\n    return std::make_pair(\n        dimension_size,\n        dimension_size * static_cast<int>(multipliers[dimension]));\n  }\n  int total_stride_size = 0, total_tiled_stride_size = 0;\n  const T* copy_from_data = in_data;\n  T* copy_to_data = out_data;\n  for (int i = 0; i < dimension_size; ++i) {\n    int stride_size = 0, tiled_stride_size = 0;\n    std::tie(stride_size, tiled_stride_size) =\n        TileOneDimension(in_dimensions, copy_from_data, multipliers,\n                         copy_to_data, dimension + 1);\n    copy_from_data += stride_size;\n    copy_to_data += tiled_stride_size;\n    total_stride_size += stride_size;\n    total_tiled_stride_size += tiled_stride_size;\n  }\n  CopyMultipleTimes(out_data, total_tiled_stride_size,\n                    multipliers[dimension] - 1,\n                    out_data + total_tiled_stride_size);\n  return std::make_pair(\n      total_stride_size,\n      static_cast<int>(total_tiled_stride_size * multipliers[dimension]));\n}\n\ntemplate <typename M>\nstd::pair<int, int> TileStringOneDimension(\n    const TfLiteIntArray& in_dimensions, const TfLiteTensor* in_data,\n    int in_data_index, const M* multipliers, DynamicBuffer* buffer,\n    int buffer_index, int dimension, TfLiteTensor* out_data) {\n  const int dimension_size = in_dimensions.data[dimension];\n  if (dimension == in_dimensions.size - 1) {\n    CopyStringMultipleTimes(in_data, in_data_index, dimension_size,\n                            multipliers[dimension], buffer);\n    return {dimension_size,\n            dimension_size * static_cast<int>(multipliers[dimension])};\n  }\n\n  int total_stride_size = 0, total_tiled_stride_size = 0;\n  for (int i = 0; i < dimension_size; ++i) {\n    int stride_size, tiled_stride_size;\n    std::tie(stride_size, tiled_stride_size) = TileStringOneDimension(\n        in_dimensions, in_data, in_data_index + total_stride_size, multipliers,\n        buffer, buffer_index + total_tiled_stride_size, dimension + 1,\n        out_data);\n    total_stride_size += stride_size;\n    total_tiled_stride_size += tiled_stride_size;\n  }\n\n  buffer->WriteToTensor(out_data, /*new_shape=*/nullptr);\n  CopyStringMultipleTimes(out_data, buffer_index, total_tiled_stride_size,\n                          multipliers[dimension] - 1, buffer);\n\n  return {total_stride_size,\n          total_tiled_stride_size * static_cast<int>(multipliers[dimension])};\n}\n\ntemplate <typename T>\nvoid Tile(const TfLiteIntArray& in_dimensions, const TfLiteTensor* in_data,\n          const TfLiteTensor* multipliers, TfLiteTensor* out_data) {\n  // Doing recursively tiling from top to down dimension.\n  switch (multipliers->type) {\n    case kTfLiteInt32:\n      TileOneDimension(in_dimensions, GetTensorData<T>(in_data),\n                       GetTensorData<int32_t>(multipliers),\n                       GetTensorData<T>(out_data), 0);\n      break;\n    case kTfLiteInt64:\n      TileOneDimension(in_dimensions, GetTensorData<T>(in_data),\n                       GetTensorData<int64_t>(multipliers),\n                       GetTensorData<T>(out_data), 0);\n      break;\n    default:\n      break;\n  }\n}\n\nvoid TileString(const TfLiteIntArray& in_dimensions,\n                const TfLiteTensor* in_data, const TfLiteTensor* multipliers,\n                DynamicBuffer* buffer, TfLiteTensor* out_data) {\n  // Doing recursively tiling from top to down dimension.\n  switch (multipliers->type) {\n    case kTfLiteInt32:\n      TileStringOneDimension(in_dimensions, in_data, 0,\n                             GetTensorData<int32_t>(multipliers), buffer, 0, 0,\n                             out_data);\n      break;\n    case kTfLiteInt64:\n      TileStringOneDimension(in_dimensions, in_data, 0,\n                             GetTensorData<int64_t>(multipliers), buffer, 0, 0,\n                             out_data);\n      break;\n    default:\n      break;\n  }\n}\n}  // namespace\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  const TfLiteTensor* multipliers;\n  TF_LITE_ENSURE_OK(\n      context, GetInputSafe(context, node, kInputMultipliers, &multipliers));\n  // Only int32 and int64 multipliers type is supported.\n  if (multipliers->type != kTfLiteInt32 && multipliers->type != kTfLiteInt64) {\n    context->ReportError(context,\n                         \"Multipliers of type '%s' are not supported by tile.\",\n                         TfLiteTypeGetName(multipliers->type));\n    return kTfLiteError;\n  }\n\n  if (IsConstantTensor(multipliers)) {\n    TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));\n  } else {\n    SetTensorToDynamic(output);\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  const TfLiteTensor* multipliers;\n  TF_LITE_ENSURE_OK(\n      context, GetInputSafe(context, node, kInputMultipliers, &multipliers));\n\n  if (IsDynamicTensor(output)) {\n    TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));\n  }\n\n  switch (output->type) {\n    case kTfLiteFloat32:\n      Tile<float>(*(input->dims), input, multipliers, output);\n      break;\n    case kTfLiteUInt8:\n      Tile<uint8_t>(*(input->dims), input, multipliers, output);\n      break;\n    case kTfLiteInt32:\n      Tile<int32_t>(*(input->dims), input, multipliers, output);\n      break;\n    case kTfLiteInt64:\n      Tile<int64_t>(*(input->dims), input, multipliers, output);\n      break;\n    case kTfLiteString: {\n      DynamicBuffer buffer;\n      TileString(*(input->dims), input, multipliers, &buffer, output);\n      buffer.WriteToTensor(output, /*new_shape=*/nullptr);\n      break;\n    }\n    case kTfLiteBool:\n      Tile<bool>(*(input->dims), input, multipliers, output);\n      break;\n    default:\n      context->ReportError(context, \"Type '%s' is not supported by tile.\",\n                           TfLiteTypeGetName(output->type));\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace tile\nTfLiteRegistration* Register_TILE() {\n  static TfLiteRegistration r = {nullptr, nullptr, tile::Prepare, tile::Eval};\n  return &r;\n}\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"