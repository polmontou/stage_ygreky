"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include <algorithm>\n#include <iterator>\n#include <vector>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace topk_v2 {\nconstexpr int kInputTensor = 0;\nconstexpr int kInputTopK = 1;\nconstexpr int kOutputValues = 0;\nconstexpr int kOutputIndexes = 1;\n\nnamespace {\nTfLiteStatus ResizeOutput(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* top_k;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTopK, &top_k));\n  // INT32 number of top results is supported.\n  TF_LITE_ENSURE_TYPES_EQ(context, top_k->type, kTfLiteInt32);\n  // Check that the tensor contains only one value.\n  TF_LITE_ENSURE_EQ(context, NumElements(top_k), 1);\n  const int32 k = *GetTensorData<int32_t>(top_k);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const int num_dimensions = NumDimensions(input);\n  // Check that input has one or more dimensions.\n  TF_LITE_ENSURE_MSG(context, input->dims->size >= 1,\n                     \"TopK k input must have 1 or more dimensions.\");\n  // Check that k is less or equal the internal dimension.\n  TF_LITE_ENSURE_MSG(context, k <= input->dims->data[num_dimensions - 1],\n                     \"TopK k is higher than the internal dimension.\");\n\n  TfLiteIntArray* output_indexes_shape = TfLiteIntArrayCreate(num_dimensions);\n  TfLiteIntArray* output_values_shape = TfLiteIntArrayCreate(num_dimensions);\n  for (int i = 0; i < num_dimensions - 1; ++i) {\n    output_indexes_shape->data[i] = input->dims->data[i];\n    output_values_shape->data[i] = input->dims->data[i];\n  }\n  output_indexes_shape->data[num_dimensions - 1] = k;\n  output_values_shape->data[num_dimensions - 1] = k;\n  TfLiteTensor* output_indexes;\n  TF_LITE_ENSURE_OK(\n      context, GetOutputSafe(context, node, kOutputIndexes, &output_indexes));\n  TfLiteTensor* output_values;\n  TF_LITE_ENSURE_OK(\n      context, GetOutputSafe(context, node, kOutputValues, &output_values));\n  // Force output types.\n  output_indexes->type = kTfLiteInt32;\n  output_values->type = input->type;\n  auto resize_tensor = [context](TfLiteTensor* tensor, TfLiteIntArray* new_size,\n                                 TfLiteIntArray* delete_on_error) {\n    TfLiteStatus status = context->ResizeTensor(context, tensor, new_size);\n    if (status != kTfLiteOk) {\n      if (delete_on_error != nullptr) {\n        TfLiteIntArrayFree(delete_on_error);\n      }\n    }\n    return status;\n  };\n  TF_LITE_ENSURE_OK(context, resize_tensor(output_indexes, output_indexes_shape,\n                                           output_values_shape));\n  TF_LITE_ENSURE_OK(context,\n                    resize_tensor(output_values, output_values_shape, nullptr));\n  return kTfLiteOk;\n}\n\n// Class that collects indices of top k values.  Based on template\n// tensorflow::gtl::TopN<> but, for optimization, it re-uses the same container.\ntemplate <typename T>\nclass TopContainer {\n public:\n  TopContainer() = delete;\n  TopContainer(int32 k, int32 row_size) : k_(k) {\n    container_.reserve(std::min(k, row_size) + 1);\n  }\n\n  void start_collecting(const T* values) {\n    values_ = values;\n    container_.clear();\n  }\n  void push(int32 a) {\n    auto comparator = [this](int32 a, int32 b) { return compare_fun(a, b); };\n    if (container_.size() <= k_) {\n      container_.push_back(a);\n      if (container_.size() == k_ + 1) {\n        std::make_heap(container_.begin(), container_.end(), comparator);\n        std::pop_heap(container_.begin(), container_.end(), comparator);\n      }\n    } else if (comparator(a, container_.front())) {\n      // Due to how we defined comparator / compare_fun, container_.front()\n      // contains the index of the smallest of the top-k elements seen so far.\n      //\n      // If control reaches this point, we know that the current index a\n      // corresponds to an element which is bigger than the smallest of the\n      // top-k elements seen so far.  Hence, we have to update the indices of\n      // the top-k elements, by removing the index of the smallest top-k\n      // element, adding a, and making sure container_[0:k] is still a heap.\n\n      // Store index a into container_[k].\n      container_.back() = a;\n\n      // Swap container_[0] and container_[k], and rearrange elements from\n      // container_[0,k) such that they are a heap according to comparator.  For\n      // more info, see https://en.cppreference.com/w/cpp/algorithm/pop_heap.\n      std::pop_heap(container_.begin(), container_.end(), comparator);\n    }\n  }\n\n  const std::vector<int32>& sorted_result() {\n    auto comparator = [this](int32 a, int32 b) { return compare_fun(a, b); };\n    if (container_.size() <= k_) {\n      // Note: due to the way we defined compare_fun (see comments for that\n      // function) std::sort puts the indices from container_ in decreasing\n      // order of the corresponding elements.\n      std::sort(container_.begin(), container_.end(), comparator);\n    } else {\n      std::sort_heap(container_.begin(), container_.end() - 1, comparator);\n      container_.resize(k_);\n    }\n    return container_;\n  }\n\n private:\n  const int32 k_;\n\n  // container_[0,k) holds the indices of the largest k elements from values_\n  // seen so far and are maintained in a min-heap order: container_.front() is\n  // the index of the smallest of the top-k elements see so far.\n  //\n  // container_[k] is used as temporary space (not part of the min-heap).\n  std::vector<int32> container_;\n\n  const T* values_ = nullptr;\n\n  // Compares indices a and b based on the corresponding elements from values_.\n  //\n  // Intuitively, compare_fun(a, b) returns true iff values_[b] < values_[a]\n  // (notice the inversion of direction, not a typo); ties (==) are broken in\n  // favor of earlier elements (i.e., a < b).\n  bool compare_fun(int32 a, int32 b) const {\n    if (values_[b] < values_[a]) {\n      return true;\n    } else if (values_[b] > values_[a]) {\n      return false;\n    } else {\n      return a < b;\n    }\n  }\n};\n\n// Mostly modeled on tensorflow/core/kernels/topk_op.cc for CPU.\ntemplate <typename T>\nvoid TopK(int32 row_size, int32 num_rows, const T* data, int32 k,\n          int32* output_indexes, T* output_values) {\n  TopContainer<T> topc(k, row_size);\n  for (int row = 0; row < num_rows; ++row) {\n    const T* values_row = data + row * row_size;\n    topc.start_collecting(values_row);\n    for (int32 c = 0; c < row_size; ++c) {\n      topc.push(c);\n    }\n\n    // Prepare output buffers.\n    int32* indexes_row = output_indexes + row * k;\n    T* output_row = output_values + row * k;\n    // We always assume that the output is sorted.\n    const auto& top_k = topc.sorted_result();\n    std::copy(top_k.begin(), top_k.end(), indexes_row);\n    std::transform(top_k.begin(), top_k.end(), output_row,\n                   [values_row](const int32 loc) { return values_row[loc]; });\n  }\n}\n\n}  // namespace\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  // Check that the inputs and outputs have the right sizes and types.\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output_values;\n  TF_LITE_ENSURE_OK(\n      context, GetOutputSafe(context, node, kOutputValues, &output_values));\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output_values->type);\n\n  const TfLiteTensor* top_k;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTopK, &top_k));\n  TF_LITE_ENSURE_TYPES_EQ(context, top_k->type, kTfLiteInt32);\n\n  // Set output dynamic if the input is not const.\n  if (IsConstantTensor(top_k)) {\n    TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));\n  } else {\n    TfLiteTensor* output_indexes;\n    TF_LITE_ENSURE_OK(\n        context, GetOutputSafe(context, node, kOutputIndexes, &output_indexes));\n    TfLiteTensor* output_values;\n    TF_LITE_ENSURE_OK(\n        context, GetOutputSafe(context, node, kOutputValues, &output_values));\n    SetTensorToDynamic(output_indexes);\n    SetTensorToDynamic(output_values);\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  TfLiteTensor* output_values;\n  TF_LITE_ENSURE_OK(\n      context, GetOutputSafe(context, node, kOutputValues, &output_values));\n  TfLiteTensor* output_indexes;\n  TF_LITE_ENSURE_OK(\n      context, GetOutputSafe(context, node, kOutputIndexes, &output_indexes));\n  if (IsDynamicTensor(output_values)) {\n    TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));\n  }\n  const TfLiteTensor* top_k;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTopK, &top_k));\n  const int32 k = top_k->data.i32[0];\n  // The tensor can have more than 2 dimensions or even be a vector, the code\n  // anyway calls the internal dimension as row;\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const int32 row_size = input->dims->data[input->dims->size - 1];\n  int32 num_rows = 1;\n  for (int i = 0; i < input->dims->size - 1; ++i) {\n    num_rows *= input->dims->data[i];\n  }\n  switch (output_values->type) {\n    case kTfLiteFloat32:\n      TopK(row_size, num_rows, GetTensorData<float>(input), k,\n           output_indexes->data.i32, GetTensorData<float>(output_values));\n      break;\n    case kTfLiteUInt8:\n      TopK(row_size, num_rows, input->data.uint8, k, output_indexes->data.i32,\n           output_values->data.uint8);\n      break;\n    case kTfLiteInt8:\n      TopK(row_size, num_rows, input->data.int8, k, output_indexes->data.i32,\n           output_values->data.int8);\n      break;\n    case kTfLiteInt32:\n      TopK(row_size, num_rows, input->data.i32, k, output_indexes->data.i32,\n           output_values->data.i32);\n      break;\n    case kTfLiteInt64:\n      TopK(row_size, num_rows, input->data.i64, k, output_indexes->data.i32,\n           output_values->data.i64);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s is currently not supported by TopK.\",\n                         TfLiteTypeGetName(output_values->type));\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n}  // namespace topk_v2\nTfLiteRegistration* Register_TOPK_V2() {\n  static TfLiteRegistration r = {nullptr, nullptr, topk_v2::Prepare,\n                                 topk_v2::Eval};\n  return &r;\n}\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"