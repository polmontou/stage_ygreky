"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/kernels/internal/reference/add.h\"\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/reference/integer_ops/add.h\"\n#include \"tensorflow/lite/kernels/internal/reference/process_broadcast_shapes.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/op_macros.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/memory_helpers.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace add {\n\nconstexpr int kInputTensor1 = 0;\nconstexpr int kInputTensor2 = 1;\nconstexpr int kOutputTensor = 0;\n\nstruct OpData {\n  bool requires_broadcast;\n\n  // These fields are used in both the general 8-bit -> 8bit quantized path,\n  // and the special 16-bit -> 16bit quantized path\n  int input1_shift;\n  int input2_shift;\n  int32_t output_activation_min;\n  int32_t output_activation_max;\n\n  // These fields are used only in the general 8-bit -> 8bit quantized path\n  int32_t input1_multiplier;\n  int32_t input2_multiplier;\n  int32_t output_multiplier;\n  int output_shift;\n  int left_shift;\n  int32_t input1_offset;\n  int32_t input2_offset;\n  int32_t output_offset;\n\n  // Used only for float evals:\n  float output_activation_min_f32;\n  float output_activation_max_f32;\n};\n\nTfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteAddParams* params,\n                             const TfLiteTensor* input1,\n                             const TfLiteTensor* input2, TfLiteTensor* output,\n                             OpData* data) {\n  data->requires_broadcast = !HaveSameShapes(input1, input2);\n\n  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {\n    // 8bit -> 8bit general quantized path, with general rescalings\n    data->input1_offset = -input1->params.zero_point;\n    data->input2_offset = -input2->params.zero_point;\n    data->output_offset = output->params.zero_point;\n    data->left_shift = 20;\n    const double twice_max_input_scale =\n        2 * static_cast<double>(\n                std::max(input1->params.scale, input2->params.scale));\n    const double real_input1_multiplier =\n        static_cast<double>(input1->params.scale) / twice_max_input_scale;\n    const double real_input2_multiplier =\n        static_cast<double>(input2->params.scale) / twice_max_input_scale;\n    const double real_output_multiplier =\n        twice_max_input_scale /\n        ((1 << data->left_shift) * static_cast<double>(output->params.scale));\n\n    QuantizeMultiplierSmallerThanOneExp(\n        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);\n\n    QuantizeMultiplierSmallerThanOneExp(\n        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);\n\n    QuantizeMultiplierSmallerThanOneExp(\n        real_output_multiplier, &data->output_multiplier, &data->output_shift);\n\n    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(\n        context, params->activation, output, &data->output_activation_min,\n        &data->output_activation_max));\n  } else if (output->type == kTfLiteFloat32) {\n    CalculateActivationRange(params->activation,\n                             &data->output_activation_min_f32,\n                             &data->output_activation_max_f32);\n  }\n\n  return kTfLiteOk;\n}\n\nvoid EvalAdd(TfLiteContext* context, TfLiteNode* node, TfLiteAddParams* params,\n             const OpData* data, const TfLiteEvalTensor* input1,\n             const TfLiteEvalTensor* input2, TfLiteEvalTensor* output) {\n  tflite::ArithmeticParams op_params;\n  SetActivationParams(data->output_activation_min_f32,\n                      data->output_activation_max_f32, &op_params);\n  if (data->requires_broadcast) {\n    reference_ops::BroadcastAdd4DSlow(\n        op_params, tflite::micro::GetTensorShape(input1),\n        tflite::micro::GetTensorData<float>(input1),\n        tflite::micro::GetTensorShape(input2),\n        tflite::micro::GetTensorData<float>(input2),\n        tflite::micro::GetTensorShape(output),\n        tflite::micro::GetTensorData<float>(output));\n  } else {\n    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),\n                       tflite::micro::GetTensorData<float>(input1),\n                       tflite::micro::GetTensorShape(input2),\n                       tflite::micro::GetTensorData<float>(input2),\n                       tflite::micro::GetTensorShape(output),\n                       tflite::micro::GetTensorData<float>(output));\n  }\n}\n\nTfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,\n                              TfLiteAddParams* params, const OpData* data,\n                              const TfLiteEvalTensor* input1,\n                              const TfLiteEvalTensor* input2,\n                              TfLiteEvalTensor* output) {\n  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {\n    tflite::ArithmeticParams op_params;\n    op_params.left_shift = data->left_shift;\n    op_params.input1_offset = data->input1_offset;\n    op_params.input1_multiplier = data->input1_multiplier;\n    op_params.input1_shift = data->input1_shift;\n    op_params.input2_offset = data->input2_offset;\n    op_params.input2_multiplier = data->input2_multiplier;\n    op_params.input2_shift = data->input2_shift;\n    op_params.output_offset = data->output_offset;\n    op_params.output_multiplier = data->output_multiplier;\n    op_params.output_shift = data->output_shift;\n    SetActivationParams(data->output_activation_min,\n                        data->output_activation_max, &op_params);\n    bool need_broadcast = reference_ops::ProcessBroadcastShapes(\n        tflite::micro::GetTensorShape(input1),\n        tflite::micro::GetTensorShape(input2), &op_params);\n    if (output->type == kTfLiteInt8) {\n      if (need_broadcast) {\n        reference_integer_ops::BroadcastAdd4DSlow(\n            op_params, tflite::micro::GetTensorShape(input1),\n            tflite::micro::GetTensorData<int8_t>(input1),\n            tflite::micro::GetTensorShape(input2),\n            tflite::micro::GetTensorData<int8_t>(input2),\n            tflite::micro::GetTensorShape(output),\n            tflite::micro::GetTensorData<int8_t>(output));\n      } else {\n        reference_integer_ops::Add(\n            op_params, tflite::micro::GetTensorShape(input1),\n            tflite::micro::GetTensorData<int8_t>(input1),\n            tflite::micro::GetTensorShape(input2),\n            tflite::micro::GetTensorData<int8_t>(input2),\n            tflite::micro::GetTensorShape(output),\n            tflite::micro::GetTensorData<int8_t>(output));\n      }\n    } else {\n      if (need_broadcast) {\n        reference_ops::BroadcastAdd4DSlow(\n            op_params, tflite::micro::GetTensorShape(input1),\n            tflite::micro::GetTensorData<uint8_t>(input1),\n            tflite::micro::GetTensorShape(input2),\n            tflite::micro::GetTensorData<uint8_t>(input2),\n            tflite::micro::GetTensorShape(output),\n            tflite::micro::GetTensorData<uint8_t>(output));\n      } else {\n        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),\n                           tflite::micro::GetTensorData<uint8_t>(input1),\n                           tflite::micro::GetTensorShape(input2),\n                           tflite::micro::GetTensorData<uint8_t>(input2),\n                           tflite::micro::GetTensorShape(output),\n                           tflite::micro::GetTensorData<uint8_t>(output));\n      }\n    }\n  }\n\n  return kTfLiteOk;\n}\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(OpData));\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  TFLITE_DCHECK(node->builtin_data != nullptr);\n\n  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n  TF_LITE_ENSURE(context, input1 != nullptr);\n  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);\n  TF_LITE_ENSURE(context, input2 != nullptr);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  TF_LITE_ENSURE(context, output != nullptr);\n\n  OpData* data = static_cast<OpData*>(node->user_data);\n  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);\n\n  TF_LITE_ENSURE_STATUS(\n      CalculateOpData(context, params, input1, input2, output, data));\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);\n\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData* data = static_cast<const OpData*>(node->user_data);\n\n  const TfLiteEvalTensor* input1 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor1);\n  const TfLiteEvalTensor* input2 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor2);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  if (output->type == kTfLiteFloat32) {\n    EvalAdd(context, node, params, data, input1, input2, output);\n  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {\n    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,\n                                                input1, input2, output));\n  } else {\n    TF_LITE_KERNEL_LOG(context, \"Type %s (%d) not supported.\",\n                       TfLiteTypeGetName(output->type), output->type);\n    return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace add\n\nTfLiteRegistration Register_ADD() {\n  return {/*init=*/add::Init,\n          /*free=*/nullptr,\n          /*prepare=*/add::Prepare,\n          /*invoke=*/add::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"