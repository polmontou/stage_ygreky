"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/comparisons.h\"\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace comparisons {\nnamespace {\n\nstruct OpData {\n  ComparisonParams params;\n};\n\nconstexpr int kInputTensor1 = 0;\nconstexpr int kInputTensor2 = 1;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData* data = static_cast<const OpData*>(node->user_data);\n\n  const TfLiteEvalTensor* input1 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor1);\n  const TfLiteEvalTensor* input2 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor2);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  RuntimeShape input1_shape = tflite::micro::GetTensorShape(input1);\n  RuntimeShape input2_shape = tflite::micro::GetTensorShape(input2);\n  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);\n  bool* output_data = tflite::micro::GetTensorData<bool>(output);\n\n  bool requires_broadcast = !tflite::micro::HaveSameShapes(input1, input2);\n  switch (input1->type) {\n    case kTfLiteBool:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<bool>(input1), input2_shape,\n                tflite::micro::GetTensorData<bool>(input2), output_shape,\n                output_data)\n          : reference_ops::EqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<bool>(input1), input2_shape,\n                tflite::micro::GetTensorData<bool>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteFloat32:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<float>(input1), input2_shape,\n                tflite::micro::GetTensorData<float>(input2), output_shape,\n                output_data)\n          : reference_ops::EqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<float>(input1), input2_shape,\n                tflite::micro::GetTensorData<float>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt32:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int32_t>(input2), output_shape,\n                output_data)\n          : reference_ops::EqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int32_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt64:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int64_t>(input2), output_shape,\n                output_data)\n          : reference_ops::EqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int64_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteUInt8:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<uint8_t>(input2), output_shape,\n                output_data)\n          : reference_ops::EqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<uint8_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt8:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int8_t>(input2), output_shape,\n                output_data)\n          : reference_ops::EqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int8_t>(input2), output_shape,\n                output_data);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s (%d) not supported.\",\n                         TfLiteTypeGetName(input1->type), input1->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n// TODO(renjieliu): Refactor the logic to avoid duplications.\nTfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData* data = static_cast<const OpData*>(node->user_data);\n\n  const TfLiteEvalTensor* input1 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor1);\n  const TfLiteEvalTensor* input2 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor2);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  RuntimeShape input1_shape = tflite::micro::GetTensorShape(input1);\n  RuntimeShape input2_shape = tflite::micro::GetTensorShape(input2);\n  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);\n  bool* output_data = tflite::micro::GetTensorData<bool>(output);\n\n  bool requires_broadcast = !tflite::micro::HaveSameShapes(input1, input2);\n  switch (input1->type) {\n    case kTfLiteBool:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowNotEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<bool>(input1), input2_shape,\n                tflite::micro::GetTensorData<bool>(input2), output_shape,\n                output_data)\n          : reference_ops::NotEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<bool>(input1), input2_shape,\n                tflite::micro::GetTensorData<bool>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteFloat32:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowNotEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<float>(input1), input2_shape,\n                tflite::micro::GetTensorData<float>(input2), output_shape,\n                output_data)\n          : reference_ops::NotEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<float>(input1), input2_shape,\n                tflite::micro::GetTensorData<float>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt32:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowNotEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int32_t>(input2), output_shape,\n                output_data)\n          : reference_ops::NotEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int32_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt64:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowNotEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int64_t>(input2), output_shape,\n                output_data)\n          : reference_ops::NotEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int64_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteUInt8:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowNotEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<uint8_t>(input2), output_shape,\n                output_data)\n          : reference_ops::NotEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<uint8_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt8:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowNotEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int8_t>(input2), output_shape,\n                output_data)\n          : reference_ops::NotEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int8_t>(input2), output_shape,\n                output_data);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s (%d) not supported.\",\n                         TfLiteTypeGetName(input1->type), input1->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData* data = static_cast<const OpData*>(node->user_data);\n\n  const TfLiteEvalTensor* input1 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor1);\n  const TfLiteEvalTensor* input2 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor2);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  RuntimeShape input1_shape = tflite::micro::GetTensorShape(input1);\n  RuntimeShape input2_shape = tflite::micro::GetTensorShape(input2);\n  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);\n  bool* output_data = tflite::micro::GetTensorData<bool>(output);\n\n  bool requires_broadcast = !tflite::micro::HaveSameShapes(input1, input2);\n  switch (input1->type) {\n    case kTfLiteFloat32:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowGreaterNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<float>(input1), input2_shape,\n                tflite::micro::GetTensorData<float>(input2), output_shape,\n                output_data)\n          : reference_ops::GreaterNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<float>(input1), input2_shape,\n                tflite::micro::GetTensorData<float>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt32:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowGreaterNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int32_t>(input2), output_shape,\n                output_data)\n          : reference_ops::GreaterNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int32_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt64:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowGreaterNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int64_t>(input2), output_shape,\n                output_data)\n          : reference_ops::GreaterNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int64_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteUInt8:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowGreaterWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<uint8_t>(input2), output_shape,\n                output_data)\n          : reference_ops::GreaterWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<uint8_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt8:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowGreaterWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int8_t>(input2), output_shape,\n                output_data)\n          : reference_ops::GreaterWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int8_t>(input2), output_shape,\n                output_data);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s (%d) not supported.\",\n                         TfLiteTypeGetName(input1->type), input1->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData* data = static_cast<const OpData*>(node->user_data);\n\n  const TfLiteEvalTensor* input1 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor1);\n  const TfLiteEvalTensor* input2 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor2);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  RuntimeShape input1_shape = tflite::micro::GetTensorShape(input1);\n  RuntimeShape input2_shape = tflite::micro::GetTensorShape(input2);\n  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);\n  bool* output_data = tflite::micro::GetTensorData<bool>(output);\n\n  bool requires_broadcast = !tflite::micro::HaveSameShapes(input1, input2);\n  switch (input1->type) {\n    case kTfLiteFloat32:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowGreaterEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<float>(input1), input2_shape,\n                tflite::micro::GetTensorData<float>(input2), output_shape,\n                output_data)\n          : reference_ops::GreaterEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<float>(input1), input2_shape,\n                tflite::micro::GetTensorData<float>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt32:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowGreaterEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int32_t>(input2), output_shape,\n                output_data)\n          : reference_ops::GreaterEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int32_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt64:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowGreaterEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int64_t>(input2), output_shape,\n                output_data)\n          : reference_ops::GreaterEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int64_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteUInt8:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowGreaterEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<uint8_t>(input2), output_shape,\n                output_data)\n          : reference_ops::GreaterEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<uint8_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt8:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowGreaterEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int8_t>(input2), output_shape,\n                output_data)\n          : reference_ops::GreaterEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int8_t>(input2), output_shape,\n                output_data);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s (%d) not supported.\",\n                         TfLiteTypeGetName(input1->type), input1->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData* data = static_cast<const OpData*>(node->user_data);\n\n  const TfLiteEvalTensor* input1 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor1);\n  const TfLiteEvalTensor* input2 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor2);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  RuntimeShape input1_shape = tflite::micro::GetTensorShape(input1);\n  RuntimeShape input2_shape = tflite::micro::GetTensorShape(input2);\n  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);\n  bool* output_data = tflite::micro::GetTensorData<bool>(output);\n\n  bool requires_broadcast = !tflite::micro::HaveSameShapes(input1, input2);\n  switch (input1->type) {\n    case kTfLiteFloat32:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowLessNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<float>(input1), input2_shape,\n                tflite::micro::GetTensorData<float>(input2), output_shape,\n                output_data)\n          : reference_ops::LessNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<float>(input1), input2_shape,\n                tflite::micro::GetTensorData<float>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt32:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowLessNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int32_t>(input2), output_shape,\n                output_data)\n          : reference_ops::LessNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int32_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt64:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowLessNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int64_t>(input2), output_shape,\n                output_data)\n          : reference_ops::LessNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int64_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteUInt8:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowLessWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<uint8_t>(input2), output_shape,\n                output_data)\n          : reference_ops::LessWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<uint8_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt8:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowLessWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int8_t>(input2), output_shape,\n                output_data)\n          : reference_ops::LessWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int8_t>(input2), output_shape,\n                output_data);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s (%d) not supported.\",\n                         TfLiteTypeGetName(input1->type), input1->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData* data = static_cast<const OpData*>(node->user_data);\n\n  const TfLiteEvalTensor* input1 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor1);\n  const TfLiteEvalTensor* input2 =\n      tflite::micro::GetEvalInput(context, node, kInputTensor2);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  RuntimeShape input1_shape = tflite::micro::GetTensorShape(input1);\n  RuntimeShape input2_shape = tflite::micro::GetTensorShape(input2);\n  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);\n  bool* output_data = tflite::micro::GetTensorData<bool>(output);\n\n  bool requires_broadcast = !tflite::micro::HaveSameShapes(input1, input2);\n  switch (input1->type) {\n    case kTfLiteFloat32:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowLessEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<float>(input1), input2_shape,\n                tflite::micro::GetTensorData<float>(input2), output_shape,\n                output_data)\n          : reference_ops::LessEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<float>(input1), input2_shape,\n                tflite::micro::GetTensorData<float>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt32:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowLessEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int32_t>(input2), output_shape,\n                output_data)\n          : reference_ops::LessEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int32_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt64:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowLessEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int64_t>(input2), output_shape,\n                output_data)\n          : reference_ops::LessEqualNoScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int64_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteUInt8:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowLessEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<uint8_t>(input2), output_shape,\n                output_data)\n          : reference_ops::LessEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<uint8_t>(input2), output_shape,\n                output_data);\n      break;\n    case kTfLiteInt8:\n      requires_broadcast\n          ? reference_ops::Broadcast4DSlowLessEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int8_t>(input2), output_shape,\n                output_data)\n          : reference_ops::LessEqualWithScaling(\n                data->params, input1_shape,\n                tflite::micro::GetTensorData<int8_t>(input1), input2_shape,\n                tflite::micro::GetTensorData<int8_t>(input2), output_shape,\n                output_data);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s (%d) not supported.\",\n                         TfLiteTypeGetName(input1->type), input1->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(OpData));\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  OpData* data = static_cast<OpData*>(node->user_data);\n\n  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n  TF_LITE_ENSURE(context, input1 != nullptr);\n  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);\n  TF_LITE_ENSURE(context, input2 != nullptr);\n\n  if (input1->type == kTfLiteUInt8 || input1->type == kTfLiteInt8) {\n    auto input1_offset = -input1->params.zero_point;\n    auto input2_offset = -input2->params.zero_point;\n    const int kLeftShift = 8;\n\n    int32_t input1_multiplier;\n    int input1_shift;\n    QuantizeMultiplierSmallerThanOneExp(\n        static_cast<double>(input1->params.scale), &input1_multiplier,\n        &input1_shift);\n    int32_t input2_multiplier;\n    int input2_shift;\n    QuantizeMultiplierSmallerThanOneExp(\n        static_cast<double>(input2->params.scale), &input2_multiplier,\n        &input2_shift);\n\n    data->params.left_shift = kLeftShift;\n    data->params.input1_offset = input1_offset;\n    data->params.input1_multiplier = input1_multiplier;\n    data->params.input1_shift = input1_shift;\n    data->params.input2_offset = input2_offset;\n    data->params.input2_multiplier = input2_multiplier;\n    data->params.input2_shift = input2_shift;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace comparisons\n\nTfLiteRegistration Register_EQUAL() {\n  return {/*init=*/comparisons::Init,\n          /*free=*/nullptr,\n          /*prepare=*/comparisons::Prepare,\n          /*invoke=*/comparisons::EqualEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_NOT_EQUAL() {\n  return {/*init=*/comparisons::Init,\n          /*free=*/nullptr,\n          /*prepare=*/comparisons::Prepare,\n          /*invoke=*/comparisons::NotEqualEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_GREATER() {\n  return {/*init=*/comparisons::Init,\n          /*free=*/nullptr,\n          /*prepare=*/comparisons::Prepare,\n          /*invoke=*/comparisons::GreaterEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_GREATER_EQUAL() {\n  return {/*init=*/comparisons::Init,\n          /*free=*/nullptr,\n          /*prepare=*/comparisons::Prepare,\n          /*invoke=*/comparisons::GreaterEqualEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_LESS() {\n  return {/*init=*/comparisons::Init,\n          /*free=*/nullptr,\n          /*prepare=*/comparisons::Prepare,\n          /*invoke=*/comparisons::LessEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_LESS_EQUAL() {\n  return {/*init=*/comparisons::Init,\n          /*free=*/nullptr,\n          /*prepare=*/comparisons::Prepare,\n          /*invoke=*/comparisons::LessEqualEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"