"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/kernels/internal/reference/dequantize.h\"\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/reference/quantize.h\"\n#include \"tensorflow/lite/kernels/internal/reference/requantize.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace dequantize {\n\nstruct OpData {\n  tflite::DequantizationParams quantization_params;\n  // The scaling factor from input to output (aka the 'real multiplier') can\n  // be represented as a fixed point multiplier plus a left shift.\n  int32_t output_multiplier;\n  int output_shift;\n  int32_t output_zero_point;\n};\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(OpData));\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  OpData* data = static_cast<OpData*>(node->user_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  // TODO(b/140515557): Add cached dequant to improve hybrid model performance.\n  const TfLiteTensor* input = GetInput(context, node, 0);\n  TF_LITE_ENSURE(context, input != nullptr);\n  TfLiteTensor* output = GetOutput(context, node, 0);\n  TF_LITE_ENSURE(context, output != nullptr);\n\n  TF_LITE_ENSURE(context, input->type == kTfLiteUInt8 ||\n                              input->type == kTfLiteInt8 ||\n                              input->type == kTfLiteInt16);\n  TF_LITE_ENSURE(\n      context, output->type == kTfLiteFloat32 || output->type == kTfLiteInt32);\n\n  if (output->type == kTfLiteInt32) {\n    const double effective_output_scale =\n        static_cast<double>(input->params.scale) /\n        static_cast<double>(output->params.scale);\n    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,\n                       &data->output_shift);\n  }\n\n  data->quantization_params.zero_point = input->params.zero_point;\n  data->quantization_params.scale = static_cast<double>(input->params.scale);\n  data->output_zero_point = output->params.zero_point;\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  OpData* data = static_cast<OpData*>(node->user_data);\n\n  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);\n  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);\n\n  if (output->type == kTfLiteFloat32) {\n    switch (input->type) {\n      case kTfLiteUInt8:\n        reference_ops::Dequantize(data->quantization_params,\n                                  tflite::micro::GetTensorShape(input),\n                                  tflite::micro::GetTensorData<uint8_t>(input),\n                                  tflite::micro::GetTensorShape(output),\n                                  tflite::micro::GetTensorData<float>(output));\n        break;\n      case kTfLiteInt8:\n        reference_ops::Dequantize(data->quantization_params,\n                                  tflite::micro::GetTensorShape(input),\n                                  tflite::micro::GetTensorData<int8_t>(input),\n                                  tflite::micro::GetTensorShape(output),\n                                  tflite::micro::GetTensorData<float>(output));\n        break;\n      case kTfLiteInt16:\n        reference_ops::Dequantize(data->quantization_params,\n                                  tflite::micro::GetTensorShape(input),\n                                  tflite::micro::GetTensorData<int16_t>(input),\n                                  tflite::micro::GetTensorShape(output),\n                                  tflite::micro::GetTensorData<float>(output));\n        break;\n      default:\n        TF_LITE_KERNEL_LOG(context, \"Input %s, output %s not supported.\",\n                           TfLiteTypeGetName(input->type),\n                           TfLiteTypeGetName(output->type));\n        return kTfLiteError;\n    }\n  } else if (output->type == kTfLiteInt32) {\n    int flat_size = MatchingFlatSize(tflite::micro::GetTensorShape(input),\n                                     tflite::micro::GetTensorShape(output));\n    switch (input->type) {\n      case kTfLiteInt16: {\n        reference_ops::Requantize(\n            tflite::micro::GetTensorData<int16_t>(input), flat_size,\n            data->output_multiplier, data->output_shift,\n            data->quantization_params.zero_point, data->output_zero_point,\n            tflite::micro::GetTensorData<int32_t>(output));\n        break;\n      }\n      case kTfLiteInt8: {\n        reference_ops::Requantize(\n            tflite::micro::GetTensorData<int8_t>(input), flat_size,\n            data->output_multiplier, data->output_shift,\n            data->quantization_params.zero_point, data->output_zero_point,\n            tflite::micro::GetTensorData<int32_t>(output));\n        break;\n      }\n      default:\n        TF_LITE_KERNEL_LOG(context, \"Input %s, output %s not supported.\",\n                           TfLiteTypeGetName(input->type),\n                           TfLiteTypeGetName(output->type));\n        return kTfLiteError;\n    }\n  } else {\n    TF_LITE_KERNEL_LOG(context, \"Input %s, output %s not supported.\",\n                       TfLiteTypeGetName(input->type),\n                       TfLiteTypeGetName(output->type));\n    return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace dequantize\n\nTfLiteRegistration Register_DEQUANTIZE() {\n  return {/*init=*/dequantize::Init,\n          /*free=*/nullptr,\n          /*prepare=*/dequantize::Prepare,\n          /*invoke=*/dequantize::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"