"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/kernels/internal/reference/fully_connected.h\"\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/common.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/reference/integer_ops/fully_connected.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace fully_connected {\nnamespace {\n\nstruct OpData {\n  // The scaling factor from input to output (aka the 'real multiplier') can\n  // be represented as a fixed point multiplier plus a left shift.\n  int32_t output_multiplier;\n  int output_shift;\n  // The range of the fused activation layer. For example for kNone and\n  // uint8_t these would be 0 and 255.\n  int32_t output_activation_min;\n  int32_t output_activation_max;\n  // The index of the temporary tensor where the quantized inputs are cached.\n  int input_quantized_index;\n  // Cached zero point values of tensors.\n  int32_t input_zero_point;\n  int32_t filter_zero_point;\n  int32_t output_zero_point;\n};\n\nconstexpr int kInputTensor = 0;\nconstexpr int kWeightsTensor = 1;\nconstexpr int kBiasTensor = 2;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus CalculateOpData(TfLiteContext* context,\n                             TfLiteFusedActivation activation,\n                             TfLiteType data_type, const TfLiteTensor* input,\n                             const TfLiteTensor* filter,\n                             const TfLiteTensor* bias, TfLiteTensor* output,\n                             OpData* data) {\n  TfLiteStatus status = kTfLiteOk;\n  if (data_type != kTfLiteFloat32) {\n    double real_multiplier = 0.0;\n    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(\n        context, input, filter, bias, output, &real_multiplier));\n    int exponent;\n    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);\n    data->output_shift = -exponent;\n    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(\n        context, activation, output, &data->output_activation_min,\n        &data->output_activation_max));\n\n    data->input_zero_point = input->params.zero_point;\n    data->filter_zero_point = filter->params.zero_point;\n    data->output_zero_point = output->params.zero_point;\n  }\n  return status;\n}\n\n}  // namespace\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(OpData));\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  TFLITE_DCHECK(node->builtin_data != nullptr);\n\n  OpData* data = static_cast<OpData*>(node->user_data);\n  const auto params =\n      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TF_LITE_ENSURE(context, input != nullptr);\n  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);\n  TF_LITE_ENSURE(context, filter != nullptr);\n  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  TF_LITE_ENSURE(context, output != nullptr);\n\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n  TF_LITE_ENSURE_MSG(context, input->type == filter->type,\n                     \"Hybrid models are not supported on TFLite Micro.\");\n\n  return CalculateOpData(context, params->activation, input->type, input,\n                         filter, bias, output, data);\n}\n\nTfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,\n                               const OpData& data,\n                               const TfLiteEvalTensor* input,\n                               const TfLiteEvalTensor* filter,\n                               const TfLiteEvalTensor* bias,\n                               TfLiteEvalTensor* output) {\n  tflite::FullyConnectedParams op_params;\n  op_params.input_offset = -data.input_zero_point;\n  op_params.weights_offset = -data.filter_zero_point;\n  op_params.output_offset = data.output_zero_point;\n  op_params.output_multiplier = data.output_multiplier;\n  // TODO(b/138810107): Figure out whether output shift should be inverted\n  op_params.output_shift = -data.output_shift;\n  op_params.quantized_activation_min = data.output_activation_min;\n  op_params.quantized_activation_max = data.output_activation_max;\n\n  reference_integer_ops::FullyConnected(\n      op_params, tflite::micro::GetTensorShape(input),\n      tflite::micro::GetTensorData<int8_t>(input),\n      tflite::micro::GetTensorShape(filter),\n      tflite::micro::GetTensorData<int8_t>(filter),\n      tflite::micro::GetTensorShape(bias),\n      tflite::micro::GetTensorData<int32_t>(bias),\n      tflite::micro::GetTensorShape(output),\n      tflite::micro::GetTensorData<int8_t>(output));\n  return kTfLiteOk;\n}\n\nTfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,\n                           const OpData& data, const TfLiteEvalTensor* input,\n                           const TfLiteEvalTensor* filter,\n                           const TfLiteEvalTensor* bias,\n                           TfLiteEvalTensor* output) {\n  const int32_t input_offset = -data.input_zero_point;\n  const int32_t filter_offset = -data.filter_zero_point;\n  const int32_t output_offset = data.output_zero_point;\n\n  tflite::FullyConnectedParams op_params;\n  op_params.input_offset = input_offset;\n  op_params.weights_offset = filter_offset;\n  op_params.output_offset = output_offset;\n  op_params.output_multiplier = data.output_multiplier;\n  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.\n  op_params.output_shift = -data.output_shift;\n  op_params.quantized_activation_min = data.output_activation_min;\n  op_params.quantized_activation_max = data.output_activation_max;\n\n#define TF_LITE_FULLY_CONNECTED(output_data_type)      \\\n  reference_ops::FullyConnected(                       \\\n      op_params, tflite::micro::GetTensorShape(input), \\\n      tflite::micro::GetTensorData<uint8_t>(input),    \\\n      tflite::micro::GetTensorShape(filter),           \\\n      tflite::micro::GetTensorData<uint8_t>(filter),   \\\n      tflite::micro::GetTensorShape(bias),             \\\n      tflite::micro::GetTensorData<int32_t>(bias),     \\\n      tflite::micro::GetTensorShape(output),           \\\n      tflite::micro::GetTensorData<output_data_type>(output))\n  switch (output->type) {\n    case kTfLiteUInt8:\n      TF_LITE_FULLY_CONNECTED(uint8_t);\n      break;\n    case kTfLiteInt16:\n      TF_LITE_FULLY_CONNECTED(int16_t);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s (%d) not supported.\",\n                         TfLiteTypeGetName(output->type), output->type);\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,\n                       TfLiteFusedActivation activation,\n                       const TfLiteEvalTensor* input,\n                       const TfLiteEvalTensor* filter,\n                       const TfLiteEvalTensor* bias, TfLiteEvalTensor* output) {\n  float output_activation_min, output_activation_max;\n  CalculateActivationRange(activation, &output_activation_min,\n                           &output_activation_max);\n  tflite::FullyConnectedParams op_params;\n  op_params.float_activation_min = output_activation_min;\n  op_params.float_activation_max = output_activation_max;\n  tflite::reference_ops::FullyConnected(\n      op_params, tflite::micro::GetTensorShape(input),\n      tflite::micro::GetTensorData<float>(input),\n      tflite::micro::GetTensorShape(filter),\n      tflite::micro::GetTensorData<float>(filter),\n      tflite::micro::GetTensorShape(bias),\n      tflite::micro::GetTensorData<float>(bias),\n      tflite::micro::GetTensorShape(output),\n      tflite::micro::GetTensorData<float>(output));\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->builtin_data != nullptr);\n  const auto* params =\n      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);\n\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, kInputTensor);\n  const TfLiteEvalTensor* filter =\n      tflite::micro::GetEvalInput(context, node, kWeightsTensor);\n  const TfLiteEvalTensor* bias =\n      tflite::micro::GetEvalInput(context, node, kBiasTensor);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData& data = *(static_cast<const OpData*>(node->user_data));\n\n  // Checks in Prepare ensure input, output and filter types are all the same.\n  switch (input->type) {\n    case kTfLiteFloat32:\n      return EvalFloat(context, node, params->activation, input, filter, bias,\n                       output);\n    case kTfLiteInt8:\n      return EvalQuantizedInt8(context, node, data, input, filter, bias,\n                               output);\n\n    case kTfLiteUInt8:\n      return EvalQuantized(context, node, data, input, filter, bias, output);\n\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s (%d) not supported.\",\n                         TfLiteTypeGetName(input->type), input->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace fully_connected\n\nTfLiteRegistration Register_FULLY_CONNECTED() {\n  return {/*init=*/fully_connected::Init,\n          /*free=*/nullptr,\n          /*prepare=*/fully_connected::Prepare,\n          /*invoke=*/fully_connected::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"