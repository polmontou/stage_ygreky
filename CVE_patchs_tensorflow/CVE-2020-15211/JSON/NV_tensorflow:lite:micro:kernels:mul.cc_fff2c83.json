"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/kernels/internal/reference/mul.h\"\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/reference/integer_ops/mul.h\"\n#include \"tensorflow/lite/kernels/internal/reference/process_broadcast_shapes.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/memory_helpers.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace mul {\nnamespace {\n\nconstexpr int kInput1Tensor = 0;\nconstexpr int kInput2Tensor = 1;\nconstexpr int kOutputTensor = 0;\n\nstruct OpData {\n  int32_t input1_zero_point;\n  int32_t input2_zero_point;\n\n  int32_t output_activation_min;\n  int32_t output_activation_max;\n  int32_t output_zero_point;\n  int32_t output_multiplier;\n  int output_shift;\n\n  float output_activation_min_f32;\n  float output_activation_max_f32;\n};\n\nTfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,\n                             TfLiteMulParams* params, OpData* data) {\n  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);\n  TF_LITE_ENSURE(context, input1 != nullptr);\n  const TfLiteTensor* input2 = GetInput(context, node, kInput2Tensor);\n  TF_LITE_ENSURE(context, input2 != nullptr);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  TF_LITE_ENSURE(context, output != nullptr);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);\n\n  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {\n    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(\n        context, params->activation, output, &data->output_activation_min,\n        &data->output_activation_max));\n\n    double real_multiplier = static_cast<double>(input1->params.scale) *\n                             static_cast<double>(input2->params.scale) /\n                             static_cast<double>(output->params.scale);\n    QuantizeMultiplier(real_multiplier, &data->output_multiplier,\n                       &data->output_shift);\n\n    data->input1_zero_point = input1->params.zero_point;\n    data->input2_zero_point = input2->params.zero_point;\n    data->output_zero_point = output->params.zero_point;\n  } else {\n    CalculateActivationRange(params->activation,\n                             &data->output_activation_min_f32,\n                             &data->output_activation_max_f32);\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace\n\nvoid EvalQuantized(TfLiteContext* context, TfLiteNode* node, const OpData* data,\n                   const TfLiteEvalTensor* input1,\n                   const TfLiteEvalTensor* input2, TfLiteEvalTensor* output) {\n  tflite::ArithmeticParams op_params = {};\n  op_params.quantized_activation_min = data->output_activation_min;\n  op_params.quantized_activation_max = data->output_activation_max;\n  op_params.float_activation_max = data->output_activation_max_f32;\n  op_params.input1_offset = -data->input1_zero_point;\n  op_params.input2_offset = -data->input2_zero_point;\n  op_params.output_offset = data->output_zero_point;\n  op_params.output_multiplier = data->output_multiplier;\n  op_params.output_shift = data->output_shift;\n\n  bool need_broadcast = reference_ops::ProcessBroadcastShapes(\n      tflite::micro::GetTensorShape(input1),\n      tflite::micro::GetTensorShape(input2), &op_params);\n\n  if (output->type == kTfLiteInt8) {\n    if (need_broadcast) {\n      reference_integer_ops::BroadcastMul4DSlow(\n          op_params, tflite::micro::GetTensorShape(input1),\n          tflite::micro::GetTensorData<int8_t>(input1),\n          tflite::micro::GetTensorShape(input2),\n          tflite::micro::GetTensorData<int8_t>(input2),\n          tflite::micro::GetTensorShape(output),\n          tflite::micro::GetTensorData<int8_t>(output));\n    } else {\n      reference_integer_ops::Mul(op_params,\n                                 tflite::micro::GetTensorShape(input1),\n                                 tflite::micro::GetTensorData<int8_t>(input1),\n                                 tflite::micro::GetTensorShape(input2),\n                                 tflite::micro::GetTensorData<int8_t>(input2),\n                                 tflite::micro::GetTensorShape(output),\n                                 tflite::micro::GetTensorData<int8_t>(output));\n    }\n  } else if (output->type == kTfLiteUInt8) {\n    if (need_broadcast) {\n      reference_integer_ops::BroadcastMul4DSlow(\n          op_params, tflite::micro::GetTensorShape(input1),\n          tflite::micro::GetTensorData<uint8_t>(input1),\n          tflite::micro::GetTensorShape(input2),\n          tflite::micro::GetTensorData<uint8_t>(input2),\n          tflite::micro::GetTensorShape(output),\n          tflite::micro::GetTensorData<uint8_t>(output));\n    } else {\n      reference_integer_ops::Mul(op_params,\n                                 tflite::micro::GetTensorShape(input1),\n                                 tflite::micro::GetTensorData<uint8_t>(input1),\n                                 tflite::micro::GetTensorShape(input2),\n                                 tflite::micro::GetTensorData<uint8_t>(input2),\n                                 tflite::micro::GetTensorShape(output),\n                                 tflite::micro::GetTensorData<uint8_t>(output));\n    }\n  }\n}\n\nvoid EvalFloat(TfLiteContext* context, TfLiteNode* node,\n               TfLiteMulParams* params, const OpData* data,\n               const TfLiteEvalTensor* input1, const TfLiteEvalTensor* input2,\n               TfLiteEvalTensor* output) {\n  tflite::ArithmeticParams op_params = {};\n  op_params.float_activation_min = data->output_activation_min_f32;\n  op_params.float_activation_max = data->output_activation_max_f32;\n\n  bool need_broadcast = reference_ops::ProcessBroadcastShapes(\n      tflite::micro::GetTensorShape(input1),\n      tflite::micro::GetTensorShape(input2), &op_params);\n\n  if (need_broadcast) {\n    reference_ops::BroadcastMul4DSlow(\n        op_params, tflite::micro::GetTensorShape(input1),\n        tflite::micro::GetTensorData<float>(input1),\n        tflite::micro::GetTensorShape(input2),\n        tflite::micro::GetTensorData<float>(input2),\n        tflite::micro::GetTensorShape(output),\n        tflite::micro::GetTensorData<float>(output));\n  } else {\n    reference_ops::Mul(op_params, tflite::micro::GetTensorShape(input1),\n                       tflite::micro::GetTensorData<float>(input1),\n                       tflite::micro::GetTensorShape(input2),\n                       tflite::micro::GetTensorData<float>(input2),\n                       tflite::micro::GetTensorShape(output),\n                       tflite::micro::GetTensorData<float>(output));\n  }\n}\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(OpData));\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->builtin_data != nullptr);\n  auto* params = reinterpret_cast<TfLiteMulParams*>(node->builtin_data);\n\n  TFLITE_DCHECK(node->user_data != nullptr);\n  OpData* data = static_cast<OpData*>(node->user_data);\n\n  return CalculateOpData(context, node, params, data);\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->builtin_data != nullptr);\n  auto* params = reinterpret_cast<TfLiteMulParams*>(node->builtin_data);\n\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData* data = static_cast<const OpData*>(node->user_data);\n\n  const TfLiteEvalTensor* input1 =\n      tflite::micro::GetEvalInput(context, node, kInput1Tensor);\n  const TfLiteEvalTensor* input2 =\n      tflite::micro::GetEvalInput(context, node, kInput2Tensor);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  switch (input1->type) {\n    case kTfLiteUInt8:\n    case kTfLiteInt8:\n      EvalQuantized(context, node, data, input1, input2, output);\n      break;\n    case kTfLiteFloat32:\n      EvalFloat(context, node, params, data, input1, input2, output);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s (%d) not supported.\",\n                         TfLiteTypeGetName(input1->type), input1->type);\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n}  // namespace mul\n\nTfLiteRegistration Register_MUL() {\n  return {/*init=*/mul::Init,\n          /*free=*/nullptr,\n          /*prepare=*/mul::Prepare,\n          /*invoke=*/mul::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"