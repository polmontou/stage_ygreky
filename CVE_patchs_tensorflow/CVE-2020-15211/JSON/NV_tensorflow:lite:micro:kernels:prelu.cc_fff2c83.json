"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/kernels/internal/reference/prelu.h\"\n\n#include <cstdint>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace activations {\nnamespace {\n\nTfLiteStatus CalculatePreluParams(const TfLiteTensor* input,\n                                  const TfLiteTensor* alpha,\n                                  TfLiteTensor* output, PreluParams* params) {\n  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8 ||\n      output->type == kTfLiteInt16) {\n    double real_multiplier_1 = static_cast<double>(input->params.scale) /\n                               static_cast<double>(output->params.scale);\n    double real_multiplier_2 = static_cast<double>(input->params.scale) *\n                               static_cast<double>(alpha->params.scale) /\n                               static_cast<double>(output->params.scale);\n    QuantizeMultiplier(real_multiplier_1, &params->output_multiplier_1,\n                       &params->output_shift_1);\n    QuantizeMultiplier(real_multiplier_2, &params->output_multiplier_2,\n                       &params->output_shift_2);\n\n    params->input_offset = -input->params.zero_point;\n    params->alpha_offset = -alpha->params.zero_point;\n    params->output_offset = output->params.zero_point;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace\n\ninline void BroadcastPrelu4DSlowFloat(\n    const RuntimeShape& unextended_input1_shape, const float* input1_data,\n    const RuntimeShape& unextended_input2_shape, const float* input2_data,\n    const RuntimeShape& unextended_output_shape, float* output_data) {\n  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);\n  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);\n  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);\n  const RuntimeShape output_shape =\n      RuntimeShape::ExtendedShape(4, unextended_output_shape);\n\n  NdArrayDesc<4> desc1;\n  NdArrayDesc<4> desc2;\n  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,\n                                      unextended_input2_shape, &desc1, &desc2);\n\n  for (int b = 0; b < output_shape.Dims(0); ++b) {\n    for (int y = 0; y < output_shape.Dims(1); ++y) {\n      for (int x = 0; x < output_shape.Dims(2); ++x) {\n        for (int c = 0; c < output_shape.Dims(3); ++c) {\n          auto out_idx = Offset(output_shape, b, y, x, c);\n          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);\n          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);\n          auto in1_val = input1_data[in1_idx];\n          auto in2_val = input2_data[in2_idx];\n          output_data[out_idx] = in1_val >= 0.0f ? in1_val : in1_val * in2_val;\n        }\n      }\n    }\n  }\n}\n\nvoid* PreluInit(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(PreluParams));\n}\n\nTfLiteStatus PreluPrepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  PreluParams* params = static_cast<PreluParams*>(node->user_data);\n\n  const TfLiteTensor* input = GetInput(context, node, 0);\n  TF_LITE_ENSURE(context, input != nullptr);\n  const TfLiteTensor* alpha = GetInput(context, node, 1);\n  TF_LITE_ENSURE(context, alpha != nullptr);\n  TfLiteTensor* output = GetOutput(context, node, 0);\n  TF_LITE_ENSURE(context, output != nullptr);\n\n  return CalculatePreluParams(input, alpha, output, params);\n}\n\nTfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const PreluParams& params =\n      *(static_cast<const PreluParams*>(node->user_data));\n\n  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);\n  const TfLiteEvalTensor* alpha = tflite::micro::GetEvalInput(context, node, 1);\n  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);\n\n  switch (input->type) {\n    case kTfLiteFloat32: {\n      BroadcastPrelu4DSlowFloat(tflite::micro::GetTensorShape(input),\n                                tflite::micro::GetTensorData<float>(input),\n                                tflite::micro::GetTensorShape(alpha),\n                                tflite::micro::GetTensorData<float>(alpha),\n                                tflite::micro::GetTensorShape(output),\n                                tflite::micro::GetTensorData<float>(output));\n      return kTfLiteOk;\n    } break;\n    case kTfLiteUInt8: {\n      reference_ops::BroadcastPrelu4DSlow(\n          params, tflite::micro::GetTensorShape(input),\n          tflite::micro::GetTensorData<uint8_t>(input),\n          tflite::micro::GetTensorShape(alpha),\n          tflite::micro::GetTensorData<uint8_t>(alpha),\n          tflite::micro::GetTensorShape(output),\n          tflite::micro::GetTensorData<uint8_t>(output));\n      return kTfLiteOk;\n    } break;\n    case kTfLiteInt8: {\n      reference_ops::BroadcastPrelu4DSlow(\n          params, tflite::micro::GetTensorShape(input),\n          tflite::micro::GetTensorData<int8_t>(input),\n          tflite::micro::GetTensorShape(alpha),\n          tflite::micro::GetTensorData<int8_t>(alpha),\n          tflite::micro::GetTensorShape(output),\n          tflite::micro::GetTensorData<int8_t>(output));\n      return kTfLiteOk;\n    } break;\n    default:\n      TF_LITE_KERNEL_LOG(\n          context, \"Only float32 and uint8_t are supported currently, got %d.\",\n          TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n}\n\n}  // namespace activations\n\nTfLiteRegistration Register_PRELU() {\n  return {/*init=*/activations::PreluInit,\n          /*free=*/nullptr,\n          /*prepare=*/activations::PreluPrepare,\n          /*invoke=*/activations::PreluEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"