"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/quantize.h\"\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/reference/requantize.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/micro_utils.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace quantize {\n\nstruct OpData {\n  tflite::QuantizationParams quantization_params;\n  // The scaling factor from input to output (aka the 'real multiplier') can\n  // be represented as a fixed point multiplier plus a left shift.\n  int32_t output_multiplier;\n  int output_shift;\n\n  int32_t input_zero_point;\n};\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(OpData));\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  OpData* data = static_cast<OpData*>(node->user_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input = GetInput(context, node, 0);\n  TF_LITE_ENSURE(context, input != nullptr);\n  TfLiteTensor* output = GetOutput(context, node, 0);\n  TF_LITE_ENSURE(context, output != nullptr);\n\n  // TODO(b/128934713): Add support for fixed-point per-channel quantization.\n  // Currently this only support affine per-layer quantization.\n  TF_LITE_ENSURE_EQ(context, output->quantization.type,\n                    kTfLiteAffineQuantization);\n  const auto* affine_quantization =\n      reinterpret_cast<TfLiteAffineQuantization*>(output->quantization.params);\n  TF_LITE_ENSURE(context, affine_quantization);\n  TF_LITE_ENSURE(context, affine_quantization->scale);\n  TF_LITE_ENSURE(context, affine_quantization->scale->size == 1);\n\n  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32 ||\n                              input->type == kTfLiteInt16 ||\n                              input->type == kTfLiteInt8);\n  TF_LITE_ENSURE(context, output->type == kTfLiteUInt8 ||\n                              output->type == kTfLiteInt8 ||\n                              output->type == kTfLiteInt16);\n\n  if (((input->type == kTfLiteInt16 || input->type == kTfLiteInt8) &&\n       output->type == kTfLiteInt8) ||\n      (input->type == kTfLiteInt16 && output->type == kTfLiteInt16)) {\n    double effective_scale = static_cast<double>(input->params.scale) /\n                             static_cast<double>(output->params.scale);\n\n    QuantizeMultiplier(effective_scale, &data->output_multiplier,\n                       &data->output_shift);\n  }\n\n  data->quantization_params.zero_point = output->params.zero_point;\n  data->quantization_params.scale = static_cast<double>(output->params.scale);\n\n  data->input_zero_point = input->params.zero_point;\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  OpData* data = static_cast<OpData*>(node->user_data);\n\n  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);\n  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);\n\n  if (input->type == kTfLiteFloat32) {\n    switch (output->type) {\n      case kTfLiteInt8:\n        reference_ops::AffineQuantize(\n            data->quantization_params, tflite::micro::GetTensorShape(input),\n            tflite::micro::GetTensorData<float>(input),\n            tflite::micro::GetTensorShape(output),\n            tflite::micro::GetTensorData<int8_t>(output));\n        break;\n      case kTfLiteUInt8:\n        reference_ops::AffineQuantize(\n            data->quantization_params, tflite::micro::GetTensorShape(input),\n            tflite::micro::GetTensorData<float>(input),\n            tflite::micro::GetTensorShape(output),\n            tflite::micro::GetTensorData<uint8_t>(output));\n        break;\n      case kTfLiteInt16:\n        reference_ops::AffineQuantize(\n            data->quantization_params, tflite::micro::GetTensorShape(input),\n            tflite::micro::GetTensorData<float>(input),\n            tflite::micro::GetTensorShape(output),\n            tflite::micro::GetTensorData<int16_t>(output));\n        return kTfLiteOk;\n      default:\n        TF_LITE_KERNEL_LOG(context, \"Input %s, output %s not supported.\",\n                           TfLiteTypeGetName(input->type),\n                           TfLiteTypeGetName(output->type));\n        return kTfLiteError;\n    }\n  } else if (input->type == kTfLiteInt16) {\n    size_t size = ElementCount(*input->dims);\n    switch (output->type) {\n      case kTfLiteInt8:\n        reference_ops::Requantize(tflite::micro::GetTensorData<int16_t>(input),\n                                  size, data->output_multiplier,\n                                  data->output_shift, data->input_zero_point,\n                                  data->quantization_params.zero_point,\n                                  tflite::micro::GetTensorData<int8_t>(output));\n        break;\n      case kTfLiteInt16:\n        reference_ops::Requantize(\n            tflite::micro::GetTensorData<int16_t>(input), size,\n            data->output_multiplier, data->output_shift, data->input_zero_point,\n            data->quantization_params.zero_point,\n            tflite::micro::GetTensorData<int16_t>(output));\n        return kTfLiteOk;\n      default:\n        TF_LITE_KERNEL_LOG(context, \"Input %s, output %s not supported.\",\n                           TfLiteTypeGetName(input->type),\n                           TfLiteTypeGetName(output->type));\n        return kTfLiteError;\n    }\n  } else if (input->type == kTfLiteInt8) {\n    // Int8 to Int8 requantization, required if the input and output tensors\n    // have different scales and/or zero points.\n    size_t size = ElementCount(*input->dims);\n    switch (output->type) {\n      case kTfLiteInt8:\n        reference_ops::Requantize(tflite::micro::GetTensorData<int8_t>(input),\n                                  size, data->output_multiplier,\n                                  data->output_shift, data->input_zero_point,\n                                  data->quantization_params.zero_point,\n                                  tflite::micro::GetTensorData<int8_t>(output));\n        break;\n      default:\n        TF_LITE_KERNEL_LOG(context, \"Input %s, output %s not supported.\",\n                           TfLiteTypeGetName(input->type),\n                           TfLiteTypeGetName(output->type));\n        return kTfLiteError;\n    }\n  } else {\n    TF_LITE_KERNEL_LOG(context, \"Input %s, output %s not supported.\",\n                       TfLiteTypeGetName(input->type),\n                       TfLiteTypeGetName(output->type));\n    return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace quantize\n\n// This Op (QUANTIZE) quantizes the input and produces quantized output.\n// AffineQuantize takes scale and zero point and quantizes the float value to\n// quantized output, in int8_t or uint8_t format.\nTfLiteRegistration Register_QUANTIZE() {\n  return {/*init=*/quantize::Init,\n          /*free=*/nullptr,\n          /*prepare=*/quantize::Prepare,\n          /*invoke=*/quantize::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"