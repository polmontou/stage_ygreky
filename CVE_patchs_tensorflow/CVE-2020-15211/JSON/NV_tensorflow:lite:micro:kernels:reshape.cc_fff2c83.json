"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/op_macros.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/memory_helpers.h\"\n#include \"tensorflow/lite/micro/micro_utils.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace reshape {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TF_LITE_ENSURE(context, input != nullptr);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  TF_LITE_ENSURE(context, output != nullptr);\n  // Tensorflow's Reshape allows one of the shape components to have the\n  // special -1 value, meaning it will be calculated automatically based on the\n  // input. Here we calculate what that dimension should be so that the number\n  // of output elements in the same as the number of input elements.\n  int num_input_elements = NumElements(input);\n  TfLiteIntArray* output_shape = output->dims;\n\n  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.\n      output_shape->size == 1 && output_shape->data[0] == 0) {\n    // Legacy tflite models use a shape parameter of [0] to indicate scalars,\n    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during\n    // toco conversion.\n    output_shape->size = 0;\n  }\n\n  int num_output_elements = 1;\n  int stretch_dim = -1;\n  for (int i = 0; i < output_shape->size; ++i) {\n    int value = output_shape->data[i];\n    if (value == -1) {\n      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);\n      stretch_dim = i;\n    } else {\n      num_output_elements *= value;\n    }\n  }\n  if (stretch_dim != -1) {\n    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;\n    num_output_elements *= output_shape->data[stretch_dim];\n  }\n\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);\n  return kTfLiteOk;\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, kInputTensor);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  // TODO(b/162522304): storing input bytes in OpData increases some models\n  // significantly, possibly due to alignment issues.\n  size_t input_bytes;\n  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));\n  input_bytes *= ElementCount(*input->dims);\n\n  // Do nothing for in-place reshape.\n  if (input->data.raw != output->data.raw) {\n    // Otherwise perform reshape with copy.\n    for (size_t i = 0; i < input_bytes; ++i) {\n      output->data.raw[i] = input->data.raw[i];\n    }\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace reshape\n\nTfLiteRegistration Register_RESHAPE() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/reshape::Prepare,\n          /*invoke=*/reshape::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"