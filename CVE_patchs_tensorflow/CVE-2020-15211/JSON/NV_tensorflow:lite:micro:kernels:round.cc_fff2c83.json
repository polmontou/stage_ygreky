"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/kernels/internal/reference/round.h\"\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace round {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TF_LITE_ENSURE(context, input != nullptr);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  TF_LITE_ENSURE(context, output != nullptr);\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);\n  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);\n  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);\n  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);\n  for (int i = 0; i < output->dims->size; ++i) {\n    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, kInputTensor);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  reference_ops::Round(tflite::micro::GetTensorShape(input),\n                       tflite::micro::GetTensorData<float>(input),\n                       tflite::micro::GetTensorShape(output),\n                       tflite::micro::GetTensorData<float>(output));\n\n  return kTfLiteOk;\n}\n}  // namespace round\n\nTfLiteRegistration Register_ROUND() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/round::Prepare,\n          /*invoke=*/round::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"