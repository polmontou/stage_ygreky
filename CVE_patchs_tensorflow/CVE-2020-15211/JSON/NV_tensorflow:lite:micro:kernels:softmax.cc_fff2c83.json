"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/kernels/internal/reference/softmax.h\"\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/common.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/op_macros.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace activations {\nnamespace {\n\nTfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,\n                                    const TfLiteTensor* input,\n                                    TfLiteTensor* output,\n                                    const TfLiteSoftmaxParams* params,\n                                    SoftmaxParams* op_data) {\n  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {\n    if (input->type == kTfLiteUInt8) {\n      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);\n      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);\n    } else {\n      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);\n      if (output->type == kTfLiteInt16) {\n        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);\n        // NOTE: Current int16_t softmax output does not require symmetric\n        // scaling\n        // - so no need to verify scale here.\n      } else {\n        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);\n        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);\n        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);\n      }\n    }\n\n    static const int kScaledDiffIntegerBits = 5;\n\n    int input_left_shift;\n    tflite::PreprocessSoftmaxScaling(\n        static_cast<double>(params->beta),\n        static_cast<double>(input->params.scale), kScaledDiffIntegerBits,\n        &op_data->input_multiplier, &input_left_shift);\n    op_data->input_left_shift = input_left_shift;\n    op_data->diff_min =\n        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,\n                                            op_data->input_left_shift);\n  } else {\n    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);\n    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);\n    op_data->beta = static_cast<double>(params->beta);\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace\n\n// Takes a tensor and performs softmax along the last dimension.\nvoid SoftmaxFloat(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,\n                  const SoftmaxParams& op_data) {\n  tflite::reference_ops::Softmax(op_data, tflite::micro::GetTensorShape(input),\n                                 tflite::micro::GetTensorData<float>(input),\n                                 tflite::micro::GetTensorShape(output),\n                                 tflite::micro::GetTensorData<float>(output));\n}\n\nvoid SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,\n                      const SoftmaxParams& op_data) {\n  if (input->type == kTfLiteUInt8) {\n    tflite::reference_ops::Softmax(\n        op_data, tflite::micro::GetTensorShape(input),\n        tflite::micro::GetTensorData<uint8_t>(input),\n        tflite::micro::GetTensorShape(output),\n        tflite::micro::GetTensorData<uint8_t>(output));\n  } else {\n    if (output->type == kTfLiteInt16) {\n      tflite::reference_ops::Softmax(\n          op_data, tflite::micro::GetTensorShape(input),\n          tflite::micro::GetTensorData<int8_t>(input),\n          tflite::micro::GetTensorShape(output),\n          tflite::micro::GetTensorData<int16_t>(output));\n    } else {\n      tflite::reference_ops::Softmax(\n          op_data, tflite::micro::GetTensorShape(input),\n          tflite::micro::GetTensorData<int8_t>(input),\n          tflite::micro::GetTensorShape(output),\n          tflite::micro::GetTensorData<int8_t>(output));\n    }\n  }\n}\n\nvoid* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));\n}\n\nTfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  const TfLiteTensor* input = GetInput(context, node, 0);\n  TF_LITE_ENSURE(context, input != nullptr);\n  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);\n\n  TfLiteTensor* output = GetOutput(context, node, 0);\n  TF_LITE_ENSURE(context, output != nullptr);\n\n  TFLITE_DCHECK(node->user_data != nullptr);\n  SoftmaxParams* data = static_cast<SoftmaxParams*>(node->user_data);\n  return CalculateSoftmaxParams(context, input, output, params, data);\n}\n\nTfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);\n  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);\n\n  TFLITE_DCHECK(node->user_data != nullptr);\n  SoftmaxParams* data = static_cast<SoftmaxParams*>(node->user_data);\n\n  switch (input->type) {\n    case kTfLiteFloat32: {\n      SoftmaxFloat(input, output, *data);\n      return kTfLiteOk;\n    }\n    case kTfLiteInt8:\n    case kTfLiteUInt8: {\n      SoftmaxQuantized(input, output, *data);\n      return kTfLiteOk;\n    }\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s (%d) not supported.\",\n                         TfLiteTypeGetName(input->type), input->type);\n      return kTfLiteError;\n  }\n}\n}  // namespace activations\n\nTfLiteRegistration Register_SOFTMAX() {\n  return {/*init=*/activations::SoftmaxInit,\n          /*free=*/nullptr,\n          /*prepare=*/activations::SoftmaxPrepare,\n          /*invoke=*/activations::SoftmaxEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"