"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace split {\n\ntemplate <typename T>\nTfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,\n                       const TfLiteEvalTensor* input, int axis_value) {\n  const int output_count = NumOutputs(node);\n  const TfLiteIntArray* input_dims = input->dims;\n  const TfLiteEvalTensor* output0 =\n      tflite::micro::GetEvalOutput(context, node, 0);\n  const TfLiteIntArray* output_dims = output0->dims;\n\n  const int split_dimensions = input_dims->size;\n  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;\n\n  TFLITE_DCHECK_LT(axis, split_dimensions);\n  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);\n\n  int64_t split_size = output_dims->data[axis] * output_count;\n\n  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);\n  int64_t outer_size = 1;\n  for (int i = 0; i < axis; ++i) {\n    outer_size *= input_dims->data[i];\n  }\n\n  int64_t base_inner_size = 1;\n  for (int i = axis + 1; i < split_dimensions; ++i) {\n    base_inner_size *= input_dims->data[i];\n  }\n\n  const T* input_ptr = tflite::micro::GetTensorData<T>(input);\n  for (int k = 0; k < outer_size; ++k) {\n    for (int i = 0; i < output_count; ++i) {\n      TfLiteEvalTensor* t = tflite::micro::GetEvalOutput(context, node, i);\n      T* output_data = tflite::micro::GetTensorData<T>(t);\n      const int copy_size = output_dims->data[axis] * base_inner_size;\n      T* output_ptr = output_data + k * copy_size;\n      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];\n      input_ptr += copy_size;\n    }\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* axis = GetInput(context, node, 0);\n  TF_LITE_ENSURE(context, axis != nullptr);\n\n  // Dynamic output tensors are needed if axis tensor is not constant.\n  // But Micro doesn't support dynamic memory allocation, so we only support\n  // constant axis tensor for now.\n  TF_LITE_ENSURE_MSG(context, IsConstantTensor(axis),\n                     \"Non constant axis tensor not supported\");\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteEvalTensor* axis = tflite::micro::GetEvalInput(context, node, 0);\n  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 1);\n\n  int axis_value = tflite::micro::GetTensorData<int32_t>(axis)[0];\n  if (axis_value < 0) {\n    axis_value += input->dims->size;\n  }\n\n  TF_LITE_ENSURE(context, axis_value >= 0);\n  TF_LITE_ENSURE(context, axis_value < input->dims->size);\n\n  switch (input->type) {\n    case kTfLiteFloat32: {\n      return SplitImpl<float>(context, node, input, axis_value);\n    }\n    case kTfLiteUInt8: {\n      return SplitImpl<uint8_t>(context, node, input, axis_value);\n    }\n    case kTfLiteInt8: {\n      return SplitImpl<int8_t>(context, node, input, axis_value);\n    }\n    case kTfLiteInt16: {\n      return SplitImpl<int16_t>(context, node, input, axis_value);\n    }\n    case kTfLiteInt32: {\n      return SplitImpl<int32_t>(context, node, input, axis_value);\n    }\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s currently not supported.\",\n                         TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n#undef TF_LITE_SPLIT\n\n  return kTfLiteOk;\n}\n\n}  // namespace split\n\nTfLiteRegistration Register_SPLIT() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/split::Prepare,\n          /*invoke=*/split::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"