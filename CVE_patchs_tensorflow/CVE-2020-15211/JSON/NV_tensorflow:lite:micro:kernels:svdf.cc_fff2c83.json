"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <math.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/common.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/op_macros.h\"\n#include \"tensorflow/lite/micro/kernels/activation_utils.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/micro_utils.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace svdf {\nnamespace {\n\nstruct OpData {\n  int32_t effective_scale_1_a;\n  int32_t effective_scale_2_a;\n  // b versions of each scale are kept at int since the numbers are just the\n  // shift value - typically between [-32, 32].\n  int effective_scale_1_b;\n  int effective_scale_2_b;\n  int scratch_tensor_index;\n  int scratch_output_tensor_index;\n\n  // Cached tensor zero point values for quantized operations.\n  int input_zero_point;\n  int output_zero_point;\n};\n\n/**\n * This version of SVDF is specific to TFLite Micro. It contains the following\n * differences between the TFLite version:\n *\n * 1.) Scratch tensor allocation - scratch tensors must be known ahead of time\n * for the Micro interpreter.\n * 2.) Output dimensions - the TFLite version determines output size and runtime\n * and resizes the output tensor. Micro runtime does not support tensor\n * resizing.\n */\nstatic inline void ApplyTimeWeightsBiasAndActivation(\n    int batch_size, int memory_size, int num_filters, int num_units, int rank,\n    const float* const __restrict__ weights_time_ptr,\n    const float* const __restrict__ bias_ptr, TfLiteFusedActivation activation,\n    float* const __restrict__ state_ptr, float* const __restrict__ scratch_ptr,\n    float* const __restrict__ output_ptr) {\n  // Compute matmul(activation_state, weights_time).\n  for (int b = 0; b < batch_size; ++b) {\n    // Perform batched vector dot product:\n    float* scratch_ptr_batch = scratch_ptr + b * num_filters;\n    const float* vector1_ptr = weights_time_ptr;\n    const float* vector2_ptr = state_ptr + b * memory_size * num_filters;\n    for (int i = 0; i < num_filters; ++i) {\n      *scratch_ptr_batch = 0.f;\n      for (int j = 0; j < memory_size; ++j) {\n        *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;\n      }\n      scratch_ptr_batch++;\n    }\n  }\n\n  // Initialize output with bias if provided.\n  if (bias_ptr) {\n    // VectorBatchVectorAssign\n    for (int i = 0; i < batch_size; ++i) {\n      float* output_data = output_ptr + i * num_units;\n      const float* bias_data = bias_ptr;\n      for (int j = 0; j < num_units; ++j) {\n        *output_data++ = *bias_data++;\n      }\n    }\n  } else {\n    float* output_data = output_ptr;\n    for (int i = 0; i < batch_size * num_units; ++i) {\n      *output_data++ = 0.0f;\n    }\n  }\n\n  // Reduction sum.\n  for (int b = 0; b < batch_size; ++b) {\n    float* output_ptr_batch = output_ptr + b * num_units;\n    float* scratch_ptr_batch = scratch_ptr + b * num_filters;\n\n    // Reduction sum vector\n    for (int i = 0; i < num_units; ++i) {\n      for (int j = 0; j < rank; j++) {\n        output_ptr_batch[i] += *scratch_ptr_batch++;\n      }\n    }\n  }\n\n  // Apply activation.\n  for (int b = 0; b < batch_size; ++b) {\n    float* output_ptr_batch = output_ptr + b * num_units;\n    for (int i = 0; i < num_units; ++i) {\n      *output_ptr_batch = ActivationValFloat(activation, *output_ptr_batch);\n      ++output_ptr_batch;\n    }\n  }\n}\n\ninline void EvalFloatSVDF(\n    TfLiteContext* context, TfLiteNode* node, const TfLiteEvalTensor* input,\n    const TfLiteEvalTensor* weights_feature,\n    const TfLiteEvalTensor* weights_time, const TfLiteEvalTensor* bias,\n    const TfLiteSVDFParams* params, int scratch_tensor_index,\n    TfLiteEvalTensor* activation_state, TfLiteEvalTensor* output) {\n  const int rank = params->rank;\n  const int batch_size = input->dims->data[0];\n  const int input_size = input->dims->data[1];\n  const int num_filters = weights_feature->dims->data[0];\n  const int num_units = num_filters / rank;\n  const int memory_size = weights_time->dims->data[1];\n\n  const float* weights_feature_ptr =\n      tflite::micro::GetTensorData<float>(weights_feature);\n  const float* weights_time_ptr =\n      tflite::micro::GetTensorData<float>(weights_time);\n  const float* bias_ptr = tflite::micro::GetTensorData<float>(bias);\n  const float* input_ptr = tflite::micro::GetTensorData<float>(input);\n\n  float* state_ptr = tflite::micro::GetTensorData<float>(activation_state);\n\n  TFLITE_DCHECK(context != nullptr);\n  TFLITE_DCHECK(context->GetScratchBuffer != nullptr);\n\n  float* scratch_ptr = static_cast<float*>(\n      context->GetScratchBuffer(context, scratch_tensor_index));\n\n  float* output_ptr = tflite::micro::GetTensorData<float>(output);\n\n  // Left shift the activation_state.\n  {\n    float* new_state_start = state_ptr;\n    const float* old_state_start = state_ptr + 1;\n    const float* old_state_end =\n        state_ptr + batch_size * num_filters * memory_size;\n    while (old_state_start != old_state_end) {\n      *new_state_start++ = *old_state_start++;\n    }\n  }\n\n  // Note: no need to clear the latest activation, matmul is not accumulative.\n\n  // Compute conv1d(inputs, weights_feature).\n  // The activation_state's rightmost column is used to save current cycle\n  // activation. This is achieved by starting at state_ptr[memory_size - 1] and\n  // having the stride equal to memory_size.\n\n  // Perform batched matrix vector multiply operation:\n  {\n    const float* matrix = weights_feature_ptr;\n    const float* vector = input_ptr;\n    float* result = &state_ptr[memory_size - 1];\n    float* result_in_batch = result;\n    for (int i = 0; i < batch_size; ++i) {\n      const float* matrix_ptr = matrix;\n      for (int j = 0; j < num_filters; ++j) {\n        float dot_prod = 0.0f;\n        const float* vector_in_batch = vector + i * input_size;\n        for (int k = 0; k < input_size; ++k) {\n          dot_prod += *matrix_ptr++ * *vector_in_batch++;\n        }\n        *result_in_batch = dot_prod;\n        result_in_batch += memory_size;\n      }\n    }\n  }\n\n  ApplyTimeWeightsBiasAndActivation(\n      batch_size, memory_size, num_filters, num_units, rank, weights_time_ptr,\n      bias_ptr, params->activation, state_ptr, scratch_ptr, output_ptr);\n}\n\nvoid EvalIntegerSVDF(TfLiteContext* context, TfLiteNode* node,\n                     const TfLiteEvalTensor* input_tensor,\n                     const TfLiteEvalTensor* weights_feature_tensor,\n                     const TfLiteEvalTensor* weights_time_tensor,\n                     const TfLiteEvalTensor* bias_tensor,\n                     const TfLiteSVDFParams* params,\n                     TfLiteEvalTensor* activation_state_tensor,\n                     TfLiteEvalTensor* output_tensor, const OpData& data) {\n  const int n_rank = params->rank;\n  const int n_batch = input_tensor->dims->data[0];\n  const int n_input = input_tensor->dims->data[1];\n  const int n_filter = weights_feature_tensor->dims->data[0];\n  const int n_unit = n_filter / n_rank;\n  const int n_memory = weights_time_tensor->dims->data[1];\n\n  TFLITE_DCHECK(context != nullptr);\n  TFLITE_DCHECK(context->GetScratchBuffer != nullptr);\n\n  int32_t* scratch_tensor = static_cast<int32_t*>(\n      context->GetScratchBuffer(context, data.scratch_tensor_index));\n  int32_t* scratch_output_tensor = static_cast<int32_t*>(\n      context->GetScratchBuffer(context, data.scratch_output_tensor_index));\n\n  // Shift states.\n  int16_t* const state_ptr =\n      tflite::micro::GetTensorData<int16_t>(activation_state_tensor);\n\n  // Left shift the activation_state.\n  {\n    int16_t* new_state_start = state_ptr;\n    const int16_t* old_state_start = state_ptr + 1;\n    const int16_t* old_state_end = state_ptr + n_batch * n_filter * n_memory;\n    while (old_state_start != old_state_end) {\n      *new_state_start++ = *old_state_start++;\n    }\n  }\n\n  // Note: no need to clear the latest activation, matmul is not accumulative.\n\n  // Feature matmul.\n  {\n    int16_t* state =\n        tflite::micro::GetTensorData<int16_t>(activation_state_tensor);\n    const int8_t* input = tflite::micro::GetTensorData<int8_t>(input_tensor);\n    const int8_t* weight_feature =\n        tflite::micro::GetTensorData<int8_t>(weights_feature_tensor);\n    const int32_t output_max = std::numeric_limits<int16_t>::max();\n    const int32_t output_min = std::numeric_limits<int16_t>::min();\n    int16_t* result_in_batch = state + (n_memory - 1);\n    for (int b = 0; b < n_batch; b++) {\n      const int8_t* matrix_ptr = weight_feature;\n      for (int r = 0; r < n_filter; r++) {\n        int32_t dot_prod = 0;\n        const int8_t* vector_in_batch = input + b * n_input;\n        for (int c = 0; c < n_input; c++) {\n          dot_prod +=\n              *matrix_ptr++ * (*vector_in_batch++ - data.input_zero_point);\n        }\n        dot_prod = MultiplyByQuantizedMultiplier(\n            dot_prod, data.effective_scale_1_a, data.effective_scale_1_b);\n        dot_prod = std::min(std::max(output_min, dot_prod), output_max);\n        // This assumes state is symmetrically quantized. Otherwise last bit of\n        // state should be initialized to its zero point and accumulate the\n        // dot_prod.\n        // Equivalent as the following:\n        //     result_in_batch = zero point, which happens to be zero.\n        //     result_in_batch += dot_prod_56.\n        *result_in_batch = dot_prod;\n        result_in_batch += n_memory;\n      }\n    }\n  }\n\n  // Time.\n  {\n    for (int b = 0; b < n_batch; ++b) {\n      int32_t* scratch_ptr_batch = scratch_tensor + b * n_filter;\n\n      // Perform batched vector dot product:\n      const int16_t* vector1_ptr =\n          tflite::micro::GetTensorData<int16_t>(weights_time_tensor);\n      const int16_t* vector2_ptr =\n          tflite::micro::GetTensorData<int16_t>(activation_state_tensor) +\n          b * n_memory * n_filter;\n\n      for (int i = 0; i < n_filter; i++) {\n        *scratch_ptr_batch = 0;\n        for (int j = 0; j < n_memory; j++) {\n          *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;\n        }\n        scratch_ptr_batch++;\n      }\n    }\n  }\n\n  // Reduce, add bias, rescale, activation.\n  {\n    // Add bias.\n    if (bias_tensor) {\n      // Vector batch assign:\n      const int32_t* bias_data =\n          tflite::micro::GetTensorData<int32_t>(bias_tensor);\n      for (int i = 0; i < n_batch; ++i) {\n        int32_t* output_ptr = scratch_output_tensor + i * n_unit;\n        const int32_t* bias_ptr = bias_data;\n        for (int j = 0; j < n_unit; ++j) {\n          *output_ptr++ = *bias_ptr++;\n        }\n      }\n    } else {\n      int32_t* output_ptr = scratch_output_tensor;\n      for (int i = 0; i < n_batch * n_unit; ++i) {\n        *output_ptr++ = 0;\n      }\n    }\n\n    // Reduce.\n    for (int b = 0; b < n_batch; ++b) {\n      int32_t* output_temp_ptr = scratch_output_tensor + b * n_unit;\n      int32_t* scratch_ptr_batch = scratch_tensor + b * n_filter;\n\n      // Reduction sum vector\n      for (int i = 0; i < n_unit; ++i) {\n        for (int j = 0; j < n_rank; ++j) {\n          output_temp_ptr[i] += *scratch_ptr_batch++;\n        }\n      }\n    }\n\n    // Rescale.\n    const int32_t output_max = std::numeric_limits<int8_t>::max();\n    const int32_t output_min = std::numeric_limits<int8_t>::min();\n    for (int i = 0; i < n_batch * n_unit; ++i) {\n      int32_t x1 = scratch_output_tensor[i];\n      int32_t x2 = MultiplyByQuantizedMultiplier(x1, data.effective_scale_2_a,\n                                                 data.effective_scale_2_b);\n      int32_t x3 = x2 + data.output_zero_point;\n      int32_t x4 = std::min(std::max(output_min, x3), output_max);\n      tflite::micro::GetTensorData<int8_t>(output_tensor)[i] =\n          static_cast<int8_t>(x4);\n    }\n  }\n}\n\n}  // namespace\n\n// Input tensors.\nconstexpr int kInputTensor = 0;\nconstexpr int kWeightsFeatureTensor = 1;\nconstexpr int kWeightsTimeTensor = 2;\nconstexpr int kBiasTensor = 3;\n// This is a variable tensor, and will be modified by this op.\nconstexpr int kInputActivationStateTensor = 4;\n\n// Output tensor.\nconstexpr int kOutputTensor = 0;\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(OpData));\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->builtin_data != nullptr);\n\n  const auto* params = static_cast<const TfLiteSVDFParams*>(node->builtin_data);\n\n  // Validate Tensor Inputs (dtype depends on quantization):\n  // [0] = Input, {2, batch_size, input_size}\n  // [1] = Weights Feature, {2, num_filters, input_size}\n  // [2] = Weights Time, {2, num_filters, memory_size}\n  // [3] = Bias (optional), {1, num_units}\n  // [4] = Activation State (variable),\n  //         {2, batch_size, memory_size * num_filters}\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TF_LITE_ENSURE(context, input != nullptr);\n  const TfLiteTensor* weights_feature =\n      GetInput(context, node, kWeightsFeatureTensor);\n  TF_LITE_ENSURE(context, weights_feature != nullptr);\n  const TfLiteTensor* weights_time =\n      GetInput(context, node, kWeightsTimeTensor);\n  TF_LITE_ENSURE(context, weights_time != nullptr);\n  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);\n  const TfLiteTensor* activation_state =\n      GetInput(context, node, kInputActivationStateTensor);\n  TF_LITE_ENSURE(context, activation_state != nullptr);\n\n  // Define input constants based on input tensor definition above:\n  const int rank = params->rank;\n  const int input_size = input->dims->data[1];\n  const int batch_size = input->dims->data[0];\n  const int num_filters = weights_feature->dims->data[0];\n  TF_LITE_ENSURE_EQ(context, num_filters % rank, 0);\n  const int num_units = num_filters / rank;\n  const int memory_size = weights_time->dims->data[1];\n\n  // Validate Input Tensor:\n  TF_LITE_ENSURE(context,\n                 input->type == kTfLiteFloat32 || input->type == kTfLiteInt8);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 2);\n\n  // Validate Tensor Output:\n  // [0] = float/int8_t, {2, batch_size, num_units}\n  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  TF_LITE_ENSURE(context, output != nullptr);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(output), 2);\n  TF_LITE_ENSURE_EQ(context, output->dims->data[0], batch_size);\n  TF_LITE_ENSURE_EQ(context, output->dims->data[1], num_units);\n\n  // Validate Weights Feature Input Tensor:\n  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_feature), 2);\n  TF_LITE_ENSURE_EQ(context, weights_feature->dims->data[1], input_size);\n\n  // Validate Weights Time Input Tensor:\n  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_time), 2);\n  TF_LITE_ENSURE_EQ(context, weights_time->dims->data[0], num_filters);\n  TF_LITE_ENSURE_EQ(context, weights_time->dims->data[1], memory_size);\n\n  // Validate Optional Bias Input Tensor:\n  if (bias != nullptr) {\n    TF_LITE_ENSURE_EQ(context, bias->dims->data[0], num_units);\n  }\n\n  // Validate Activation State Input Tensor:\n  TF_LITE_ENSURE_EQ(context, NumDimensions(activation_state), 2);\n  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[0], batch_size);\n  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[1],\n                    memory_size * num_filters);\n  // Since is_variable is not part of TFLiteEvalTensor, check is_variable here.\n  TF_LITE_ENSURE_EQ(context, activation_state->is_variable, true);\n\n  TF_LITE_ENSURE_EQ(context, node->inputs->size, 5);\n\n  TFLITE_DCHECK(node->user_data != nullptr);\n  OpData* data = static_cast<OpData*>(node->user_data);\n\n  if (input->type == kTfLiteInt8) {\n    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteInt8);\n    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteInt16);\n    TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteInt16);\n    if (bias != nullptr) {\n      TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteInt32);\n    }\n\n    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);\n\n    const double effective_scale_1 = static_cast<double>(\n        input->params.scale * weights_feature->params.scale /\n        activation_state->params.scale);\n    const double effective_scale_2 =\n        static_cast<double>(activation_state->params.scale *\n                            weights_time->params.scale / output->params.scale);\n\n    // TODO(b/162018098): Use TF_LITE_ENSURE_NEAR when it is ready.\n    TF_LITE_ENSURE(\n        context,\n        std::abs(static_cast<double>(bias->params.scale) -\n                 static_cast<double>(activation_state->params.scale *\n                                     weights_time->params.scale)) < 1e-5);\n\n    QuantizeMultiplier(effective_scale_1, &(data->effective_scale_1_a),\n                       &(data->effective_scale_1_b));\n    QuantizeMultiplier(effective_scale_2, &(data->effective_scale_2_a),\n                       &(data->effective_scale_2_b));\n\n    data->input_zero_point = input->params.zero_point;\n    data->output_zero_point = output->params.zero_point;\n\n    TFLITE_DCHECK(context->RequestScratchBufferInArena != nullptr);\n\n    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(\n        context, batch_size * num_filters * sizeof(int32_t),\n        &(data->scratch_tensor_index));\n    TF_LITE_ENSURE_OK(context, scratch_status);\n\n    const TfLiteStatus scratch_output_status =\n        context->RequestScratchBufferInArena(\n            context, batch_size * num_units * sizeof(int32_t),\n            &(data->scratch_output_tensor_index));\n    TF_LITE_ENSURE_OK(context, scratch_output_status);\n  } else {\n    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteFloat32);\n    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteFloat32);\n    TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteFloat32);\n    if (bias != nullptr) {\n      TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteFloat32);\n    }\n    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);\n\n    TFLITE_DCHECK(context->RequestScratchBufferInArena != nullptr);\n    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(\n        context, batch_size * num_filters * sizeof(float),\n        &(data->scratch_tensor_index));\n    TF_LITE_ENSURE_OK(context, scratch_status);\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData& data = *(static_cast<const OpData*>(node->user_data));\n\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, kInputTensor);\n  const TfLiteEvalTensor* weights_feature =\n      tflite::micro::GetEvalInput(context, node, kWeightsFeatureTensor);\n  const TfLiteEvalTensor* weights_time =\n      tflite::micro::GetEvalInput(context, node, kWeightsTimeTensor);\n  const TfLiteEvalTensor* bias =\n      (NumInputs(node) == 5)\n          ? tflite::micro::GetEvalInput(context, node, kBiasTensor)\n          : nullptr;\n  TfLiteEvalTensor* activation_state = tflite::micro::GetMutableEvalInput(\n      context, node, kInputActivationStateTensor);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  switch (weights_feature->type) {\n    case kTfLiteFloat32: {\n      EvalFloatSVDF(context, node, input, weights_feature, weights_time, bias,\n                    params, data.scratch_tensor_index, activation_state,\n                    output);\n      return kTfLiteOk;\n      break;\n    }\n\n    case kTfLiteInt8: {\n      EvalIntegerSVDF(context, node, input, weights_feature, weights_time, bias,\n                      params, activation_state, output, data);\n      return kTfLiteOk;\n      break;\n    }\n\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",\n                         TfLiteTypeGetName(weights_feature->type));\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace svdf\n\nTfLiteRegistration Register_SVDF() {\n  return {/*init=*/svdf::Init,\n          /*free=*/nullptr,\n          /*prepare=*/svdf::Prepare,\n          /*invoke=*/svdf::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"