"/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/kernels/internal/reference/integer_ops/tanh.h\"\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/common.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/reference/tanh.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/op_macros.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/micro_utils.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace activations {\nnamespace {\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\nstruct OpData {\n  int32_t input_zero_point;\n  int32_t input_range_radius;\n  int32_t input_multiplier;\n  int input_left_shift;\n};\n\nvoid* TanhInit(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(OpData));\n}\n\nTfLiteStatus CalculateArithmeticOpData(TfLiteContext* context, TfLiteNode* node,\n                                       OpData* data) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TF_LITE_ENSURE(context, input != nullptr);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  TF_LITE_ENSURE(context, output != nullptr);\n\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {\n    static constexpr int kInputIntegerBits = 4;\n    const double input_real_multiplier =\n        static_cast<double>(input->params.scale) *\n        static_cast<double>(1 << (31 - kInputIntegerBits));\n\n    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);\n    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));\n\n    data->input_range_radius =\n        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus TanhPrepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n\n  OpData* data = static_cast<OpData*>(node->user_data);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TF_LITE_ENSURE(context, input != nullptr);\n  data->input_zero_point = input->params.zero_point;\n  return CalculateArithmeticOpData(context, node, data);\n}\n\n}  // namespace\n\nTfLiteStatus TanhEval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, kInputTensor);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData& data = *(static_cast<const OpData*>(node->user_data));\n\n  switch (input->type) {\n    case kTfLiteFloat32: {\n      reference_ops::Tanh(tflite::micro::GetTensorShape(input),\n                          tflite::micro::GetTensorData<float>(input),\n                          tflite::micro::GetTensorShape(output),\n                          tflite::micro::GetTensorData<float>(output));\n      return kTfLiteOk;\n    } break;\n    case kTfLiteInt16: {\n      TanhParams params;\n      params.input_left_shift = data.input_left_shift;\n      reference_ops::Tanh(params, tflite::micro::GetTensorShape(input),\n                          tflite::micro::GetTensorData<int16_t>(input),\n                          tflite::micro::GetTensorShape(output),\n                          tflite::micro::GetTensorData<int16_t>(output));\n      return kTfLiteOk;\n    } break;\n    case kTfLiteUInt8: {\n      TanhParams params;\n      params.input_zero_point = data.input_zero_point;\n      params.input_range_radius = data.input_range_radius;\n      params.input_multiplier = data.input_multiplier;\n      params.input_left_shift = data.input_left_shift;\n      reference_ops::Tanh(params, tflite::micro::GetTensorShape(input),\n                          tflite::micro::GetTensorData<uint8_t>(input),\n                          tflite::micro::GetTensorShape(output),\n                          tflite::micro::GetTensorData<uint8_t>(output));\n\n      return kTfLiteOk;\n    } break;\n    case kTfLiteInt8: {\n      reference_integer_ops::Tanh(\n          data.input_zero_point, data.input_range_radius, data.input_multiplier,\n          data.input_left_shift, tflite::micro::GetTensorShape(input),\n          tflite::micro::GetTensorData<int8_t>(input),\n          tflite::micro::GetTensorShape(output),\n          tflite::micro::GetTensorData<int8_t>(output));\n      return kTfLiteOk;\n    } break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Input %s, output %s not supported.\",\n                         TfLiteTypeGetName(input->type),\n                         TfLiteTypeGetName(output->type));\n      return kTfLiteError;\n  }\n}\n\n}  // namespace activations\n\nTfLiteRegistration Register_TANH() {\n  return {/*init=*/activations::TanhInit,\n          /*free=*/nullptr,\n          /*prepare=*/activations::TanhPrepare,\n          /*invoke=*/activations::TanhEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"