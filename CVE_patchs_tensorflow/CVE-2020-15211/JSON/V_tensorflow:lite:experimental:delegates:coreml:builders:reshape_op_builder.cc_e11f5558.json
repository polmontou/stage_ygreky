"/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/experimental/delegates/coreml/builders/reshape_op_builder.h\"\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/experimental/delegates/coreml/builders/op_builder.h\"\n#include \"tensorflow/lite/experimental/delegates/coreml/builders/op_factory.h\"\n#include \"tensorflow/lite/experimental/delegates/coreml/builders/op_validator.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace delegates {\nnamespace coreml {\n\nconst char* ReshapeOpBuilder::DebugName() {\n  if (!str_debug_name_[0]) {\n    GetDebugName(\"ReshapeOpBuilder\", node_id_, str_debug_name_);\n  }\n  return str_debug_name_;\n}\n\nCoreML::Specification::NeuralNetworkLayer* ReshapeOpBuilder::Build() {\n  if (layer_ == nullptr) {\n    layer_.reset(new CoreML::Specification::NeuralNetworkLayer);\n  }\n  layer_->set_name(DebugName());\n  for (int dim : shape_) {\n    layer_->mutable_reshape()->add_targetshape(dim);\n  }\n  if (need_transpose_)\n    layer_->mutable_reshape()->set_mode(\n        CoreML::Specification::ReshapeLayerParams::CHANNEL_LAST);\n  return layer_.release();\n}\n\nvoid ReshapeOpBuilder::SetShapeFromTensor(const TfLiteTensor* output_shape,\n                                          const TfLiteIntArray* input_shape) {\n  TfLiteIntArray* shape = TfLiteIntArrayCreate(output_shape->dims->data[0]);\n  std::memcpy(shape->data, GetTensorData<int>(output_shape),\n              shape->size * sizeof(int));\n\n  SetShapeFromIntArray(shape, input_shape);\n  TfLiteIntArrayFree(shape);\n}\n\nvoid ReshapeOpBuilder::SetShapeFromIntArray(const TfLiteIntArray* output_shape,\n                                            const TfLiteIntArray* input_shape) {\n  // ignore first dimension (batch)\n  std::copy(output_shape->data + 1, output_shape->data + output_shape->size,\n            std::back_inserter(shape_));\n\n  int64_t reshape_size = 1;\n  int negative_index = -1;\n  for (int i = 0; i < shape_.size(); ++i) {\n    if (shape_[i] == -1) {\n      negative_index = i;\n    } else {\n      reshape_size *= shape_[i];\n    }\n  }\n  if (negative_index >= 0) {\n    int64_t input_size = NumElements(input_shape);\n    shape_[negative_index] = input_size / reshape_size;\n  }\n\n  if (shape_.size() == 2) {\n    shape_ = {shape_[1], 1, shape_[0]};\n  } else if (shape_.size() == 3) {\n    shape_ = {shape_[2], shape_[0], shape_[1]};\n  }\n  // When channel dimension is changed, reshape should be done with HWC layout.\n  if (shape_[0] != input_shape->data[input_shape->size - 1]) {\n    need_transpose_ = true;\n  }\n}\n\nTfLiteStatus ReshapeOpBuilder::RegisterInputs(const TfLiteIntArray* inputs,\n                                              TfLiteContext* context) {\n  AddInput(inputs->data[0]);\n\n  if (inputs->size == 2) {\n    SetShapeFromTensor(&context->tensors[inputs->data[1]],\n                       context->tensors[inputs->data[0]].dims);\n  } else {\n    const auto* params = reinterpret_cast<TfLiteReshapeParams*>(builtin_data_);\n    TfLiteIntArray* output_shape = TfLiteIntArrayCreate(params->num_dimensions);\n    std::memcpy(output_shape->data, params->shape,\n                params->num_dimensions * sizeof(int));\n\n    SetShapeFromIntArray(output_shape, context->tensors[inputs->data[0]].dims);\n    TfLiteIntArrayFree(output_shape);\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus ReshapeOpBuilder::RegisterOutputs(const TfLiteIntArray* outputs,\n                                               TfLiteContext* context) {\n  graph_builder_->AddTensorWithID(outputs->data[0], GetOutput(context));\n  return kTfLiteOk;\n}\n\nbool IsReshapeOpSupported(const TfLiteRegistration* registration,\n                          const TfLiteNode* node, TfLiteContext* context,\n                          int coreml_version) {\n  if (coreml_version >= 3) {\n    return false;\n  }\n  if (node->inputs->size == 1) {\n    const auto* params =\n        reinterpret_cast<TfLiteReshapeParams*>(node->builtin_data);\n    return params->num_dimensions == 3 || params->num_dimensions == 4;\n  }\n\n  const int kShapeTensor = 1;\n  const auto* shape = GetInput(context, node, kShapeTensor);\n  if (shape->allocation_type != kTfLiteMmapRo) {\n    TF_LITE_KERNEL_LOG(context, \"Reshape has non-const shape.\");\n    return false;\n  }\n  const bool is_shape_tensor =\n      shape->dims->size == 1 && shape->type == kTfLiteInt32;\n  return is_shape_tensor &&\n         (shape->dims->data[0] == 3 || shape->dims->data[0] == 4);\n}\n\nOpBuilder* CreateReshapeOpBuilder(GraphBuilder* graph_builder) {\n  return new ReshapeOpBuilder(graph_builder);\n}\n\n}  // namespace coreml\n}  // namespace delegates\n}  // namespace tflite"