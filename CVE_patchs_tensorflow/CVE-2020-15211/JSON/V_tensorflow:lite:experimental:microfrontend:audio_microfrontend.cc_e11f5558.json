"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"flatbuffers/flexbuffers.h\"  // from @flatbuffers\n#include \"tensorflow/lite/context.h\"\n#include \"tensorflow/lite/experimental/microfrontend/lib/frontend.h\"\n#include \"tensorflow/lite/experimental/microfrontend/lib/frontend_util.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace custom {\nnamespace audio_microfrontend {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\ntypedef struct {\n  int sample_rate;\n  FrontendState* state;\n  int left_context;\n  int right_context;\n  int frame_stride;\n  bool zero_padding;\n  int out_scale;\n  bool out_float;\n} TfLiteAudioMicrofrontendParams;\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  auto* data = new TfLiteAudioMicrofrontendParams;\n\n  const uint8_t* buffer_t = reinterpret_cast<const uint8_t*>(buffer);\n  const flexbuffers::Map& m = flexbuffers::GetRoot(buffer_t, length).AsMap();\n\n  data->sample_rate = m[\"sample_rate\"].AsInt32();\n\n  struct FrontendConfig config;\n  config.window.size_ms = m[\"window_size\"].AsInt32();\n  config.window.step_size_ms = m[\"window_step\"].AsInt32();\n  config.filterbank.num_channels = m[\"num_channels\"].AsInt32();\n  config.filterbank.upper_band_limit = m[\"upper_band_limit\"].AsFloat();\n  config.filterbank.lower_band_limit = m[\"lower_band_limit\"].AsFloat();\n  config.noise_reduction.smoothing_bits = m[\"smoothing_bits\"].AsInt32();\n  config.noise_reduction.even_smoothing = m[\"even_smoothing\"].AsFloat();\n  config.noise_reduction.odd_smoothing = m[\"odd_smoothing\"].AsFloat();\n  config.noise_reduction.min_signal_remaining =\n      m[\"min_signal_remaining\"].AsFloat();\n  config.pcan_gain_control.enable_pcan = m[\"enable_pcan\"].AsBool();\n  config.pcan_gain_control.strength = m[\"pcan_strength\"].AsFloat();\n  config.pcan_gain_control.offset = m[\"pcan_offset\"].AsFloat();\n  config.pcan_gain_control.gain_bits = m[\"gain_bits\"].AsInt32();\n  config.log_scale.enable_log = m[\"enable_log\"].AsBool();\n  config.log_scale.scale_shift = m[\"scale_shift\"].AsInt32();\n\n  data->state = new FrontendState;\n  FrontendPopulateState(&config, data->state, data->sample_rate);\n\n  data->left_context = m[\"left_context\"].AsInt32();\n  data->right_context = m[\"right_context\"].AsInt32();\n  data->frame_stride = m[\"frame_stride\"].AsInt32();\n  data->zero_padding = m[\"zero_padding\"].AsBool();\n  data->out_scale = m[\"out_scale\"].AsInt32();\n  data->out_float = m[\"out_float\"].AsBool();\n\n  return data;\n}\n\nvoid Free(TfLiteContext* context, void* buffer) {\n  auto* data = reinterpret_cast<TfLiteAudioMicrofrontendParams*>(buffer);\n  FrontendFreeStateContents(data->state);\n  delete data->state;\n  delete data;\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* data =\n      reinterpret_cast<TfLiteAudioMicrofrontendParams*>(node->user_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 1);\n\n  TF_LITE_ENSURE_EQ(context, input->type, kTfLiteInt16);\n  output->type = kTfLiteInt32;\n  if (data->out_float) {\n    output->type = kTfLiteFloat32;\n  }\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(2);\n  int num_frames = 0;\n  if (input->dims->data[0] >= data->state->window.size) {\n    num_frames = (input->dims->data[0] - data->state->window.size) /\n                     data->state->window.step / data->frame_stride +\n                 1;\n  }\n  output_size->data[0] = num_frames;\n  output_size->data[1] = data->state->filterbank.num_channels *\n                         (1 + data->left_context + data->right_context);\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <typename T>\nvoid GenerateFeatures(TfLiteAudioMicrofrontendParams* data,\n                      const TfLiteTensor* input, TfLiteTensor* output) {\n  const int16_t* audio_data = GetTensorData<int16_t>(input);\n  int64_t audio_size = input->dims->data[0];\n\n  T* filterbanks_flat = GetTensorData<T>(output);\n\n  int num_frames = 0;\n  if (audio_size >= data->state->window.size) {\n    num_frames = (input->dims->data[0] - data->state->window.size) /\n                     data->state->window.step +\n                 1;\n  }\n  std::vector<std::vector<T>> frame_buffer(num_frames);\n\n  int frame_index = 0;\n  while (audio_size > 0) {\n    size_t num_samples_read;\n    struct FrontendOutput output = FrontendProcessSamples(\n        data->state, audio_data, audio_size, &num_samples_read);\n    audio_data += num_samples_read;\n    audio_size -= num_samples_read;\n\n    if (output.values != nullptr) {\n      frame_buffer[frame_index].reserve(output.size);\n      int i;\n      for (i = 0; i < output.size; ++i) {\n        frame_buffer[frame_index].push_back(static_cast<T>(output.values[i]) /\n                                            data->out_scale);\n      }\n      ++frame_index;\n    }\n  }\n\n  int index = 0;\n  std::vector<T> pad(data->state->filterbank.num_channels, 0);\n  int anchor;\n  for (anchor = 0; anchor < frame_buffer.size(); anchor += data->frame_stride) {\n    int frame;\n    for (frame = anchor - data->left_context;\n         frame <= anchor + data->right_context; ++frame) {\n      std::vector<T>* feature;\n      if (data->zero_padding && (frame < 0 || frame >= frame_buffer.size())) {\n        feature = &pad;\n      } else if (frame < 0) {\n        feature = &frame_buffer[0];\n      } else if (frame >= frame_buffer.size()) {\n        feature = &frame_buffer[frame_buffer.size() - 1];\n      } else {\n        feature = &frame_buffer[frame];\n      }\n      for (auto f : *feature) {\n        filterbanks_flat[index++] = f;\n      }\n    }\n  }\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* data =\n      reinterpret_cast<TfLiteAudioMicrofrontendParams*>(node->user_data);\n  FrontendReset(data->state);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  if (data->out_float) {\n    GenerateFeatures<float>(data, input, output);\n  } else {\n    GenerateFeatures<int32>(data, input, output);\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace audio_microfrontend\n\nTfLiteRegistration* Register_AUDIO_MICROFRONTEND() {\n  static TfLiteRegistration r = {\n      audio_microfrontend::Init, audio_microfrontend::Free,\n      audio_microfrontend::Prepare, audio_microfrontend::Eval};\n  return &r;\n}\n\n}  // namespace custom\n}  // namespace ops\n}  // namespace tflite"