"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/core/subgraph.h\"\n#include \"tensorflow/lite/experimental/resource/resource_variable.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace custom {\nnamespace assign_variable {\n\nconstexpr int kInputVariableId = 0;\nconstexpr int kInputValue = 1;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  // TODO(b/137042749): TFLite infrastructure (converter, delegate) doesn't\n  // fully support 0-output ops yet. Currently it works if we manually crfat\n  // a TFLite graph that contains variable ops. Note:\n  // * The TFLite Converter need to be changed to be able to produce an op\n  //   with 0 output.\n  // * The delegation code need to be changed to handle 0 output ops. However\n  //   everything still works fine when variable ops aren't used.\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 0);\n\n  const TfLiteTensor* input_resource_id_tensor =\n      GetInput(context, node, kInputVariableId);\n  TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);\n  TF_LITE_ENSURE_EQ(context, NumElements(input_resource_id_tensor), 1);\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);\n\n  const TfLiteTensor* input_resource_id_tensor =\n      GetInput(context, node, kInputVariableId);\n  const TfLiteTensor* input_value_tensor = GetInput(context, node, kInputValue);\n\n  int resource_id = input_resource_id_tensor->data.i32[0];\n  auto& resources = subgraph->resources();\n  resource::CreateResourceVariableIfNotAvailable(&resources, resource_id);\n  auto* variable = resource::GetResourceVariable(&resources, resource_id);\n  TF_LITE_ENSURE(context, variable != nullptr);\n  variable->AssignFrom(input_value_tensor);\n\n  return kTfLiteOk;\n}\n\n}  // namespace assign_variable\n\nTfLiteRegistration* Register_ASSIGN_VARIABLE() {\n  static TfLiteRegistration r = {nullptr, nullptr, assign_variable::Prepare,\n                                 assign_variable::Eval};\n  return &r;\n}\n\n}  // namespace custom\n}  // namespace ops\n}  // namespace tflite"