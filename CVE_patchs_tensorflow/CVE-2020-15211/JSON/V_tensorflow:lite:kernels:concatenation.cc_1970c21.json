"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/concatenation.h\"\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace concatenation {\n\n// This file has two implementation of Concatenation.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteConcatenationParams*>(node->builtin_data);\n  int axis = params->axis;\n  int num_inputs = node->inputs->size;\n\n  // The number of dimensions of the input tensors must match, and all\n  // dimensions except 'axis' must be equal.\n  const TfLiteTensor* t0 = GetInput(context, node, 0);\n  TfLiteType input_type = t0->type;\n  if (axis < 0) axis += t0->dims->size;\n  TF_LITE_ENSURE(context, axis >= 0);\n  TF_LITE_ENSURE(context, axis < t0->dims->size);\n\n  // TODO(ahentz): These are limitations of our implementation that could be\n  // removed with a bit of effort.\n  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);\n  TF_LITE_ENSURE(context,\n                 input_type == kTfLiteFloat32 || input_type == kTfLiteUInt8 ||\n                     input_type == kTfLiteInt8 || input_type == kTfLiteInt16 ||\n                     input_type == kTfLiteInt32 || input_type == kTfLiteInt64);\n\n  // Output dimensions will match input dimensions, except 'axis', which\n  // will be the sum of inputs\n  int sum_axis = t0->dims->data[axis];\n  for (int i = 1; i < num_inputs; ++i) {\n    const TfLiteTensor* t = GetInput(context, node, i);\n    TF_LITE_ENSURE_EQ(context, t->dims->size, t0->dims->size);\n    TF_LITE_ENSURE_EQ(context, t->type, input_type);\n    for (int d = 0; d < t0->dims->size; ++d) {\n      if (d == axis) {\n        sum_axis += t->dims->data[axis];\n      } else {\n        TF_LITE_ENSURE_EQ(context, t->dims->data[d], t0->dims->data[d]);\n      }\n    }\n  }\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(t0->dims->size);\n  for (int d = 0; d < t0->dims->size; ++d) {\n    output_size->data[d] = (d == axis) ? sum_axis : t0->dims->data[d];\n  }\n\n  TfLiteTensor* output = GetOutput(context, node, 0);\n  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input_type);\n\n  if (input_type == kTfLiteInt8) {\n    // Make sure there is no re-scaling needed for Int8 quantized kernel. This\n    // is a restriction we introduced to Int8 kernels.\n    VectorOfTensors<int8_t> all_inputs(*context, *node->inputs);\n    for (int i = 0; i < node->inputs->size; ++i) {\n      const TfLiteTensor* t = GetInput(context, node, i);\n      TF_LITE_ENSURE_EQ(context, t->params.scale, output->params.scale);\n      TF_LITE_ENSURE_EQ(context, t->params.zero_point,\n                        output->params.zero_point);\n    }\n  }\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteConcatenationParams*>(node->builtin_data);\n  int axis = params->axis;\n  TfLiteTensor* output = GetOutput(context, node, 0);\n  if (axis < 0) axis += output->dims->size;\n\n// TODO(ahentz): Creating 'all_inputs' below is not very efficient. We should\n// allocate and populate these during Prepare().\n// TODO(ycling): Activation function parameter is ignored. For now we dont have\n// a model with a Concatenation with fused activation function.\n#define TF_LITE_CONCATENATION(scalar)                                         \\\n  {                                                                           \\\n    VectorOfTensors<scalar> all_inputs(*context, *node->inputs);              \\\n    tflite::ConcatenationParams op_params;                                    \\\n    op_params.axis = axis;                                                    \\\n    op_params.inputs_count = node->inputs->size;                              \\\n    if (kernel_type == kReference) {                                          \\\n      reference_ops::Concatenation(op_params, all_inputs.shapes(),            \\\n                                   all_inputs.data(), GetTensorShape(output), \\\n                                   GetTensorData<scalar>(output));            \\\n    } else {                                                                  \\\n      optimized_ops::Concatenation(op_params, all_inputs.shapes(),            \\\n                                   all_inputs.data(), GetTensorShape(output), \\\n                                   GetTensorData<scalar>(output));            \\\n    }                                                                         \\\n  }\n\n#define TF_LITE_CONCATENATION_QUANTIZED()                         \\\n  {                                                               \\\n    VectorOfQuantizedTensors all_inputs(*context, *node->inputs); \\\n    tflite::ConcatenationParams op_params;                        \\\n    op_params.axis = axis;                                        \\\n    op_params.input_zeropoint = all_inputs.zero_point();          \\\n    op_params.input_scale = all_inputs.scale();                   \\\n    op_params.inputs_count = node->inputs->size;                  \\\n    op_params.output_zeropoint = output->params.zero_point;       \\\n    op_params.output_scale = output->params.scale;                \\\n    if (kernel_type == kReference) {                              \\\n      reference_ops::ConcatenationWithScaling(                    \\\n          op_params, all_inputs.shapes(), all_inputs.data(),      \\\n          GetTensorShape(output), GetTensorData<uint8>(output));  \\\n    } else {                                                      \\\n      optimized_ops::ConcatenationWithScaling(                    \\\n          op_params, all_inputs.shapes(), all_inputs.data(),      \\\n          GetTensorShape(output), GetTensorData<uint8>(output));  \\\n    }                                                             \\\n  }\n\n  switch (output->type) {  // Already know in/outtypes are same.\n    case kTfLiteFloat32:\n      TF_LITE_CONCATENATION(float);\n      break;\n    case kTfLiteInt32:\n      TF_LITE_CONCATENATION(int32);\n      break;\n    case kTfLiteUInt8:\n      TF_LITE_CONCATENATION_QUANTIZED();\n      break;\n    case kTfLiteInt8:\n      TF_LITE_CONCATENATION(int8_t);\n      break;\n    case kTfLiteInt64:\n      TF_LITE_CONCATENATION(int64_t);\n      break;\n    case kTfLiteInt16:\n      TF_LITE_CONCATENATION(int16_t);\n      break;\n    default:\n      context->ReportError(context, \"Type '%s' is not supported currently.\",\n                           TfLiteTypeGetName(output->type));\n      return kTfLiteError;\n  }\n\n#undef TF_LITE_CONCATENATION_QUANTIZED\n#undef TF_LITE_CONCATENATION\n\n  return kTfLiteOk;\n}\n\n#undef TF_LITE_MACRO_DISPATCH\n\n}  // namespace concatenation\n\nTfLiteRegistration* Register_CONCATENATION_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, concatenation::Prepare,\n      concatenation::Eval<concatenation::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_CONCATENATION_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, concatenation::Prepare,\n      concatenation::Eval<concatenation::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_CONCATENATION() {\n  // TODO(ahentz): It turns out the two versions of Concatenation are almost\n  // identical, so we should consider removing one.\n  return Register_CONCATENATION_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"