"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace depth_to_space {\n\n// This file has two implementation of DepthToSpace. Note that DepthToSpace only\n// works on 4D tensors.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n\n  auto data_type = output->type;\n  TF_LITE_ENSURE(context,\n                 data_type == kTfLiteFloat32 || data_type == kTfLiteUInt8 ||\n                     data_type == kTfLiteInt8 || data_type == kTfLiteInt32 ||\n                     data_type == kTfLiteInt64);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  const int block_size = params->block_size;\n  const int input_height = input->dims->data[1];\n  const int input_width = input->dims->data[2];\n  const int input_channels = input->dims->data[3];\n  int output_height = input_height * block_size;\n  int output_width = input_width * block_size;\n  int output_channels = input_channels / block_size / block_size;\n\n  TF_LITE_ENSURE_EQ(context, input_height, output_height / block_size);\n  TF_LITE_ENSURE_EQ(context, input_width, output_width / block_size);\n  TF_LITE_ENSURE_EQ(context, input_channels,\n                    output_channels * block_size * block_size);\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);\n  output_size->data[0] = input->dims->data[0];\n  output_size->data[1] = output_height;\n  output_size->data[2] = output_width;\n  output_size->data[3] = output_channels;\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n#define TF_LITE_DEPTH_TO_SPACE(type, scalar)                               \\\n  tflite::DepthToSpaceParams op_params;                                    \\\n  op_params.block_size = params->block_size;                               \\\n  type::DepthToSpace(op_params, GetTensorShape(input),                     \\\n                     GetTensorData<scalar>(input), GetTensorShape(output), \\\n                     GetTensorData<scalar>(output))\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, float);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, float);\n      }\n      break;\n    case kTfLiteUInt8:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, uint8_t);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, uint8_t);\n      }\n      break;\n    case kTfLiteInt8:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, int8_t);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, int8_t);\n      }\n      break;\n    case kTfLiteInt32:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, int32_t);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, int32_t);\n      }\n      break;\n    case kTfLiteInt64:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, int64_t);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, int64_t);\n      }\n      break;\n    default:\n      context->ReportError(context, \"Type '%s' not currently supported.\",\n                           TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n#undef TF_LITE_DEPTH_TO_SPACE\n\n  return kTfLiteOk;\n}\n\n}  // namespace depth_to_space\n\nTfLiteRegistration* Register_DEPTH_TO_SPACE_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, depth_to_space::Prepare,\n      depth_to_space::Eval<depth_to_space::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_DEPTH_TO_SPACE_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, depth_to_space::Prepare,\n      depth_to_space::Eval<depth_to_space::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_DEPTH_TO_SPACE() {\n  return Register_DEPTH_TO_SPACE_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"