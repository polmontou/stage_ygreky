"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// Op that looks up items from hashtable.\n//\n// Input:\n//     Tensor[0]: Hash key to lookup, dim.size == 1, int32\n//     Tensor[1]: Key of hashtable, dim.size == 1, int32\n//                *MUST* be sorted in ascending order.\n//     Tensor[2]: Value of hashtable, dim.size >= 1\n//                Tensor[1].Dim[0] == Tensor[2].Dim[0]\n//\n// Output:\n//   Output[0].dim[0] == Tensor[0].dim[0], num of lookups\n//   Each item in output is a raw bytes copy of corresponding item in input.\n//   When key does not exist in hashtable, the returned bytes are all 0s.\n//\n//   Output[1].dim = { Tensor[0].dim[0] }, num of lookups\n//   Each item indicates whether the corresponding lookup has a returned value.\n//   0 for missing key, 1 for found key.\n\n#include <stdint.h>\n\n#include <cstdlib>\n#include <cstring>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/string_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\n\nnamespace {\n\nint greater(const void* a, const void* b) {\n  return *static_cast<const int*>(a) - *static_cast<const int*>(b);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);\n\n  const TfLiteTensor* lookup = GetInput(context, node, 0);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);\n  TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);\n\n  const TfLiteTensor* key = GetInput(context, node, 1);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(key), 1);\n  TF_LITE_ENSURE_EQ(context, key->type, kTfLiteInt32);\n\n  const TfLiteTensor* value = GetInput(context, node, 2);\n  TF_LITE_ENSURE(context, NumDimensions(value) >= 1);\n  TF_LITE_ENSURE_EQ(context, SizeOfDimension(key, 0),\n                    SizeOfDimension(value, 0));\n  if (value->type == kTfLiteString) {\n    TF_LITE_ENSURE_EQ(context, NumDimensions(value), 1);\n  }\n\n  TfLiteTensor* hits = GetOutput(context, node, 1);\n  TF_LITE_ENSURE_EQ(context, hits->type, kTfLiteUInt8);\n  TfLiteIntArray* hitSize = TfLiteIntArrayCreate(1);\n  hitSize->data[0] = SizeOfDimension(lookup, 0);\n\n  TfLiteTensor* output = GetOutput(context, node, 0);\n  TF_LITE_ENSURE_EQ(context, value->type, output->type);\n\n  TfLiteStatus status = kTfLiteOk;\n  if (output->type != kTfLiteString) {\n    TfLiteIntArray* outputSize = TfLiteIntArrayCreate(NumDimensions(value));\n    outputSize->data[0] = SizeOfDimension(lookup, 0);\n    for (int i = 1; i < NumDimensions(value); i++) {\n      outputSize->data[i] = SizeOfDimension(value, i);\n    }\n    status = context->ResizeTensor(context, output, outputSize);\n  }\n  if (context->ResizeTensor(context, hits, hitSize) != kTfLiteOk) {\n    status = kTfLiteError;\n  }\n  return status;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  TfLiteTensor* output = GetOutput(context, node, 0);\n  TfLiteTensor* hits = GetOutput(context, node, 1);\n  const TfLiteTensor* lookup = GetInput(context, node, 0);\n  const TfLiteTensor* key = GetInput(context, node, 1);\n  const TfLiteTensor* value = GetInput(context, node, 2);\n\n  const int num_rows = SizeOfDimension(value, 0);\n  const int row_bytes = value->bytes / num_rows;\n  void* pointer = nullptr;\n  DynamicBuffer buf;\n\n  for (int i = 0; i < SizeOfDimension(lookup, 0); i++) {\n    int idx = -1;\n    pointer = bsearch(&(lookup->data.i32[i]), key->data.i32, num_rows,\n                      sizeof(int32_t), greater);\n    if (pointer != nullptr) {\n      idx = (reinterpret_cast<char*>(pointer) - (key->data.raw)) /\n            sizeof(int32_t);\n    }\n\n    if (idx >= num_rows || idx < 0) {\n      if (output->type == kTfLiteString) {\n        buf.AddString(nullptr, 0);\n      } else {\n        memset(output->data.raw + i * row_bytes, 0, row_bytes);\n      }\n      hits->data.uint8[i] = 0;\n    } else {\n      if (output->type == kTfLiteString) {\n        buf.AddString(GetString(value, idx));\n      } else {\n        memcpy(output->data.raw + i * row_bytes,\n               value->data.raw + idx * row_bytes, row_bytes);\n      }\n      hits->data.uint8[i] = 1;\n    }\n  }\n  if (output->type == kTfLiteString) {\n    buf.WriteToTensorAsVector(output);\n  }\n\n  return kTfLiteOk;\n}\n}  // namespace\n\nTfLiteRegistration* Register_HASHTABLE_LOOKUP() {\n  static TfLiteRegistration r = {nullptr, nullptr, Prepare, Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"