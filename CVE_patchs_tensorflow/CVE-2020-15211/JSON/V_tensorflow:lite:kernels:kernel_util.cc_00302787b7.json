"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\n#include <stdint.h>\n#include <stdlib.h>\n\n#include <algorithm>\n#include <limits>\n#include <memory>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/cppmath.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n\nnamespace tflite {\n\nnamespace {\n\ninline TfLiteTensor* GetMutableInput(const TfLiteContext* context,\n                                     const TfLiteNode* node, int index) {\n  if (index >= 0 && index < node->inputs->size) {\n    const int tensor_index = node->inputs->data[index];\n    if (tensor_index != kTfLiteOptionalTensor) {\n      if (context->tensors != nullptr) {\n        return &context->tensors[tensor_index];\n      } else {\n        return context->GetTensor(context, tensor_index);\n      }\n    }\n  }\n  return nullptr;\n}\n\n}  // anonymous namespace.\n\nconst TfLiteTensor* GetInput(const TfLiteContext* context,\n                             const TfLiteNode* node, int index) {\n  return GetMutableInput(context, node, index);\n}\n\nTfLiteTensor* GetVariableInput(TfLiteContext* context, const TfLiteNode* node,\n                               int index) {\n  TfLiteTensor* tensor = GetMutableInput(context, node, index);\n  return tensor->is_variable ? tensor : nullptr;\n}\n\nTfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,\n                        int index) {\n  if (index >= 0 && index < node->outputs->size) {\n    const int tensor_index = node->outputs->data[index];\n    if (tensor_index != kTfLiteOptionalTensor) {\n      if (context->tensors != nullptr) {\n        return &context->tensors[tensor_index];\n      } else {\n        return context->GetTensor(context, tensor_index);\n      }\n    }\n  }\n  return nullptr;\n}\n\nconst TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,\n                                           const TfLiteNode* node, int index) {\n  const bool use_tensor = index < node->inputs->size &&\n                          node->inputs->data[index] != kTfLiteOptionalTensor;\n  if (use_tensor) {\n    return GetMutableInput(context, node, index);\n  }\n  return nullptr;\n}\n\n// Per-axis\nTfLiteStatus PopulateConvolutionQuantizationParams(\n    TfLiteContext* context, const TfLiteTensor* input,\n    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,\n    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,\n    int32_t* output_activation_min, int32_t* output_activation_max,\n    int32_t* per_channel_multiplier, int* per_channel_shift) {\n  const auto* affine_quantization =\n      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);\n  return PopulateConvolutionQuantizationParams(\n      context, input, filter, bias, output, activation, multiplier, shift,\n      output_activation_min, output_activation_max, per_channel_multiplier,\n      per_channel_shift, affine_quantization->scale->size);\n}\n\n// Per-axis & per-tensor\nTfLiteStatus PopulateConvolutionQuantizationParams(\n    TfLiteContext* context, const TfLiteTensor* input,\n    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,\n    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,\n    int32_t* output_activation_min, int32_t* output_activation_max,\n    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {\n  TF_LITE_ENSURE_EQ(context, input->quantization.type,\n                    kTfLiteAffineQuantization);\n  TF_LITE_ENSURE_EQ(context, filter->quantization.type,\n                    kTfLiteAffineQuantization);\n  // TODO(jianlijianli): Enable bias type check and bias scale == input scale\n  // * filter scale for each channel in affine quantization once bias\n  // quantization is properly populated.\n  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,\n  // kTfLiteAffineQuantization);\n\n  // Check data type.\n  const auto* affine_quantization =\n      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);\n  TF_LITE_ENSURE(context, affine_quantization);\n  TF_LITE_ENSURE(context, affine_quantization->scale);\n  const bool is_per_channel = affine_quantization->scale->size > 1;\n  if (is_per_channel) {\n    //  Currently only Int8/Int16 is supported for per channel quantization.\n    TF_LITE_ENSURE(context,\n                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);\n    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);\n    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);\n    TF_LITE_ENSURE_EQ(\n        context, num_channels,\n        filter->dims->data[affine_quantization->quantized_dimension]);\n  }\n\n  // Populate multiplier and shift using affine quantization.\n  const float input_scale = input->params.scale;\n  const float output_scale = output->params.scale;\n  const float* filter_scales = affine_quantization->scale->data;\n  for (int i = 0; i < num_channels; ++i) {\n    // If per-tensor quantization parameter is specified, broadcast it along the\n    // quantization dimension (channels_out).\n    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];\n    const double filter_scale = static_cast<double>(scale);\n    const double effective_output_scale = static_cast<double>(input_scale) *\n                                          filter_scale /\n                                          static_cast<double>(output_scale);\n    int32_t significand;\n    int channel_shift;\n    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);\n    per_channel_multiplier[i] = significand;\n    per_channel_shift[i] = channel_shift;\n  }\n\n  // Populate scalar quantization parameters.\n  // This check on legacy quantization parameters is kept only for backward\n  // compatibility.\n  if (input->type == kTfLiteUInt8) {\n    // Check bias scale == input scale * filter scale.\n    double real_multiplier = 0.0;\n    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(\n        context, input, filter, bias, output, &real_multiplier));\n    int exponent;\n\n    // Populate quantization parameters with multiplier and shift.\n    QuantizeMultiplier(real_multiplier, multiplier, &exponent);\n    *shift = -exponent;\n  }\n  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||\n      input->type == kTfLiteInt16) {\n    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(\n        context, activation, output, output_activation_min,\n        output_activation_max));\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,\n                                              const TfLiteTensor* input,\n                                              const TfLiteTensor* filter,\n                                              const TfLiteTensor* bias,\n                                              TfLiteTensor* output,\n                                              double* multiplier) {\n  const double input_product_scale = static_cast<double>(input->params.scale) *\n                                     static_cast<double>(filter->params.scale);\n  // TODO(ahentz): The following conditions must be guaranteed by the training\n  // pipeline.\n  if (bias) {\n    const double bias_scale = static_cast<double>(bias->params.scale);\n    // Here we're making sure the input_product_scale & bias_scale are about the\n    // same. Since we have:\n    // (output - output_zp) * output_scale =\n    // input_product_scale * input_product + bias * bias_scale ---- (0)\n    //\n    // (0) equals:\n    // (input_product + bias) * input_product_scale ----- (1)\n    //           +\n    // bias * (bias_scale - input_product_scale)   ------ (2)\n    //\n    // For the real kernel computation, we're doing (1), so we really need to\n    // make sure (2) has minimum impact on the output, so:\n    // bias * (bias_scale - input_product_scale) / output_scale should be\n    // a small number for an integer.\n    // Since normally bias should be within a small range.\n    // We should expect (bias_scale - input_product_scale) / output_scale to\n    // be a small number like 0.02.\n    const double scale_diff = std::abs(input_product_scale - bias_scale);\n    const double output_scale = static_cast<double>(output->params.scale);\n\n    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);\n  }\n  return GetQuantizedConvolutionMultipler(context, input, filter, output,\n                                          multiplier);\n}\n\nTfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,\n                                              const TfLiteTensor* input,\n                                              const TfLiteTensor* filter,\n                                              TfLiteTensor* output,\n                                              double* multiplier) {\n  const double input_product_scale =\n      static_cast<double>(input->params.scale * filter->params.scale);\n  TF_LITE_ENSURE(context, input_product_scale >= 0);\n  *multiplier = input_product_scale / static_cast<double>(output->params.scale);\n\n  return kTfLiteOk;\n}\n\nnamespace {\nvoid CalculateActivationRangeQuantizedImpl(TfLiteFusedActivation activation,\n                                           int32_t qmin, int32_t qmax,\n                                           TfLiteTensor* output,\n                                           int32_t* act_min, int32_t* act_max) {\n  const auto scale = output->params.scale;\n  const auto zero_point = output->params.zero_point;\n\n  auto quantize = [scale, zero_point](float f) {\n    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));\n  };\n\n  if (activation == kTfLiteActRelu) {\n    *act_min = std::max(qmin, quantize(0.0));\n    *act_max = qmax;\n  } else if (activation == kTfLiteActRelu6) {\n    *act_min = std::max(qmin, quantize(0.0));\n    *act_max = std::min(qmax, quantize(6.0));\n  } else if (activation == kTfLiteActReluN1To1) {\n    *act_min = std::max(qmin, quantize(-1.0));\n    *act_max = std::min(qmax, quantize(1.0));\n  } else {\n    *act_min = qmin;\n    *act_max = qmax;\n  }\n}\n}  // namespace\n\nTfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,\n                                               TfLiteFusedActivation activation,\n                                               TfLiteTensor* output,\n                                               int32_t* act_min,\n                                               int32_t* act_max) {\n  int32_t qmin = 0;\n  int32_t qmax = 0;\n  if (output->type == kTfLiteUInt8) {\n    qmin = std::numeric_limits<uint8_t>::min();\n    qmax = std::numeric_limits<uint8_t>::max();\n  } else if (output->type == kTfLiteInt8) {\n    qmin = std::numeric_limits<int8_t>::min();\n    qmax = std::numeric_limits<int8_t>::max();\n  } else if (output->type == kTfLiteInt16) {\n    qmin = std::numeric_limits<int16_t>::min();\n    qmax = std::numeric_limits<int16_t>::max();\n  } else {\n    TF_LITE_ENSURE(context, false);\n  }\n\n  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,\n                                        act_max);\n  return kTfLiteOk;\n}\n\nbool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {\n  return TfLiteIntArrayEqual(input1->dims, input2->dims);\n}\n\n// TODO(petewarden): Having macros around this is ugly, look at other strategies\n// before replicating this approach elsewhere.\n#ifndef TF_LITE_STATIC_MEMORY\nTfLiteStatus CalculateShapeForBroadcast(TfLiteContext* context,\n                                        const TfLiteTensor* input1,\n                                        const TfLiteTensor* input2,\n                                        TfLiteIntArray** output_shape) {\n  int dims1 = NumDimensions(input1);\n  int dims2 = NumDimensions(input2);\n  int out_dims = std::max(dims1, dims2);\n  if (NumElements(input1) == 0) {\n    *output_shape = TfLiteIntArrayCopy(input1->dims);\n    return kTfLiteOk;\n  }\n  std::unique_ptr<TfLiteIntArray, void (*)(TfLiteIntArray*)> shape(\n      TfLiteIntArrayCreate(out_dims), TfLiteIntArrayFree);\n  for (int i = 0; i < out_dims; ++i) {\n    int d1 = i >= dims1 ? 1 : SizeOfDimension(input1, dims1 - i - 1);\n    int d2 = i >= dims2 ? 1 : SizeOfDimension(input2, dims2 - i - 1);\n    TF_LITE_ENSURE(context, d1 == d2 || d1 == 1 || d2 == 1);\n    shape->data[out_dims - i - 1] = std::max(d1, d2);\n  }\n  *output_shape = shape.release();\n  return kTfLiteOk;\n}\n\nTfLiteStatus CalculateShapeForBroadcast(TfLiteContext* context,\n                                        const TfLiteTensor* input1,\n                                        const TfLiteTensor* input2,\n                                        const TfLiteTensor* input3,\n                                        TfLiteIntArray** output_shape) {\n  int dims1 = NumDimensions(input1);\n  int dims2 = NumDimensions(input2);\n  int dims3 = NumDimensions(input3);\n  int out_dims = std::max(std::max(dims1, dims2), dims3);\n  std::unique_ptr<TfLiteIntArray, void (*)(TfLiteIntArray*)> shape(\n      TfLiteIntArrayCreate(out_dims), TfLiteIntArrayFree);\n  for (int i = 0; i < out_dims; ++i) {\n    int d1 = i >= dims1 ? 1 : SizeOfDimension(input1, dims1 - i - 1);\n    int d2 = i >= dims2 ? 1 : SizeOfDimension(input2, dims2 - i - 1);\n    int d3 = i >= dims3 ? 1 : SizeOfDimension(input3, dims3 - i - 1);\n    int max_value = std::max(std::max(d1, d2), d3);\n    TF_LITE_ENSURE(context, d1 == 1 || d1 == max_value);\n    TF_LITE_ENSURE(context, d2 == 1 || d2 == max_value);\n    TF_LITE_ENSURE(context, d3 == 1 || d3 == max_value);\n    shape->data[out_dims - i - 1] = max_value;\n  }\n  *output_shape = shape.release();\n  return kTfLiteOk;\n}\n#endif  // TF_LITE_STATIC_MEMORY\n\n}  // namespace tflite"