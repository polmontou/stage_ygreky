"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/integer_ops/l2normalization.h\"\n#include \"tensorflow/lite/kernels/internal/reference/l2normalization.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace l2norm {\n\n// This file has two implementation of L2Norm.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLiteL2NormParams*>(node->builtin_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  TF_LITE_ENSURE(context, NumDimensions(input) <= 4);\n\n  TF_LITE_ENSURE(context, output->type == kTfLiteFloat32 ||\n                              output->type == kTfLiteUInt8 ||\n                              output->type == kTfLiteInt8);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {\n    TF_LITE_ENSURE_EQ(context, output->params.scale, (1. / 128.));\n    if (output->type == kTfLiteUInt8) {\n      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 128);\n    }\n    if (output->type == kTfLiteInt8) {\n      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);\n    }\n  }\n\n  // TODO(ahentz): For some reason our implementations don't support\n  // activations.\n  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCopy(input->dims);\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  // TODO(b/143912164): instead of hardcode the epsilon here, we should read it\n  // from tensorflow, i.e., adding a params.\n  // We don't compute epsilon for quantized kernel:\n  //\n  // epsilon_float = (epsilon_quant - zp) * scale\n  // so\n  // espsilon_quant = epsilon_float / scale + zp\n  // We know epsilon_float is just a very small number to avoid division by\n  // zero error, and scale is > 1, so the integer value of epsilon for quant\n  // is just dominated by the zero point.\n  // Also, GetInvSqrtQuantizedMultiplierExp handles the scenario where the sum\n  // of input value squared is zero case well.\n  // So we don't even need to do handle the epsilon for quantized kernel case.\n  const float epsilon = 1e-6f;\n  if (output->type == kTfLiteFloat32) {\n#define TF_LITE_L2NORM(type)                                                 \\\n  tflite::L2NormalizationParams op_params;                                   \\\n  op_params.input_zero_point = 0;                                            \\\n  type::L2Normalization(op_params, GetTensorShape(input),                    \\\n                        GetTensorData<float>(input), GetTensorShape(output), \\\n                        GetTensorData<float>(output), epsilon)\n\n    if (kernel_type == kReference) {\n      TF_LITE_L2NORM(reference_ops);\n    }\n    if (kernel_type == kGenericOptimized) {\n      TF_LITE_L2NORM(optimized_ops);\n    }\n#undef TF_LITE_L2NORM\n  } else if (output->type == kTfLiteUInt8) {\n#define TF_LITE_L2NORM(type)                                                 \\\n  tflite::L2NormalizationParams op_params;                                   \\\n  op_params.input_zero_point = input->params.zero_point;                     \\\n  type::L2Normalization(op_params, GetTensorShape(input),                    \\\n                        GetTensorData<uint8>(input), GetTensorShape(output), \\\n                        GetTensorData<uint8>(output))\n\n    if (kernel_type == kReference) {\n      TF_LITE_L2NORM(reference_ops);\n    }\n    if (kernel_type == kGenericOptimized) {\n      TF_LITE_L2NORM(optimized_ops);\n    }\n#undef TF_LITE_L2NORM\n  } else if (output->type == kTfLiteInt8) {\n    const auto input_shape = GetTensorShape(input);\n    const auto output_shape = GetTensorShape(output);\n    const int trailing_dim = input_shape.DimensionsCount() - 1;\n    const int depth =\n        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);\n    const int outer_size =\n        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);\n    reference_integer_ops::L2Normalization(input->params.zero_point, outer_size,\n                                           depth, GetTensorData<int8>(input),\n                                           GetTensorData<int8>(output));\n  } else {\n    TF_LITE_KERNEL_LOG(context, \"Output type is %s, requires float.\",\n                       TfLiteTypeGetName(output->type));\n    return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace l2norm\n\nTfLiteRegistration* Register_L2NORM_REF() {\n  static TfLiteRegistration r = {nullptr, nullptr, l2norm::Prepare,\n                                 l2norm::Eval<l2norm::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_L2NORM_GENERIC_OPT() {\n  static TfLiteRegistration r = {nullptr, nullptr, l2norm::Prepare,\n                                 l2norm::Eval<l2norm::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_L2_NORMALIZATION() {\n  return Register_L2NORM_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"