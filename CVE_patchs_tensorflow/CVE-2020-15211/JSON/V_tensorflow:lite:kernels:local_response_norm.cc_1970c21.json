"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace local_response_norm {\n\n// This file has two implementation of LocalResponseNorm.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n\n  TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);\n  output_size->data[0] = input->dims->data[0];\n  output_size->data[1] = input->dims->data[1];\n  output_size->data[2] = input->dims->data[2];\n  output_size->data[3] = input->dims->data[3];\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteLocalResponseNormParams*>(node->builtin_data);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  if (output->type == kTfLiteFloat32) {\n#define TF_LITE_LOCAL_RESPONSE_NORM(type)                            \\\n  tflite::LocalResponseNormalizationParams op_params;                \\\n  op_params.range = params->radius;                                  \\\n  op_params.bias = params->bias;                                     \\\n  op_params.alpha = params->alpha;                                   \\\n  op_params.beta = params->beta;                                     \\\n  type::LocalResponseNormalization(                                  \\\n      op_params, GetTensorShape(input), GetTensorData<float>(input), \\\n      GetTensorShape(output), GetTensorData<float>(output))\n    if (kernel_type == kReference) {\n      TF_LITE_LOCAL_RESPONSE_NORM(reference_ops);\n    }\n    if (kernel_type == kGenericOptimized) {\n      TF_LITE_LOCAL_RESPONSE_NORM(optimized_ops);\n    }\n#undef TF_LITE_LOCAL_RESPONSE_NORM\n  } else {\n    context->ReportError(context, \"Output type is %d, requires float.\",\n                         output->type);\n    return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace local_response_norm\n\nTfLiteRegistration* Register_LOCAL_RESPONSE_NORM_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, local_response_norm::Prepare,\n      local_response_norm::Eval<local_response_norm::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_LOCAL_RESPONSE_NORM_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, local_response_norm::Prepare,\n      local_response_norm::Eval<local_response_norm::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_LOCAL_RESPONSE_NORMALIZATION() {\n  return Register_LOCAL_RESPONSE_NORM_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"