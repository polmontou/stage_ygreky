"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace matrix_diag {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteIntArray* input_dims = input->dims;\n  int input_dims_size = input_dims->size;\n  TF_LITE_ENSURE(context, input_dims_size >= 1);\n\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  // Resize the output tensor.\n  TfLiteIntArray* output_shape = TfLiteIntArrayCreate(input_dims_size + 1);\n  for (int i = 0; i < input_dims_size; i++) {\n    output_shape->data[i] = input_dims->data[i];\n  }\n  // Last dimension in the output is the same as the last dimension in the\n  // input.\n  output_shape->data[input_dims_size] = input_dims->data[input_dims_size - 1];\n  output->type = input->type;\n  TF_LITE_ENSURE_OK(context,\n                    context->ResizeTensor(context, output, output_shape));\n\n  return kTfLiteOk;\n}\n\n// Fill the tensor to make a diagonal matrix in each batch, i.e., when\n// row index and column index are the same, fill with the next input value.\n// All other entries get zero.\n// TODO(b/128636574) Move to reference_ops.\ntemplate <typename T>\nvoid FillDiagImpl(const T* in, T* out, const int batch_size, const int row_size,\n                  const int col_size) {\n  int idx = 0;\n  for (int b = 0; b < batch_size; b++) {\n    for (int i = 0; i < row_size; i++) {\n      for (int j = 0; j < col_size; ++j) {\n        // input values go on the diagonal, 0 elsewhere\n        if (i == j) {\n          out[i * col_size + j] = in[idx];\n          idx++;\n        } else {\n          out[i * col_size + j] = 0;\n        }\n      }\n    }\n    out += row_size * col_size;\n  }\n}\n\ntemplate <typename T>\nvoid FillDiag(const TfLiteTensor* input, TfLiteTensor* output,\n              const int batch_size, const int row_size, const int col_size) {\n  FillDiagImpl<T>(GetTensorData<T>(input), GetTensorData<T>(output), batch_size,\n                  row_size, col_size);\n}\n\n// Fill a tensor with given input on the diagonal, zero elsewhere\nvoid FillDiagHelper(const TfLiteTensor* input, TfLiteTensor* output) {\n  const int num_output_dims = output->dims->size;\n  int batch_size = 1;\n  for (int i = 0; i < num_output_dims - 2; ++i) {\n    batch_size *= output->dims->data[i];\n  }\n\n  const int row_size = output->dims->data[num_output_dims - 2];\n  const int col_size = output->dims->data[num_output_dims - 1];\n  switch (output->type) {\n    case kTfLiteInt64: {\n      return FillDiag<int64_t>(input, output, batch_size, row_size, col_size);\n    }\n    case kTfLiteInt32: {\n      return FillDiag<int32_t>(input, output, batch_size, row_size, col_size);\n    }\n    case kTfLiteInt16: {\n      return FillDiag<int16_t>(input, output, batch_size, row_size, col_size);\n    }\n    case kTfLiteInt8: {\n      return FillDiag<int8_t>(input, output, batch_size, row_size, col_size);\n    }\n    case kTfLiteUInt8: {\n      return FillDiag<uint8_t>(input, output, batch_size, row_size, col_size);\n    }\n    default:\n      return FillDiag<float>(input, output, batch_size, row_size, col_size);\n  }\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  FillDiagHelper(input, output);\n  return kTfLiteOk;\n}\n\n}  // namespace matrix_diag\n\nTfLiteRegistration* Register_MATRIX_DIAG() {\n  static TfLiteRegistration r = {nullptr, nullptr, matrix_diag::Prepare,\n                                 matrix_diag::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"