"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/kernels/internal/reference/neg.h\"\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace neg {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  output->type = input->type;\n  return context->ResizeTensor(context, output,\n                               TfLiteIntArrayCopy(input->dims));\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  switch (input->type) {\n    case kTfLiteInt64:\n      reference_ops::Negate(\n          GetTensorShape(input), GetTensorData<int64_t>(input),\n          GetTensorShape(output), GetTensorData<int64_t>(output));\n      break;\n    case kTfLiteInt32:\n      reference_ops::Negate(\n          GetTensorShape(input), GetTensorData<int32_t>(input),\n          GetTensorShape(output), GetTensorData<int32_t>(output));\n      break;\n    case kTfLiteFloat32:\n      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),\n                            GetTensorShape(output),\n                            GetTensorData<float>(output));\n      break;\n    default:\n      context->ReportError(\n          context,\n          \"Neg only currently supports int64, int32, and float32, got %d.\",\n          input->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace neg\n\nTfLiteRegistration* Register_NEG() {\n  static TfLiteRegistration r = {/*init=*/nullptr, /*free=*/nullptr,\n                                 neg::Prepare, neg::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"