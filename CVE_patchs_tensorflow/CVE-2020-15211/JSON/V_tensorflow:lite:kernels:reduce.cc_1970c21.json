"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/reduce.h\"\n\n#include <stddef.h>\n\n#include <cstdint>\n#include <limits>\n\n#include \"ruy/profiler/instrumentation.h\"  // from @ruy\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/cpu_backend_context.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/integer_ops/mean.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/neon_check.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/reference/integer_ops/mean.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace reduce {\n\n// This file has reference implementation of reduce_* operators.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nstruct OpData {\n  int32_t multiplier;\n  int shift;\n  // The index of the temporary tensor where the quantized inputs are cached.\n  int scratch_tensor_index;\n};\n\nstruct OpContext {\n  OpContext(TfLiteContext* context, TfLiteNode* node) {\n    params = reinterpret_cast<TfLiteReducerParams*>(node->builtin_data);\n    input = GetInput(context, node, 0);\n    axis = GetInput(context, node, 1);\n    output = GetOutput(context, node, 0);\n  }\n  TfLiteReducerParams* params;\n  const TfLiteTensor* input;\n  const TfLiteTensor* axis;\n  TfLiteTensor* output;\n};\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  // Creates two temp tensors to store index and axis for internal\n  // implementation only.\n  auto* op_data = new OpData();\n  context->AddTensors(context, 3, &op_data->scratch_tensor_index);\n  return op_data;\n}\n\nvoid Free(TfLiteContext* context, void* buffer) {\n  delete reinterpret_cast<OpData*>(buffer);\n}\n\n// Resizes the temp tensor that stores resolved axis.\nTfLiteStatus ResizeTempAxis(TfLiteContext* context, OpContext* op_context,\n                            TfLiteTensor* resolved_axis) {\n  TfLiteIntArray* axis_size = TfLiteIntArrayCreate(1);\n  axis_size->data[0] = static_cast<int>(NumElements(op_context->axis));\n  return context->ResizeTensor(context, resolved_axis, axis_size);\n}\n\n// Resizes the temp tensor that stores temp sum of reduced elements.\nTfLiteStatus ResizeTempSum(TfLiteContext* context, OpContext* op_context,\n                           TfLiteTensor* temp_sum) {\n  TfLiteIntArray* size = TfLiteIntArrayCreate(1);\n  size->data[0] = static_cast<int>(NumElements(op_context->output));\n  return context->ResizeTensor(context, temp_sum, size);\n}\n\n// Resizes output array based on the input size and resolved axis.\nTfLiteStatus ResizeOutputTensor(TfLiteContext* context, OpContext* op_context) {\n  size_t num_axis = NumElements(op_context->axis);\n  const TfLiteIntArray* input_dims = op_context->input->dims;\n  int input_num_dims = NumDimensions(op_context->input);\n  if (input_num_dims == 0) {\n    return context->ResizeTensor(context, op_context->output,\n                                 TfLiteIntArrayCreate(0));\n  }\n  const int* axis = GetTensorData<int>(op_context->axis);\n  if (op_context->params->keep_dims) {\n    TfLiteIntArray* output_dims = TfLiteIntArrayCreate(input_num_dims);\n    for (int idx = 0; idx < input_num_dims; ++idx) {\n      bool is_axis = false;\n      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {\n        if (axis[axis_idx] == idx || axis[axis_idx] + input_num_dims == idx) {\n          is_axis = true;\n          break;\n        }\n      }\n      if (is_axis) {\n        output_dims->data[idx] = 1;\n      } else {\n        output_dims->data[idx] = input_dims->data[idx];\n      }\n    }\n    return context->ResizeTensor(context, op_context->output, output_dims);\n  } else {\n    // Calculates size of reducing axis.\n    int num_reduce_axis = num_axis;\n    for (int i = 0; i < num_axis; ++i) {\n      int current = axis[i];\n      if (current < 0) {\n        current += input_num_dims;\n      }\n      TF_LITE_ENSURE(context, current >= 0 && current < input_num_dims);\n      for (int j = 0; j < i; ++j) {\n        int previous = axis[j];\n        if (previous < 0) {\n          previous += input_num_dims;\n        }\n        if (current == previous) {\n          --num_reduce_axis;\n          break;\n        }\n      }\n    }\n    // Determines output dimensions.\n    TfLiteIntArray* output_dims =\n        TfLiteIntArrayCreate(input_num_dims - num_reduce_axis);\n    int num_skip_axis = 0;\n    for (int idx = 0; idx < input_num_dims; ++idx) {\n      bool is_axis = false;\n      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {\n        if (axis[axis_idx] == idx || axis[axis_idx] + input_num_dims == idx) {\n          ++num_skip_axis;\n          is_axis = true;\n          break;\n        }\n      }\n      if (!is_axis) {\n        output_dims->data[idx - num_skip_axis] = input_dims->data[idx];\n      }\n    }\n    return context->ResizeTensor(context, op_context->output, output_dims);\n  }\n}\n\n// Initializes temp tensors to store index and resolved axis.\nTfLiteStatus InitializeTemporaries(TfLiteContext* context, TfLiteNode* node,\n                                   OpContext* op_context) {\n  // Creates a temp index to iterate through input data.\n  OpData* op_data = reinterpret_cast<OpData*>(node->user_data);\n  TfLiteIntArrayFree(node->temporaries);\n  node->temporaries = TfLiteIntArrayCreate(3);\n  node->temporaries->data[0] = op_data->scratch_tensor_index;\n  TfLiteTensor* scratch_tensor = GetTemporary(context, node, /*index=*/0);\n  scratch_tensor->type = kTfLiteInt32;\n  scratch_tensor->allocation_type = kTfLiteArenaRw;\n  TfLiteIntArray* index_size = TfLiteIntArrayCreate(1);\n  index_size->data[0] = NumDimensions(op_context->input);\n  TF_LITE_ENSURE_OK(context,\n                    context->ResizeTensor(context, scratch_tensor, index_size));\n\n  // Creates a temp tensor to store resolved axis given input data.\n  node->temporaries->data[1] = op_data->scratch_tensor_index + 1;\n  TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);\n  resolved_axis->type = kTfLiteInt32;\n  // Creates a temp tensor to store temp sums when calculating mean.\n  node->temporaries->data[2] = op_data->scratch_tensor_index + 2;\n  TfLiteTensor* temp_sum = GetTemporary(context, node, /*index=*/2);\n  switch (op_context->input->type) {\n    case kTfLiteFloat32:\n      temp_sum->type = kTfLiteFloat32;\n      break;\n    case kTfLiteInt32:\n      temp_sum->type = kTfLiteInt64;\n      break;\n    case kTfLiteInt64:\n      temp_sum->type = kTfLiteInt64;\n      break;\n    case kTfLiteUInt8:\n    case kTfLiteInt8:\n    case kTfLiteInt16:\n      temp_sum->type = kTfLiteInt32;\n      break;\n    case kTfLiteBool:\n      temp_sum->type = kTfLiteBool;\n      break;\n    default:\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  OpContext op_context(context, node);\n  TF_LITE_ENSURE_TYPES_EQ(context, op_context.axis->type, kTfLiteInt32);\n  TF_LITE_ENSURE_OK(context, InitializeTemporaries(context, node, &op_context));\n\n  TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);\n  // Leaves work to Eval if axis is not constant; else resizes output.\n  if (!IsConstantTensor(op_context.axis)) {\n    SetTensorToDynamic(op_context.output);\n    SetTensorToDynamic(resolved_axis);\n    return kTfLiteOk;\n  }\n  resolved_axis->allocation_type = kTfLiteArenaRw;\n  TF_LITE_ENSURE_OK(context,\n                    ResizeTempAxis(context, &op_context, resolved_axis));\n  TF_LITE_ENSURE_OK(context, ResizeOutputTensor(context, &op_context));\n  return kTfLiteOk;\n}\n\nTfLiteStatus PrepareAny(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  const TfLiteTensor* input = GetInput(context, node, 0);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteBool);\n  return PrepareSimple(context, node);\n}\n\nTfLiteStatus PrepareMeanOrSum(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  // reduce_mean requires a buffer to store intermediate sum result.\n  OpContext op_context(context, node);\n  if (op_context.input->type == kTfLiteInt8 ||\n      op_context.input->type == kTfLiteUInt8 ||\n      op_context.input->type == kTfLiteInt16) {\n    const double real_multiplier =\n        static_cast<double>(op_context.input->params.scale) /\n        static_cast<double>(op_context.output->params.scale);\n    int exponent;\n    QuantizeMultiplier(real_multiplier, &data->multiplier, &exponent);\n    data->shift = exponent;\n  }\n  TfLiteTensor* temp_sum = GetTemporary(context, node, /*index=*/2);\n  if (!IsConstantTensor(op_context.axis)) {\n    SetTensorToDynamic(temp_sum);\n    return kTfLiteOk;\n  }\n  temp_sum->allocation_type = kTfLiteArenaRw;\n  return ResizeTempSum(context, &op_context, temp_sum);\n}\n\nvoid ResolveAxis(const int* axis_data, int axis_count,\n                 tflite::MeanParams* op_params) {\n  int i = 0;\n  for (; i < axis_count; ++i) {\n    op_params->axis[i] = static_cast<int16>(axis_data[i]);\n  }\n  for (; i < 4; ++i) {\n    op_params->axis[i] = 1;\n  }\n}\n\ntemplate <typename integer_type>\nTfLiteStatus EvalMeanReferenceOps(TfLiteContext* context,\n                                  const OpContext& op_context, int num_axis,\n                                  OpData* data, TfLiteTensor* temp_index,\n                                  TfLiteTensor* resolved_axis,\n                                  TfLiteTensor* temp_sum) {\n  tflite::MeanParams op_params;\n  op_params.axis_count = num_axis;\n  ResolveAxis(GetTensorData<int>(op_context.axis), num_axis, &op_params);\n  const TfLiteTensor* input = op_context.input;\n  // TODO(b/139102329): Handle all the cases in the combined reference\n  // method.\n  if (op_context.params->keep_dims && NumDimensions(input) == 4 &&\n      op_params.axis_count == 2 &&\n      ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||\n       (op_params.axis[0] == 2 && op_params.axis[1] == 1))) {\n    if (std::is_same<integer_type, uint8_t>::value) {\n      reference_ops::Mean(op_params, GetTensorShape(op_context.input),\n                          GetTensorData<uint8_t>(op_context.input),\n                          op_context.input->params.zero_point,\n                          op_context.input->params.scale,\n                          GetTensorShape(op_context.output),\n                          GetTensorData<uint8_t>(op_context.output),\n                          op_context.output->params.zero_point,\n                          op_context.output->params.scale);\n    } else {\n      reference_integer_ops::Mean(\n          op_params, data->multiplier, data->shift, GetTensorShape(input),\n          GetTensorData<integer_type>(input),\n          op_context.input->params.zero_point,\n          GetTensorShape(op_context.output),\n          GetTensorData<integer_type>(op_context.output),\n          op_context.output->params.zero_point);\n    }\n  } else if (input->params.zero_point == op_context.output->params.zero_point &&\n             input->params.scale == op_context.output->params.scale) {\n    TF_LITE_ENSURE(\n        context,\n        reference_ops::Mean(\n            GetTensorData<integer_type>(input), input->dims->data,\n            input->dims->size, GetTensorData<integer_type>(op_context.output),\n            op_context.output->dims->data, op_context.output->dims->size,\n            GetTensorData<int>(op_context.axis), num_axis,\n            op_context.params->keep_dims, GetTensorData<int>(temp_index),\n            GetTensorData<int>(resolved_axis), GetTensorData<int>(temp_sum)));\n  } else {\n    TF_LITE_ENSURE(\n        context,\n        reference_ops::QuantizedMeanOrSum<>(\n            GetTensorData<integer_type>(input), input->params.zero_point,\n            input->params.scale, input->dims->data, input->dims->size,\n            GetTensorData<integer_type>(op_context.output),\n            op_context.output->params.zero_point,\n            op_context.output->params.scale, op_context.output->dims->data,\n            op_context.output->dims->size, GetTensorData<int>(op_context.axis),\n            num_axis, op_context.params->keep_dims,\n            GetTensorData<int>(temp_index), GetTensorData<int>(resolved_axis),\n            GetTensorData<int>(temp_sum),\n            /*compute_sum=*/false));\n  }\n  return kTfLiteOk;\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {\n  OpContext op_context(context, node);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  int num_axis = static_cast<int>(NumElements(op_context.axis));\n  TfLiteTensor* temp_index = GetTemporary(context, node, /*index=*/0);\n  TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);\n  TfLiteTensor* temp_sum = GetTemporary(context, node, /*index=*/2);\n  // Resize the output tensor if the output tensor is dynamic.\n  if (IsDynamicTensor(op_context.output)) {\n    TF_LITE_ENSURE_OK(context,\n                      ResizeTempAxis(context, &op_context, resolved_axis));\n    TF_LITE_ENSURE_OK(context, ResizeOutputTensor(context, &op_context));\n    TF_LITE_ENSURE_OK(context, ResizeTempSum(context, &op_context, temp_sum));\n  }\n\n  if (kernel_type == kGenericOptimized) {\n    // Use optimized ops if available.\n    switch (op_context.input->type) {\n      case kTfLiteInt8: {\n        tflite::MeanParams op_params;\n        op_params.axis_count = num_axis;\n        ResolveAxis(GetTensorData<int>(op_context.axis), num_axis, &op_params);\n        const TfLiteTensor* input = op_context.input;\n        if (op_context.params->keep_dims && NumDimensions(input) == 4 &&\n            op_params.axis_count == 2 &&\n            ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||\n             (op_params.axis[0] == 2 && op_params.axis[1] == 1))) {\n          optimized_integer_ops::Mean(\n              op_params, GetTensorShape(input), GetTensorData<int8_t>(input),\n              input->params.zero_point, input->params.scale,\n              GetTensorShape(op_context.output),\n              GetTensorData<int8_t>(op_context.output),\n              op_context.output->params.zero_point,\n              op_context.output->params.scale,\n              CpuBackendContext::GetFromContext(context));\n          return kTfLiteOk;\n        }\n      } break;\n      case kTfLiteUInt8: {\n        tflite::MeanParams op_params;\n        op_params.axis_count = num_axis;\n        ResolveAxis(GetTensorData<int>(op_context.axis), num_axis, &op_params);\n        const TfLiteTensor* input = op_context.input;\n        if (op_context.params->keep_dims && NumDimensions(input) == 4 &&\n            op_params.axis_count == 2 &&\n            ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||\n             (op_params.axis[0] == 2 && op_params.axis[1] == 1))) {\n          optimized_ops::Mean(op_params, GetTensorShape(input),\n                              GetTensorData<uint8_t>(input),\n                              input->params.zero_point, input->params.scale,\n                              GetTensorShape(op_context.output),\n                              GetTensorData<uint8_t>(op_context.output),\n                              op_context.output->params.zero_point,\n                              op_context.output->params.scale,\n                              CpuBackendContext::GetFromContext(context));\n          return kTfLiteOk;\n        }\n      } break;\n      default:\n        break;\n    }\n  }\n\n  // From here, it uses the reference implementations.\n  // TODO(b/139102329): Clean up the function signatures to merge the variations\n  // and handle the specialized cases in the combined reference implementations\n  // per each op.\n  switch (op_context.input->type) {\n    case kTfLiteFloat32: {\n      tflite::MeanParams op_params;\n      op_params.axis_count = num_axis;\n      ResolveAxis(GetTensorData<int>(op_context.axis), num_axis, &op_params);\n      const TfLiteTensor* input = op_context.input;\n      // TODO(b/139102329): Handle the below special case in the combined\n      // reference method.\n      // Defer to specialized implementation for 4D Mean across axes 1 & 2.\n      if (op_context.params->keep_dims && NumDimensions(input) == 4 &&\n          op_params.axis_count == 2 &&\n          ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||\n           (op_params.axis[0] == 2 && op_params.axis[1] == 1))) {\n        reference_ops::Mean(op_params, GetTensorShape(input),\n                            GetTensorData<float>(input),\n                            GetTensorShape(op_context.output),\n                            GetTensorData<float>(op_context.output));\n      } else {\n        TF_LITE_ENSURE(\n            context,\n            optimized_ops::MeanGeneral(\n                GetTensorData<float>(op_context.input),\n                op_context.input->dims->data, op_context.input->dims->size,\n                GetTensorData<float>(op_context.output),\n                op_context.output->dims->data, op_context.output->dims->size,\n                GetTensorData<int>(op_context.axis), num_axis,\n                op_context.params->keep_dims, GetTensorData<int>(temp_index),\n                GetTensorData<int>(resolved_axis),\n                GetTensorData<float>(temp_sum)));\n      }\n    } break;\n    case kTfLiteInt32:\n      TF_LITE_ENSURE(\n          context,\n          reference_ops::Mean(\n              GetTensorData<int>(op_context.input),\n              op_context.input->dims->data, op_context.input->dims->size,\n              GetTensorData<int>(op_context.output),\n              op_context.output->dims->data, op_context.output->dims->size,\n              GetTensorData<int>(op_context.axis), num_axis,\n              op_context.params->keep_dims, GetTensorData<int>(temp_index),\n              GetTensorData<int>(resolved_axis),\n              GetTensorData<int64_t>(temp_sum)));\n      break;\n    case kTfLiteInt64:\n      TF_LITE_ENSURE(\n          context,\n          reference_ops::Mean(\n              GetTensorData<int64_t>(op_context.input),\n              op_context.input->dims->data, op_context.input->dims->size,\n              GetTensorData<int64_t>(op_context.output),\n              op_context.output->dims->data, op_context.output->dims->size,\n              GetTensorData<int>(op_context.axis), num_axis,\n              op_context.params->keep_dims, GetTensorData<int>(temp_index),\n              GetTensorData<int>(resolved_axis),\n              GetTensorData<int64_t>(temp_sum)));\n      break;\n    case kTfLiteInt8: {\n      TF_LITE_ENSURE_OK(context, EvalMeanReferenceOps<int8_t>(\n                                     context, op_context, num_axis, data,\n                                     temp_index, resolved_axis, temp_sum));\n    } break;\n    case kTfLiteInt16: {\n      TF_LITE_ENSURE_OK(context, EvalMeanReferenceOps<int16_t>(\n                                     context, op_context, num_axis, data,\n                                     temp_index, resolved_axis, temp_sum));\n    } break;\n    case kTfLiteUInt8: {\n      TF_LITE_ENSURE_OK(context, EvalMeanReferenceOps<uint8_t>(\n                                     context, op_context, num_axis, data,\n                                     temp_index, resolved_axis, temp_sum));\n    } break;\n    default:\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n// The underlying logic for Reduce Sum/Prod/Max/Min/Any\ntemplate <typename T>\nTfLiteStatus EvalLogic(TfLiteContext* context, TfLiteNode* node,\n                       OpContext* op_context, T init_value,\n                       T reducer(const T current, const T in)) {\n  int64_t num_axis = NumElements(op_context->axis);\n  TfLiteTensor* temp_index = GetTemporary(context, node, /*index=*/0);\n  TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);\n  // Resize the output tensor if the output tensor is dynamic.\n  if (IsDynamicTensor(op_context->output)) {\n    TF_LITE_ENSURE_OK(context,\n                      ResizeTempAxis(context, op_context, resolved_axis));\n    TF_LITE_ENSURE_OK(context, ResizeOutputTensor(context, op_context));\n  }\n  if (op_context->input->type == kTfLiteUInt8 ||\n      op_context->input->type == kTfLiteInt8) {\n    TF_LITE_ENSURE_EQ(context, op_context->input->params.scale,\n                      op_context->output->params.scale);\n    TF_LITE_ENSURE_EQ(context, op_context->input->params.zero_point,\n                      op_context->output->params.zero_point);\n  }\n  TF_LITE_ENSURE(\n      context,\n      reference_ops::ReduceGeneric<T>(\n          GetTensorData<T>(op_context->input), op_context->input->dims->data,\n          op_context->input->dims->size, GetTensorData<T>(op_context->output),\n          op_context->output->dims->data, op_context->output->dims->size,\n          GetTensorData<int>(op_context->axis), num_axis,\n          op_context->params->keep_dims, GetTensorData<int>(temp_index),\n          GetTensorData<int>(resolved_axis), init_value, reducer));\n  return kTfLiteOk;\n}\n\nenum ReduceType {\n  kSum,\n  kProd,\n  kMax,\n  kMin,\n  kAny,\n};\n\n// Eval for determined input type and reduce type.\ntemplate <typename T>\nTfLiteStatus EvalType(TfLiteContext* context, TfLiteNode* node,\n                      OpContext* op_context, ReduceType reduce_type) {\n  switch (reduce_type) {\n    case kSum:\n      return EvalLogic<T>(\n          context, node, op_context, static_cast<T>(0),\n          [](const T current, const T in) -> T { return in + current; });\n      break;\n    case kProd:\n      return EvalLogic<T>(\n          context, node, op_context, static_cast<T>(1),\n          [](const T current, const T in) -> T { return in * current; });\n      break;\n    case kMax:\n      return EvalLogic<T>(context, node, op_context,\n                          std::numeric_limits<T>::lowest(),\n                          [](const T current, const T in) -> T {\n                            return (in > current) ? in : current;\n                          });\n      break;\n    case kMin:\n      return EvalLogic<T>(context, node, op_context,\n                          std::numeric_limits<T>::max(),\n                          [](const T current, const T in) -> T {\n                            return (in < current) ? in : current;\n                          });\n      break;\n    default:\n      return kTfLiteError;\n  }\n}\n\n// Template specialization for bool type\ntemplate <>\nTfLiteStatus EvalType<bool>(TfLiteContext* context, TfLiteNode* node,\n                            OpContext* op_context, ReduceType reduce_type) {\n  switch (reduce_type) {\n    case kAny:\n      return EvalLogic<bool>(context, node, op_context, false,\n                             [](const bool current, const bool in) -> bool {\n                               return in || current;\n                             });\n      break;\n    default:\n      return kTfLiteError;\n  }\n}\n\n// The entry point that handles input types and then calls template functions to\n// handle ReduceType.\ntemplate <KernelType kernel_type, ReduceType reduce_type>\nTfLiteStatus EvalGeneric(TfLiteContext* context, TfLiteNode* node) {\n  if (kernel_type != kReference) {\n    return kTfLiteOk;\n  }\n  OpContext op_context(context, node);\n  switch (op_context.input->type) {\n    case kTfLiteFloat32:\n      return EvalType<float>(context, node, &op_context, reduce_type);\n      break;\n    case kTfLiteInt32:\n      return EvalType<int>(context, node, &op_context, reduce_type);\n      break;\n    case kTfLiteInt64:\n      return EvalType<int64_t>(context, node, &op_context, reduce_type);\n      break;\n    case kTfLiteUInt8:\n      return EvalType<uint8_t>(context, node, &op_context, reduce_type);\n      break;\n    case kTfLiteInt8:\n      return EvalType<int8_t>(context, node, &op_context, reduce_type);\n      break;\n    case kTfLiteBool:\n      return EvalType<bool>(context, node, &op_context, reduce_type);\n      break;\n    default:\n      return kTfLiteError;\n  }\n}\n\nTfLiteStatus EvalSum(TfLiteContext* context, TfLiteNode* node) {\n  OpContext op_context(context, node);\n  ruy::profiler::ScopeLabel label(\"Sum\");\n  const auto& input = op_context.input;\n  const auto& output = op_context.output;\n  const bool same_scale =\n      (input->params.scale == output->params.scale &&\n       input->params.zero_point == output->params.zero_point);\n  const bool eight_bit_quantized =\n      input->type == kTfLiteUInt8 || input->type == kTfLiteInt8;\n  const bool need_rescale = (eight_bit_quantized && !same_scale);\n  if (need_rescale) {\n    // Rescaling 8bit reduce sum.\n    int num_axis = static_cast<int>(NumElements(op_context.axis));\n    TfLiteTensor* temp_index = GetTemporary(context, node, /*index=*/0);\n    TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);\n    TfLiteTensor* temp_sum = GetTemporary(context, node, /*index=*/2);\n    // Resize the output tensor if the output tensor is dynamic.\n    if (IsDynamicTensor(op_context.output)) {\n      TF_LITE_ENSURE_OK(context,\n                        ResizeTempAxis(context, &op_context, resolved_axis));\n      TF_LITE_ENSURE_OK(context, ResizeOutputTensor(context, &op_context));\n      TF_LITE_ENSURE_OK(context, ResizeTempSum(context, &op_context, temp_sum));\n    }\n    if (input->type == kTfLiteUInt8) {\n      TF_LITE_ENSURE(\n          context,\n          reference_ops::QuantizedMeanOrSum<>(\n              GetTensorData<uint8_t>(op_context.input),\n              op_context.input->params.zero_point,\n              op_context.input->params.scale, op_context.input->dims->data,\n              op_context.input->dims->size,\n              GetTensorData<uint8_t>(op_context.output),\n              op_context.output->params.zero_point,\n              op_context.output->params.scale, op_context.output->dims->data,\n              op_context.output->dims->size,\n              GetTensorData<int>(op_context.axis), num_axis,\n              op_context.params->keep_dims, GetTensorData<int>(temp_index),\n              GetTensorData<int>(resolved_axis), GetTensorData<int32>(temp_sum),\n              /*compute_sum=*/true));\n    }\n    if (input->type == kTfLiteInt8) {\n      TF_LITE_ENSURE(\n          context,\n          reference_ops::QuantizedMeanOrSum<>(\n              GetTensorData<int8_t>(op_context.input),\n              op_context.input->params.zero_point,\n              op_context.input->params.scale, op_context.input->dims->data,\n              op_context.input->dims->size,\n              GetTensorData<int8_t>(op_context.output),\n              op_context.output->params.zero_point,\n              op_context.output->params.scale, op_context.output->dims->data,\n              op_context.output->dims->size,\n              GetTensorData<int>(op_context.axis), num_axis,\n              op_context.params->keep_dims, GetTensorData<int>(temp_index),\n              GetTensorData<int>(resolved_axis), GetTensorData<int32>(temp_sum),\n              /*compute_sum=*/true));\n    }\n  } else {\n    return EvalGeneric<kReference, kSum>(context, node);\n  }\n\n  return kTfLiteOk;\n}\n}  // namespace reduce\n\nTfLiteRegistration* Register_MEAN_OPT() {\n  static TfLiteRegistration r = {reduce::Init, reduce::Free,\n                                 reduce::PrepareMeanOrSum,\n                                 reduce::EvalMean<reduce::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_MEAN_REF() {\n  static TfLiteRegistration r = {reduce::Init, reduce::Free,\n                                 reduce::PrepareMeanOrSum,\n                                 reduce::EvalMean<reduce::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_SUM_REF() {\n  static TfLiteRegistration r = {reduce::Init, reduce::Free,\n                                 reduce::PrepareMeanOrSum, reduce::EvalSum};\n  return &r;\n}\n\nTfLiteRegistration* Register_REDUCE_PROD_REF() {\n  static TfLiteRegistration r = {\n      reduce::Init, reduce::Free, reduce::PrepareSimple,\n      reduce::EvalGeneric<reduce::kReference, reduce::kProd>};\n  return &r;\n}\n\nTfLiteRegistration* Register_REDUCE_MAX_REF() {\n  static TfLiteRegistration r = {\n      reduce::Init, reduce::Free, reduce::PrepareSimple,\n      reduce::EvalGeneric<reduce::kReference, reduce::kMax>};\n  return &r;\n}\n\nTfLiteRegistration* Register_REDUCE_MIN_REF() {\n  static TfLiteRegistration r = {\n      reduce::Init, reduce::Free, reduce::PrepareSimple,\n      reduce::EvalGeneric<reduce::kReference, reduce::kMin>};\n  return &r;\n}\n\nTfLiteRegistration* Register_REDUCE_ANY_REF() {\n  static TfLiteRegistration r = {\n      reduce::Init, reduce::Free, reduce::PrepareAny,\n      reduce::EvalGeneric<reduce::kReference, reduce::kAny>};\n  return &r;\n}\n\nTfLiteRegistration* Register_MEAN() {\n#ifdef USE_NEON\n  return Register_MEAN_OPT();\n#else\n  return Register_MEAN_REF();\n#endif\n}\n\nTfLiteRegistration* Register_SUM() { return Register_SUM_REF(); }\nTfLiteRegistration* Register_REDUCE_PROD() {\n  return Register_REDUCE_PROD_REF();\n}\nTfLiteRegistration* Register_REDUCE_MAX() { return Register_REDUCE_MAX_REF(); }\nTfLiteRegistration* Register_REDUCE_MIN() { return Register_REDUCE_MIN_REF(); }\nTfLiteRegistration* Register_REDUCE_ANY() { return Register_REDUCE_ANY_REF(); }\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"