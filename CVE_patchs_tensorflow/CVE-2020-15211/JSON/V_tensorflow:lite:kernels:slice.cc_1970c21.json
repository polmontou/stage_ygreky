"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <stdint.h>\n\n#include <algorithm>\n#include <string>\n#include <vector>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/string_type.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace slice {\n\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nconstexpr int kInputTensor = 0;\nconstexpr int kBeginTensor = 1;\nconstexpr int kSizeTensor = 2;\nconstexpr int kOutputTensor = 0;\n\n// This Op only supports 1-4D cases and since we use the optimized ops 4D\n// implementation, the 1-3D tensors are mapped to 4D.\nconst int kMaxDim = 4;\n\ntemplate <typename T>\nTfLiteStatus CalculateOutputShapeVector(TfLiteContext* context,\n                                        const TfLiteTensor* input,\n                                        const TfLiteTensor* begin,\n                                        const TfLiteTensor* size,\n                                        std::vector<int>* output_shape_vector) {\n  for (int idx = 0; idx < NumDimensions(input); ++idx) {\n    T size_value = GetTensorData<T>(size)[idx];\n    if (size_value < 0) {\n      if (size_value != -1) {\n        context->ReportError(context, \"Invalid size.\");\n        return kTfLiteError;\n      }\n      size_value = SizeOfDimension(input, idx) - GetTensorData<T>(begin)[idx];\n    } else {\n      if (SizeOfDimension(input, idx) <\n          GetTensorData<T>(begin)[idx] + size_value) {\n        context->ReportError(context, \"Invalid begin and size.\");\n        return kTfLiteError;\n      }\n    }\n    output_shape_vector->push_back(static_cast<int>(size_value));\n  }\n  return kTfLiteOk;\n}\n\ntemplate <typename T>\nvoid GetBeginAndSizeVectors(int dimensions, const TfLiteTensor* begin,\n                            const TfLiteTensor* size, std::vector<int>* begins,\n                            std::vector<int>* sizes) {\n  for (int idx = 0; idx < dimensions; ++idx) {\n    begins->push_back(GetTensorData<T>(begin)[idx]);\n    sizes->push_back(GetTensorData<T>(size)[idx]);\n  }\n}\n\nTfLiteStatus ResizeOutputShape(TfLiteContext* context,\n                               const TfLiteTensor* input,\n                               const TfLiteTensor* begin,\n                               const TfLiteTensor* size, TfLiteTensor* output) {\n  std::vector<int> output_shape_vector;\n\n  if (begin->type == kTfLiteInt32) {\n    TF_LITE_ENSURE_STATUS(CalculateOutputShapeVector<int32_t>(\n        context, input, begin, size, &output_shape_vector));\n  } else if (begin->type == kTfLiteInt64) {\n    TF_LITE_ENSURE_STATUS(CalculateOutputShapeVector<int64_t>(\n        context, input, begin, size, &output_shape_vector));\n  } else {\n    context->ReportError(\n        context, \"Type %d is currently not supported by Slice.\", begin->type);\n    return kTfLiteError;\n  }\n\n  TfLiteIntArray* output_shape =\n      TfLiteIntArrayCreate(output_shape_vector.size());\n  std::copy(output_shape_vector.begin(), output_shape_vector.end(),\n            output_shape->data);\n  return context->ResizeTensor(context, output, output_shape);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  const TfLiteTensor* begin = GetInput(context, node, kBeginTensor);\n  const TfLiteTensor* size = GetInput(context, node, kSizeTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  // Ensure validity of input tensor and its dimension.\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n  TF_LITE_ENSURE(context,\n                 begin->type == kTfLiteInt32 || begin->type == kTfLiteInt64);\n  TF_LITE_ENSURE(context,\n                 size->type == kTfLiteInt32 || size->type == kTfLiteInt64);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(begin), 1);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(size), 1);\n  TF_LITE_ENSURE_EQ(context, NumElements(begin), NumElements(size));\n  TF_LITE_ENSURE_MSG(context, NumDimensions(input) <= kMaxDim,\n                     \"Slice op only supports 1D-4D input arrays.\");\n\n  // Postpone allocation of output if any of the indexing tensors is not\n  // constant\n  if (!(IsConstantTensor(begin) && IsConstantTensor(size))) {\n    SetTensorToDynamic(output);\n    return kTfLiteOk;\n  }\n\n  return ResizeOutputShape(context, input, begin, size, output);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  const TfLiteTensor* begin = GetInput(context, node, kBeginTensor);\n  const TfLiteTensor* size = GetInput(context, node, kSizeTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  if (IsDynamicTensor(output)) {\n    TF_LITE_ENSURE_OK(context,\n                      ResizeOutputShape(context, input, begin, size, output));\n  }\n\n  std::vector<int> begins;\n  begins.reserve(kMaxDim);\n  std::vector<int> sizes;\n  sizes.reserve(kMaxDim);\n\n  for (int i = NumDimensions(input); i < kMaxDim; ++i) {\n    begins.push_back(0);\n    sizes.push_back(1);\n  }\n\n  if (begin->type == kTfLiteInt32) {\n    GetBeginAndSizeVectors<int32_t>(NumDimensions(input), begin, size, &begins,\n                                    &sizes);\n  } else if (begin->type == kTfLiteInt64) {\n    GetBeginAndSizeVectors<int64_t>(NumDimensions(input), begin, size, &begins,\n                                    &sizes);\n  } else {\n    context->ReportError(\n        context, \"Type %d is currently not supported by Slice.\", begin->type);\n    return kTfLiteError;\n  }\n\n  // The original Slice op implementation only accepted 4-D sizes. That\n  // constraint is, for the present, maintained here.\n  //\n  // The dimensions in the kernel used to be in reverse-order, and TFLite\n  // arranged the begins and sizes vectors accordingly. This macro incorporates\n  // the needed reversing.\n#define TF_LITE_SLICE(data_type, kernel_type)                                  \\\n  {                                                                            \\\n    TF_LITE_ENSURE_EQ(context, begins.size(), 4);                              \\\n    TF_LITE_ENSURE_EQ(context, sizes.size(), 4);                               \\\n    tflite::SliceParams op_params;                                             \\\n    op_params.begin_count = 4;                                                 \\\n    op_params.size_count = 4;                                                  \\\n    for (int i = 0; i < 4; ++i) {                                              \\\n      op_params.begin[i] = begins[i];                                          \\\n      op_params.size[i] = sizes[i];                                            \\\n    }                                                                          \\\n                                                                               \\\n    if (kernel_type == kGenericOptimized) {                                    \\\n      optimized_ops::Slice<data_type>(op_params, GetTensorShape(input), input, \\\n                                      GetTensorShape(output), output);         \\\n    } else {                                                                   \\\n      reference_ops::Slice<data_type>(op_params, GetTensorShape(input), input, \\\n                                      GetTensorShape(output), output);         \\\n    }                                                                          \\\n  }\n\n  switch (input->type) {\n    case kTfLiteFloat32:\n      TF_LITE_SLICE(float, kernel_type);\n      break;\n    case kTfLiteInt32:\n      TF_LITE_SLICE(int32_t, kernel_type);\n      break;\n    case kTfLiteInt64:\n      TF_LITE_SLICE(int64_t, kernel_type);\n      break;\n    case kTfLiteInt8:\n      TF_LITE_SLICE(int8_t, kernel_type);\n      break;\n    case kTfLiteInt16:\n      TF_LITE_SLICE(int16_t, kernel_type);\n      break;\n    case kTfLiteUInt8:\n      TF_LITE_SLICE(uint8_t, kernel_type);\n      break;\n    case kTfLiteBool:\n      TF_LITE_SLICE(bool, kernel_type);\n      break;\n    case kTfLiteString:\n      TF_LITE_SLICE(string, kernel_type);\n      break;\n    default:\n      context->ReportError(\n          context, \"Type %d is currently not supported by Slice.\", input->type);\n      return kTfLiteError;\n  }\n#undef TF_LITE_SLICE\n  return kTfLiteOk;\n}\n\n}  // namespace slice\n\nTfLiteRegistration* Register_SLICE_REF() {\n  static TfLiteRegistration r = {nullptr, nullptr, slice::Prepare,\n                                 slice::Eval<slice::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_SLICE() {\n  static TfLiteRegistration r = {nullptr, nullptr, slice::Prepare,\n                                 slice::Eval<slice::kGenericOptimized>};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"