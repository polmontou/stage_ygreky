"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include <vector>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/op_macros.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace sparse_to_dense {\n\nconstexpr int kIndicesTensor = 0;\nconstexpr int kOutputShapeTensor = 1;\nconstexpr int kValueInputTensor = 2;\nconstexpr int kDefaultValueTensor = 3;\nconstexpr int kOutputTensor = 0;\n\nconstexpr int kMaxDimensions = 4;\n\ntemplate <typename T>\nTfLiteStatus Resize(TfLiteContext* context, const TfLiteTensor* output_shape,\n                    TfLiteTensor* output) {\n  const int output_dimensions = NumElements(output_shape);\n  TfLiteIntArray* output_shape_array = TfLiteIntArrayCreate(output_dimensions);\n  for (int i = 0; i < output_dimensions; ++i) {\n    output_shape_array->data[i] = GetTensorData<T>(output_shape)[i];\n  }\n\n  return context->ResizeTensor(context, output, output_shape_array);\n}\n\nTfLiteStatus CheckDimensionsMatch(TfLiteContext* context,\n                                  const TfLiteTensor* indices,\n                                  const TfLiteTensor* output_shape,\n                                  const TfLiteTensor* values) {\n  switch (NumDimensions(indices)) {\n    case 0:\n    case 1: {\n      if (NumDimensions(values) == 0) {\n        TF_LITE_ENSURE_EQ(context, NumElements(indices), NumElements(values));\n      }\n      TF_LITE_ENSURE_EQ(context, NumElements(output_shape), 1);\n      break;\n    }\n    case 2: {\n      TF_LITE_ENSURE_EQ(context, SizeOfDimension(indices, 1),\n                        NumElements(output_shape));\n      if (NumDimensions(values) == 0)\n        TF_LITE_ENSURE_EQ(context, SizeOfDimension(indices, 0),\n                          NumElements(values));\n      break;\n    }\n    default:\n      context->ReportError(\n          context, \"Wrong indices dimensions %d, should be less than 3.\",\n          NumDimensions(indices));\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n// Convert indices into a vector of 4-d vectors.\n// TODO(renjieliu): Revisit here to improve the performance, since multiple\n// allocations of std::vectors will be quite slow on phones.\ntemplate <typename T>\nTfLiteStatus GetIndicesVector(TfLiteContext* context,\n                              const TfLiteTensor* indices,\n                              const int num_indices,\n                              std::vector<std::vector<T>>* indices_vector) {\n  // Note because TfLite will reverse the dimensions, so pad zeros upfront.\n  switch (NumDimensions(indices)) {\n    case 0:\n    case 1: {\n      const auto indices_data = GetTensorData<T>(indices);\n      for (int i = 0; i < num_indices; ++i) {\n        std::vector<T> index({0, 0, 0, indices_data[i]});\n        indices_vector->push_back(index);\n      }\n      break;\n    }\n    case 2: {\n      const int true_dimensions = SizeOfDimension(indices, 1);\n      TF_LITE_ENSURE(context, true_dimensions <= kMaxDimensions);\n      for (int i = 0; i < num_indices; ++i) {\n        std::vector<T> index;\n        index.reserve(kMaxDimensions);\n        // Fill the index with 1 up to kMaxDimensions - true_dimensions to\n        // satisfy the needs for 4-dimension index.\n        for (int j = 0; j < kMaxDimensions - true_dimensions; ++j) {\n          index.push_back(0);\n        }\n        for (int j = 0; j < true_dimensions; ++j) {\n          index.push_back(GetTensorData<T>(indices)[i * true_dimensions + j]);\n        }\n\n        indices_vector->push_back(index);\n      }\n      break;\n    }\n    default:\n      context->ReportError(context,\n                           \"Indices dimensions problem, got %d dimensions\",\n                           NumDimensions(indices));\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus ResizeOutputShape(TfLiteContext* context,\n                               const TfLiteTensor* output_shape,\n                               TfLiteTensor* output) {\n  if (output_shape->type == kTfLiteInt32) {\n    return Resize<int32_t>(context, output_shape, output);\n  } else if (output_shape->type == kTfLiteInt64) {\n    return Resize<int64_t>(context, output_shape, output);\n  } else {\n    context->ReportError(context, \"Dense shape type %d not supported.\",\n                         output_shape->type);\n    return kTfLiteError;\n  }\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* indices = GetInput(context, node, kIndicesTensor);\n  const TfLiteTensor* output_shape =\n      GetInput(context, node, kOutputShapeTensor);\n  const TfLiteTensor* values = GetInput(context, node, kValueInputTensor);\n  const TfLiteTensor* default_value =\n      GetInput(context, node, kDefaultValueTensor);\n\n  // TODO(renjieliu): Handle validate_indices.\n\n  // Indices can be 0-D, 1-D or 2-D.\n  TF_LITE_ASSERT(NumDimensions(indices) >= 0);\n  TF_LITE_ENSURE(context, NumDimensions(indices) < 3);\n  TF_LITE_ASSERT(NumDimensions(output_shape) >= 0);\n  TF_LITE_ENSURE_EQ(context, NumDimensions(output_shape), 1);\n  // Values can be 0-D or 1-D.\n  TF_LITE_ASSERT(NumDimensions(values) >= 0);\n  TF_LITE_ENSURE(context, NumDimensions(values) < 2);\n\n  TF_LITE_ENSURE_EQ(context, NumElements(default_value), 1);\n\n  TF_LITE_ENSURE(\n      context, indices->type == kTfLiteInt32 || indices->type == kTfLiteInt64);\n  TF_LITE_ENSURE(context, output_shape->type == kTfLiteInt32 ||\n                              output_shape->type == kTfLiteInt64);\n  TF_LITE_ENSURE(context, values->type == kTfLiteInt32 ||\n                              values->type == kTfLiteInt64 ||\n                              values->type == kTfLiteInt8 ||\n                              values->type == kTfLiteUInt8 ||\n                              values->type == kTfLiteFloat32);\n  TF_LITE_ENSURE_TYPES_EQ(context, values->type, default_value->type);\n\n  // Ensure dimensions match.\n  TF_LITE_ENSURE_OK(\n      context, CheckDimensionsMatch(context, indices, output_shape, values));\n\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  output->type = values->type;\n  TF_LITE_ENSURE_EQ(context, NumDimensions(output_shape), 1);\n\n  if (!IsConstantTensor(output_shape)) {\n    SetTensorToDynamic(output);\n    return kTfLiteOk;\n  }\n  return ResizeOutputShape(context, output_shape, output);\n}\n\ntemplate <typename T, typename TI>\nTfLiteStatus SparseToDenseImpl(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* indices = GetInput(context, node, kIndicesTensor);\n  const TfLiteTensor* output_shape =\n      GetInput(context, node, kOutputShapeTensor);\n  const TfLiteTensor* values = GetInput(context, node, kValueInputTensor);\n  const TfLiteTensor* default_value =\n      GetInput(context, node, kDefaultValueTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  if (IsDynamicTensor(output)) {\n    TF_LITE_ENSURE_OK(context,\n                      ResizeOutputShape(context, output_shape, output));\n  }\n\n  const int num_indices = SizeOfDimension(indices, 0);\n  const bool value_is_scalar = NumDimensions(values) == 0;\n  std::vector<std::vector<TI>> indices_vector;\n  indices_vector.reserve(num_indices);\n  TF_LITE_ENSURE_OK(context, GetIndicesVector<TI>(context, indices, num_indices,\n                                                  &indices_vector));\n  reference_ops::SparseToDense(indices_vector, GetTensorData<T>(values),\n                               *GetTensorData<T>(default_value),\n                               value_is_scalar, GetTensorShape(output),\n                               GetTensorData<T>(output));\n\n  return kTfLiteOk;\n}\n\ntemplate <typename T>\nTfLiteStatus EvalForIndexType(TfLiteContext* context, TfLiteNode* node,\n                              const TfLiteTensor* indices) {\n  switch (indices->type) {\n    case kTfLiteInt32: {\n      return SparseToDenseImpl<T, int32_t>(context, node);\n    }\n    case kTfLiteInt64: {\n      return SparseToDenseImpl<T, int64_t>(context, node);\n    }\n    default:\n      TF_LITE_KERNEL_LOG(\n          context,\n          \"Indice type %s is currently not supported by sparse to dense.\",\n          TfLiteTypeGetName(indices->type));\n      return kTfLiteError;\n  }\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* indices = GetInput(context, node, kIndicesTensor);\n  const TfLiteTensor* values = GetInput(context, node, kValueInputTensor);\n\n  switch (values->type) {\n    case kTfLiteFloat32:\n      return EvalForIndexType<float>(context, node, indices);\n    case kTfLiteInt32:\n      return EvalForIndexType<int32_t>(context, node, indices);\n    case kTfLiteInt64:\n      return EvalForIndexType<int64_t>(context, node, indices);\n    case kTfLiteInt8:\n      return EvalForIndexType<int8_t>(context, node, indices);\n    case kTfLiteUInt8:\n      return EvalForIndexType<uint8_t>(context, node, indices);\n    default:\n      TF_LITE_KERNEL_LOG(\n          context,\n          \"Value type %s is currently not supported by sparse to dense.\",\n          TfLiteTypeGetName(values->type));\n      return kTfLiteError;\n  }\n}\n\n}  // namespace sparse_to_dense\n\nTfLiteRegistration* Register_SPARSE_TO_DENSE() {\n  static TfLiteRegistration r = {nullptr, nullptr, sparse_to_dense::Prepare,\n                                 sparse_to_dense::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"