"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/sub.h\"\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include <algorithm>\n#include <limits>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/cpu_check.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/neon_check.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/reference/add.h\"\n#include \"tensorflow/lite/kernels/internal/reference/integer_ops/add.h\"\n#include \"tensorflow/lite/kernels/internal/reference/process_broadcast_shapes.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace sub {\n\n// This file has three implementation of Sub.\nenum KernelType {\n  kReference,\n  kGenericOptimized,  // Neon-free\n  kNeonOptimized,\n};\n\nconstexpr int kInputTensor1 = 0;\nconstexpr int kInputTensor2 = 1;\nconstexpr int kOutputTensor = 0;\n\nstruct OpData {\n  bool requires_broadcast;\n\n  // These fields are used in both the general 8-bit -> 8bit quantized path,\n  // and the special 16-bit -> 16bit quantized path\n  int input1_shift;\n  int input2_shift;\n  int32 output_activation_min;\n  int32 output_activation_max;\n\n  // These fields are used only in the general 8-bit -> 8bit quantized path\n  int32 input1_multiplier;\n  int32 input2_multiplier;\n  int32 output_multiplier;\n  int output_shift;\n  int left_shift;\n  int32 input1_offset;\n  int32 input2_offset;\n  int32 output_offset;\n\n  // This parameter is used to indicate whether\n  // parameter scale is power of two.\n  // It is used in 16-bit -> 16-bit quantization.\n  bool pot_scale_int16;\n};\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  auto* data = new OpData;\n  data->requires_broadcast = false;\n  return data;\n}\n\nvoid Free(TfLiteContext* context, void* buffer) {\n  delete reinterpret_cast<OpData*>(buffer);\n}\n\nTfLiteStatus PrepareGeneralSubOp(TfLiteContext* context,\n                                 const TfLiteTensor* input_1,\n                                 const TfLiteTensor* input_2,\n                                 TfLiteTensor* output, TfLiteSubParams* params,\n                                 OpData* op_params, int op_sign) {\n  TF_LITE_ENSURE(context, output->type == kTfLiteUInt8 ||\n                              output->type == kTfLiteInt8 ||\n                              output->type == kTfLiteInt16);\n  const auto& input1_quantization_params = input_1->params;\n  const auto& input2_quantization_params = input_2->params;\n  const auto& output_quantization_params = output->params;\n  int32_t integer_type_min = 0;\n  int32_t integer_type_max = 0;\n  if (output->type == kTfLiteUInt8) {\n    integer_type_min = std::numeric_limits<uint8_t>::min();\n    integer_type_max = std::numeric_limits<uint8_t>::max();\n  } else if (output->type == kTfLiteInt16) {\n    integer_type_min = std::numeric_limits<int16_t>::min();\n    integer_type_max = std::numeric_limits<int16_t>::max();\n  } else {\n    // output->type == kTfLiteInt8\n    integer_type_min = std::numeric_limits<int8_t>::min();\n    integer_type_max = std::numeric_limits<int8_t>::max();\n  }\n\n  TF_LITE_ENSURE(context,\n                 input1_quantization_params.zero_point >= integer_type_min);\n  TF_LITE_ENSURE(context,\n                 input1_quantization_params.zero_point <= integer_type_max);\n  TF_LITE_ENSURE(context,\n                 input2_quantization_params.zero_point >= integer_type_min);\n  TF_LITE_ENSURE(context,\n                 input2_quantization_params.zero_point <= integer_type_max);\n  TF_LITE_ENSURE(context,\n                 output_quantization_params.zero_point >= integer_type_min);\n  TF_LITE_ENSURE(context,\n                 output_quantization_params.zero_point <= integer_type_max);\n\n  op_params->input1_offset = -input1_quantization_params.zero_point;\n  op_params->input2_offset = -input2_quantization_params.zero_point;\n  op_params->output_offset = output_quantization_params.zero_point;\n\n  // The shift is set to 15 in case of 16-bit and 20 in case of 8-bit,\n  // accordingly. In case of 16-bit we have 65535 << 15 which is less than 1 <<\n  // 31, therefore the addition will still fit in a 32 bit accumulator.\n  op_params->left_shift = output->type == kTfLiteInt16 ? 15 : 20;\n  const double twice_max_input_scale =\n      2 * std::max(input1_quantization_params.scale,\n                   input2_quantization_params.scale);\n  const double real_input1_multiplier =\n      input1_quantization_params.scale / twice_max_input_scale;\n  const double real_input2_multiplier =\n      input2_quantization_params.scale / twice_max_input_scale;\n  const double real_output_multiplier =\n      twice_max_input_scale /\n      ((1 << op_params->left_shift) * output_quantization_params.scale);\n\n  tflite::QuantizeMultiplierSmallerThanOneExp(real_input1_multiplier,\n                                              &op_params->input1_multiplier,\n                                              &op_params->input1_shift);\n  tflite::QuantizeMultiplierSmallerThanOneExp(real_input2_multiplier,\n                                              &op_params->input2_multiplier,\n                                              &op_params->input2_shift);\n  op_params->input2_multiplier *= op_sign;\n  tflite::QuantizeMultiplierSmallerThanOneExp(real_output_multiplier,\n                                              &op_params->output_multiplier,\n                                              &op_params->output_shift);\n\n  TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(\n      context, params->activation, output, &op_params->output_activation_min,\n      &op_params->output_activation_max));\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus PrepareInt16SubOpPOT(TfLiteContext* context,\n                                  const TfLiteTensor* input1,\n                                  const TfLiteTensor* input2,\n                                  TfLiteTensor* output, TfLiteSubParams* params,\n                                  OpData* data) {\n  // 16bit -> 16bit special quantized path, supporting only a rather\n  // narrow case of quantization parameters: zero_points must all be 0\n  // (\"symmetric quantization\") and scales must be power-of-two (which\n  // we abbreviate as \"POT\" below). The intended use case for this path\n  // is in LSTM cells, where, due to the constraints of implementing\n  // some of the math in these LSTM cells in fixed-point arithmetic,\n  // we need to have such symmetric, power-of-two quantization\n  // (Fixed-point formats are inherently symmetric, power-of-two).\n  TF_LITE_ENSURE_EQ(context, input1->params.zero_point, 0);\n  TF_LITE_ENSURE_EQ(context, input2->params.zero_point, 0);\n  TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);\n\n  int input1_scale_log2_rounded;\n  bool input1_scale_is_pot =\n      CheckedLog2(input1->params.scale, &input1_scale_log2_rounded);\n  TF_LITE_ENSURE(context, input1_scale_is_pot);\n\n  int input2_scale_log2_rounded;\n  bool input2_scale_is_pot =\n      CheckedLog2(input2->params.scale, &input2_scale_log2_rounded);\n  TF_LITE_ENSURE(context, input2_scale_is_pot);\n\n  int output_scale_log2_rounded;\n  bool output_scale_is_pot =\n      CheckedLog2(output->params.scale, &output_scale_log2_rounded);\n  TF_LITE_ENSURE(context, output_scale_is_pot);\n\n  data->input1_shift = input1_scale_log2_rounded - output_scale_log2_rounded;\n  data->input2_shift = input2_scale_log2_rounded - output_scale_log2_rounded;\n\n  // Shifting of one input is supported. The graph quantization should ensure\n  // that the other input matches the output.\n  TF_LITE_ENSURE(context, data->input1_shift == 0 || data->input2_shift == 0);\n  TF_LITE_ENSURE(context, data->input1_shift <= 0);\n  TF_LITE_ENSURE(context, data->input2_shift <= 0);\n\n  TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(\n      context, params->activation, output, &data->output_activation_min,\n      &data->output_activation_max));\n  return kTfLiteOk;\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n  auto* params = reinterpret_cast<TfLiteSubParams*>(node->builtin_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);\n  output->type = input2->type;\n\n  data->requires_broadcast = !HaveSameShapes(input1, input2);\n\n  TfLiteIntArray* output_size = nullptr;\n  if (data->requires_broadcast) {\n    TF_LITE_ENSURE_OK(context, CalculateShapeForBroadcast(\n                                   context, input1, input2, &output_size));\n  } else {\n    output_size = TfLiteIntArrayCopy(input1->dims);\n  }\n\n  // 8bit -> 8bit general quantized path, with general rescalings\n  // as well as, 16bit -> 16bit with general rescalings\n  bool pot_scale_int16 = true;\n\n  bool input1_scale_is_pot = false;\n  bool input2_scale_is_pot = false;\n  bool output_scale_is_pot = false;\n\n  int input1_scale_log2_rounded{0};\n  int input2_scale_log2_rounded{0};\n  int output_scale_log2_rounded{0};\n\n  if (input1->type == kTfLiteInt16 && input2->type == kTfLiteInt16 &&\n      output->type == kTfLiteInt16) {\n    // In case of 16-bit, there are two implementation:\n    // the scale parameter is a general number\n    // the scale parameter is POT and\n    // zero_point is zero for inputs/output.\n    pot_scale_int16 = (input1->params.zero_point == 0) &&\n                      (input2->params.zero_point == 0) &&\n                      (output->params.zero_point == 0);\n\n    input1_scale_is_pot =\n        CheckedLog2(input1->params.scale, &input1_scale_log2_rounded);\n\n    input2_scale_is_pot =\n        CheckedLog2(input2->params.scale, &input2_scale_log2_rounded);\n\n    output_scale_is_pot =\n        CheckedLog2(output->params.scale, &output_scale_log2_rounded);\n\n    pot_scale_int16 &=\n        input1_scale_is_pot && input2_scale_is_pot && output_scale_is_pot;\n  }\n\n  data->pot_scale_int16 = pot_scale_int16;\n\n  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8 ||\n      !pot_scale_int16) {\n    TF_LITE_ENSURE_OK(context, PrepareGeneralSubOp(context, input1, input2,\n                                                   output, params, data, -1));\n  } else if (output->type == kTfLiteInt16) {\n    // LSTM-special case with scale parameter of POT\n    TF_LITE_ENSURE_OK(context, PrepareInt16SubOpPOT(context, input1, input2,\n                                                    output, params, data));\n  }\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <KernelType kernel_type, typename data_type>\nvoid EvalSubImpl(TfLiteContext* context, TfLiteNode* node,\n                 TfLiteSubParams* params, const OpData* data,\n                 const TfLiteTensor* input1, const TfLiteTensor* input2,\n                 bool requires_broadcast, TfLiteTensor* output) {\n  data_type output_activation_min, output_activation_max;\n  CalculateActivationRange(params->activation, &output_activation_min,\n                           &output_activation_max);\n  tflite::ArithmeticParams op_params;\n  SetActivationParams(output_activation_min, output_activation_max, &op_params);\n\n  switch (kernel_type) {\n    case kReference:\n      if (requires_broadcast) {\n        reference_ops::BroadcastSubSlow(\n            op_params, GetTensorShape(input1), GetTensorData<data_type>(input1),\n            GetTensorShape(input2), GetTensorData<data_type>(input2),\n            GetTensorShape(output), GetTensorData<data_type>(output));\n      } else {\n        reference_ops::SubWithActivation(\n            op_params, GetTensorShape(input1), GetTensorData<data_type>(input1),\n            GetTensorShape(input2), GetTensorData<data_type>(input2),\n            GetTensorShape(output), GetTensorData<data_type>(output));\n      }\n      break;\n    case kGenericOptimized:\n    case kNeonOptimized:\n      if (requires_broadcast) {\n        optimized_ops::BroadcastSubSlow(\n            op_params, GetTensorShape(input1), GetTensorData<data_type>(input1),\n            GetTensorShape(input2), GetTensorData<data_type>(input2),\n            GetTensorShape(output), GetTensorData<data_type>(output));\n      } else {\n        optimized_ops::SubWithActivation(\n            op_params, GetTensorShape(input1), GetTensorData<data_type>(input1),\n            GetTensorShape(input2), GetTensorData<data_type>(input2),\n            GetTensorShape(output), GetTensorData<data_type>(output));\n      }\n      break;\n  }\n}\n\ntemplate <KernelType kernel_type>\nvoid EvalSub(TfLiteContext* context, TfLiteNode* node, TfLiteSubParams* params,\n             const OpData* data, const TfLiteTensor* input1,\n             const TfLiteTensor* input2, TfLiteTensor* output) {\n  const bool requires_broadcast = data->requires_broadcast;\n  switch (output->type) {\n    case kTfLiteInt32:\n      EvalSubImpl<kernel_type, int32_t>(context, node, params, data, input1,\n                                        input2, requires_broadcast, output);\n      break;\n    case kTfLiteFloat32:\n      EvalSubImpl<kernel_type, float>(context, node, params, data, input1,\n                                      input2, requires_broadcast, output);\n      break;\n    case kTfLiteInt64:\n      EvalSubImpl<kernel_type, int64_t>(context, node, params, data, input1,\n                                        input2, requires_broadcast, output);\n      break;\n\n    default:\n      TF_LITE_KERNEL_LOG(context, \"output type %s is not supported.\",\n                         TfLiteTypeGetName(output->type));\n  }\n}\n\ntemplate <KernelType kernel_type>\nvoid EvalQuantized(TfLiteContext* context, TfLiteNode* node,\n                   TfLiteSubParams* params, const OpData* data,\n                   const TfLiteTensor* input1, const TfLiteTensor* input2,\n                   TfLiteTensor* output) {\n  tflite::ArithmeticParams op_params;\n  op_params.left_shift = data->left_shift;\n  op_params.input1_offset = data->input1_offset;\n  op_params.input1_multiplier = data->input1_multiplier;\n  op_params.input1_shift = data->input1_shift;\n  op_params.input2_offset = data->input2_offset;\n  op_params.input2_multiplier = data->input2_multiplier;\n  op_params.input2_shift = data->input2_shift;\n  op_params.output_offset = data->output_offset;\n  op_params.output_multiplier = data->output_multiplier;\n  op_params.output_shift = data->output_shift;\n  SetActivationParams(data->output_activation_min, data->output_activation_max,\n                      &op_params);\n\n  const bool need_broadcast = optimized_ops::ProcessBroadcastShapes(\n      GetTensorShape(input1), GetTensorShape(input2), &op_params);\n\n#define TF_LITE_SUB(type, opname, data_type)                             \\\n  type::opname(op_params, GetTensorShape(input1),                        \\\n               GetTensorData<data_type>(input1), GetTensorShape(input2), \\\n               GetTensorData<data_type>(input2), GetTensorShape(output), \\\n               GetTensorData<data_type>(output))\n  // NOTE: We are using the add kernels. This is possible as the second values\n  // multiplier is negated before being passed down.\n  if (output->type == kTfLiteInt8) {\n    if (need_broadcast) {\n      TF_LITE_SUB(reference_integer_ops, BroadcastAdd4DSlow, int8_t);\n    } else {\n      TF_LITE_SUB(reference_integer_ops, Add, int8_t);\n    }\n  } else if (!data->pot_scale_int16) {\n    if (need_broadcast) {\n      TF_LITE_SUB(reference_ops, BroadcastAdd4DSlow, int16_t);\n    } else {\n      reference_ops::Add(op_params, GetTensorShape(input1),\n                         GetTensorData<int16_t>(input1), GetTensorShape(input2),\n                         GetTensorData<int16_t>(input2), GetTensorShape(output),\n                         GetTensorData<int16_t>(output), false);\n    }\n  } else if (output->type == kTfLiteUInt8) {\n    if (kernel_type == kReference) {\n      if (need_broadcast) {\n        TF_LITE_SUB(reference_ops, BroadcastAdd4DSlow, uint8_t);\n      } else {\n        TF_LITE_SUB(reference_ops, Add, uint8_t);\n      }\n    } else {\n      if (need_broadcast) {\n        optimized_ops::BroadcastAddDispatch(\n            op_params, GetTensorShape(input1), GetTensorData<uint8_t>(input1),\n            GetTensorShape(input2), GetTensorData<uint8_t>(input2),\n            GetTensorShape(output), GetTensorData<uint8_t>(output));\n      } else {\n        TF_LITE_SUB(optimized_ops, Add, uint8_t);\n      }\n    }\n  } else {\n    if (kernel_type == kReference) {\n      if (need_broadcast) {\n        TF_LITE_SUB(reference_ops, BroadcastSubSlow, int16_t);\n      } else {\n        TF_LITE_SUB(reference_ops, Sub16, int16_t);\n      }\n    } else {\n      if (need_broadcast) {\n        TF_LITE_SUB(optimized_ops, BroadcastSubSlow, int16_t);\n      } else {\n        TF_LITE_SUB(optimized_ops, Sub16, int16_t);\n      }\n    }\n  }\n#undef TF_LITE_SUB\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLiteSubParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  if (output->type == kTfLiteFloat32 || output->type == kTfLiteInt32 ||\n      output->type == kTfLiteInt64) {\n    EvalSub<kernel_type>(context, node, params, data, input1, input2, output);\n  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8 ||\n             output->type == kTfLiteInt16) {\n    EvalQuantized<kernel_type>(context, node, params, data, input1, input2,\n                               output);\n  } else {\n    context->ReportError(\n        context,\n        \"output type %d is not supported, requires float|uint8|int32 types.\",\n        output->type);\n    return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace sub\n\nTfLiteRegistration* Register_SUB_REF() {\n  static TfLiteRegistration r = {sub::Init, sub::Free, sub::Prepare,\n                                 sub::Eval<sub::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_SUB_GENERIC_OPT() {\n  static TfLiteRegistration r = {sub::Init, sub::Free, sub::Prepare,\n                                 sub::Eval<sub::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_SUB_NEON_OPT() {\n  static TfLiteRegistration r = {sub::Init, sub::Free, sub::Prepare,\n                                 sub::Eval<sub::kNeonOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_SUB() {\n#ifdef USE_NEON\n  return Register_SUB_NEON_OPT();\n#else\n  return Register_SUB_GENERIC_OPT();\n#endif\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"