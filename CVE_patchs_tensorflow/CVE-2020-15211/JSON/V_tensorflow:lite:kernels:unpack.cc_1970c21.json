"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace unpack {\nnamespace {\n\nconstexpr int kInputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteUnpackParams* data =\n      reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), data->num);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TF_LITE_ENSURE(context, NumElements(input) > 0);\n  int axis = data->axis;\n  if (axis < 0) {\n    axis += NumDimensions(input);\n  }\n  TF_LITE_ENSURE(context, 0 <= axis && axis < NumDimensions(input));\n  if (input->type != kTfLiteInt32 && input->type != kTfLiteFloat32 &&\n      input->type != kTfLiteUInt8 && input->type != kTfLiteInt8 &&\n      input->type != kTfLiteInt16 && input->type != kTfLiteBool) {\n    context->ReportError(context, \"Type '%s' is not supported by unpack.\",\n                         TfLiteTypeGetName(input->type));\n    return kTfLiteError;\n  }\n\n  const TfLiteIntArray* input_shape = input->dims;\n  // Num should be equal to the shape[axis].\n  // Resize outputs. rank will be R - 1.\n  TfLiteIntArray* output_shape = TfLiteIntArrayCreate(NumDimensions(input) - 1);\n  int o = 0;\n  for (int index = 0; index < NumDimensions(input); ++index) {\n    if (index != axis) {\n      output_shape->data[o++] = input_shape->data[index];\n    }\n  }\n\n  TF_LITE_ENSURE_EQ(context, data->num, input_shape->data[axis]);\n  for (int i = 0; i < data->num; ++i) {\n    TfLiteIntArray* copied_output_shape = TfLiteIntArrayCopy(output_shape);\n    TfLiteTensor* output = GetOutput(context, node, i);\n    TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);\n    // Guarantee input/output quantization params match as we do not support\n    // rescaling of unpacked quantized tensors.\n    TF_LITE_ENSURE_EQ(context, input->params.zero_point,\n                      output->params.zero_point);\n    TF_LITE_ENSURE_EQ(context, input->params.scale, output->params.scale);\n    TF_LITE_ENSURE_OK(\n        context, context->ResizeTensor(context, output, copied_output_shape));\n  }\n\n  TfLiteIntArrayFree(output_shape);\n  return kTfLiteOk;\n}\n\ntemplate <typename T>\nvoid UnpackImpl(TfLiteContext* context, TfLiteNode* node,\n                const TfLiteTensor* input, int output_count, int axis) {\n  tflite::UnpackParams op_params;\n  op_params.axis = axis;\n  op_params.num_split = output_count;\n  VectorOfTensors<T> all_outputs(*context, *node->outputs);\n  reference_ops::Unpack<T>(op_params, GetTensorShape(input),\n                           GetTensorData<T>(input), **all_outputs.shapes(),\n                           all_outputs.data());\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteUnpackParams* data =\n      reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  switch (input->type) {\n    case kTfLiteFloat32: {\n      UnpackImpl<float>(context, node, input, data->num, data->axis);\n      break;\n    }\n    case kTfLiteInt32: {\n      UnpackImpl<int32_t>(context, node, input, data->num, data->axis);\n      break;\n    }\n    case kTfLiteUInt8: {\n      UnpackImpl<uint8_t>(context, node, input, data->num, data->axis);\n      break;\n    }\n    case kTfLiteInt8: {\n      UnpackImpl<int8_t>(context, node, input, data->num, data->axis);\n      break;\n    }\n    case kTfLiteBool: {\n      UnpackImpl<bool>(context, node, input, data->num, data->axis);\n      break;\n    }\n    case kTfLiteInt16: {\n      UnpackImpl<int16_t>(context, node, input, data->num, data->axis);\n      break;\n    }\n    default: {\n      context->ReportError(context, \"Type '%s' is not supported by unpack.\",\n                           TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n    }\n  }\n\n  return kTfLiteOk;\n}\n}  // namespace\n}  // namespace unpack\n\nTfLiteRegistration* Register_UNPACK() {\n  static TfLiteRegistration r = {nullptr, nullptr, unpack::Prepare,\n                                 unpack::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"