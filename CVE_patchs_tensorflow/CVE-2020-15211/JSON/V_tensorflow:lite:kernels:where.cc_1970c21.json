"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace where {\n\nconstexpr int kInputConditionTensor = 0;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus ResizeOutputTensor(TfLiteContext* context,\n                                const TfLiteTensor* cond_tensor,\n                                TfLiteTensor* output_tensor) {\n  // Output tensor should have shape:\n  // (num_true, cond_rank), where num_true denotes the number of true values\n  // in condition.\n  const RuntimeShape& cond_shape = GetTensorShape(cond_tensor);\n  const int size = cond_shape.FlatSize();\n  const int cond_rank = cond_shape.DimensionsCount();\n  const bool* cond_data = GetTensorData<bool>(cond_tensor);\n\n  int true_count = 0;\n  for (int i = 0; i < size; ++i) {\n    if (cond_data[i]) {\n      true_count++;\n    }\n  }\n  TfLiteIntArray* output_dims = TfLiteIntArrayCreate(2);\n  output_dims->data[0] = true_count;\n  output_dims->data[1] = cond_rank;\n  return context->ResizeTensor(context, output_tensor, output_dims);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* cond_tensor =\n      GetInput(context, node, kInputConditionTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  if (cond_tensor->type != kTfLiteBool) {\n    context->ReportError(context,\n                         \"Condition tensor must be of type bool, but saw '%s'.\",\n                         TfLiteTypeGetName(cond_tensor->type));\n    return kTfLiteError;\n  }\n\n  // As output will be a 2D tensor of indices, use int64 to be consistent with\n  // tensorflow.\n  output->type = kTfLiteInt64;\n\n  // Exit early if cond is a non-const tensor. Set output tensor to dynamic so\n  // output size can be determined in Eval.\n  if (!IsConstantTensor(cond_tensor)) {\n    SetTensorToDynamic(output);\n    return kTfLiteOk;\n  }\n  return ResizeOutputTensor(context, cond_tensor, output);\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* cond_tensor =\n      GetInput(context, node, kInputConditionTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  if (IsDynamicTensor(output)) {\n    TF_LITE_ENSURE_OK(context,\n                      ResizeOutputTensor(context, cond_tensor, output));\n  }\n\n  TfLiteIntArray* dims = cond_tensor->dims;\n  if (dims->size == 0) {\n    // Scalar tensors are not supported.\n    TF_LITE_KERNEL_LOG(context, \"Where op requires condition w/ rank > 0\");\n    return kTfLiteError;\n  }\n\n  reference_ops::SelectTrueCoords(GetTensorShape(cond_tensor),\n                                  GetTensorData<bool>(cond_tensor),\n                                  GetTensorData<int64_t>(output));\n  return kTfLiteOk;\n}\n}  // namespace where\n\nTfLiteRegistration* Register_WHERE() {\n  static TfLiteRegistration r = {/*init*/ nullptr, /*free*/ nullptr,\n                                 where::Prepare, where::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"