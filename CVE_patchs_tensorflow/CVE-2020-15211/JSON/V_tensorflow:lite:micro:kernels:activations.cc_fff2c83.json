"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/common.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/op_macros.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/micro_utils.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace activations {\nnamespace {\n\nstruct ReluOpData {\n  ReluParams params;\n};\n\nstruct Relu6OpData {\n  int8_t six_int8;\n  int8_t zero_int8;\n  uint8_t six_uint8;\n  uint8_t zero_uint8;\n};\n\n}  // namespace\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\ntemplate <typename T>\ninline void ReluQuantized(const ReluOpData& data,\n                          const RuntimeShape& input_shape,\n                          const RuntimeShape& output_shape, const T* input_data,\n                          T* output_data) {\n  const int flat_size = MatchingFlatSize(input_shape, output_shape);\n  for (int i = 0; i < flat_size; ++i) {\n    const int32_t val = static_cast<int32_t>(input_data[i]);\n    int32_t clamped =\n        data.params.output_offset +\n        MultiplyByQuantizedMultiplier(val - data.params.input_offset,\n                                      data.params.output_multiplier,\n                                      data.params.output_shift);\n    clamped = std::max(data.params.quantized_activation_min, clamped);\n    clamped = std::min(data.params.quantized_activation_max, clamped);\n    output_data[i] = static_cast<T>(clamped);\n  }\n}\n\ntemplate <typename T>\ninline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,\n                                ReluOpData* data) {\n  float act_min = 0.0;\n  float act_max = std::numeric_limits<float>::infinity();\n  double real_multiplier =\n      static_cast<double>(input->params.scale / output->params.scale);\n\n  const RuntimeShape input_shape = GetTensorShape(input);\n  const RuntimeShape output_shape = GetTensorShape(output);\n\n  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,\n                     &data->params.output_shift);\n\n  data->params.quantized_activation_min = std::max(\n      static_cast<int32_t>(std::numeric_limits<T>::min()),\n      output->params.zero_point +\n          static_cast<int32_t>(roundf(act_min / output->params.scale)));\n  data->params.quantized_activation_max =\n      act_max == std::numeric_limits<float>::infinity()\n          ? static_cast<int32_t>(std::numeric_limits<T>::max())\n          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),\n                     output->params.zero_point +\n                         static_cast<int32_t>(\n                             roundf(act_max / output->params.scale)));\n  data->params.input_offset = input->params.zero_point;\n  data->params.output_offset = output->params.zero_point;\n}\n\ninline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,\n                      const RuntimeShape& output_shape, float* output_data) {\n  const int flat_size = MatchingFlatSize(input_shape, output_shape);\n  for (int i = 0; i < flat_size; ++i) {\n    const float val = input_data[i];\n    const float lower = 0.0f;\n    const float clamped = val < lower ? lower : val;\n    output_data[i] = clamped;\n  }\n}\n\ninline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,\n                       const RuntimeShape& output_shape, float* output_data) {\n  const int flat_size = MatchingFlatSize(input_shape, output_shape);\n  for (int i = 0; i < flat_size; ++i) {\n    const float val = input_data[i];\n    const float upper = 6.0f;\n    const float lower = 0.0f;\n    const float clamped = val > upper ? upper : val < lower ? lower : val;\n    output_data[i] = clamped;\n  }\n}\n\ntemplate <typename Q>\ninline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,\n                           const Q* input_data,\n                           const RuntimeShape& output_shape, Q* output_data) {\n  const int flat_size = MatchingFlatSize(input_shape, output_shape);\n  for (int i = 0; i < flat_size; ++i) {\n    const Q val = input_data[i];\n    const Q clamped = val > upper ? upper : val < lower ? lower : val;\n    output_data[i] = clamped;\n  }\n}\n\nvoid* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));\n}\n\nTfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  if (input->type == kTfLiteInt8) {\n    CalculateReluOpData<int8_t>(input, output, data);\n  } else if (input->type == kTfLiteUInt8) {\n    CalculateReluOpData<uint8_t>(input, output, data);\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));\n\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, kInputTensor);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  switch (input->type) {\n    case kTfLiteFloat32: {\n      ReluFloat(tflite::micro::GetTensorShape(input),\n                tflite::micro::GetTensorData<float>(input),\n                tflite::micro::GetTensorShape(output),\n                tflite::micro::GetTensorData<float>(output));\n\n      return kTfLiteOk;\n    }\n    case kTfLiteInt8: {\n      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),\n                            tflite::micro::GetTensorShape(output),\n                            tflite::micro::GetTensorData<int8_t>(input),\n                            tflite::micro::GetTensorData<int8_t>(output));\n      return kTfLiteOk;\n    }\n    case kTfLiteUInt8: {\n      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),\n                             tflite::micro::GetTensorShape(output),\n                             tflite::micro::GetTensorData<uint8_t>(input),\n                             tflite::micro::GetTensorData<uint8_t>(output));\n      return kTfLiteOk;\n    }\n    default: {\n      TF_LITE_KERNEL_LOG(context, \"Only float32 is supported currently, got %s\",\n                         TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n    }\n  }\n}\n\nvoid* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));\n}\n\nTfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n\n  if (input->type == kTfLiteInt8) {\n    data->six_int8 = FloatToAsymmetricQuantizedInt8(6.0f, input->params.scale,\n                                                    input->params.zero_point);\n    data->zero_int8 = input->params.zero_point;\n  } else if (input->type == kTfLiteUInt8) {\n    data->six_uint8 = FloatToAsymmetricQuantizedUInt8(6.0f, input->params.scale,\n                                                      input->params.zero_point);\n    data->zero_uint8 = input->params.zero_point;\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));\n\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, kInputTensor);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  switch (input->type) {\n    case kTfLiteFloat32: {\n      Relu6Float(tflite::micro::GetTensorShape(input),\n                 tflite::micro::GetTensorData<float>(input),\n                 tflite::micro::GetTensorShape(output),\n                 tflite::micro::GetTensorData<float>(output));\n\n      return kTfLiteOk;\n    }\n    case kTfLiteInt8: {\n      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,\n                             tflite::micro::GetTensorShape(input),\n                             tflite::micro::GetTensorData<int8_t>(input),\n                             tflite::micro::GetTensorShape(output),\n                             tflite::micro::GetTensorData<int8_t>(output));\n      return kTfLiteOk;\n    }\n    case kTfLiteUInt8: {\n      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,\n                              tflite::micro::GetTensorShape(input),\n                              tflite::micro::GetTensorData<uint8_t>(input),\n                              tflite::micro::GetTensorShape(output),\n                              tflite::micro::GetTensorData<uint8_t>(output));\n      return kTfLiteOk;\n    }\n    default: {\n      TF_LITE_KERNEL_LOG(context, \"Only float32 is supported currently, got %s\",\n                         TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n    }\n  }\n}\n\n}  // namespace activations\n\nTfLiteRegistration Register_RELU() {\n  return {/*init=*/activations::ReluInit,\n          /*free=*/nullptr,\n          /*prepare=*/activations::ReluPrepare,\n          /*invoke=*/activations::ReluEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_RELU6() {\n  return {/*init=*/activations::Relu6Init,\n          /*free=*/nullptr,\n          /*prepare=*/activations::Relu6Prepare,\n          /*invoke=*/activations::Relu6Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"