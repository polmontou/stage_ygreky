"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/concatenation.h\"\n\n#include <cstdint>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/portable_tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace concatenation {\n\nconstexpr int kMaxInputNum = 10;  // Maximum number of input tensors\nconstexpr int kOutputTensor = 0;\n\nstruct OpData {\n  ConcatenationParams params;\n};\n\n// Handles negative axis index, coerces to positive index value.\ninline int CalculatePositiveAxis(int axis, const TfLiteTensor* output_tensor) {\n  if (axis >= 0) {\n    return axis;\n  } else {\n    return NumDimensions(output_tensor) + axis;\n  }\n}\n\n// The following functions are helpers to get tensor data in the format that the\n// reference op implementation expects. They provide the same functionality as\n// class VectorOfTensors and class VectorOfQuantizedTensors in TFLite.\n\n// Gets shapes from a list of tensors.\ninline void GetAllInputTensorShapes(const TfLiteContext* context,\n                                    const TfLiteNode* node,\n                                    RuntimeShape all_shapes[kMaxInputNum]) {\n  TFLITE_DCHECK(context != nullptr);\n  TFLITE_DCHECK(node != nullptr);\n  for (int i = 0; i < node->inputs->size; ++i) {\n    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);\n    RuntimeShape shape = tflite::micro::GetTensorShape(t);\n    all_shapes[i].ReplaceWith(shape.DimensionsCount(), shape.DimsData());\n  }\n}\n\n// Get shape pointers from a list of shapes.\ninline void GetShapesPointers(const RuntimeShape* shapes, size_t num,\n                              const RuntimeShape* pointers[]) {\n  for (size_t i = 0; i < num; ++i) {\n    pointers[i] = &shapes[i];\n  }\n}\n\n// Gets data pointers from a list of tensors.\ntemplate <typename T>\ninline void GetAllInputTensorData(const TfLiteContext* context,\n                                  const TfLiteNode* node,\n                                  T* all_data[kMaxInputNum]) {\n  TFLITE_DCHECK(context != nullptr);\n  TFLITE_DCHECK(node != nullptr);\n  for (int i = 0; i < node->inputs->size; ++i) {\n    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);\n    all_data[i] = tflite::micro::GetTensorData<T>(t);\n  }\n}\n\ntemplate <typename data_type>\nvoid EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {\n  // Collect the shapes and data pointer of input tensors\n  RuntimeShape inputs_shape[kMaxInputNum];\n  const RuntimeShape* inputs_shape_ptr[kMaxInputNum];\n  const data_type* inputs_data[kMaxInputNum];\n  GetAllInputTensorShapes(context, node, inputs_shape);\n  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);\n  GetAllInputTensorData(context, node, inputs_data);\n\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData* data = static_cast<const OpData*>(node->user_data);\n\n  reference_ops::Concatenation(data->params, inputs_shape_ptr, inputs_data,\n                               tflite::micro::GetTensorShape(output),\n                               tflite::micro::GetTensorData<data_type>(output));\n}\n\nvoid EvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node) {\n  // Collect the shapes and data pointer of input tensors\n  RuntimeShape inputs_shape[kMaxInputNum];\n  const RuntimeShape* inputs_shape_ptr[kMaxInputNum];\n  const uint8_t* inputs_data[kMaxInputNum];\n  GetAllInputTensorShapes(context, node, inputs_shape);\n  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);\n  GetAllInputTensorData(context, node, inputs_data);\n\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData* data = static_cast<const OpData*>(node->user_data);\n\n  reference_ops::ConcatenationWithScaling(\n      data->params, inputs_shape_ptr, inputs_data,\n      tflite::micro::GetTensorShape(output),\n      tflite::micro::GetTensorData<uint8_t>(output));\n}\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(OpData));\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  // This function only checks the types. Additional shape validations are\n  // performed in the reference implementation called during Eval().\n  const TfLiteConcatenationParams* params =\n      reinterpret_cast<TfLiteConcatenationParams*>(node->builtin_data);\n\n  TfLiteType input_type = GetInput(context, node, 0)->type;\n  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;\n\n  // Check activation and input type\n  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);\n  TF_LITE_ENSURE(context,\n                 input_type == kTfLiteFloat32 || input_type == kTfLiteUInt8 ||\n                     input_type == kTfLiteInt8 || input_type == kTfLiteInt32 ||\n                     input_type == kTfLiteInt64);\n\n  // Output type must match input type\n  TF_LITE_ENSURE_EQ(context, output_type, input_type);\n\n  // This implementation does not support large number of input tensors\n  const int num_inputs = NumInputs(node);\n  TF_LITE_ENSURE(context, num_inputs <= kMaxInputNum);\n\n  // Shapes with dimensions >4 are not yet supported with static allocation.\n  for (int i = 0; i < num_inputs; ++i) {\n    const TfLiteTensor* input = GetInput(context, node, i);\n    int num_dimensions = NumDimensions(input);\n\n    if (num_dimensions > 4) {\n      TF_LITE_KERNEL_LOG(\n          context,\n          \"Op Concatenation does not currently support num dimensions >4 \"\n          \"Tensor has %d dimensions.\",\n          num_dimensions);\n      return kTfLiteError;\n    }\n  }\n\n  // Calculate OpData.\n  TFLITE_DCHECK(node->user_data != nullptr);\n  OpData* data = static_cast<OpData*>(node->user_data);\n\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  switch (output_type) {  // Already know in/outtypes are same.\n    case kTfLiteFloat32:\n    case kTfLiteInt32:\n    case kTfLiteInt64: {\n      data->params.axis = CalculatePositiveAxis(params->axis, output);\n      data->params.inputs_count = node->inputs->size;\n      break;\n    }\n    case kTfLiteUInt8:\n    case kTfLiteInt8: {\n      data->params.axis = CalculatePositiveAxis(params->axis, output);\n      data->params.inputs_count = node->inputs->size;\n\n      float* input_scales =\n          reinterpret_cast<float*>(context->AllocatePersistentBuffer(\n              context, node->inputs->size * sizeof(float)));\n\n      int32_t* input_zero_points =\n          reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(\n              context, node->inputs->size * sizeof(int32_t)));\n\n      // Allocate persistent scale and zeropoint buffers.\n      // Store input scale and zero point values in OpParams:\n      for (int i = 0; i < node->inputs->size; ++i) {\n        const TfLiteTensor* t = GetInput(context, node, i);\n        input_scales[i] = t->params.scale;\n        input_zero_points[i] = t->params.zero_point;\n      }\n\n      data->params.input_scale = input_scales;\n      data->params.input_zeropoint = input_zero_points;\n      data->params.output_zeropoint = output->params.zero_point;\n      data->params.output_scale = output->params.scale;\n      break;\n    }\n    default:\n      TF_LITE_KERNEL_LOG(\n          context, \"Op Concatenation does not currently support Type '%s'.\",\n          TfLiteTypeGetName(output_type));\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;\n\n  switch (output_type) {  // Already know in/outtypes are same.\n    case kTfLiteFloat32:\n      EvalUnquantized<float>(context, node);\n      break;\n    case kTfLiteInt32:\n      EvalUnquantized<int32_t>(context, node);\n      break;\n    case kTfLiteUInt8:\n      EvalQuantizedUInt8(context, node);\n      break;\n    case kTfLiteInt8:\n      EvalUnquantized<int8_t>(context, node);\n      break;\n    case kTfLiteInt64:\n      EvalUnquantized<int64_t>(context, node);\n      break;\n\n    default:\n      TF_LITE_KERNEL_LOG(\n          context, \"Op Concatenation does not currently support Type '%s'.\",\n          TfLiteTypeGetName(output_type));\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace concatenation\n\nTfLiteRegistration Register_CONCATENATION() {\n  return {/*init=*/concatenation::Init,\n          /*free=*/nullptr,\n          /*prepare=*/concatenation::Prepare,\n          /*invoke=*/concatenation::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"