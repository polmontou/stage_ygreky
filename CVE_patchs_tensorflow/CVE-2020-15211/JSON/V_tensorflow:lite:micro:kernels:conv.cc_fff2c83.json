"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/kernels/internal/reference/conv.h\"\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/common.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/reference/integer_ops/conv.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/padding.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace conv {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kFilterTensor = 1;\nconstexpr int kBiasTensor = 2;\nconstexpr int kOutputTensor = 0;\n\n// Conv is quantized along dimension 0:\n// https://www.tensorflow.org/lite/performance/quantization_spec\nconstexpr int kConvQuantizedDimension = 0;\n\n// This file has 2 implementation of Conv.\n\nstruct OpData {\n  TfLitePaddingValues padding;\n\n  // Cached tensor zero point values for quantized operations.\n  int32_t input_zero_point;\n  int32_t filter_zero_point;\n  int32_t output_zero_point;\n\n  // The scaling factor from input to output (aka the 'real multiplier') can\n  // be represented as a fixed point multiplier plus a left shift.\n  int32_t output_multiplier;\n  int output_shift;\n\n  // Per channel output multiplier and shift.\n  int32_t* per_channel_output_multiplier;\n  int32_t* per_channel_output_shift;\n\n  // The range of the fused activation layer. For example for kNone and\n  // uint8_t these would be 0 and 255.\n  int32_t output_activation_min;\n  int32_t output_activation_max;\n};\n\ninline PaddingType RuntimePaddingType(TfLitePadding padding) {\n  switch (padding) {\n    case TfLitePadding::kTfLitePaddingSame:\n      return PaddingType::kSame;\n    case TfLitePadding::kTfLitePaddingValid:\n      return PaddingType::kValid;\n    case TfLitePadding::kTfLitePaddingUnknown:\n    default:\n      return PaddingType::kNone;\n  }\n}\n\nTfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,\n                             const TfLiteConvParams* params, int width,\n                             int height, int filter_width, int filter_height,\n                             int out_width, int out_height,\n                             const TfLiteType data_type, OpData* data) {\n  bool has_bias = node->inputs->size == 3;\n  // Check number of inputs/outputs\n  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);\n  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);\n\n  // Matching GetWindowedOutputSize in TensorFlow.\n  auto padding = params->padding;\n  data->padding = ComputePaddingHeightWidth(\n      params->stride_height, params->stride_width,\n      params->dilation_height_factor, params->dilation_width_factor, height,\n      width, filter_height, filter_width, padding, &out_height, &out_width);\n\n  // Note that quantized inference requires that all tensors have their\n  // parameters set. This is usually done during quantized training.\n  if (data_type != kTfLiteFloat32) {\n    const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);\n    const TfLiteTensor* bias =\n        GetOptionalInputTensor(context, node, kBiasTensor);\n    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n    int output_channels = filter->dims->data[kConvQuantizedDimension];\n\n    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(\n        context, input, filter, bias, output, params->activation,\n        &data->output_multiplier, &data->output_shift,\n        &data->output_activation_min, &data->output_activation_max,\n        data->per_channel_output_multiplier,\n        reinterpret_cast<int*>(data->per_channel_output_shift),\n        output_channels));\n  }\n  return kTfLiteOk;\n}\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(OpData));\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  TFLITE_DCHECK(node->builtin_data != nullptr);\n\n  OpData* data = static_cast<OpData*>(node->user_data);\n  const auto params = static_cast<const TfLiteConvParams*>(node->builtin_data);\n\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);\n\n  int input_width = input->dims->data[2];\n  int input_height = input->dims->data[1];\n  int filter_width = filter->dims->data[2];\n  int filter_height = filter->dims->data[1];\n  int output_width = output->dims->data[2];\n  int output_height = output->dims->data[1];\n\n  // Dynimically allocate per-channel quantization parameters.\n  const int num_channels = filter->dims->data[kConvQuantizedDimension];\n  data->per_channel_output_multiplier =\n      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(\n          context, num_channels * sizeof(int32_t)));\n  data->per_channel_output_shift =\n      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(\n          context, num_channels * sizeof(int32_t)));\n\n  // All per-channel quantized tensors need valid zero point and scale arrays.\n  if (input->type == kTfLiteInt8) {\n    TF_LITE_ENSURE_EQ(context, filter->quantization.type,\n                      kTfLiteAffineQuantization);\n\n    const auto* affine_quantization =\n        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);\n    TF_LITE_ENSURE(context, affine_quantization);\n    TF_LITE_ENSURE(context, affine_quantization->scale);\n    TF_LITE_ENSURE(context, affine_quantization->zero_point);\n\n    TF_LITE_ENSURE(context,\n                   affine_quantization->scale->size == 1 ||\n                       affine_quantization->scale->size ==\n                           filter->dims->data[kConvQuantizedDimension]);\n    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,\n                      affine_quantization->zero_point->size);\n  }\n\n  TF_LITE_ENSURE_STATUS(CalculateOpData(\n      context, node, params, input_width, input_height, filter_width,\n      filter_height, output_width, output_height, input->type, data));\n\n  data->input_zero_point = input->params.zero_point;\n  data->filter_zero_point = filter->params.zero_point;\n  data->output_zero_point = output->params.zero_point;\n\n  return kTfLiteOk;\n}  // namespace conv\n\nvoid EvalQuantized(TfLiteContext* context, TfLiteNode* node,\n                   TfLiteConvParams* params, const OpData& data,\n                   const TfLiteEvalTensor* input,\n                   const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,\n                   TfLiteEvalTensor* im2col, TfLiteEvalTensor* hwcn_weights,\n                   TfLiteEvalTensor* output) {\n  const int32_t input_offset = -data.input_zero_point;\n  const int32_t filter_offset = -data.filter_zero_point;\n  const int32_t output_offset = data.output_zero_point;\n\n  // TODO(b/154032858): Investigate removing extra copies.\n  ConvParams op_params;\n  op_params.padding_type = RuntimePaddingType(params->padding);\n  op_params.padding_values.width = data.padding.width;\n  op_params.padding_values.height = data.padding.height;\n  op_params.stride_width = params->stride_width;\n  op_params.stride_height = params->stride_height;\n  op_params.dilation_width_factor = params->dilation_width_factor;\n  op_params.dilation_height_factor = params->dilation_height_factor;\n  op_params.input_offset = input_offset;\n  op_params.weights_offset = filter_offset;\n  op_params.output_offset = output_offset;\n  op_params.output_multiplier = data.output_multiplier;\n  op_params.output_shift = -data.output_shift;\n  op_params.quantized_activation_min = data.output_activation_min;\n  op_params.quantized_activation_max = data.output_activation_max;\n  reference_ops::Conv(op_params, tflite::micro::GetTensorShape(input),\n                      tflite::micro::GetTensorData<uint8_t>(input),\n                      tflite::micro::GetTensorShape(filter),\n                      tflite::micro::GetTensorData<uint8_t>(filter),\n                      tflite::micro::GetTensorShape(bias),\n                      tflite::micro::GetTensorData<int32_t>(bias),\n                      tflite::micro::GetTensorShape(output),\n                      tflite::micro::GetTensorData<uint8_t>(output),\n                      tflite::micro::GetTensorShape(im2col),\n                      tflite::micro::GetTensorData<uint8_t>(im2col), nullptr);\n}\n\nvoid EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,\n                             TfLiteConvParams* params, const OpData& data,\n                             const TfLiteEvalTensor* input,\n                             const TfLiteEvalTensor* filter,\n                             const TfLiteEvalTensor* bias,\n                             TfLiteEvalTensor* output,\n                             TfLiteEvalTensor* im2col) {\n  // TODO(b/154032858): Investigate removing extra copies.\n  ConvParams op_params;\n  op_params.input_offset = -data.input_zero_point;\n  op_params.output_offset = data.output_zero_point;\n  op_params.stride_height = params->stride_height;\n  op_params.stride_width = params->stride_width;\n  op_params.dilation_height_factor = params->dilation_height_factor;\n  op_params.dilation_width_factor = params->dilation_width_factor;\n  op_params.padding_values.height = data.padding.height;\n  op_params.padding_values.width = data.padding.width;\n  op_params.quantized_activation_min = data.output_activation_min;\n  op_params.quantized_activation_max = data.output_activation_max;\n\n  reference_integer_ops::ConvPerChannel(\n      op_params, data.per_channel_output_multiplier,\n      data.per_channel_output_shift, tflite::micro::GetTensorShape(input),\n      tflite::micro::GetTensorData<int8_t>(input),\n      tflite::micro::GetTensorShape(filter),\n      tflite::micro::GetTensorData<int8_t>(filter),\n      tflite::micro::GetTensorShape(bias),\n      tflite::micro::GetTensorData<int32_t>(bias),\n      tflite::micro::GetTensorShape(output),\n      tflite::micro::GetTensorData<int8_t>(output));\n}\n\nvoid EvalFloat(TfLiteContext* context, TfLiteNode* node,\n               TfLiteConvParams* params, const OpData& data,\n               const TfLiteEvalTensor* input, const TfLiteEvalTensor* filter,\n               const TfLiteEvalTensor* bias, TfLiteEvalTensor* im2col,\n               TfLiteEvalTensor* hwcn_weights, TfLiteEvalTensor* output) {\n  float output_activation_min, output_activation_max;\n  CalculateActivationRange(params->activation, &output_activation_min,\n                           &output_activation_max);\n  // TODO(b/154032858): Investigate removing extra copies.\n  ConvParams op_params;\n  op_params.padding_type = RuntimePaddingType(params->padding);\n  op_params.padding_values.width = data.padding.width;\n  op_params.padding_values.height = data.padding.height;\n  op_params.stride_width = params->stride_width;\n  op_params.stride_height = params->stride_height;\n  op_params.dilation_width_factor = params->dilation_width_factor;\n  op_params.dilation_height_factor = params->dilation_height_factor;\n  op_params.float_activation_min = output_activation_min;\n  op_params.float_activation_max = output_activation_max;\n\n  reference_ops::Conv(op_params, tflite::micro::GetTensorShape(input),\n                      tflite::micro::GetTensorData<float>(input),\n                      tflite::micro::GetTensorShape(filter),\n                      tflite::micro::GetTensorData<float>(filter),\n                      tflite::micro::GetTensorShape(bias),\n                      tflite::micro::GetTensorData<float>(bias),\n                      tflite::micro::GetTensorShape(output),\n                      tflite::micro::GetTensorData<float>(output),\n                      tflite::micro::GetTensorShape(im2col),\n                      tflite::micro::GetTensorData<float>(im2col));\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);\n\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, kInputTensor);\n  const TfLiteEvalTensor* filter =\n      tflite::micro::GetEvalInput(context, node, kFilterTensor);\n  const TfLiteEvalTensor* bias =\n      (NumInputs(node) == 3)\n          ? tflite::micro::GetEvalInput(context, node, kBiasTensor)\n          : nullptr;\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData& data = *(static_cast<const OpData*>(node->user_data));\n\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      EvalFloat(context, node, params, data, input, filter, bias, nullptr,\n                nullptr, output);\n      break;\n    case kTfLiteInt8:\n      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,\n                              output, nullptr);\n      break;\n    case kTfLiteUInt8:\n      EvalQuantized(context, node, params, data, input, filter, bias, nullptr,\n                    nullptr, output);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s (%d) not supported.\",\n                         TfLiteTypeGetName(input->type), input->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace conv\n\nTfLiteRegistration Register_CONV_2D() {\n  return {/*init=*/conv::Init,\n          /*free=*/nullptr,\n          /*prepare=*/conv::Prepare,\n          /*invoke=*/conv::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"