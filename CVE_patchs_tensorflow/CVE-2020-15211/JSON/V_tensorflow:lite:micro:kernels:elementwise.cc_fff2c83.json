"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <cmath>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/micro_utils.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace elementwise {\nnamespace {\n\nbool IsNumericSupportedType(const TfLiteType type) {\n  return type == kTfLiteFloat32;\n}\n\nbool IsLogicalSupportedType(const TfLiteType type) {\n  return type == kTfLiteBool;\n}\n\ntypedef bool (*IsSupportedType)(TfLiteType);\ntemplate <IsSupportedType>\nTfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  const TfLiteTensor* input = GetInput(context, node, 0);\n  TfLiteTensor* output = GetOutput(context, node, 0);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n  if (!IsSupportedType(input->type)) {\n    TF_LITE_KERNEL_LOG(context, \"Input data type %s (%d) is not supported.\",\n                       TfLiteTypeGetName(input->type), input->type);\n    return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\ntemplate <typename T>\ninline TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node,\n                             T func(T), TfLiteType expected_type) {\n  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);\n  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, expected_type);\n  const size_t num_elements = ElementCount(*input->dims);\n  const T* in_data = tflite::micro::GetTensorData<T>(input);\n  T* out_data = tflite::micro::GetTensorData<T>(output);\n  for (size_t i = 0; i < num_elements; ++i) {\n    out_data[i] = func(in_data[i]);\n  }\n  return kTfLiteOk;\n}\n\ninline TfLiteStatus EvalNumeric(TfLiteContext* context, TfLiteNode* node,\n                                float float_func(float)) {\n  return EvalImpl<float>(context, node, float_func, kTfLiteFloat32);\n}\n\ninline TfLiteStatus EvalLogical(TfLiteContext* context, TfLiteNode* node,\n                                bool bool_func(bool)) {\n  return EvalImpl<bool>(context, node, bool_func, kTfLiteBool);\n}\n\nTfLiteStatus AbsEval(TfLiteContext* context, TfLiteNode* node) {\n  return EvalNumeric(context, node, std::abs);\n}\n\nTfLiteStatus SinEval(TfLiteContext* context, TfLiteNode* node) {\n  return EvalNumeric(context, node, std::sin);\n}\n\nTfLiteStatus CosEval(TfLiteContext* context, TfLiteNode* node) {\n  return EvalNumeric(context, node, std::cos);\n}\n\nTfLiteStatus LogEval(TfLiteContext* context, TfLiteNode* node) {\n  return EvalNumeric(context, node, std::log);\n}\n\nTfLiteStatus SqrtEval(TfLiteContext* context, TfLiteNode* node) {\n  return EvalNumeric(context, node, std::sqrt);\n}\n\nTfLiteStatus RsqrtEval(TfLiteContext* context, TfLiteNode* node) {\n  return EvalNumeric(context, node, [](float f) { return 1.f / std::sqrt(f); });\n}\n\nTfLiteStatus SquareEval(TfLiteContext* context, TfLiteNode* node) {\n  return EvalNumeric(context, node, [](float f) { return f * f; });\n}\n\nTfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {\n  return EvalLogical(context, node, [](bool v) { return !v; });\n}\n\n}  // namespace\n}  // namespace elementwise\n\nTfLiteRegistration Register_ABS() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/\n          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,\n          /*invoke=*/elementwise::AbsEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_SIN() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/\n          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,\n          /*invoke=*/elementwise::SinEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_COS() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/\n          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,\n          /*invoke=*/elementwise::CosEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_LOG() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/\n          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,\n          /*invoke=*/elementwise::LogEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_SQRT() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/\n          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,\n          /*invoke=*/elementwise::SqrtEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_RSQRT() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/\n          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,\n          /*invoke=*/elementwise::RsqrtEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_SQUARE() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/\n          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,\n          /*invoke=*/elementwise::SquareEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_LOGICAL_NOT() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/\n          elementwise::GenericPrepare<elementwise::IsLogicalSupportedType>,\n          /*invoke=*/elementwise::LogicalNotEval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"