"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/portable_tensor.h\"\n#include \"tensorflow/lite/kernels/internal/reference/integer_ops/l2normalization.h\"\n#include \"tensorflow/lite/kernels/internal/reference/l2normalization.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace l2norm {\n\nnamespace {\n\n// This file has two implementation of L2Norm.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\n}  // namespace\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  TFLITE_DCHECK(node->builtin_data != nullptr);\n\n  auto* params = reinterpret_cast<TfLiteL2NormParams*>(node->builtin_data);\n  L2NormalizationParams* data =\n      static_cast<L2NormalizationParams*>(node->user_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  TF_LITE_ENSURE(context, NumDimensions(input) <= 4);\n\n  TF_LITE_ENSURE(context, output->type == kTfLiteFloat32 ||\n                              output->type == kTfLiteUInt8 ||\n                              output->type == kTfLiteInt8);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {\n    data->input_zero_point = input->params.zero_point;\n  } else if (output->type == kTfLiteFloat32) {\n    data->input_zero_point = 0;\n  }\n\n  // TODO(ahentz): For some reason our implementations don't support\n  // activations.\n  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);\n\n  return kTfLiteOk;\n}\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context,\n                                           sizeof(L2NormalizationParams));\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const L2NormalizationParams& data =\n      *(static_cast<const L2NormalizationParams*>(node->user_data));\n\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, kInputTensor);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  // TODO(b/143912164): instead of hardcode the epsilon here, we should read it\n  // from tensorflow, i.e., adding a params.\n  // We don't compute epsilon for quantized kernel:\n  //\n  // epsilon_float = (epsilon_quant - zp) * scale\n  // so\n  // espsilon_quant = epsilon_float / scale + zp\n  // We know epsilon_float is just a very small number to avoid division by\n  // zero error, and scale is > 1, so the integer value of epsilon for quant\n  // is just dominated by the zero point.\n  // Also, GetInvSqrtQuantizedMultiplierExp handles the scenario where the sum\n  // of input value squared is zero case well.\n  // So we don't even need to do handle the epsilon for quantized kernel case.\n  const float epsilon = 1e-6f;\n  if (output->type == kTfLiteFloat32) {\n    reference_ops::L2Normalization(data, tflite::micro::GetTensorShape(input),\n                                   tflite::micro::GetTensorData<float>(input),\n                                   tflite::micro::GetTensorShape(output),\n                                   tflite::micro::GetTensorData<float>(output),\n                                   epsilon);\n  } else if (output->type == kTfLiteUInt8) {\n    reference_ops::L2Normalization(\n        data, tflite::micro::GetTensorShape(input),\n        tflite::micro::GetTensorData<uint8_t>(input),\n        tflite::micro::GetTensorShape(output),\n        tflite::micro::GetTensorData<uint8_t>(output));\n  } else if (output->type == kTfLiteInt8) {\n    const auto input_shape = tflite::micro::GetTensorShape(input);\n    const auto output_shape = tflite::micro::GetTensorShape(output);\n    const int trailing_dim = input_shape.DimensionsCount() - 1;\n    const int depth =\n        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);\n    const int outer_size =\n        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);\n    reference_integer_ops::L2Normalization(\n        data.input_zero_point, outer_size, depth,\n        tflite::micro::GetTensorData<int8_t>(input),\n        tflite::micro::GetTensorData<int8_t>(output));\n  } else {\n    TF_LITE_KERNEL_LOG(context, \"Output type is %s, requires float.\",\n                       TfLiteTypeGetName(output->type));\n    return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace l2norm\n\nTfLiteRegistration Register_L2NORM_REF() {\n  return {/*init=*/l2norm::Init,\n          /*free=*/nullptr,\n          /*prepare=*/l2norm::Prepare,\n          /*invoke=*/l2norm::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\nTfLiteRegistration Register_L2_NORMALIZATION() { return Register_L2NORM_REF(); }\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"