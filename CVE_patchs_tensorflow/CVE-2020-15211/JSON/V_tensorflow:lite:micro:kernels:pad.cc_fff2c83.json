"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/pad.h\"\n\n#include <string.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/portable_tensor.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/op_macros.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace micro {\nnamespace pad {\nnamespace {\n\nstruct OpData {\n  PadParams params;\n  int32_t output_zero_point;\n};\n\n}  // namespace\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);\n  return context->AllocatePersistentBuffer(context, sizeof(OpData));\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  OpData* data = static_cast<OpData*>(node->user_data);\n\n  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input = GetInput(context, node, /*index=*/0);\n  const TfLiteTensor* paddings = GetInput(context, node, /*index=*/1);\n  const TfLiteTensor* constant_values =\n      NumInputs(node) == 3 ? GetInput(context, node, /*index=*/2) : nullptr;\n  TfLiteTensor* output = GetOutput(context, node, /*index=*/0);\n\n  TF_LITE_ENSURE_EQ(context, input->type, output->type);\n\n  // Current implementations rely on the inputs being <= 4D.\n  TF_LITE_ENSURE(context, NumDimensions(input) <=\n                              reference_ops::PadKernelMaxDimensionCount());\n\n  if (constant_values != nullptr) {\n    TF_LITE_ENSURE_EQ(context, input->type, constant_values->type);\n    // Ensure that constant_values is a scalar.\n    TF_LITE_ENSURE_EQ(context, NumElements(constant_values), 1);\n  }\n\n  // There must be a pair of paddings for each output dimension.\n  TF_LITE_ENSURE_EQ(context, GetTensorShape(paddings).FlatSize(),\n                    output->dims->size * 2);\n\n  // On Micro, outputs must be properly sized by the converter.\n  // NOTE: This data is only available because the paddings buffer is stored in\n  // the flatbuffer:\n  TF_LITE_ENSURE(context, IsConstantTensor(paddings));\n  const int32_t* paddings_data = GetTensorData<int32_t>(paddings);\n  for (int i = 0; i < output->dims->size; i++) {\n    int output_dim = output->dims->data[i];\n    int expected_dim =\n        input->dims->data[i] + paddings_data[i * 2] + paddings_data[i * 2 + 1];\n    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);\n  }\n\n  // Calculate OpData:\n  data->params.resizing_category = ResizingCategory::kGenericResize;\n  const int paddings_total = GetTensorShape(paddings).FlatSize();\n  if (paddings_total == 8 && (paddings_data[0] == 0 && paddings_data[1] == 0) &&\n      (paddings_data[6] == 0 && paddings_data[7] == 0)) {\n    data->params.resizing_category = ResizingCategory::kImageStyle;\n  }\n\n  const int num_input_dimensions = NumDimensions(input);\n  data->params.left_padding_count = num_input_dimensions;\n  data->params.right_padding_count = num_input_dimensions;\n\n  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {\n    data->params.left_padding[idx] = paddings_data[idx * 2];\n    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];\n  }\n\n  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8) {\n    if (constant_values == nullptr) {\n      // Quantized Pad requires that 0 is represented in the quantized\n      // range.\n      if (input->type == kTfLiteUInt8) {\n        TF_LITE_ENSURE(context, output->params.zero_point >=\n                                    std::numeric_limits<uint8_t>::min());\n        TF_LITE_ENSURE(context, output->params.zero_point <=\n                                    std::numeric_limits<uint8_t>::max());\n      } else {\n        TF_LITE_ENSURE(context, output->params.zero_point >=\n                                    std::numeric_limits<int8_t>::min());\n        TF_LITE_ENSURE(context, output->params.zero_point <=\n                                    std::numeric_limits<int8_t>::max());\n      }\n    } else {\n      // Quantized Pad requires that 'constant_values' is represented in the\n      // same quantized range as the input and output tensors.\n      TF_LITE_ENSURE_EQ(context, output->params.zero_point,\n                        constant_values->params.zero_point);\n      TF_LITE_ENSURE_EQ(context, static_cast<double>(output->params.scale),\n                        static_cast<double>(constant_values->params.scale));\n    }\n    data->output_zero_point = output->params.zero_point;\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  TFLITE_DCHECK(node->user_data != nullptr);\n  const OpData* data = static_cast<const OpData*>(node->user_data);\n\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, /*index=*/0);\n  const TfLiteEvalTensor* constant_values =\n      NumInputs(node) == 3\n          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)\n          : nullptr;\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, /*index=*/0);\n\n  switch (input->type) {\n    case kTfLiteFloat32: {\n      float pad_value =\n          constant_values == nullptr\n              ? 0.f\n              : *tflite::micro::GetTensorData<float>(constant_values);\n      if (data->params.resizing_category == ResizingCategory::kImageStyle) {\n        reference_ops::PadImageStyle(\n            data->params, tflite::micro::GetTensorShape(input),\n            tflite::micro::GetTensorData<float>(input), &pad_value,\n            tflite::micro::GetTensorShape(output),\n            tflite::micro::GetTensorData<float>(output));\n      } else {\n        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),\n                           tflite::micro::GetTensorData<float>(input),\n                           &pad_value, tflite::micro::GetTensorShape(output),\n                           tflite::micro::GetTensorData<float>(output));\n      }\n    } break;\n    case kTfLiteUInt8: {\n      uint8_t pad_value;\n      if (constant_values == nullptr) {\n        pad_value = static_cast<uint8_t>(data->output_zero_point);\n      } else {\n        pad_value = *tflite::micro::GetTensorData<uint8_t>(constant_values);\n      }\n      if (data->params.resizing_category == ResizingCategory::kImageStyle) {\n        reference_ops::PadImageStyle(\n            data->params, tflite::micro::GetTensorShape(input),\n            tflite::micro::GetTensorData<uint8_t>(input), &pad_value,\n            tflite::micro::GetTensorShape(output),\n            tflite::micro::GetTensorData<uint8_t>(output));\n      } else {\n        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),\n                           tflite::micro::GetTensorData<uint8_t>(input),\n                           &pad_value, tflite::micro::GetTensorShape(output),\n                           tflite::micro::GetTensorData<uint8_t>(output));\n      }\n    } break;\n    case kTfLiteInt8: {\n      int8_t pad_value;\n      if (constant_values == nullptr) {\n        pad_value = static_cast<uint8_t>(data->output_zero_point);\n      } else {\n        pad_value = *tflite::micro::GetTensorData<int8_t>(constant_values);\n      }\n      if (data->params.resizing_category == ResizingCategory::kImageStyle) {\n        reference_ops::PadImageStyle(\n            data->params, tflite::micro::GetTensorShape(input),\n            tflite::micro::GetTensorData<int8_t>(input), &pad_value,\n            tflite::micro::GetTensorShape(output),\n            tflite::micro::GetTensorData<int8_t>(output));\n      } else {\n        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),\n                           tflite::micro::GetTensorData<int8_t>(input),\n                           &pad_value, tflite::micro::GetTensorShape(output),\n                           tflite::micro::GetTensorData<int8_t>(output));\n      }\n    } break;\n    case kTfLiteInt32: {\n      int32_t pad_value =\n          constant_values == nullptr\n              ? 0\n              : *tflite::micro::GetTensorData<int32_t>(constant_values);\n      reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),\n                         tflite::micro::GetTensorData<int32_t>(input),\n                         &pad_value, tflite::micro::GetTensorShape(output),\n                         tflite::micro::GetTensorData<int32_t>(output));\n    } break;\n    default:\n\n      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported by Pad.\",\n                         TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n#undef TF_LITE_PAD\n  return kTfLiteOk;\n}\n\n}  // namespace pad\n\nTfLiteRegistration Register_PAD() {\n  return {/*init=*/pad::Init,\n          /*free=*/nullptr,\n          /*prepare=*/pad::Prepare,\n          /*invoke=*/pad::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n// Also register Pad as PadV2.\nTfLiteRegistration Register_PADV2() {\n  return {/*init=*/pad::Init,\n          /*free=*/nullptr,\n          /*prepare=*/pad::Prepare,\n          /*invoke=*/pad::Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace micro\n}  // namespace ops\n}  // namespace tflite"