"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/profiling/profile_summarizer.h\"\n\n#include <string>\n#include <vector>\n\n#include <gmock/gmock.h>\n#include <gtest/gtest.h>\n#include \"tensorflow/lite/context.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/subgraph_test_util.h\"\n#include \"tensorflow/lite/kernels/test_util.h\"\n#include \"tensorflow/lite/model.h\"\n#include \"tensorflow/lite/profiling/buffered_profiler.h\"\n#include \"tensorflow/lite/version.h\"\n\nnamespace tflite {\nnamespace profiling {\n\nnamespace {\n\nconst char* kOpName = \"SimpleOpEval\";\n\nTfLiteStatus SimpleOpEval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input1 = tflite::GetInput(context, node, /*index=*/0);\n  const TfLiteTensor* input2 = tflite::GetInput(context, node, /*index=*/1);\n\n  TfLiteTensor* output = GetOutput(context, node, /*index=*/0);\n\n  int32_t* output_data = output->data.i32;\n  *output_data = *(input1->data.i32) + *(input2->data.i32);\n  return kTfLiteOk;\n}\n\nconst char* SimpleOpProfilingString(const TfLiteContext* context,\n                                    const TfLiteNode* node) {\n  return \"Profile\";\n}\n\nTfLiteRegistration* RegisterSimpleOp() {\n  static TfLiteRegistration registration = {\n      nullptr,        nullptr, nullptr,\n      SimpleOpEval,   nullptr, tflite::BuiltinOperator_CUSTOM,\n      \"SimpleOpEval\", 1};\n  return &registration;\n}\n\nTfLiteRegistration* RegisterSimpleOpWithProfilingDetails() {\n  static TfLiteRegistration registration = {nullptr,\n                                            nullptr,\n                                            nullptr,\n                                            SimpleOpEval,\n                                            SimpleOpProfilingString,\n                                            tflite::BuiltinOperator_CUSTOM,\n                                            kOpName,\n                                            1};\n  return &registration;\n}\n\nclass SimpleOpModel : public SingleOpModel {\n public:\n  void Init(const std::function<TfLiteRegistration*()>& registration);\n  tflite::Interpreter* GetInterpreter() { return interpreter_.get(); }\n  void SetInputs(int32_t x, int32_t y) {\n    PopulateTensor(inputs_[0], {x});\n    PopulateTensor(inputs_[1], {y});\n  }\n  int32_t GetOutput() { return ExtractVector<int32_t>(output_)[0]; }\n\n private:\n  int inputs_[2];\n  int output_;\n};\n\nvoid SimpleOpModel::Init(\n    const std::function<TfLiteRegistration*()>& registration) {\n  inputs_[0] = AddInput({TensorType_INT32, {1}});\n  inputs_[1] = AddInput({TensorType_INT32, {1}});\n  output_ = AddOutput({TensorType_INT32, {}});\n  SetCustomOp(kOpName, {}, registration);\n  BuildInterpreter({GetShape(inputs_[0]), GetShape(inputs_[1])});\n}\n\nTEST(ProfileSummarizerTest, Empty) {\n  ProfileSummarizer summarizer;\n  std::string output = summarizer.GetOutputString();\n  EXPECT_GT(output.size(), 0);\n}\n\nTEST(ProfileSummarizerTest, Interpreter) {\n  BufferedProfiler profiler(1024);\n  SimpleOpModel m;\n  m.Init(RegisterSimpleOp);\n  auto interpreter = m.GetInterpreter();\n  interpreter->SetProfiler(&profiler);\n  profiler.StartProfiling();\n  m.SetInputs(1, 2);\n  m.Invoke();\n  // 3 = 1 + 2\n  EXPECT_EQ(m.GetOutput(), 3);\n  profiler.StopProfiling();\n  ProfileSummarizer summarizer;\n  auto events = profiler.GetProfileEvents();\n  EXPECT_EQ(1, events.size());\n  summarizer.ProcessProfiles(profiler.GetProfileEvents(), *interpreter);\n  auto output = summarizer.GetOutputString();\n  // TODO(shashishekhar): Add a better test here.\n  ASSERT_TRUE(output.find(\"SimpleOpEval\") != std::string::npos) << output;\n}\n\nTEST(ProfileSummarizerTest, InterpreterPlusProfilingDetails) {\n  BufferedProfiler profiler(1024);\n  SimpleOpModel m;\n  m.Init(RegisterSimpleOpWithProfilingDetails);\n  auto interpreter = m.GetInterpreter();\n  interpreter->SetProfiler(&profiler);\n  profiler.StartProfiling();\n  m.SetInputs(1, 2);\n  m.Invoke();\n  // 3 = 1 + 2\n  EXPECT_EQ(m.GetOutput(), 3);\n  profiler.StopProfiling();\n  ProfileSummarizer summarizer;\n  auto events = profiler.GetProfileEvents();\n  EXPECT_EQ(1, events.size());\n  summarizer.ProcessProfiles(profiler.GetProfileEvents(), *interpreter);\n  auto output = summarizer.GetOutputString();\n  // TODO(shashishekhar): Add a better test here.\n  ASSERT_TRUE(output.find(\"SimpleOpEval/Profile\") != std::string::npos)\n      << output;\n}\n\n// A simple test that performs `ADD` if condition is true, and `MUL` otherwise.\n// The computation is: `cond ? a + b : a * b`.\nclass ProfileSummarizerIfOpTest : public subgraph_test_util::ControlFlowOpTest {\n protected:\n  void SetUp() override {\n    interpreter_->AddSubgraphs(2);\n    builder_->BuildAddSubgraph(interpreter_->subgraph(1));\n    builder_->BuildMulSubgraph(interpreter_->subgraph(2));\n    builder_->BuildIfSubgraph(&interpreter_->primary_subgraph());\n\n    interpreter_->ResizeInputTensor(interpreter_->inputs()[0], {1});\n    interpreter_->ResizeInputTensor(interpreter_->inputs()[1], {2});\n    interpreter_->ResizeInputTensor(interpreter_->inputs()[2], {1, 2});\n    ASSERT_EQ(interpreter_->AllocateTensors(), kTfLiteOk);\n\n    subgraph_test_util::FillIntTensor(\n        interpreter_->tensor(interpreter_->inputs()[1]), {5, 7});\n    subgraph_test_util::FillIntTensor(\n        interpreter_->tensor(interpreter_->inputs()[2]), {1, 2});\n  }\n};\n\nTEST_F(ProfileSummarizerIfOpTest, TestIfTrue) {\n  BufferedProfiler profiler(1024);\n  interpreter_->SetProfiler(&profiler);\n\n  interpreter_->typed_input_tensor<bool>(0)[0] = true;\n  profiler.StartProfiling();\n  ASSERT_EQ(interpreter_->Invoke(), kTfLiteOk);\n  profiler.StopProfiling();\n  TfLiteTensor* output = interpreter_->tensor(interpreter_->outputs()[0]);\n  subgraph_test_util::CheckIntTensor(output, {1, 2}, {6, 9});\n\n  auto events = profiler.GetProfileEvents();\n  EXPECT_EQ(2, events.size());\n  int event_count_of_subgraph_zero = std::count_if(\n      events.begin(), events.end(),\n      [](auto event) { return event->extra_event_metadata == 0; });\n  int event_count_of_subgraph_one = std::count_if(\n      events.begin(), events.end(),\n      [](auto event) { return event->extra_event_metadata == 1; });\n  int event_count_of_subgraph_two = std::count_if(\n      events.begin(), events.end(),\n      [](auto event) { return event->extra_event_metadata == 2; });\n  EXPECT_EQ(1, event_count_of_subgraph_zero);\n  EXPECT_EQ(1, event_count_of_subgraph_one);\n  EXPECT_EQ(0, event_count_of_subgraph_two);\n}\n\nTEST_F(ProfileSummarizerIfOpTest, TestIfFalse) {\n  BufferedProfiler profiler(1024);\n  interpreter_->SetProfiler(&profiler);\n\n  interpreter_->typed_input_tensor<bool>(0)[0] = false;\n  profiler.StartProfiling();\n  ASSERT_EQ(interpreter_->Invoke(), kTfLiteOk);\n  profiler.StopProfiling();\n  TfLiteTensor* output = interpreter_->tensor(interpreter_->outputs()[0]);\n  subgraph_test_util::CheckIntTensor(output, {1, 2}, {5, 14});\n\n  auto events = profiler.GetProfileEvents();\n  EXPECT_EQ(2, events.size());\n  int event_count_of_subgraph_zero = std::count_if(\n      events.begin(), events.end(),\n      [](auto event) { return event->extra_event_metadata == 0; });\n  int event_count_of_subgraph_one = std::count_if(\n      events.begin(), events.end(),\n      [](auto event) { return event->extra_event_metadata == 1; });\n  int event_count_of_subgraph_two = std::count_if(\n      events.begin(), events.end(),\n      [](auto event) { return event->extra_event_metadata == 2; });\n  EXPECT_EQ(1, event_count_of_subgraph_zero);\n  EXPECT_EQ(0, event_count_of_subgraph_one);\n  EXPECT_EQ(1, event_count_of_subgraph_two);\n}\n\n}  // namespace\n}  // namespace profiling\n}  // namespace tflite"