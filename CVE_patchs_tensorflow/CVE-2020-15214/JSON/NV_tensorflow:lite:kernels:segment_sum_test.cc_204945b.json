"/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include <vector>\n\n#include <gtest/gtest.h>\n#include \"tensorflow/lite/kernels/test_util.h\"\n#include \"tensorflow/lite/schema/schema_generated.h\"\n\nnamespace tflite {\nnamespace {\n\nusing ::testing::ElementsAreArray;\n\ntemplate <typename T>\nclass SegmentSumOpModel : public SingleOpModel {\n public:\n  SegmentSumOpModel(const TensorData& data, const TensorData& segment_ids) {\n    data_id_ = AddInput(data);\n    segment_ids_id_ = AddInput(segment_ids);\n    output_id_ = AddOutput(data.type);\n    SetBuiltinOp(BuiltinOperator_SEGMENT_SUM, BuiltinOptions_NONE, 0);\n    BuildInterpreter({GetShape(data_id_), GetShape(segment_ids_id_)});\n  }\n\n  int data() const { return data_id_; }\n  int segment_ids() const { return segment_ids_id_; }\n  std::vector<T> GetOutput() { return ExtractVector<T>(output_id_); }\n  std::vector<int32_t> GetOutputShape() { return GetTensorShape(output_id_); }\n\n protected:\n  int data_id_;\n  int segment_ids_id_;\n  int output_id_;\n};\n\nTEST(SegmentSumOpModelTest, Int32Test_Simple) {\n  SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 4}},\n                                   {TensorType_INT32, {3}});\n  model.PopulateTensor<int32_t>(model.data(),\n                                {1, 2, 3, 4, 4, 3, 2, 1, 5, 6, 7, 8});\n  model.PopulateTensor<int32_t>(model.segment_ids(), {0, 0, 1});\n  model.Invoke();\n  EXPECT_THAT(model.GetOutput(), ElementsAreArray({5, 5, 5, 5, 5, 6, 7, 8}));\n  EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2, 4}));\n}\n\nTEST(SegmentSumOpModelTest, Int32Test_OneDimension) {\n  SegmentSumOpModel<int32_t> model({TensorType_INT32, {3}},\n                                   {TensorType_INT32, {3}});\n  model.PopulateTensor<int32_t>(model.data(), {1, 2, 3});\n  model.PopulateTensor<int32_t>(model.segment_ids(), {0, 0, 1});\n  model.Invoke();\n  EXPECT_THAT(model.GetOutput(), ElementsAreArray({3, 3}));\n  EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2}));\n}\n\nTEST(SegmentSumOpModelTest, Int32Test_ThreeDimensions) {\n  SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2, 1}},\n                                   {TensorType_INT32, {3}});\n  model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});\n  model.PopulateTensor<int32_t>(model.segment_ids(), {0, 0, 1});\n  model.Invoke();\n  EXPECT_THAT(model.GetOutput(), ElementsAreArray({4, 6, 5, 6}));\n  EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2, 2, 1}));\n}\n\nTEST(SegmentSumOpModelTest, Float32Test_Simple) {\n  SegmentSumOpModel<float> model({TensorType_FLOAT32, {3, 4}},\n                                 {TensorType_INT32, {3}});\n  model.PopulateTensor<float>(model.data(),\n                              {1, 2, 3, 4, 4, 3, 2, 1, 5, 6, 7, 8});\n  model.PopulateTensor<int>(model.segment_ids(), {0, 0, 1});\n  model.Invoke();\n  EXPECT_THAT(model.GetOutput(), ElementsAreArray({5.0f, 5.0f, 5.0f, 5.0f, 5.0f,\n                                                   6.0f, 7.0f, 8.0f}));\n  EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2, 4}));\n}\n\nTEST(SegmentSumOpModelTest, Float32Test_OneDimension) {\n  SegmentSumOpModel<float> model({TensorType_FLOAT32, {3}},\n                                 {TensorType_INT32, {3}});\n  model.PopulateTensor<float>(model.data(), {1, 2, 3});\n  model.PopulateTensor<int32_t>(model.segment_ids(), {0, 0, 1});\n  model.Invoke();\n  EXPECT_THAT(model.GetOutput(), ElementsAreArray({3.0f, 3.0f}));\n  EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2}));\n}\n\nTEST(SegmentSumOpModelTest, Float32Test_ThreeDimensions) {\n  SegmentSumOpModel<float> model({TensorType_FLOAT32, {3, 2, 1}},\n                                 {TensorType_INT32, {3}});\n  model.PopulateTensor<float>(model.data(), {1, 2, 3, 4, 5, 6});\n  model.PopulateTensor<int32_t>(model.segment_ids(), {0, 0, 1});\n  model.Invoke();\n  EXPECT_THAT(model.GetOutput(), ElementsAreArray({4.0f, 6.0f, 5.0f, 6.0f}));\n  EXPECT_THAT(model.GetOutputShape(), ElementsAreArray({2, 2, 1}));\n}\n\nTEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNotSorted) {\n  SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},\n                                   {TensorType_INT32, {3}});\n  model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});\n  model.PopulateTensor<int32_t>(model.segment_ids(), {0, 3, 1});\n  ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);\n}\n\nTEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNotConsecutive) {\n  SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},\n                                   {TensorType_INT32, {3}});\n  model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});\n  model.PopulateTensor<int32_t>(model.segment_ids(), {0, 3, 5});\n  ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);\n}\n\nTEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNegative) {\n  SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},\n                                   {TensorType_INT32, {3}});\n  model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});\n  model.PopulateTensor<int32_t>(model.segment_ids(), {-1, 0, 1});\n  ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);\n}\n\nTEST(SegmentSumOpModelTest, TestFailIfSegmentsAreNotTheRightCardinality) {\n  SegmentSumOpModel<int32_t> model({TensorType_INT32, {3, 2}},\n                                   {TensorType_INT32, {2}});\n  model.PopulateTensor<int32_t>(model.data(), {1, 2, 3, 4, 5, 6});\n  model.PopulateTensor<int32_t>(model.segment_ids(), {0, 1});\n  ASSERT_EQ(model.InvokeUnchecked(), kTfLiteError);\n}\n\n}  // namespace\n}  // namespace tflite"