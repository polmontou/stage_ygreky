"diff --git a/tensorflow/python/ops/image_ops_test.py b/tensorflow/python/ops/image_ops_test.py\nindex a7c964d8a30..c77fe1a300c 100644\n--- a/tensorflow/python/ops/image_ops_test.py\n+++ b/tensorflow/python/ops/image_ops_test.py\n@@ -5710,6 +5710,25 @@ class DecodeImageTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n           self.assertAllEqual(list(image2.shape), [12, 40, 20, 3])\n           self.assertAllEqual(image2, image3)\n \n+  def testImageCropAndResize(self):\n+    if test_util.is_gpu_available():\n+      op = image_ops_impl.crop_and_resize_v2(\n+          image=array_ops.zeros((2, 1, 1, 1)),\n+          boxes=[[1.0e+40, 0, 0, 0]],\n+          box_indices=[1],\n+          crop_size=[1, 1])\n+      self.evaluate(op)\n+    else:\n+      message = \"Boxes contains at least one element that is not finite\"\n+      with self.assertRaisesRegex((errors.InvalidArgumentError, ValueError),\n+                                  message):\n+        op = image_ops_impl.crop_and_resize_v2(\n+            image=array_ops.zeros((2, 1, 1, 1)),\n+            boxes=[[1.0e+40, 0, 0, 0]],\n+            box_indices=[1],\n+            crop_size=[1, 1])\n+        self.evaluate(op)\n+\n   @parameterized.named_parameters(\n       (\"_jpeg\", \"JPEG\", \"jpeg_merge_test1.jpg\"),\n       (\"_png\", \"PNG\", \"lena_rgba.png\"),"