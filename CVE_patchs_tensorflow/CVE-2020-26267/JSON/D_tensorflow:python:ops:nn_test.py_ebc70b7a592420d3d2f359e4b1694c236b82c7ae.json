"diff --git a/tensorflow/python/ops/nn_test.py b/tensorflow/python/ops/nn_test.py\nindex 851bfcb66de..aaf2f77fb29 100644\n--- a/tensorflow/python/ops/nn_test.py\n+++ b/tensorflow/python/ops/nn_test.py\n@@ -27,6 +27,7 @@ from six.moves import xrange  # pylint: disable=redefined-builtin\n from tensorflow.python.eager import def_function\n from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors\n from tensorflow.python.framework import ops\n from tensorflow.python.framework import tensor_spec\n from tensorflow.python.framework import test_util\n@@ -1260,6 +1261,7 @@ class DataFormatDimMapTest(test_lib.TestCase):\n       y_val = self.evaluate(y)\n       self.assertAllEqual(y_val, y_val_expected)\n \n+  @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")\n   def testArbitraryASCII(self):\n     x_val = [-4, -3, -2, -1, 0, 1, 2, 3]\n     y_val_expected = [3, 2, 1, 0, 3, 2, 1, 0]\n@@ -1269,6 +1271,46 @@ class DataFormatDimMapTest(test_lib.TestCase):\n       y_val = self.evaluate(y)\n       self.assertAllEqual(y_val, y_val_expected)\n \n+  @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")\n+  def testInvalidLength(self):\n+    x = [-4, -3, -2, -1, 0, 1, 2, 3]\n+    with self.assertRaisesRegex(errors.InvalidArgumentError,\n+                                \"Source format must be of length 4 or 5\"):\n+      op = nn_ops.data_format_dim_map(\n+          x, src_format=\"12345678\", dst_format=\"87654321\")\n+      with test_util.use_gpu():\n+        self.evaluate(op)\n+\n+  @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")\n+  def testDuplicateSrc(self):\n+    x = [-4, -3, -2, -1, 0, 1, 2, 3]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        \"Destination and source format must determine a permutation\"):\n+      op = nn_ops.data_format_dim_map(x, src_format=\"1233\", dst_format=\"4321\")\n+      with test_util.use_gpu():\n+        self.evaluate(op)\n+\n+  @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")\n+  def testDuplicateDst(self):\n+    x = [-4, -3, -2, -1, 0, 1, 2, 3]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        \"Destination and source format must determine a permutation\"):\n+      op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"3321\")\n+      with test_util.use_gpu():\n+        self.evaluate(op)\n+\n+  @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")\n+  def testExtraSpecifiers(self):\n+    x = [-4, -3, -2, -1, 0, 1, 2, 3]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        \"Destination and source format must determine a permutation\"):\n+      op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"5321\")\n+      with test_util.use_gpu():\n+        self.evaluate(op)\n+\n \n class DataFormatVectorPermuteTest(test_lib.TestCase):\n \n@@ -1370,6 +1412,60 @@ class DataFormatVectorPermuteTest(test_lib.TestCase):\n       y_val = self.evaluate(y)\n       self.assertAllEqual(y_val, [[7, 4], [4, 5], [5, 1], [9, 3]])\n \n+  @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")\n+  def testInvalidLength(self):\n+    x = [0, 1, 2, 3]\n+    with self.assertRaisesRegex(errors.InvalidArgumentError,\n+                                \"Source format must be of length 4 or 5\"):\n+      op = nn_ops.data_format_vec_permute(\n+          x, src_format=\"12345678\", dst_format=\"87654321\")\n+      with test_util.use_gpu():\n+        self.evaluate(op)\n+\n+  @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")\n+  def testDuplicateSrc(self):\n+    x = [0, 1, 2, 3]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        \"Destination and source format must determine a permutation\"):\n+      op = nn_ops.data_format_vec_permute(\n+          x, src_format=\"1233\", dst_format=\"4321\")\n+      with test_util.use_gpu():\n+        self.evaluate(op)\n+\n+  @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")\n+  def testDuplicateDst(self):\n+    x = [0, 1, 2, 3]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        \"Destination and source format must determine a permutation\"):\n+      op = nn_ops.data_format_vec_permute(\n+          x, src_format=\"1234\", dst_format=\"3321\")\n+      with test_util.use_gpu():\n+        self.evaluate(op)\n+\n+  @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")\n+  def testExtraSpecifiers(self):\n+    x = [0, 1, 2, 3]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        \"Destination and source format must determine a permutation\"):\n+      op = nn_ops.data_format_vec_permute(\n+          x, src_format=\"1234\", dst_format=\"5321\")\n+      with test_util.use_gpu():\n+        self.evaluate(op)\n+\n+  @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")\n+  def test2DNoWH(self):\n+    x = [[0, 1], [2, 3]]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        \"Format specifier must contain H and W for 2D case\"):\n+      op = nn_ops.data_format_vec_permute(\n+          x, src_format=\"1234\", dst_format=\"4321\")\n+      with test_util.use_gpu():\n+        self.evaluate(op)\n+\n \n @test_util.run_all_in_graph_and_eager_modes\n class AvgPoolTest(test_lib.TestCase):"