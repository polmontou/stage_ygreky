"diff --git a/tensorflow/python/framework/constant_op_test.py b/tensorflow/python/framework/constant_op_test.py\nnew file mode 100644\nindex 00000000000..da0fb64fde6\n--- /dev/null\n+++ b/tensorflow/python/framework/constant_op_test.py\n@@ -0,0 +1,61 @@\n+# Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Tests for tensorflow.python.framework.constant_op.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from absl.testing import parameterized\n+\n+from tensorflow.python.framework import constant_op\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import ops\n+from tensorflow.python.platform import test\n+\n+\n+class ConstantOpTest(test.TestCase, parameterized.TestCase):\n+\n+  @parameterized.parameters(\n+      dtypes.bfloat16,\n+      dtypes.complex128,\n+      dtypes.complex64,\n+      dtypes.double,\n+      dtypes.float16,\n+      dtypes.float32,\n+      dtypes.float64,\n+      dtypes.half,\n+      dtypes.int16,\n+      dtypes.int32,\n+      dtypes.int64,\n+      dtypes.int8,\n+      dtypes.qint16,\n+      dtypes.qint32,\n+      dtypes.qint8,\n+      dtypes.quint16,\n+      dtypes.quint8,\n+      dtypes.uint16,\n+      dtypes.uint32,\n+      dtypes.uint64,\n+      dtypes.uint8,\n+  )\n+  def test_convert_string_to_number(self, dtype):\n+    with self.assertRaises(TypeError):\n+      constant_op.constant(\"hello\", dtype)\n+\n+\n+if __name__ == \"__main__\":\n+  ops.enable_eager_execution()\n+  test.main()"