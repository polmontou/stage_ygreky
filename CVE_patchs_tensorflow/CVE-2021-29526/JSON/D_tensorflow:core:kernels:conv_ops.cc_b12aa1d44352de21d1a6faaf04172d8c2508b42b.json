"diff --git a/tensorflow/core/kernels/conv_ops.cc b/tensorflow/core/kernels/conv_ops.cc\nindex 363e3737a80..9bacebe7d26 100644\n--- a/tensorflow/core/kernels/conv_ops.cc\n+++ b/tensorflow/core/kernels/conv_ops.cc\n@@ -260,6 +260,11 @@ struct LaunchConv2DOp<CPUDevice, T> {\n     const int64 out_depth = output->dim_size(3);\n     const int64 patch_depth = filter.dim_size(2);\n \n+    if (patch_depth <= 0) {\n+      ctx->SetStatus(errors::InvalidArgument(\n+          \"filter depth must be stricly positive, got \", patch_depth));\n+      return;\n+    }\n     if (in_depth % patch_depth != 0) {\n       ctx->SetStatus(errors::InvalidArgument(\n           \"input depth must be evenly divisible by filter depth: \", in_depth,\n@@ -268,6 +273,11 @@ struct LaunchConv2DOp<CPUDevice, T> {\n     }\n \n     const int64 num_groups = in_depth / patch_depth;\n+    if (num_groups <= 0) {\n+      ctx->SetStatus(errors::InvalidArgument(\n+          \"number of groups must be stricly positive, got \", num_groups));\n+      return;\n+    }\n     if (out_depth % num_groups != 0 || out_depth < num_groups) {\n       ctx->SetStatus(errors::InvalidArgument(\n           \"output depth must be evenly divisible by number of groups: \",\n@@ -536,6 +546,9 @@ Status ComputeConv2DDimension(const Conv2DParameters& params,\n               errors::InvalidArgument(\"Patch depth too large\"));\n   const int in_depth = static_cast<int>(in_depth_raw);\n   const int patch_depth = static_cast<int>(patch_depth_raw);\n+  TF_REQUIRES(patch_depth > 0,\n+              errors::InvalidArgument(\n+                  \"filter depth must be stricly positive, got \", patch_depth));\n   TF_REQUIRES(in_depth % patch_depth == 0,\n               errors::InvalidArgument(\n                   \"input depth must be evenly divisible by filter depth: \","