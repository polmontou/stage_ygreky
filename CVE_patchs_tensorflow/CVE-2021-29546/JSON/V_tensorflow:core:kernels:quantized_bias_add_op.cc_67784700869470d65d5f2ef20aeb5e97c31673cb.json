"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// Implements a quantized eight-bit version of the bias addition operation.\n\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/kernels/meta_support.h\"\n#include \"tensorflow/core/kernels/ops_util.h\"\n#include \"tensorflow/core/kernels/quantization_utils.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\ntemplate <class T1, class T2, class T3>\nclass QuantizedBiasAddOp : public OpKernel {\n public:\n  explicit QuantizedBiasAddOp(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& bias = context->input(1);\n    const float input_min = context->input(2).flat<float>()(0);\n    const float input_max = context->input(3).flat<float>()(0);\n    const float bias_min = context->input(4).flat<float>()(0);\n    const float bias_max = context->input(5).flat<float>()(0);\n\n    OP_REQUIRES(context, TensorShapeUtils::IsMatrixOrHigher(input.shape()),\n                errors::InvalidArgument(\"Input tensor must be at least 2D: \",\n                                        input.shape().DebugString()));\n    OP_REQUIRES(context, TensorShapeUtils::IsVector(bias.shape()),\n                errors::InvalidArgument(\"Biases must be 1D: \",\n                                        bias.shape().DebugString()));\n    const auto last_dim = input.shape().dims() - 1;\n    OP_REQUIRES(\n        context, bias.shape().dim_size(0) == input.shape().dim_size(last_dim),\n        errors::InvalidArgument(\n            \"Must provide as many biases as the last dimension \"\n            \"of the input tensor: \",\n            bias.shape().DebugString(), \" vs. \", input.shape().DebugString()));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, input.shape(), &output));\n\n    float total_min;\n    float total_max;\n\n    if (meta::IsSupportedAndEnabled() && std::is_same<T1, quint8>() &&\n        std::is_same<T2, quint8>() && std::is_same<T3, qint32>()) {\n      auto input_ui8_array = input.flat<quint8>();\n      auto bias_ui8_array = bias.flat<quint8>();\n      GetOutputMinAndMaxForQuantizedAdd(input_min, input_max, bias_min,\n                                        bias_max, &total_min, &total_max);\n      meta::QuantizedBiasAdd(context, input_ui8_array.data(),\n                             input_ui8_array.size(), bias_ui8_array.data(),\n                             bias_ui8_array.size(), input_min, input_max,\n                             bias_min, bias_max, total_min, total_max,\n                             output->flat<qint32>().data());\n    } else {\n      QuantizedAddUsingEigen<T1, T2, T3>(\n          context->template eigen_device<CPUDevice>(), input, input_min,\n          input_max, bias, bias_min, bias_max, output, &total_min, &total_max);\n    }\n\n    Tensor* output_min = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(1, {}, &output_min));\n    output_min->flat<float>()(0) = total_min;\n\n    Tensor* output_max = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(2, {}, &output_max));\n    output_max->flat<float>()(0) = total_max;\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"QuantizedBiasAdd\")\n                            .Device(DEVICE_CPU)\n                            .TypeConstraint<quint8>(\"T1\")\n                            .TypeConstraint<quint8>(\"T2\")\n                            .TypeConstraint<qint32>(\"out_type\"),\n                        QuantizedBiasAddOp<quint8, quint8, qint32>);\nREGISTER_KERNEL_BUILDER(Name(\"QuantizedBiasAdd\")\n                            .Device(DEVICE_CPU)\n                            .TypeConstraint<qint8>(\"T1\")\n                            .TypeConstraint<qint8>(\"T2\")\n                            .TypeConstraint<qint32>(\"out_type\"),\n                        QuantizedBiasAddOp<qint8, qint8, qint32>);\n}  // namespace tensorflow"