"/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/nn_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/kernels/dilation_ops.h\"\n\n#include <cfloat>\n#include <vector>\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/common_runtime/device.h\"\n#include \"tensorflow/core/framework/kernel_shape_util.h\"\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_slice.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/gtl/array_slice.h\"\n#include \"tensorflow/core/util/padding.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nvoid ParseAttributes(OpKernelConstruction* context, std::vector<int32>* strides,\n                     std::vector<int32>* rates, Padding* padding) {\n  OP_REQUIRES_OK(context, context->GetAttr(\"strides\", strides));\n  OP_REQUIRES(context, strides->size() == 4,\n              errors::InvalidArgument(\"Sliding window stride field must \"\n                                      \"specify 4 dimensions\"));\n  OP_REQUIRES(context, (*strides)[0] == 1 && (*strides)[3] == 1,\n              errors::Unimplemented(\n                  \"Stride is only supported across spatial dimensions.\"));\n\n  OP_REQUIRES_OK(context, context->GetAttr(\"rates\", rates));\n  OP_REQUIRES(context, rates->size() == 4,\n              errors::InvalidArgument(\"Input stride (atrous rate) field \"\n                                      \"must specify 4 dimensions\"));\n  OP_REQUIRES(context, (*rates)[0] == 1 && (*rates)[3] == 1,\n              errors::Unimplemented(\n                  \"Rate is only supported across spatial dimensions.\"));\n\n  OP_REQUIRES_OK(context, context->GetAttr(\"padding\", padding));\n}\n\nvoid ParseSizes(OpKernelContext* context, const std::vector<int32>& strides,\n                const std::vector<int32>& rates, const Padding& padding,\n                int* stride_rows, int* stride_cols, int* rate_rows,\n                int* rate_cols, int64* pad_top, int64* pad_left,\n                int64* out_rows, int64* out_cols) {\n  // Input tensor is of the following dimensions:\n  // [ batch, input_rows, input_cols, depth ]\n  const Tensor& input = context->input(0);\n  OP_REQUIRES(context, input.dims() == 4,\n              errors::InvalidArgument(\"input must be 4-dimensional\",\n                                      input.shape().DebugString()));\n  const int input_rows = input.dim_size(1);\n  const int input_cols = input.dim_size(2);\n  const int depth = input.dim_size(3);\n\n  // For now we take the stride and rate from the second and third dimensions\n  // only (we do not support striding on the batch or depth dimension).\n  *stride_rows = strides[1];\n  *stride_cols = strides[2];\n  *rate_rows = rates[1];\n  *rate_cols = rates[2];\n\n  // Input filter is of the following dimensions:\n  // [ filter_rows, filter_cols, depth ]\n  const Tensor& filter = context->input(1);\n  OP_REQUIRES(context, filter.dims() == 3,\n              errors::InvalidArgument(\"filter must be 3-dimensional: \",\n                                      filter.shape().DebugString()));\n  const int filter_rows = filter.dim_size(0);\n  const int filter_cols = filter.dim_size(1);\n  OP_REQUIRES(context, depth == filter.dim_size(2),\n              errors::InvalidArgument(\n                  \"input and filter must have the same depth: \", depth, \" vs \",\n                  filter.dim_size(2)));\n\n  // Effective filter size, after introducing rate - 1 zeros between each\n  // non-zero filter element.\n  const int filter_rows_eff =\n      filter_rows + (filter_rows - 1) * (*rate_rows - 1);\n  const int filter_cols_eff =\n      filter_cols + (filter_cols - 1) * (*rate_cols - 1);\n\n  OP_REQUIRES_OK(\n      context, GetWindowedOutputSize(input_rows, filter_rows_eff, *stride_rows,\n                                     padding, out_rows, pad_top));\n  OP_REQUIRES_OK(\n      context, GetWindowedOutputSize(input_cols, filter_cols_eff, *stride_cols,\n                                     padding, out_cols, pad_left));\n}\n\ntemplate <typename Device, typename T>\nclass DilationOp : public OpKernel {\n public:\n  explicit DilationOp(OpKernelConstruction* context) : OpKernel(context) {\n    ParseAttributes(context, &strides_, &rates_, &padding_);\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& filter = context->input(1);\n\n    // Determine relevant sizes from input and filters.\n    int stride_rows = 0, stride_cols = 0;\n    int rate_rows = 0, rate_cols = 0;\n    int64 pad_top = 0, pad_left = 0;\n    int64 out_rows = 0, out_cols = 0;\n    ParseSizes(context, strides_, rates_, padding_, &stride_rows, &stride_cols,\n               &rate_rows, &rate_cols, &pad_top, &pad_left, &out_rows,\n               &out_cols);\n    if (!context->status().ok()) return;\n\n    // Output tensor is of the following dimensions:\n    // [ batch, out_rows, out_cols, depth ]\n    const int batch = input.dim_size(0);\n    const int depth = input.dim_size(3);\n    const std::vector<int64> out_sizes = {batch, out_rows, out_cols, depth};\n    TensorShape out_shape(out_sizes);\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));\n\n    // If there is nothing to compute, return.\n    if (out_shape.num_elements() == 0) {\n      return;\n    }\n\n    functor::Dilation<Device, T>()(\n        context->eigen_device<Device>(), input.tensor<T, 4>(),\n        filter.tensor<T, 3>(), stride_rows, stride_cols, rate_rows, rate_cols,\n        pad_top, pad_left, output->tensor<T, 4>());\n  }\n\n  std::vector<int32> strides_;\n  std::vector<int32> rates_;\n  Padding padding_;\n};\n\n// Partial specialization of Dilation functor for a CPUDevice.\nnamespace functor {\ntemplate <typename T>\nstruct Dilation<CPUDevice, T> {\n  void operator()(const CPUDevice& d, typename TTypes<T, 4>::ConstTensor input,\n                  typename TTypes<T, 3>::ConstTensor filter, int stride_rows,\n                  int stride_cols, int rate_rows, int rate_cols, int pad_top,\n                  int pad_left, typename TTypes<T, 4>::Tensor output) {\n    const int batch = input.dimension(0);\n    const int input_rows = input.dimension(1);\n    const int input_cols = input.dimension(2);\n    const int depth = input.dimension(3);\n\n    const int filter_rows = filter.dimension(0);\n    const int filter_cols = filter.dimension(1);\n\n    const int output_rows = output.dimension(1);\n    const int output_cols = output.dimension(2);\n\n    // This is a reference implementation, likely to be slow.\n    // TODO(gpapan): Write multi-threaded implementation.\n    for (int b = 0; b < batch; ++b) {\n      for (int h_out = 0; h_out < output_rows; ++h_out) {\n        int h_beg = h_out * stride_rows - pad_top;\n        for (int w_out = 0; w_out < output_cols; ++w_out) {\n          int w_beg = w_out * stride_cols - pad_left;\n          for (int d = 0; d < depth; ++d) {\n            T cur_val = Eigen::NumTraits<T>::lowest();\n            for (int h = 0; h < filter_rows; ++h) {\n              const int h_in = h_beg + h * rate_rows;\n              if (h_in >= 0 && h_in < input_rows) {\n                for (int w = 0; w < filter_cols; ++w) {\n                  const int w_in = w_beg + w * rate_cols;\n                  if (w_in >= 0 && w_in < input_cols) {\n                    const T val = input(b, h_in, w_in, d) + filter(h, w, d);\n                    if (val > cur_val) {\n                      cur_val = val;\n                    }\n                  }\n                }\n              }\n            }\n            output(b, h_out, w_out, d) = cur_val;\n          }\n        }\n      }\n    }\n  }\n};\n}  // namespace functor\n\ntemplate <typename Device, typename T>\nclass DilationBackpropInputOp : public OpKernel {\n public:\n  explicit DilationBackpropInputOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    ParseAttributes(context, &strides_, &rates_, &padding_);\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& filter = context->input(1);\n    const Tensor& out_backprop = context->input(2);\n\n    // Determine relevant sizes from input and filters.\n    int stride_rows = 0, stride_cols = 0;\n    int rate_rows = 0, rate_cols = 0;\n    int64 pad_top = 0, pad_left = 0;\n    int64 out_rows = 0, out_cols = 0;\n    ParseSizes(context, strides_, rates_, padding_, &stride_rows, &stride_cols,\n               &rate_rows, &rate_cols, &pad_top, &pad_left, &out_rows,\n               &out_cols);\n    if (!context->status().ok()) return;\n\n    // Verify that the incoming gradient tensor has the expected size\n    // [ batch, out_rows, out_cols, depth ]\n    const int batch = input.dim_size(0);\n    const int depth = input.dim_size(3);\n    OP_REQUIRES(context,\n                batch == out_backprop.dim_size(0) &&\n                    out_rows == out_backprop.dim_size(1) &&\n                    out_cols == out_backprop.dim_size(2) &&\n                    depth == out_backprop.dim_size(3),\n                errors::InvalidArgument(\"out_backprop has incompatible size.\"));\n\n    // The computed in_backprop has the same dimensions as the input:\n    // [ batch, input_rows, input_cols, depth ]\n    Tensor* in_backprop = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, input.shape(), &in_backprop));\n\n    // If there is nothing to compute, return.\n    if (input.shape().num_elements() == 0) {\n      return;\n    }\n\n    functor::DilationBackpropInput<Device, T>()(\n        context->eigen_device<Device>(), input.tensor<T, 4>(),\n        filter.tensor<T, 3>(), out_backprop.tensor<T, 4>(), stride_rows,\n        stride_cols, rate_rows, rate_cols, pad_top, pad_left,\n        in_backprop->tensor<T, 4>());\n  }\n\n  std::vector<int32> strides_;\n  std::vector<int32> rates_;\n  Padding padding_;\n};\n\n// Partial specialization of DilationBackpropInput functor for a CPUDevice.\nnamespace functor {\ntemplate <typename T>\nstruct DilationBackpropInput<CPUDevice, T> {\n  void operator()(const CPUDevice& d, typename TTypes<T, 4>::ConstTensor input,\n                  typename TTypes<T, 3>::ConstTensor filter,\n                  typename TTypes<T, 4>::ConstTensor out_backprop,\n                  int stride_rows, int stride_cols, int rate_rows,\n                  int rate_cols, int pad_top, int pad_left,\n                  typename TTypes<T, 4>::Tensor in_backprop) {\n    const int batch = input.dimension(0);\n    const int input_rows = input.dimension(1);\n    const int input_cols = input.dimension(2);\n    const int depth = input.dimension(3);\n\n    const int filter_rows = filter.dimension(0);\n    const int filter_cols = filter.dimension(1);\n\n    const int output_rows = out_backprop.dimension(1);\n    const int output_cols = out_backprop.dimension(2);\n\n    // Initialize gradient with all zeros.\n    in_backprop.setZero();\n\n    // This is a reference implementation, likely to be slow.\n    // TODO(gpapan): Write multi-threaded implementation.\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    for (int b = 0; b < batch; ++b) {\n      for (int h_out = 0; h_out < output_rows; ++h_out) {\n        int h_beg = h_out * stride_rows - pad_top;\n        for (int w_out = 0; w_out < output_cols; ++w_out) {\n          int w_beg = w_out * stride_cols - pad_left;\n          for (int d = 0; d < depth; ++d) {\n            T cur_val = Eigen::NumTraits<T>::lowest();\n            int h_in_max = (h_beg < 0) ? 0 : h_beg;\n            int w_in_max = (w_beg < 0) ? 0 : w_beg;\n            for (int h = 0; h < filter_rows; ++h) {\n              const int h_in = h_beg + h * rate_rows;\n              if (h_in >= 0 && h_in < input_rows) {\n                for (int w = 0; w < filter_cols; ++w) {\n                  const int w_in = w_beg + w * rate_cols;\n                  if (w_in >= 0 && w_in < input_cols) {\n                    const T val = input(b, h_in, w_in, d) + filter(h, w, d);\n                    if (val > cur_val) {\n                      cur_val = val;\n                      h_in_max = h_in;\n                      w_in_max = w_in;\n                    }\n                  }\n                }\n              }\n            }\n            if (h_in_max < input_rows && w_in_max < input_cols) {\n              in_backprop(b, h_in_max, w_in_max, d) +=\n                  out_backprop(b, h_out, w_out, d);\n            }\n          }\n        }\n      }\n    }\n  }\n};\n}  // namespace functor\n\ntemplate <typename Device, typename T>\nclass DilationBackpropFilterOp : public OpKernel {\n public:\n  explicit DilationBackpropFilterOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    ParseAttributes(context, &strides_, &rates_, &padding_);\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& filter = context->input(1);\n    const Tensor& out_backprop = context->input(2);\n\n    // Determine relevant sizes from input and filters.\n    int stride_rows = 0, stride_cols = 0;\n    int rate_rows = 0, rate_cols = 0;\n    int64 pad_top = 0, pad_left = 0;\n    int64 out_rows = 0, out_cols = 0;\n    ParseSizes(context, strides_, rates_, padding_, &stride_rows, &stride_cols,\n               &rate_rows, &rate_cols, &pad_top, &pad_left, &out_rows,\n               &out_cols);\n    if (!context->status().ok()) return;\n\n    // Verify that the incoming gradient tensor has the expected size\n    // [ batch, out_rows, out_cols, depth ]\n    const int batch = input.dim_size(0);\n    const int depth = input.dim_size(3);\n    OP_REQUIRES(context,\n                batch == out_backprop.dim_size(0) &&\n                    out_rows == out_backprop.dim_size(1) &&\n                    out_cols == out_backprop.dim_size(2) &&\n                    depth == out_backprop.dim_size(3),\n                errors::InvalidArgument(\"out_backprop has incompatible size.\"));\n\n    // The computed filter_backprop has the same dimensions as the filter:\n    // [ batch, input_rows, input_cols, depth ]\n    Tensor* filter_backprop = nullptr;\n    OP_REQUIRES_OK(\n        context, context->allocate_output(0, filter.shape(), &filter_backprop));\n\n    // If there is nothing to compute, return.\n    if (filter.shape().num_elements() == 0) {\n      return;\n    }\n\n    functor::DilationBackpropFilter<Device, T>()(\n        context->eigen_device<Device>(), input.tensor<T, 4>(),\n        filter.tensor<T, 3>(), out_backprop.tensor<T, 4>(), stride_rows,\n        stride_cols, rate_rows, rate_cols, pad_top, pad_left,\n        filter_backprop->tensor<T, 3>());\n  }\n\n  std::vector<int32> strides_;\n  std::vector<int32> rates_;\n  Padding padding_;\n};\n\n// Partial specialization of DilationBackpropFilter functor for a CPUDevice.\nnamespace functor {\ntemplate <typename T>\nstruct DilationBackpropFilter<CPUDevice, T> {\n  void operator()(const CPUDevice& d, typename TTypes<T, 4>::ConstTensor input,\n                  typename TTypes<T, 3>::ConstTensor filter,\n                  typename TTypes<T, 4>::ConstTensor out_backprop,\n                  int stride_rows, int stride_cols, int rate_rows,\n                  int rate_cols, int pad_top, int pad_left,\n                  typename TTypes<T, 3>::Tensor filter_backprop) {\n    const int batch = input.dimension(0);\n    const int input_rows = input.dimension(1);\n    const int input_cols = input.dimension(2);\n    const int depth = input.dimension(3);\n\n    const int filter_rows = filter.dimension(0);\n    const int filter_cols = filter.dimension(1);\n\n    const int output_rows = out_backprop.dimension(1);\n    const int output_cols = out_backprop.dimension(2);\n\n    // Initialize gradient with all zeros.\n    filter_backprop.setZero();\n\n    // This is a reference implementation, likely to be slow.\n    // TODO(gpapan): Write multi-threaded implementation.\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    for (int b = 0; b < batch; ++b) {\n      for (int h_out = 0; h_out < output_rows; ++h_out) {\n        int h_beg = h_out * stride_rows - pad_top;\n        for (int w_out = 0; w_out < output_cols; ++w_out) {\n          int w_beg = w_out * stride_cols - pad_left;\n          for (int d = 0; d < depth; ++d) {\n            T cur_val = Eigen::NumTraits<T>::lowest();\n            int h_max = 0;\n            int w_max = 0;\n            for (int h = 0; h < filter_rows; ++h) {\n              const int h_in = h_beg + h * rate_rows;\n              if (h_in >= 0 && h_in < input_rows) {\n                for (int w = 0; w < filter_cols; ++w) {\n                  const int w_in = w_beg + w * rate_cols;\n                  if (w_in >= 0 && w_in < input_cols) {\n                    const T val = input(b, h_in, w_in, d) + filter(h, w, d);\n                    if (val > cur_val) {\n                      cur_val = val;\n                      h_max = h;\n                      w_max = w;\n                    }\n                  }\n                }\n              }\n            }\n            if (h_max < filter_rows && w_max < filter_cols) {\n              filter_backprop(h_max, w_max, d) +=\n                  out_backprop(b, h_out, w_out, d);\n            }\n          }\n        }\n      }\n    }\n  }\n};\n}  // namespace functor\n\n#define REGISTER(T)                                                 \\\n  REGISTER_KERNEL_BUILDER(                                          \\\n      Name(\"Dilation2D\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      DilationOp<CPUDevice, T>);                                    \\\n                                                                    \\\n  REGISTER_KERNEL_BUILDER(Name(\"Dilation2DBackpropInput\")           \\\n                              .Device(DEVICE_CPU)                   \\\n                              .TypeConstraint<T>(\"T\"),              \\\n                          DilationBackpropInputOp<CPUDevice, T>);   \\\n                                                                    \\\n  REGISTER_KERNEL_BUILDER(Name(\"Dilation2DBackpropFilter\")          \\\n                              .Device(DEVICE_CPU)                   \\\n                              .TypeConstraint<T>(\"T\"),              \\\n                          DilationBackpropFilterOp<CPUDevice, T>);\n\nTF_CALL_REAL_NUMBER_TYPES(REGISTER);\n\n#undef REGISTER\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER(T)                                                 \\\n  REGISTER_KERNEL_BUILDER(                                          \\\n      Name(\"Dilation2D\").Device(DEVICE_GPU).TypeConstraint<T>(\"T\"), \\\n      DilationOp<GPUDevice, T>);                                    \\\n                                                                    \\\n  REGISTER_KERNEL_BUILDER(Name(\"Dilation2DBackpropInput\")           \\\n                              .Device(DEVICE_GPU)                   \\\n                              .TypeConstraint<T>(\"T\"),              \\\n                          DilationBackpropInputOp<GPUDevice, T>);   \\\n                                                                    \\\n  REGISTER_KERNEL_BUILDER(Name(\"Dilation2DBackpropFilter\")          \\\n                              .Device(DEVICE_GPU)                   \\\n                              .TypeConstraint<T>(\"T\"),              \\\n                          DilationBackpropFilterOp<GPUDevice, T>);\n\nTF_CALL_GPU_NUMBER_TYPES(REGISTER);\n\n#undef REGISTER\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n}  // namespace tensorflow"