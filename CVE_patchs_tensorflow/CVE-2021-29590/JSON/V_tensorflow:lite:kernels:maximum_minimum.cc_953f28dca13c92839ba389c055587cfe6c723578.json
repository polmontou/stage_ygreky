"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/maximum_minimum.h\"\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/process_broadcast_shapes.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace maximum_minimum {\n\n// This file has a reference implementation of TFMaximum/TFMinimum.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nconstexpr int kInputTensor1 = 0;\nconstexpr int kInputTensor2 = 1;\nconstexpr int kOutputTensor = 0;\n\nstruct OpContext {\n  OpContext(TfLiteContext* context, TfLiteNode* node) {\n    input1 = GetInput(context, node, kInputTensor1);\n    input2 = GetInput(context, node, kInputTensor2);\n    output = GetOutput(context, node, kOutputTensor);\n  }\n  const TfLiteTensor* input1;\n  const TfLiteTensor* input2;\n  TfLiteTensor* output;\n};\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  OpContext op_context(context, node);\n  TF_LITE_ENSURE_TYPES_EQ(context, op_context.input1->type,\n                          op_context.input2->type);\n  op_context.output->type = op_context.input1->type;\n\n  bool requires_broadcast =\n      !HaveSameShapes(op_context.input1, op_context.input2);\n\n  TfLiteIntArray* output_size = nullptr;\n  if (requires_broadcast) {\n    TF_LITE_ENSURE_OK(\n        context, CalculateShapeForBroadcast(context, op_context.input1,\n                                            op_context.input2, &output_size));\n  } else {\n    output_size = TfLiteIntArrayCopy(op_context.input1->dims);\n  }\n\n  return context->ResizeTensor(context, op_context.output, output_size);\n}\n\nstruct MaximumOp {\n  template <typename data_type>\n  static data_type op(data_type el1, data_type el2) {\n    return el1 > el2 ? el1 : el2;\n  }\n};\n\nstruct MinimumOp {\n  template <typename data_type>\n  static data_type op(data_type el1, data_type el2) {\n    return el1 < el2 ? el1 : el2;\n  }\n};\n\ntemplate <KernelType kernel_type, typename data_type, typename op_type>\nvoid TFLiteOperation(TfLiteContext* context, TfLiteNode* node,\n                     const OpContext& op_context) {\n  reference_ops::MaximumMinimumBroadcastSlow(\n      GetTensorShape(op_context.input1),\n      GetTensorData<data_type>(op_context.input1),\n      GetTensorShape(op_context.input2),\n      GetTensorData<data_type>(op_context.input2),\n      GetTensorShape(op_context.output),\n      GetTensorData<data_type>(op_context.output),\n      op_type::template op<data_type>);\n}\n\n// Maximum generic opt int8.\ntemplate <>\nvoid TFLiteOperation<maximum_minimum::kGenericOptimized, int8, MaximumOp>(\n    TfLiteContext* context, TfLiteNode* node, const OpContext& op_context) {\n  tflite::ArithmeticParams op_params;\n  const bool need_broadcast = optimized_ops::ProcessBroadcastShapes(\n      GetTensorShape(op_context.input1), GetTensorShape(op_context.input2),\n      &op_params);\n  if (need_broadcast) {\n    optimized_ops::BroadcastMaximumDispatch(\n        op_params, GetTensorShape(op_context.input1),\n        GetTensorData<int8>(op_context.input1),\n        GetTensorShape(op_context.input2),\n        GetTensorData<int8>(op_context.input2),\n        GetTensorShape(op_context.output),\n        GetTensorData<int8>(op_context.output), MaximumOp::template op<int8>);\n    return;\n  }\n  reference_ops::MaximumMinimumBroadcastSlow(\n      GetTensorShape(op_context.input1), GetTensorData<int8>(op_context.input1),\n      GetTensorShape(op_context.input2), GetTensorData<int8>(op_context.input2),\n      GetTensorShape(op_context.output), GetTensorData<int8>(op_context.output),\n      MaximumOp::template op<int8>);\n}\n\n// Minimum generic opt int8.\ntemplate <>\nvoid TFLiteOperation<maximum_minimum::kGenericOptimized, int8, MinimumOp>(\n    TfLiteContext* context, TfLiteNode* node, const OpContext& op_context) {\n  tflite::ArithmeticParams op_params;\n  const bool need_broadcast = optimized_ops::ProcessBroadcastShapes(\n      GetTensorShape(op_context.input1), GetTensorShape(op_context.input2),\n      &op_params);\n  if (need_broadcast) {\n    optimized_ops::BroadcastMinimumDispatch(\n        op_params, GetTensorShape(op_context.input1),\n        GetTensorData<int8>(op_context.input1),\n        GetTensorShape(op_context.input2),\n        GetTensorData<int8>(op_context.input2),\n        GetTensorShape(op_context.output),\n        GetTensorData<int8>(op_context.output), MinimumOp::template op<int8>);\n    return;\n  }\n  reference_ops::MaximumMinimumBroadcastSlow(\n      GetTensorShape(op_context.input1), GetTensorData<int8>(op_context.input1),\n      GetTensorShape(op_context.input2), GetTensorData<int8>(op_context.input2),\n      GetTensorShape(op_context.output), GetTensorData<int8>(op_context.output),\n      MinimumOp::template op<int8>);\n}\n\ntemplate <KernelType kernel_type, typename OpType>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  OpContext op_context(context, node);\n\n    switch (op_context.output->type) {\n      case kTfLiteFloat32:\n        TFLiteOperation<kernel_type, float, OpType>(context, node, op_context);\n        break;\n      case kTfLiteUInt8:\n        TFLiteOperation<kernel_type, uint8_t, OpType>(context, node,\n                                                      op_context);\n        break;\n      case kTfLiteInt8:\n        TFLiteOperation<kernel_type, int8_t, OpType>(context, node, op_context);\n        break;\n      case kTfLiteInt32:\n        TFLiteOperation<kernel_type, int32_t, OpType>(context, node,\n                                                      op_context);\n        break;\n      case kTfLiteInt64:\n        TFLiteOperation<kernel_type, int64_t, OpType>(context, node,\n                                                      op_context);\n        break;\n      case kTfLiteInt16:\n        TFLiteOperation<kernel_type, int16_t, OpType>(context, node,\n                                                      op_context);\n        break;\n      default:\n        context->ReportError(context,\n                             \"Type %d is currently not supported by Maximum.\",\n                             op_context.output->type);\n        return kTfLiteError;\n    }\n  return kTfLiteOk;\n}\n\n}  // namespace maximum_minimum\n\nTfLiteRegistration* Register_MAXIMUM_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, maximum_minimum::Prepare,\n      maximum_minimum::Eval<maximum_minimum::kReference,\n                            maximum_minimum::MaximumOp>};\n  return &r;\n}\n\nTfLiteRegistration* Register_MAXIMUM_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, maximum_minimum::Prepare,\n      maximum_minimum::Eval<maximum_minimum::kGenericOptimized,\n                            maximum_minimum::MaximumOp>};\n  return &r;\n}\n\nTfLiteRegistration* Register_MINIMUM_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, maximum_minimum::Prepare,\n      maximum_minimum::Eval<maximum_minimum::kReference,\n                            maximum_minimum::MinimumOp>};\n  return &r;\n}\n\nTfLiteRegistration* Register_MINIMUM_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, maximum_minimum::Prepare,\n      maximum_minimum::Eval<maximum_minimum::kGenericOptimized,\n                            maximum_minimum::MinimumOp>};\n  return &r;\n}\n\nTfLiteRegistration* Register_MAXIMUM() {\n  return Register_MAXIMUM_GENERIC_OPT();\n}\nTfLiteRegistration* Register_MINIMUM() {\n  return Register_MINIMUM_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"