"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include <initializer_list>\n#include <vector>\n\n#include <gmock/gmock.h>\n#include <gtest/gtest.h>\n#include \"flatbuffers/flatbuffers.h\"  // from @flatbuffers\n#include \"tensorflow/lite/kernels/test_util.h\"\n#include \"tensorflow/lite/schema/schema_generated.h\"\n\nnamespace tflite {\nnamespace {\n\nusing ::testing::ElementsAre;\nusing ::testing::ElementsAreArray;\n\nclass DepthToSpaceOpModel : public SingleOpModel {\n public:\n  DepthToSpaceOpModel(const TensorData& tensor_data, int block_size) {\n    input_ = AddInput(tensor_data);\n    output_ = AddOutput(tensor_data);\n    SetBuiltinOp(BuiltinOperator_DEPTH_TO_SPACE,\n                 BuiltinOptions_DepthToSpaceOptions,\n                 CreateDepthToSpaceOptions(builder_, block_size).Union());\n    BuildInterpreter({GetShape(input_)});\n  }\n\n  template <typename T>\n  void SetInput(std::initializer_list<T> data) {\n    PopulateTensor<T>(input_, data);\n  }\n  template <typename T>\n  std::vector<T> GetOutput() {\n    return ExtractVector<T>(output_);\n  }\n  std::vector<int> GetOutputShape() { return GetTensorShape(output_); }\n\n private:\n  int input_;\n  int output_;\n};\n\n#ifdef GTEST_HAS_DEATH_TEST\nTEST(DepthToSpaceOpModel, BadBlockSize) {\n  EXPECT_DEATH(DepthToSpaceOpModel({TensorType_FLOAT32, {1, 1, 1, 4}}, 4),\n               \"Cannot allocate tensors\");\n}\n\nTEST(DepthToSpaceOpModel, NoBlockSize) {\n  EXPECT_DEATH(DepthToSpaceOpModel({TensorType_FLOAT32, {1, 1, 1, 4}}, 0),\n               \"Cannot allocate tensors\");\n}\n#endif\n\nTEST(DepthToSpaceOpModel, Float32) {\n  DepthToSpaceOpModel m({TensorType_FLOAT32, {1, 1, 1, 4}}, 2);\n  m.SetInput<float>({1.4, 2.3, 3.2, 4.1});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<float>(), ElementsAreArray({1.4, 2.3, 3.2, 4.1}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 2, 2, 1));\n}\n\nTEST(DepthToSpaceOpModel, Uint8) {\n  DepthToSpaceOpModel m({TensorType_UINT8, {1, 1, 2, 4}}, 2);\n  m.SetInput<uint8_t>({1, 2, 3, 4, 5, 6, 7, 8});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<uint8_t>(),\n              ElementsAreArray({1, 2, 5, 6, 3, 4, 7, 8}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 2, 4, 1));\n}\n\nTEST(DepthToSpaceOpModel, int8) {\n  DepthToSpaceOpModel m({TensorType_INT8, {1, 2, 1, 4}}, 2);\n  m.SetInput<int8_t>({1, 2, 3, 4, 5, 6, 7, 8});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<int8_t>(),\n              ElementsAreArray({1, 2, 3, 4, 5, 6, 7, 8}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 4, 2, 1));\n}\n\nTEST(DepthToSpaceOpModel, Int32) {\n  DepthToSpaceOpModel m({TensorType_INT32, {1, 2, 2, 4}}, 2);\n  m.SetInput<int32_t>({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<int32_t>(),\n              ElementsAreArray(\n                  {1, 2, 5, 6, 3, 4, 7, 8, 9, 10, 13, 14, 11, 12, 15, 16}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 4, 4, 1));\n}\n\nTEST(DepthToSpaceOpModel, Int64) {\n  DepthToSpaceOpModel m({TensorType_INT64, {1, 1, 1, 1}}, 1);\n  m.SetInput<int64_t>({4});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<int64_t>(), ElementsAreArray({4}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 1, 1, 1));\n}\n\n}  // namespace\n}  // namespace tflite"