"/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/depth_to_space.h\"\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\n// input/output tensor shape rank associations\nconstexpr int kBatchRank = 0;\nconstexpr int kHeightRank = 1;\nconstexpr int kWidthRank = 2;\nconstexpr int kDepthRank = 3;\n\nTfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n\n  auto data_type = output->type;\n  TF_LITE_ENSURE(context,\n                 data_type == kTfLiteFloat32 || data_type == kTfLiteInt8);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  const int block_size = params->block_size;\n  const int input_height = input->dims->data[kHeightRank];\n  const int input_width = input->dims->data[kWidthRank];\n  const int input_channels = input->dims->data[kDepthRank];\n  int output_height = input_height * block_size;\n  int output_width = input_width * block_size;\n  int output_channels = input_channels / block_size / block_size;\n\n  TF_LITE_ENSURE_EQ(context, input_height, output_height / block_size);\n  TF_LITE_ENSURE_EQ(context, input_width, output_width / block_size);\n  TF_LITE_ENSURE_EQ(context, input_channels,\n                    output_channels * block_size * block_size);\n\n  // We must update the output tensor dimensions.\n  // The dims storage is expected to be the same area in memory\n  // for both TfLiteTensor and TfLiteEvalTensor.  This is important\n  // because TfLiteTensor in the MicroInterpreter is a temporary\n  // allocation.  For the KernelRunner interpreter, TfLiteEvalTensor\n  // is a temporary allocation.  We must therefore relocate the dims\n  // from the FlatBuffer to the persistant storage arena.\n  TfLiteEvalTensor* output_eval =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n  TF_LITE_ENSURE_OK(context, tflite::micro::CreateWritableTensorDimsWithCopy(\n                                 context, output, output_eval));\n  output->dims->data[kBatchRank] = input->dims->data[kBatchRank];\n  output->dims->data[kHeightRank] = output_height;\n  output->dims->data[kWidthRank] = output_width;\n  output->dims->data[kDepthRank] = output_channels;\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  return CalculateOpData(context, node);\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);\n\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, kInputTensor);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  tflite::DepthToSpaceParams op_params;\n  op_params.block_size = static_cast<int32_t>(params->block_size);\n\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      reference_ops::DepthToSpace(op_params,\n                                  tflite::micro::GetTensorShape(input),\n                                  tflite::micro::GetTensorData<float>(input),\n                                  tflite::micro::GetTensorShape(output),\n                                  tflite::micro::GetTensorData<float>(output));\n      break;\n    case kTfLiteInt8:\n      reference_ops::DepthToSpace(op_params,\n                                  tflite::micro::GetTensorShape(input),\n                                  tflite::micro::GetTensorData<int8_t>(input),\n                                  tflite::micro::GetTensorShape(output),\n                                  tflite::micro::GetTensorData<int8_t>(output));\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(\n          context, \"DEPTH_TO_SPACE only supports FLOAT32 and INT8, got %s.\",\n          TfLiteTypeGetName(output->type));\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace\n\nTfLiteRegistration Register_DEPTH_TO_SPACE() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/Prepare,\n          /*invoke=*/Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace tflite"