"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace space_to_batch_nd {\n\n// This file has two implementations of SpaceToBatchND.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nstruct SpaceToBatchNDContext {\n  SpaceToBatchNDContext(TfLiteContext* context, TfLiteNode* node) {\n    input = GetInput(context, node, 0);\n    block_shape = GetInput(context, node, 1);\n    paddings = GetInput(context, node, 2);\n    output = GetOutput(context, node, 0);\n  }\n  const TfLiteTensor* input;\n  const TfLiteTensor* block_shape;\n  const TfLiteTensor* paddings;\n  TfLiteTensor* output;\n};\n\n// Currently, only 3D NHC and 4D NHWC input/output op_context are supported.\n// In case of 3D input, it will be extended to 3D NHWC by adding W=1.\n// The 4D array need to have exactly 2 spatial dimensions.\n// TODO(b/149952582): Support arbitrary dimension in SpaceToBatchND.\nconst int kInputMinDimensionNum = 3;\nconst int kInputMaxDimensionNum = 4;\n\nTfLiteStatus ResizeOutputTensor(TfLiteContext* context,\n                                SpaceToBatchNDContext* op_context) {\n  TfLiteIntArray* input_size = op_context->input->dims;\n  const int32* block_shape = GetTensorData<int32>(op_context->block_shape);\n  const int32* paddings_data = GetTensorData<int32>(op_context->paddings);\n\n  int spatial_dims_num = input_size->size - 2;\n  // Block_shape should be a 1D tensor with dimension [spatial_dims_num].\n  TF_LITE_ENSURE_EQ(context, NumDimensions(op_context->block_shape), 1);\n  TF_LITE_ENSURE_EQ(context, op_context->block_shape->dims->data[0],\n                    spatial_dims_num);\n  // Paddings should be a 2D tensor with dimension [spatial_dims_num, 2].\n  TF_LITE_ENSURE_EQ(context, NumDimensions(op_context->paddings), 2);\n  TF_LITE_ENSURE_EQ(context, op_context->paddings->dims->data[0],\n                    spatial_dims_num);\n  TF_LITE_ENSURE_EQ(context, op_context->paddings->dims->data[1], 2);\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCopy(input_size);\n\n  // Ensures the input height and width (with padding) is a multiple of block\n  // shape height and width.\n  int output_batch_size = input_size->data[0];\n  for (int dim = 0; dim < spatial_dims_num; ++dim) {\n    int final_dim_size = (input_size->data[dim + 1] + paddings_data[dim * 2] +\n                          paddings_data[dim * 2 + 1]);\n    TF_LITE_ENSURE(context, block_shape[dim] != 0);\n    TF_LITE_ENSURE_EQ(context, final_dim_size % block_shape[dim], 0);\n    output_size->data[dim + 1] = final_dim_size / block_shape[dim];\n    output_batch_size *= block_shape[dim];\n  }\n\n  output_size->data[0] = output_batch_size;\n  output_size->data[input_size->size - 1] =\n      input_size->data[input_size->size - 1];\n\n  return context->ResizeTensor(context, op_context->output, output_size);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  SpaceToBatchNDContext op_context(context, node);\n  TF_LITE_ENSURE(context,\n                 NumDimensions(op_context.input) >= kInputMinDimensionNum);\n  TF_LITE_ENSURE(context,\n                 NumDimensions(op_context.input) <= kInputMaxDimensionNum);\n  TF_LITE_ENSURE_TYPES_EQ(context, op_context.input->type,\n                          op_context.output->type);\n\n  if (!IsConstantTensor(op_context.block_shape) ||\n      !IsConstantTensor(op_context.paddings)) {\n    SetTensorToDynamic(op_context.output);\n    return kTfLiteOk;\n  }\n  return ResizeOutputTensor(context, &op_context);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  SpaceToBatchNDContext op_context(context, node);\n\n  // Resize the output tensor if the output tensor is dynamic.\n  if (IsDynamicTensor(op_context.output)) {\n    TF_LITE_ENSURE_OK(context, ResizeOutputTensor(context, &op_context));\n  }\n\n#define TF_LITE_SPACE_TO_BATCH_ND(type, scalar, pad_value)             \\\n  tflite::SpaceToBatchParams op_params;                                \\\n  op_params.output_offset = pad_value;                                 \\\n  type::SpaceToBatchND(op_params, GetTensorShape(op_context.input),    \\\n                       GetTensorData<scalar>(op_context.input),        \\\n                       GetTensorShape(op_context.block_shape),         \\\n                       GetTensorData<int32_t>(op_context.block_shape), \\\n                       GetTensorShape(op_context.paddings),            \\\n                       GetTensorData<int32_t>(op_context.paddings),    \\\n                       GetTensorShape(op_context.output),              \\\n                       GetTensorData<scalar>(op_context.output))\n  switch (op_context.input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      if (kernel_type == kReference) {\n        TF_LITE_SPACE_TO_BATCH_ND(reference_ops, float, 0);\n      } else {\n        TF_LITE_SPACE_TO_BATCH_ND(optimized_ops, float, 0);\n      }\n      break;\n    case kTfLiteUInt8:\n      if (kernel_type == kReference) {\n        TF_LITE_SPACE_TO_BATCH_ND(reference_ops, uint8_t,\n                                  op_context.output->params.zero_point);\n      } else {\n        TF_LITE_SPACE_TO_BATCH_ND(optimized_ops, uint8_t,\n                                  op_context.output->params.zero_point);\n      }\n      break;\n    case kTfLiteInt8:\n      if (kernel_type == kReference) {\n        TF_LITE_SPACE_TO_BATCH_ND(reference_ops, int8_t,\n                                  op_context.output->params.zero_point);\n      } else {\n        TF_LITE_SPACE_TO_BATCH_ND(optimized_ops, int8_t,\n                                  op_context.output->params.zero_point);\n      }\n      break;\n    case kTfLiteInt32:\n      if (kernel_type == kReference) {\n        TF_LITE_SPACE_TO_BATCH_ND(reference_ops, int32_t, 0);\n      } else {\n        TF_LITE_SPACE_TO_BATCH_ND(optimized_ops, int32_t, 0);\n      }\n      break;\n    case kTfLiteInt64:\n      if (kernel_type == kReference) {\n        TF_LITE_SPACE_TO_BATCH_ND(reference_ops, int64_t, 0);\n      } else {\n        TF_LITE_SPACE_TO_BATCH_ND(optimized_ops, int64_t, 0);\n      }\n      break;\n    default:\n      context->ReportError(\n          context, \"Type %d is currently not supported by SpaceToBatch.\",\n          op_context.input->type);\n      return kTfLiteError;\n  }\n#undef TF_LITE_SPACE_TO_BATCH_ND\n  return kTfLiteOk;\n}\n\n}  // namespace space_to_batch_nd\n\nTfLiteRegistration* Register_SPACE_TO_BATCH_ND_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, space_to_batch_nd::Prepare,\n      space_to_batch_nd::Eval<space_to_batch_nd::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_SPACE_TO_BATCH_ND_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, space_to_batch_nd::Prepare,\n      space_to_batch_nd::Eval<space_to_batch_nd::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_SPACE_TO_BATCH_ND() {\n  // return Register_SPACE_TO_BATCH_ND_REF();\n  return Register_SPACE_TO_BATCH_ND_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"