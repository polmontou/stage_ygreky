"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace split {\n\nstruct OpContext {\n  OpContext(TfLiteContext* context, TfLiteNode* node) {\n    params = reinterpret_cast<TfLiteSplitParams*>(node->builtin_data);\n    axis = GetInput(context, node, 0);\n    input = GetInput(context, node, 1);\n  }\n  TfLiteSplitParams* params;\n  const TfLiteTensor* axis;\n  const TfLiteTensor* input;\n};\n\nTfLiteStatus UseDynamicOutputTensors(TfLiteContext* context, TfLiteNode* node) {\n  for (int i = 0; i < NumOutputs(node); ++i) {\n    TfLiteTensor* tensor;\n    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &tensor));\n    SetTensorToDynamic(tensor);\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus ResizeOutputTensors(TfLiteContext* context, TfLiteNode* node,\n                                 const TfLiteTensor* axis,\n                                 const TfLiteTensor* input, int num_splits) {\n  int axis_value = GetTensorData<int>(axis)[0];\n  if (axis_value < 0) {\n    axis_value += NumDimensions(input);\n  }\n\n  TF_LITE_ENSURE(context, axis_value >= 0);\n  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));\n\n  const int input_size = SizeOfDimension(input, axis_value);\n  TF_LITE_ENSURE_MSG(context, input_size % num_splits == 0,\n                     \"Not an even split\");\n  const int slice_size = input_size / num_splits;\n\n  for (int i = 0; i < NumOutputs(node); ++i) {\n    TfLiteIntArray* output_dims = TfLiteIntArrayCopy(input->dims);\n    output_dims->data[axis_value] = slice_size;\n    TfLiteTensor* output;\n    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));\n    TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_dims));\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n\n  OpContext op_context(context, node);\n\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), op_context.params->num_splits);\n\n  auto input_type = op_context.input->type;\n  TF_LITE_ENSURE(context,\n                 input_type == kTfLiteFloat32 || input_type == kTfLiteUInt8 ||\n                     input_type == kTfLiteInt8 || input_type == kTfLiteInt16 ||\n                     input_type == kTfLiteInt32);\n  for (int i = 0; i < NumOutputs(node); ++i) {\n    TfLiteTensor* tensor;\n    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &tensor));\n    tensor->type = input_type;\n  }\n\n  // If we know the contents of the 'axis' tensor, resize all outputs.\n  // Otherwise, wait until Eval().\n  if (IsConstantTensor(op_context.axis)) {\n    return ResizeOutputTensors(context, node, op_context.axis, op_context.input,\n                               op_context.params->num_splits);\n  } else {\n    return UseDynamicOutputTensors(context, node);\n  }\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  OpContext op_context(context, node);\n\n  // When the 'axis' tensor is non-const we can't resize output tensors in\n  // Prepare(), and we have to do it now.\n  if (!IsConstantTensor(op_context.axis)) {\n    TF_LITE_ENSURE_OK(\n        context,\n        ResizeOutputTensors(context, node, op_context.axis, op_context.input,\n                            op_context.params->num_splits));\n  }\n\n  int axis_value = GetTensorData<int>(op_context.axis)[0];\n  if (axis_value < 0) {\n    axis_value += NumDimensions(op_context.input);\n  }\n\n  TF_LITE_ENSURE(context, axis_value >= 0);\n  TF_LITE_ENSURE(context, axis_value < NumDimensions(op_context.input));\n\n  // TODO(b/173221795): Our usage of VectorOfTensors could be optimized by\n  // calculating it in Prepare, unless we defer shape calculation.\n  // We can improve the optimized_ops version to handle other\n  // cases too.\n#define TF_LITE_SPLIT(scalar)                                       \\\n  VectorOfTensors<scalar> all_outputs(*context, *node->outputs);    \\\n  tflite::SplitParams op_params;                                    \\\n  op_params.num_split = NumOutputs(node);                           \\\n  op_params.axis = axis_value;                                      \\\n  reference_ops::Split(op_params, GetTensorShape(op_context.input), \\\n                       GetTensorData<scalar>(op_context.input),     \\\n                       all_outputs.shapes(), all_outputs.data());\n\n  switch (op_context.input->type) {\n    case kTfLiteFloat32: {\n      TF_LITE_SPLIT(float);\n      break;\n    }\n    case kTfLiteUInt8: {\n      TF_LITE_SPLIT(uint8_t);\n      break;\n    }\n    case kTfLiteInt8: {\n      TF_LITE_SPLIT(int8_t);\n      break;\n    }\n    case kTfLiteInt16: {\n      TF_LITE_SPLIT(int16_t);\n      break;\n    }\n    case kTfLiteInt32: {\n      TF_LITE_SPLIT(int32_t);\n      break;\n    }\n    default:\n      context->ReportError(context, \"Type %s currently not supported.\",\n                           TfLiteTypeGetName(op_context.input->type));\n      return kTfLiteError;\n  }\n#undef TF_LITE_SPLIT\n\n  return kTfLiteOk;\n}\n\n}  // namespace split\n\nTfLiteRegistration* Register_SPLIT() {\n  static TfLiteRegistration r = {nullptr, nullptr, split::Prepare, split::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"