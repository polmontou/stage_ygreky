"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace one_hot {\n\nconstexpr int kIndicesTensor = 0;\nconstexpr int kDepthTensor = 1;\nconstexpr int kOnValueTensor = 2;\nconstexpr int kOffValueTensor = 3;\nconstexpr int kOutputTensor = 0;\n\n// Convenience utility for destructuring a node into the appropriate tensors and\n// data for the op. Note that this destructuring is quite cheap, so we can avoid\n// allocating op-specific, persistent data on the heap.\nstruct OneHotContext {\n  OneHotContext(TfLiteContext* context, TfLiteNode* node) {\n    indices = GetInput(context, node, kIndicesTensor);\n    depth = GetInput(context, node, kDepthTensor);\n    on_value = GetInput(context, node, kOnValueTensor);\n    off_value = GetInput(context, node, kOffValueTensor);\n    output = GetOutput(context, node, kOutputTensor);\n\n    const auto* params =\n        reinterpret_cast<TfLiteOneHotParams*>(node->builtin_data);\n    const int indices_dims = indices->dims->size;\n    axis = (params->axis == -1) ? indices_dims : params->axis;\n    output_dims = indices_dims + 1;\n    dtype = on_value->type;\n  }\n\n  const TfLiteTensor* indices;\n  const TfLiteTensor* depth;\n  const TfLiteTensor* on_value;\n  const TfLiteTensor* off_value;\n  TfLiteTensor* output;\n  int axis;\n  int output_dims;\n  TfLiteType dtype;\n};\n\ntemplate <typename T, typename TI>\nvoid OneHotComputeImpl(const OneHotContext& op_context) {\n  // prefix_dim_size == # of elements before the axis\n  // depth == # of elements per axis\n  // suffix_dim_size == # of elements after the axis\n  int prefix_dim_size = 1;\n  for (int i = 0; i < op_context.axis; ++i) {\n    prefix_dim_size *= op_context.indices->dims->data[i];\n  }\n  const int suffix_dim_size = NumElements(op_context.indices) / prefix_dim_size;\n  const int depth = *op_context.depth->data.i32;\n\n  const T on_value = *GetTensorData<T>(op_context.on_value);\n  const T off_value = *GetTensorData<T>(op_context.off_value);\n\n  // View the indices as a matrix of size:\n  //     prefix_dim_size x suffix_dim_size\n  // View the output as a matrix of size:\n  //     prefix_dim_size x depth x suffix_dim_size\n  // Then the output is:\n  //     output(i, j, k) == (indices(i, k) == j) ? on : off\n  T* output = GetTensorData<T>(op_context.output);\n  const TI* indices = GetTensorData<TI>(op_context.indices);\n  for (int i = 0; i < prefix_dim_size; ++i) {\n    for (int j = 0; j < depth; ++j) {\n      for (int k = 0; k < suffix_dim_size; ++k, ++output) {\n        *output = static_cast<int>(indices[i * suffix_dim_size + k]) == j\n                      ? on_value\n                      : off_value;\n      }\n    }\n  }\n}\n\ntemplate <typename T>\nvoid OneHotCompute(const OneHotContext& op_context) {\n  if (op_context.indices->type == kTfLiteInt64) {\n    OneHotComputeImpl<T, int64_t>(op_context);\n  } else {\n    OneHotComputeImpl<T, int>(op_context);\n  }\n}\n\nTfLiteStatus ResizeOutputTensor(TfLiteContext* context,\n                                const OneHotContext& op_context) {\n  TF_LITE_ENSURE(context, *op_context.depth->data.i32 >= 0);\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(op_context.output_dims);\n  for (int i = 0; i < op_context.output_dims; ++i) {\n    if (i < op_context.axis) {\n      output_size->data[i] = op_context.indices->dims->data[i];\n    } else if (i == op_context.axis) {\n      output_size->data[i] = *op_context.depth->data.i32;\n    } else {\n      output_size->data[i] = op_context.indices->dims->data[i - 1];\n    }\n  }\n  return context->ResizeTensor(context, op_context.output, output_size);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  OneHotContext op_context{context, node};\n  switch (op_context.dtype) {\n    // TODO(b/111744875): Support uint8 and quantization.\n    case kTfLiteFloat32:\n    case kTfLiteInt16:\n    case kTfLiteInt32:\n    case kTfLiteInt64:\n    case kTfLiteInt8:\n    case kTfLiteUInt8:\n    case kTfLiteBool:\n      op_context.output->type = op_context.dtype;\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Unknown output data type: %s\",\n                         TfLiteTypeGetName(op_context.dtype));\n      return kTfLiteError;\n  }\n\n  TF_LITE_ENSURE(context, op_context.indices->type == kTfLiteInt32 ||\n                              op_context.indices->type == kTfLiteInt64);\n  TF_LITE_ENSURE(context, op_context.axis >= 0 &&\n                              op_context.axis < op_context.output_dims);\n  TF_LITE_ENSURE_EQ(context, NumElements(op_context.depth), 1);\n  TF_LITE_ENSURE_EQ(context, NumElements(op_context.on_value), 1);\n  TF_LITE_ENSURE_EQ(context, NumElements(op_context.off_value), 1);\n  TF_LITE_ENSURE_TYPES_EQ(context, op_context.on_value->type, op_context.dtype);\n  TF_LITE_ENSURE_TYPES_EQ(context, op_context.off_value->type,\n                          op_context.dtype);\n\n  if (!IsConstantTensor(op_context.depth)) {\n    SetTensorToDynamic(op_context.output);\n    return kTfLiteOk;\n  }\n\n  return ResizeOutputTensor(context, op_context);\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  OneHotContext op_context{context, node};\n\n  if (IsDynamicTensor(op_context.output)) {\n    ResizeOutputTensor(context, op_context);\n  }\n\n  switch (op_context.output->type) {\n    case kTfLiteFloat32:\n      OneHotCompute<float>(op_context);\n      break;\n    case kTfLiteInt32:\n      OneHotCompute<int>(op_context);\n      break;\n    case kTfLiteInt64:\n      OneHotCompute<int64_t>(op_context);\n      break;\n    case kTfLiteInt8:\n      OneHotCompute<int8_t>(op_context);\n      break;\n    case kTfLiteUInt8:\n      OneHotCompute<uint8_t>(op_context);\n      break;\n    case kTfLiteBool:\n      OneHotCompute<bool>(op_context);\n      break;\n    default:\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace one_hot\n\nTfLiteRegistration* Register_ONE_HOT() {\n  static TfLiteRegistration r = {\n      nullptr,\n      nullptr,\n      one_hot::Prepare,\n      one_hot::Eval,\n  };\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"