"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/c/c_api_types.h\"\n\n#ifndef TF_LITE_STATIC_MEMORY\n#include <stdlib.h>\n#include <string.h>\n#endif  // TF_LITE_STATIC_MEMORY\n\nint TfLiteIntArrayGetSizeInBytes(int size) {\n  static TfLiteIntArray dummy;\n  return sizeof(dummy) + sizeof(dummy.data[0]) * size;\n}\n\nint TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {\n  if (a == b) return 1;\n  if (a == NULL || b == NULL) return 0;\n  return TfLiteIntArrayEqualsArray(a, b->size, b->data);\n}\n\nint TfLiteIntArrayEqualsArray(const TfLiteIntArray* a, int b_size,\n                              const int b_data[]) {\n  if (a == NULL) return (b_size == 0);\n  if (a->size != b_size) return 0;\n  int i = 0;\n  for (; i < a->size; i++)\n    if (a->data[i] != b_data[i]) return 0;\n  return 1;\n}\n\n#ifndef TF_LITE_STATIC_MEMORY\n\nTfLiteIntArray* TfLiteIntArrayCreate(int size) {\n  TfLiteIntArray* ret =\n      (TfLiteIntArray*)malloc(TfLiteIntArrayGetSizeInBytes(size));\n  ret->size = size;\n  return ret;\n}\n\nTfLiteIntArray* TfLiteIntArrayCopy(const TfLiteIntArray* src) {\n  if (!src) return NULL;\n  TfLiteIntArray* ret = TfLiteIntArrayCreate(src->size);\n  if (ret) {\n    memcpy(ret->data, src->data, src->size * sizeof(int));\n  }\n  return ret;\n}\n\nvoid TfLiteIntArrayFree(TfLiteIntArray* a) { free(a); }\n\n#endif  // TF_LITE_STATIC_MEMORY\n\nint TfLiteFloatArrayGetSizeInBytes(int size) {\n  static TfLiteFloatArray dummy;\n  return sizeof(dummy) + sizeof(dummy.data[0]) * size;\n}\n\n#ifndef TF_LITE_STATIC_MEMORY\n\nTfLiteFloatArray* TfLiteFloatArrayCreate(int size) {\n  TfLiteFloatArray* ret =\n      (TfLiteFloatArray*)malloc(TfLiteFloatArrayGetSizeInBytes(size));\n  ret->size = size;\n  return ret;\n}\n\nvoid TfLiteFloatArrayFree(TfLiteFloatArray* a) { free(a); }\n\nvoid TfLiteTensorDataFree(TfLiteTensor* t) {\n  if (t->allocation_type == kTfLiteDynamic ||\n      t->allocation_type == kTfLitePersistentRo) {\n    free(t->data.raw);\n  }\n  t->data.raw = NULL;\n}\n\nvoid TfLiteQuantizationFree(TfLiteQuantization* quantization) {\n  if (quantization->type == kTfLiteAffineQuantization) {\n    TfLiteAffineQuantization* q_params =\n        (TfLiteAffineQuantization*)(quantization->params);\n    if (q_params->scale) {\n      TfLiteFloatArrayFree(q_params->scale);\n      q_params->scale = NULL;\n    }\n    if (q_params->zero_point) {\n      TfLiteIntArrayFree(q_params->zero_point);\n      q_params->zero_point = NULL;\n    }\n    free(q_params);\n  }\n  quantization->params = NULL;\n  quantization->type = kTfLiteNoQuantization;\n}\n\nvoid TfLiteSparsityFree(TfLiteSparsity* sparsity) {\n  if (sparsity == NULL) {\n    return;\n  }\n\n  if (sparsity->traversal_order) {\n    TfLiteIntArrayFree(sparsity->traversal_order);\n    sparsity->traversal_order = NULL;\n  }\n\n  if (sparsity->block_map) {\n    TfLiteIntArrayFree(sparsity->block_map);\n    sparsity->block_map = NULL;\n  }\n\n  if (sparsity->dim_metadata) {\n    int i = 0;\n    for (; i < sparsity->dim_metadata_size; i++) {\n      TfLiteDimensionMetadata metadata = sparsity->dim_metadata[i];\n      if (metadata.format == kTfLiteDimSparseCSR) {\n        TfLiteIntArrayFree(metadata.array_segments);\n        metadata.array_segments = NULL;\n        TfLiteIntArrayFree(metadata.array_indices);\n        metadata.array_indices = NULL;\n      }\n    }\n    free(sparsity->dim_metadata);\n    sparsity->dim_metadata = NULL;\n  }\n\n  free(sparsity);\n}\n\nvoid TfLiteTensorFree(TfLiteTensor* t) {\n  TfLiteTensorDataFree(t);\n  if (t->dims) TfLiteIntArrayFree(t->dims);\n  t->dims = NULL;\n\n  if (t->dims_signature) {\n    TfLiteIntArrayFree((TfLiteIntArray *) t->dims_signature);\n  }\n  t->dims_signature = NULL;\n\n  TfLiteQuantizationFree(&t->quantization);\n  TfLiteSparsityFree(t->sparsity);\n  t->sparsity = NULL;\n}\n\nvoid TfLiteTensorReset(TfLiteType type, const char* name, TfLiteIntArray* dims,\n                       TfLiteQuantizationParams quantization, char* buffer,\n                       size_t size, TfLiteAllocationType allocation_type,\n                       const void* allocation, bool is_variable,\n                       TfLiteTensor* tensor) {\n  TfLiteTensorFree(tensor);\n  tensor->type = type;\n  tensor->name = name;\n  tensor->dims = dims;\n  tensor->params = quantization;\n  tensor->data.raw = buffer;\n  tensor->bytes = size;\n  tensor->allocation_type = allocation_type;\n  tensor->allocation = allocation;\n  tensor->is_variable = is_variable;\n\n  tensor->quantization.type = kTfLiteNoQuantization;\n  tensor->quantization.params = NULL;\n}\n\nvoid TfLiteTensorRealloc(size_t num_bytes, TfLiteTensor* tensor) {\n  if (tensor->allocation_type != kTfLiteDynamic &&\n      tensor->allocation_type != kTfLitePersistentRo) {\n    return;\n  }\n  // TODO(b/145340303): Tensor data should be aligned.\n  if (!tensor->data.raw) {\n    tensor->data.raw = malloc(num_bytes);\n  } else if (num_bytes > tensor->bytes) {\n    tensor->data.raw = realloc(tensor->data.raw, num_bytes);\n  }\n  tensor->bytes = num_bytes;\n}\n#endif  // TF_LITE_STATIC_MEMORY\n\nconst char* TfLiteTypeGetName(TfLiteType type) {\n  switch (type) {\n    case kTfLiteNoType:\n      return \"NOTYPE\";\n    case kTfLiteFloat32:\n      return \"FLOAT32\";\n    case kTfLiteInt16:\n      return \"INT16\";\n    case kTfLiteInt32:\n      return \"INT32\";\n    case kTfLiteUInt32:\n      return \"UINT32\";\n    case kTfLiteUInt8:\n      return \"UINT8\";\n    case kTfLiteInt8:\n      return \"INT8\";\n    case kTfLiteInt64:\n      return \"INT64\";\n    case kTfLiteUInt64:\n      return \"UINT64\";\n    case kTfLiteBool:\n      return \"BOOL\";\n    case kTfLiteComplex64:\n      return \"COMPLEX64\";\n    case kTfLiteComplex128:\n      return \"COMPLEX128\";\n    case kTfLiteString:\n      return \"STRING\";\n    case kTfLiteFloat16:\n      return \"FLOAT16\";\n    case kTfLiteFloat64:\n      return \"FLOAT64\";\n    case kTfLiteResource:\n      return \"RESOURCE\";\n    case kTfLiteVariant:\n      return \"VARIANT\";\n  }\n  return \"Unknown type\";\n}\n\nTfLiteDelegate TfLiteDelegateCreate() {\n  TfLiteDelegate d = {\n      .data_ = NULL,\n      .Prepare = NULL,\n      .CopyFromBufferHandle = NULL,\n      .CopyToBufferHandle = NULL,\n      .FreeBufferHandle = NULL,\n      .flags = kTfLiteDelegateFlagsNone,\n  };\n  return d;\n}"