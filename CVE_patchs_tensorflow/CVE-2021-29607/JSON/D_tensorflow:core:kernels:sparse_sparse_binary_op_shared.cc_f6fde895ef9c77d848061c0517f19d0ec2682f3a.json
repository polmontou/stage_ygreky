"diff --git a/tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc b/tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc\nindex 9fe42e05d87..eb993a59650 100644\n--- a/tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc\n+++ b/tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc\n@@ -150,6 +150,7 @@ class SparseSparseBinaryOpShared : public OpKernel {\n \n     const int64 a_nnz = a_indices_t->dim_size(0);\n     const int64 b_nnz = b_indices_t->dim_size(0);\n+\n     const auto a_values = a_values_t->vec<T>();\n     const auto b_values = b_values_t->vec<T>();\n \n@@ -166,6 +167,14 @@ class SparseSparseBinaryOpShared : public OpKernel {\n                     \"Input shapes should be a vector but received shapes \",\n                     a_shape_t->shape().DebugString(), \" and \",\n                     b_shape_t->shape().DebugString()));\n+    const int num_dims = a_indices_t->dim_size(1);\n+    OP_REQUIRES(\n+        ctx, a_shape_t->NumElements() == num_dims,\n+        errors::InvalidArgument(\"Second dimension of a_indices and length of \"\n+                                \"a_shape must match, got \",\n+                                num_dims, \" and \", a_shape_t->NumElements()));\n+    OP_REQUIRES(ctx, num_dims > 0,\n+                errors::InvalidArgument(\"Tensors must not be empty\"));\n     OP_REQUIRES(ctx, a_shape_t->IsSameSize(*b_shape_t),\n                 errors::InvalidArgument(\n                     \"Operands do not have the same ranks; got shapes: \",\n@@ -180,12 +189,6 @@ class SparseSparseBinaryOpShared : public OpKernel {\n                                           \" for dimension \", i));\n     }\n \n-    OP_REQUIRES(\n-        ctx, a_indices_t->dim_size(1) == b_indices_t->dim_size(1),\n-        errors::InvalidArgument(\n-            \"Indices' dimensions do not match: got \", a_indices_t->dim_size(1),\n-            \" and \", b_indices_t->dim_size(1), \" for the second dimension.\"));\n-    const int num_dims = a_indices_t->dim_size(1);\n     const auto a_indices_mat = a_indices_t->matrix<int64>();\n     const auto b_indices_mat = b_indices_t->matrix<int64>();\n     std::vector<T> a_augmented_values, b_augmented_values;"