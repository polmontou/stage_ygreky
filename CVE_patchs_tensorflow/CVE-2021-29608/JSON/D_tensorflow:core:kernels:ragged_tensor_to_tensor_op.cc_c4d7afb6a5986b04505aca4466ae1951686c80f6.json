"diff --git a/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nindex 376d55945d2..b79a07e67ba 100644\n--- a/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\n+++ b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\n@@ -207,8 +207,8 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\n     DCHECK_EQ(result->size(), first_dimension);\n   }\n \n-  void CalculateOutputIndexRowSplit(\n-      OpKernelContext* context, const RowPartitionTensor& row_split,\n+  Status CalculateOutputIndexRowSplit(\n+      const RowPartitionTensor& row_split,\n       const vector<INDEX_TYPE>& parent_output_index,\n       INDEX_TYPE output_index_multiplier, INDEX_TYPE output_size,\n       vector<INDEX_TYPE>* result) {\n@@ -232,10 +232,11 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\n         result->push_back(-1);\n       }\n     }\n-    if (row_split_size > 0) {\n-      OP_REQUIRES(context, result->size() == row_split(row_split_size - 1),\n-                  errors::InvalidArgument(\"Invalid row split size.\"));\n+    if (row_split_size > 0 && result->size() != row_split(row_split_size - 1)) {\n+      return errors::InvalidArgument(\"Invalid row split size.\");\n     }\n+\n+    return Status::OK();\n   }\n \n   // Calculate the output index of the first element of a list.\n@@ -259,20 +260,26 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\n   // result[6] = -1 because parent_output_index[value_rowids[6]] == -1\n   // result[7] = -1 because parent_output_index[value_rowids[6]] == -1\n   // result[8] = parent_output_index[value_rowids[7]]\n-  void CalculateOutputIndexValueRowID(\n-      OpKernelContext* context, const RowPartitionTensor& value_rowids,\n+  Status CalculateOutputIndexValueRowID(\n+      const RowPartitionTensor& value_rowids,\n       const vector<INDEX_TYPE>& parent_output_index,\n       INDEX_TYPE output_index_multiplier, INDEX_TYPE output_size,\n       vector<INDEX_TYPE>* result) {\n     const INDEX_TYPE index_size = value_rowids.size();\n     result->reserve(index_size);\n     if (index_size == 0) {\n-      return;\n+      return Status::OK();\n     }\n \n     INDEX_TYPE current_output_column = 0;\n     INDEX_TYPE current_value_rowid = value_rowids(0);\n-    DCHECK_LT(current_value_rowid, parent_output_index.size());\n+\n+    if (current_value_rowid >= parent_output_index.size()) {\n+      return errors::InvalidArgument(\n+          \"Got current_value_rowid=\", current_value_rowid,\n+          \" which is not less than \", parent_output_index.size());\n+    }\n+\n     INDEX_TYPE current_output_index = parent_output_index[current_value_rowid];\n     result->push_back(current_output_index);\n     for (INDEX_TYPE i = 1; i < index_size; ++i) {\n@@ -289,13 +296,23 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\n       } else {\n         current_output_column = 0;\n         current_value_rowid = next_value_rowid;\n-        DCHECK_LT(next_value_rowid, parent_output_index.size());\n+\n+        if (next_value_rowid >= parent_output_index.size()) {\n+          return errors::InvalidArgument(\n+              \"Got next_value_rowid=\", next_value_rowid,\n+              \" which is not less than \", parent_output_index.size());\n+        }\n+\n         current_output_index = parent_output_index[next_value_rowid];\n       }\n       result->push_back(current_output_index);\n     }\n-    OP_REQUIRES(context, result->size() == value_rowids.size(),\n-                errors::InvalidArgument(\"Invalid row ids.\"));\n+\n+    if (result->size() != value_rowids.size()) {\n+      return errors::InvalidArgument(\"Invalid row ids.\");\n+    }\n+\n+    return Status::OK();\n   }\n \n   Status CalculateOutputIndex(OpKernelContext* context, int dimension,\n@@ -308,10 +325,9 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\n     auto partition_type = GetRowPartitionTypeByDimension(dimension);\n     switch (partition_type) {\n       case RowPartitionType::VALUE_ROWIDS:\n-        CalculateOutputIndexValueRowID(\n-            context, row_partition_tensor, parent_output_index,\n-            output_index_multiplier, output_size, result);\n-        return tensorflow::Status::OK();\n+        return CalculateOutputIndexValueRowID(\n+            row_partition_tensor, parent_output_index, output_index_multiplier,\n+            output_size, result);\n       case RowPartitionType::ROW_SPLITS:\n         if (row_partition_tensor.size() - 1 > parent_output_index.size()) {\n           return errors::InvalidArgument(\n@@ -319,10 +335,9 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\n               row_partition_tensor.size() - 1, \" > \",\n               parent_output_index.size());\n         }\n-        CalculateOutputIndexRowSplit(\n-            context, row_partition_tensor, parent_output_index,\n-            output_index_multiplier, output_size, result);\n-        return tensorflow::Status::OK();\n+        return CalculateOutputIndexRowSplit(\n+            row_partition_tensor, parent_output_index, output_index_multiplier,\n+            output_size, result);\n       default:\n         return errors::InvalidArgument(\n             \"Unsupported partition type:\","