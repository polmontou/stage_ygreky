"diff --git a/tensorflow/core/kernels/sparse_add_op.cc b/tensorflow/core/kernels/sparse_add_op.cc\nindex 346206365af..2bd05fa41ad 100644\n--- a/tensorflow/core/kernels/sparse_add_op.cc\n+++ b/tensorflow/core/kernels/sparse_add_op.cc\n@@ -44,6 +44,11 @@ class SparseAddOp : public OpKernel {\n                     b_indices->shape().DebugString()));\n     const int64 a_nnz = a_indices->dim_size(0);\n     const int64 b_nnz = b_indices->dim_size(0);\n+    const int num_dims = a_indices->dim_size(1);\n+    OP_REQUIRES(ctx, b_indices->dim_size(1) == num_dims,\n+                errors::InvalidArgument(\n+                    \"Input indices must have the same dimension, got \",\n+                    num_dims, \" and \", b_indices->dim_size(1)));\n \n     OP_REQUIRES_OK(ctx, ctx->input(\"a_values\", &a_values_t));\n     OP_REQUIRES_OK(ctx, ctx->input(\"b_values\", &b_values_t));\n@@ -72,6 +77,13 @@ class SparseAddOp : public OpKernel {\n                     \"Input shapes should be a vector but received shapes \",\n                     a_shape->shape().DebugString(), \" and \",\n                     b_shape->shape().DebugString()));\n+    OP_REQUIRES(\n+        ctx, a_shape->NumElements() == num_dims,\n+        errors::InvalidArgument(\"Second dimension of a_indices and length of \"\n+                                \"a_shape must match, got \",\n+                                num_dims, \" and \", a_shape->NumElements()));\n+    OP_REQUIRES(ctx, num_dims > 0,\n+                errors::InvalidArgument(\"Tesors must not be empty\"));\n     OP_REQUIRES(\n         ctx, a_shape->IsSameSize(*b_shape),\n         errors::InvalidArgument(\n@@ -100,11 +112,6 @@ class SparseAddOp : public OpKernel {\n     std::vector<std::pair<bool, int64>> entries_to_copy;  // from_a?, idx\n     entries_to_copy.reserve(a_nnz + b_nnz);\n     std::vector<T> out_values;\n-    const int num_dims = a_shape->dim_size(0);\n-\n-    OP_REQUIRES(ctx, num_dims > 0,\n-                errors::InvalidArgument(\"Invalid input_a shape. Received: \",\n-                                        a_shape->DebugString()));\n \n     // The input and output sparse tensors are assumed to be ordered along\n     // increasing dimension number."