"diff --git a/tensorflow/core/kernels/decode_padded_raw_op.cc b/tensorflow/core/kernels/decode_padded_raw_op.cc\nindex 12e8ec6aff0..d3e830c06f2 100644\n--- a/tensorflow/core/kernels/decode_padded_raw_op.cc\n+++ b/tensorflow/core/kernels/decode_padded_raw_op.cc\n@@ -19,6 +19,7 @@ limitations under the License.\n #include \"tensorflow/core/framework/common_shape_fns.h\"\n #include \"tensorflow/core/framework/op.h\"\n #include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/op_requires.h\"\n #include \"tensorflow/core/framework/shape_inference.h\"\n \n namespace tensorflow {\n@@ -83,14 +84,13 @@ class DecodePaddedRawOp : public OpKernel {\n     // can copy the memory directly.\n     if (!convert_data_endianness_ || sizeof(T) == 1) {\n       for (int64 i = 0; i < flat_in.size(); ++i) {\n-        const T* in_data = reinterpret_cast<const T*>(flat_in(i).data());\n-\n-        if (flat_in(i).size() > fixed_length) {\n-          memcpy(out_data, in_data, fixed_length);\n-        } else {\n-          memcpy(out_data, in_data, flat_in(i).size());\n-        }\n-        out_data += fixed_length;\n+        const auto to_copy =\n+            std::min(flat_in(i).size(), static_cast<size_t>(fixed_length));\n+        memcpy(out_data, flat_in(i).data(), to_copy);\n+        // Note: increase out_data by width since it's already of type T* so\n+        // each shift amount is implicitly multiplied by sizeof(T) according to\n+        // pointer arithmetic rules.\n+        out_data += width;\n       }\n     } else {\n       // Otherwise, the data is not in the host's byte order, and rather than a\n@@ -105,7 +105,10 @@ class DecodePaddedRawOp : public OpKernel {\n              p_in += sizeof(T), p_out += sizeof(T)) {\n           std::reverse_copy(p_in, p_in + sizeof(T), p_out);\n         }\n-        out_data += fixed_length;\n+        // Note: increase out_data by width since it's already of type T* so\n+        // each shift amount is implicitly multiplied by sizeof(T) according to\n+        // pointer arithmetic rules.\n+        out_data += width;\n       }\n     }\n   }"