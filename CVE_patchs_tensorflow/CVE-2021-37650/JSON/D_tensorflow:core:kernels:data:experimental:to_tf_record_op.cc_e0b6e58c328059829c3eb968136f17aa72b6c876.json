"diff --git a/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc b/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc\nindex 0ba04d0bd94..4f759bede55 100644\n--- a/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc\n+++ b/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc\n@@ -18,6 +18,7 @@ limitations under the License.\n #include \"tensorflow/core/framework/function_handle_cache.h\"\n #include \"tensorflow/core/framework/op_kernel.h\"\n #include \"tensorflow/core/framework/resource_mgr.h\"\n+#include \"tensorflow/core/framework/types.h\"\n #include \"tensorflow/core/kernels/ops_util.h\"\n #include \"tensorflow/core/lib/core/threadpool.h\"\n #include \"tensorflow/core/lib/io/record_writer.h\"\n@@ -91,8 +92,20 @@ class ToTFRecordOp : public AsyncOpKernel {\n     TF_RETURN_IF_ERROR(finalized_dataset->MakeIterator(\n         &iter_ctx, /*parent=*/nullptr, \"ToTFRecordOpIterator\", &iterator));\n \n+    const int num_output_dtypes = finalized_dataset->output_dtypes().size();\n+    if (num_output_dtypes != 1) {\n+      return errors::InvalidArgument(\n+          \"ToTFRecordOp currently only support datasets of 1 single column, \",\n+          \"but got \", num_output_dtypes);\n+    }\n+    const DataType dt = finalized_dataset->output_dtypes()[0];\n+    if (dt != DT_STRING) {\n+      return errors::InvalidArgument(\n+          \"ToTFRecordOp currently only supports DT_STRING dataypes, but got \",\n+          DataTypeString(dt));\n+    }\n     std::vector<Tensor> components;\n-    components.reserve(finalized_dataset->output_dtypes().size());\n+    components.reserve(num_output_dtypes);\n     bool end_of_sequence;\n     do {\n       TF_RETURN_IF_ERROR("