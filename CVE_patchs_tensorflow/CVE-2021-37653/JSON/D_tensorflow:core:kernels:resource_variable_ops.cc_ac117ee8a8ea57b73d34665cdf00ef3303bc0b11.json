"diff --git a/tensorflow/core/kernels/resource_variable_ops.cc b/tensorflow/core/kernels/resource_variable_ops.cc\nindex 32a0a43364d..8b9610724e5 100644\n--- a/tensorflow/core/kernels/resource_variable_ops.cc\n+++ b/tensorflow/core/kernels/resource_variable_ops.cc\n@@ -710,7 +710,8 @@ class ResourceGatherOp : public OpKernel {\n         copy_functor(c->eigen_device<Device>(), tmp_indices.flat<Index>(),\n                      indices.flat<Index>());\n \n-        AddBatchOffsets(&tmp_indices, params);\n+        AddBatchOffsets(c, &tmp_indices, params);\n+        if (!c->status().ok()) return;\n         op_indices = &tmp_indices;\n       }\n \n@@ -742,11 +743,17 @@ class ResourceGatherOp : public OpKernel {\n   // Example: batch_dims = 1, indices = [[0, 1, 2], [0, 1, 2]]\n   // If indexing into a params dimension of size 4, then the indices will become\n   // [0, 1, 2, 4, 5, 6]\n-  void AddBatchOffsets(Tensor* indices, const Tensor& params) {\n+  void AddBatchOffsets(OpKernelContext* ctx, Tensor* indices,\n+                       const Tensor& params) {\n     int64_t batch_size = 1;  // The size of all batch dimensions.\n     for (int idx = 0; idx < batch_dims_; ++idx) {\n       batch_size *= params.dim_size(idx);\n     }\n+    OP_REQUIRES(\n+        ctx, batch_size != 0,\n+        errors::InvalidArgument(\n+            \"Inner size of indices would result in batch_size of 0 and a \",\n+            \"division by 0 in the implementation. This is illegal\"));\n \n     auto indices_flat = indices->flat<Index>();\n     int64_t const index_inner_size = indices->NumElements() / batch_size;"