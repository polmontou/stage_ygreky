"# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n# pylint: disable=protected-access\n\"\"\"A `Network` is way to compose layers: the topological form of a `Model`.\"\"\"\n\nimport collections\nimport copy\nimport itertools\nimport warnings\n\nfrom tensorflow.python.eager import context\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.keras import backend\nfrom tensorflow.python.keras.engine import base_layer\nfrom tensorflow.python.keras.engine import base_layer_utils\nfrom tensorflow.python.keras.engine import input_layer as input_layer_module\nfrom tensorflow.python.keras.engine import input_spec\nfrom tensorflow.python.keras.engine import node as node_module\nfrom tensorflow.python.keras.engine import training as training_lib\nfrom tensorflow.python.keras.engine import training_utils\nfrom tensorflow.python.keras.saving.saved_model import network_serialization\nfrom tensorflow.python.keras.utils import generic_utils\nfrom tensorflow.python.keras.utils import tf_inspect\nfrom tensorflow.python.keras.utils import tf_utils\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.platform import tf_logging as logging\nfrom tensorflow.python.training.tracking import base as trackable\nfrom tensorflow.python.util import nest\nfrom tensorflow.tools.docs import doc_controls\n\n\n# pylint: disable=g-classes-have-attributes\nclass Functional(training_lib.Model):\n  \"\"\"A `Functional` model is a `Model` defined as a directed graph of layers.\n\n  Three types of `Model` exist: subclassed `Model`, `Functional` model,\n  and `Sequential` (a special case of `Functional`).\n  In general, more Keras features are supported with `Functional`\n  than with subclassed `Model`s, specifically:\n\n  - Model cloning (`keras.models.clone`)\n  - Serialization (`model.get_config()/from_config`, `model.to_json()`\n  - Whole-model saving (`model.save()`)\n\n  A `Functional` model can be instantiated by passing two arguments to\n  `__init__`. The first argument is the `keras.Input` Tensors that represent\n  the inputs to the model. The second argument specifies the output\n  tensors that represent the outputs of this model. Both arguments can be a\n  nested structure of tensors.\n\n  Example:\n\n  ```\n  inputs = {'x1': keras.Input(shape=(10,)), 'x2': keras.Input(shape=(1,))}\n  t = keras.layers.Dense(1, activation='relu')(inputs['x1'])\n  outputs = keras.layers.Add()([t, inputs['x2'])\n  model = keras.Model(inputs, outputs)\n  ```\n\n  A `Functional` model constructed using the Functional API can also include raw\n  TensorFlow functions, with the exception of functions that create Variables\n  or assign ops.\n\n  Example:\n\n  ```\n  inputs = keras.Input(shape=(10,))\n  x = keras.layers.Dense(1)(inputs)\n  outputs = tf.nn.relu(x)\n  model = keras.Model(inputs, outputs)\n  ```\n\n  Args:\n    inputs: List of input tensors (must be created via `tf.keras.Input()`).\n    outputs: List of output tensors.\n    name: String, optional. Name of the model.\n    trainable: Boolean, optional. If the model's variables should be trainable.\n  \"\"\"\n\n  # See tf.Module for the usage of this property.\n  # The key of _layer_call_argspecs is a layer. tf.Module._flatten will fail to\n  # flatten the key since it is trying to convert Trackable/Layer to a string.\n  _TF_MODULE_IGNORED_PROPERTIES = frozenset(itertools.chain(\n      ('_layer_call_argspecs', '_compiled_trainable_state',\n       '_output_mask_cache', '_output_tensor_cache', '_output_shape_cache'),\n      training_lib.Model._TF_MODULE_IGNORED_PROPERTIES\n  ))\n\n  @trackable.no_automatic_dependency_tracking\n  def __init__(self, inputs, outputs, name=None, trainable=True,\n               **kwargs):\n    # This is used by the Model class, since we have some logic to swap the\n    # class in the __new__ method, which will lead to __init__ get invoked\n    # twice. Using the skip_init to skip one of the invocation of __init__ to\n    # avoid any side effects\n    skip_init = kwargs.pop('skip_init', False)\n    if skip_init:\n      return\n    generic_utils.validate_kwargs(kwargs, {})\n    super(Functional, self).__init__(name=name, trainable=trainable)\n    self._init_graph_network(inputs, outputs)\n\n  @trackable.no_automatic_dependency_tracking\n  def _init_graph_network(self, inputs, outputs):\n    # This method is needed for Sequential to reinitialize graph network when\n    # layer is added or removed.\n    self._is_graph_network = True\n\n    # Normalize and set self.inputs, self.outputs.\n    if isinstance(inputs, list) and len(nest.flatten(inputs)) == 1:\n      inputs = inputs[0]\n    if isinstance(outputs, list) and len(nest.flatten(outputs)) == 1:\n      outputs = outputs[0]\n    self._nested_inputs = inputs\n    self._nested_outputs = outputs\n    self.inputs = nest.flatten(inputs)\n    self.outputs = nest.flatten(outputs)\n\n    # Models constructed with a single Tensor or list of Tensors can\n    # be called with a dict, where the keys of the dict are the names\n    # of the `Input` objects. Extra keys are ignored with warning.\n    if not nest.is_nested(self._nested_inputs):\n      self._enable_dict_to_input_mapping = True\n    elif (isinstance(self._nested_inputs, (list, tuple)) and\n          not any(nest.is_nested(t) for t in self._nested_inputs)):\n      self._enable_dict_to_input_mapping = True\n    elif (isinstance(self._nested_inputs, dict) and\n          not any(nest.is_nested(t) for t in self._nested_inputs.values())):\n      self._enable_dict_to_input_mapping = True\n    else:\n      self._enable_dict_to_input_mapping = False\n\n    if not ops.executing_eagerly_outside_functions():\n      if any(not hasattr(tensor, '_keras_history') for tensor in self.outputs):\n        base_layer_utils.create_keras_history(self._nested_outputs)\n\n    self._validate_graph_inputs_and_outputs()\n\n    # A Network does not create weights of its own, thus it is already\n    # built.\n    self.built = True\n    self._build_input_shape = nest.map_structure(lambda x: x.shape, inputs)\n    self._compute_output_and_mask_jointly = True\n    # `_expects_training_arg` is True since the `training` argument is always\n    # present in the signature of the `call` method of a graph network.\n    self._expects_training_arg = True\n    self._expects_mask_arg = True\n    # A graph network does not autocast inputs, as its layers will cast them\n    # instead.\n    self._autocast = False\n\n    self._input_layers = []\n    self._output_layers = []\n    self._input_coordinates = []\n    self._output_coordinates = []\n\n    # This is for performance optimization when calling the Network on new\n    # inputs. Every time the Network is called on a set on input tensors,\n    # we compute the output tensors, output masks and output shapes in one pass,\n    # then cache them here. When any of these outputs is queried later, we\n    # retrieve it from there instead of recomputing it.\n    self._output_mask_cache = {}\n    self._output_tensor_cache = {}\n    self._output_shape_cache = {}\n\n    # Build self._output_layers:\n    for x in self.outputs:\n      layer, node_index, tensor_index = x._keras_history  # pylint: disable=protected-access\n      self._output_layers.append(layer)\n      self._output_coordinates.append((layer, node_index, tensor_index))\n\n    # Build self._input_layers:\n    for x in self.inputs:\n      layer, node_index, tensor_index = x._keras_history  # pylint: disable=protected-access\n      # It's supposed to be an input layer, so only one node\n      # and one tensor output.\n      assert node_index == 0\n      assert tensor_index == 0\n      self._input_layers.append(layer)\n      self._input_coordinates.append((layer, node_index, tensor_index))\n\n    # Keep track of the network's nodes and layers.\n    nodes, nodes_by_depth, layers, _ = _map_graph_network(\n        self.inputs, self.outputs)\n    self._network_nodes = nodes\n    self._nodes_by_depth = nodes_by_depth\n    self._self_tracked_trackables = layers\n    self._layer_call_argspecs = {}\n    for layer in self._self_tracked_trackables:\n      self._layer_call_argspecs[layer] = tf_inspect.getfullargspec(layer.call)\n\n    # Build self.input_names and self.output_names.\n    self._set_output_names()\n    self.input_names = []\n    self._feed_input_names = []\n    self._feed_inputs = []\n    self._feed_input_shapes = []\n    for layer in self._input_layers:\n      self.input_names.append(layer.name)\n      if layer.is_placeholder:\n        self._feed_input_names.append(layer.name)\n        # Use batch_input_shape here because non-eager composite tensors may not\n        # have a shape attribute that's meaningful (sparse, for instance, has\n        # a tensor that's non-constant and needs to be fed). This means that\n        # input layers that create placeholders will need to have the\n        # batch_input_shape attr to allow for input shape validation.\n        self._feed_input_shapes.append(layer._batch_input_shape)\n        self._feed_inputs.append(layer.input)\n\n    self._compute_tensor_usage_count()\n    self._set_save_spec(self._nested_inputs)\n    tf_utils.assert_no_legacy_layers(self.layers)\n\n  @property\n  def input(self):\n    \"\"\"Retrieves the input tensor(s) of a layer.\n\n    Only applicable if the layer has exactly one input,\n    i.e. if it is connected to one incoming layer.\n\n    Returns:\n        Input tensor or list of input tensors.\n\n    Raises:\n      RuntimeError: If called in Eager mode.\n      AttributeError: If no inbound nodes are found.\n    \"\"\"\n    return self._nested_inputs\n\n  @property\n  def input_shape(self):\n    \"\"\"Retrieves the input shape(s) of a layer.\n\n    Only applicable if the layer has exactly one input,\n    i.e. if it is connected to one incoming layer, or if all inputs\n    have the same shape.\n\n    Returns:\n        Input shape, as an integer shape tuple\n        (or list of shape tuples, one tuple per input tensor).\n\n    Raises:\n        AttributeError: if the layer has no defined input_shape.\n        RuntimeError: if called in Eager mode.\n    \"\"\"\n    return nest.map_structure(backend.int_shape, self.input)\n\n  @property\n  def input_spec(self):\n    if hasattr(self, '_manual_input_spec'):\n      return self._manual_input_spec\n    if (isinstance(self._nested_inputs, (dict, list, tuple)) and\n        len(self._nested_inputs) != len(self.inputs)):\n      # Case where we have a nested structure.\n      # In such a case we can't safely run any checks.\n      return None\n    if isinstance(self._nested_inputs, dict):\n      # Case where `_nested_inputs` is a plain dict of Inputs.\n      names = sorted(self._nested_inputs.keys())\n      return [input_spec.InputSpec(\n          shape=shape_with_no_batch_size(self._nested_inputs[name]),\n          allow_last_axis_squeeze=True, name=name) for name in names]\n    else:\n      # Single input, or list / tuple of inputs.\n      # The data may be passed as a dict keyed by input name.\n      return [input_spec.InputSpec(\n          shape=shape_with_no_batch_size(x), allow_last_axis_squeeze=True,\n          name=x._keras_history.layer.name) for x in self.inputs]\n\n  @input_spec.setter\n  def input_spec(self, value):\n    self._manual_input_spec = value\n\n  @property\n  def output(self):\n    \"\"\"Retrieves the output tensor(s) of a layer.\n\n    Only applicable if the layer has exactly one output,\n    i.e. if it is connected to one incoming layer.\n\n    Returns:\n      Output tensor or list of output tensors.\n\n    Raises:\n      AttributeError: if the layer is connected to more than one incoming\n        layers.\n      RuntimeError: if called in Eager mode.\n    \"\"\"\n    return self._nested_outputs\n\n  @property\n  def output_shape(self):\n    \"\"\"Retrieves the output shape(s) of a layer.\n\n    Only applicable if the layer has one output,\n    or if all outputs have the same shape.\n\n    Returns:\n        Output shape, as an integer shape tuple\n        (or list of shape tuples, one tuple per output tensor).\n\n    Raises:\n        AttributeError: if the layer has no defined output shape.\n        RuntimeError: if called in Eager mode.\n    \"\"\"\n    return nest.map_structure(backend.int_shape, self.output)\n\n  def _set_output_names(self):\n    \"\"\"Assigns unique names to the Network's outputs.\n\n    Output layers with multiple output tensors would otherwise lead to duplicate\n    names in self.output_names.\n    \"\"\"\n    uniquified = []\n    output_names = set()\n    prefix_count = {}\n    for layer in self._output_layers:\n      proposal = layer.name\n      while proposal in output_names:\n        existing_count = prefix_count.get(layer.name, 1)\n        proposal = '{}_{}'.format(layer.name, existing_count)\n        prefix_count[layer.name] = existing_count + 1\n      output_names.add(proposal)\n      uniquified.append(proposal)\n    self.output_names = uniquified\n\n  @property\n  def _layer_checkpoint_dependencies(self):\n    \"\"\"Dictionary of layer dependencies to be included in the checkpoint.\"\"\"\n    weight_layer_index = 0\n\n    dependencies = collections.OrderedDict()\n    for layer_index, layer in enumerate(self.layers):\n      try:\n        if layer.weights:\n          # Keep a separate index for layers which have weights. This allows\n          # users to insert Layers without weights anywhere in the network\n          # without breaking checkpoints.\n          dependencies['layer_with_weights-%d' % weight_layer_index] = layer\n          weight_layer_index += 1\n      except ValueError:\n        # The layer might have weights, but may not be built yet. We just treat\n        # it as layer without weight.\n        pass\n\n      # Even if it doesn't have weights, we should still track everything in\n      # case it has/will have Trackable dependencies.\n      dependencies['layer-%d' % layer_index] = layer\n    return dependencies\n\n  @property\n  def _checkpoint_dependencies(self):\n    dependencies = [\n        trackable.TrackableReference(name=name, ref=layer)\n        for name, layer in self._layer_checkpoint_dependencies.items()]\n    dependencies.extend(super(Functional, self)._checkpoint_dependencies)\n    return dependencies\n\n  def _lookup_dependency(self, name):\n    layer_dependencies = self._layer_checkpoint_dependencies\n    if name in layer_dependencies:\n      return layer_dependencies[name]\n    return super(Functional, self)._lookup_dependency(name)\n\n  def _handle_deferred_layer_dependencies(self, layers):\n    \"\"\"Handles layer checkpoint dependencies that are added after init.\"\"\"\n    layer_checkpoint_dependencies = self._layer_checkpoint_dependencies\n    layer_to_name = {v: k for k, v in layer_checkpoint_dependencies.items()}\n    for layer in layers:\n      if layer in layer_to_name:\n        self._handle_deferred_dependencies(name=layer_to_name[layer],\n                                           trackable=layer)\n\n  @property\n  def _should_compute_mask(self):\n    return True\n\n  def compute_mask(self, inputs, mask):\n    # TODO(omalleyt): b/123540974 This function is not really safe to call\n    # by itself because it will duplicate any updates and losses in graph\n    # mode by `call`ing the Layers again.\n    output_tensors = self._run_internal_graph(inputs, mask=mask)\n    return nest.map_structure(lambda t: getattr(t, '_keras_mask', None),\n                              output_tensors)\n\n  @doc_controls.do_not_doc_inheritable\n  def call(self, inputs, training=None, mask=None):\n    \"\"\"Calls the model on new inputs.\n\n    In this case `call` just reapplies\n    all ops in the graph to the new inputs\n    (e.g. build a new computational graph from the provided inputs).\n\n    Args:\n        inputs: A tensor or list of tensors.\n        training: Boolean or boolean scalar tensor, indicating whether to run\n          the `Network` in training mode or inference mode.\n        mask: A mask or list of masks. A mask can be\n            either a tensor or None (no mask).\n\n    Returns:\n        A tensor if there is a single output, or\n        a list of tensors if there are more than one outputs.\n    \"\"\"\n    return self._run_internal_graph(\n        inputs, training=training, mask=mask)\n\n  def compute_output_shape(self, input_shape):\n    # Convert any shapes in tuple format to TensorShapes.\n    input_shape = tf_utils.convert_shapes(input_shape, to_tuples=False)\n\n    if len(nest.flatten(input_shape)) != len(nest.flatten(self._input_layers)):\n      raise ValueError('Invalid input_shape argument ' + str(input_shape) +\n                       ': model has ' + str(len(self._input_layers)) +\n                       ' tensor inputs.')\n\n    # Use the tuple of TensorShape as the cache key, since tuple is hashable\n    # and can be used as hash key.\n    try:\n      cache_key = tuple(tf_utils.convert_shapes(input_shape, to_tuples=True))\n      if cache_key in self._output_shape_cache:\n        # Cache hit. Return shapes as TensorShapes.\n        return self._output_shape_cache[cache_key]\n    except ValueError:\n      # In case there are unknown TensorShape, eg for sparse tensor input,\n      # We skip the caching since the shape is unknown.\n      pass\n\n    layers_to_output_shapes = {}\n    for layer, shape in zip(self._input_layers, nest.flatten(input_shape)):\n      # It's an input layer: then `compute_output_shape` is identity,\n      # and there is only one node and one tensor..\n      shape_key = layer.name + '_0_0'\n      layers_to_output_shapes[shape_key] = shape\n\n    depth_keys = list(self._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    # Iterate over nodes, by depth level.\n    if len(depth_keys) > 1:\n      for depth in depth_keys:\n        nodes = self._nodes_by_depth[depth]\n        for node in nodes:\n          layer = node.layer\n          if layer in self._input_layers:\n            # We've already covered the input layers\n            # a few lines above.\n            continue\n          # Get the input shapes for the first argument of the node\n          layer_input_shapes = []\n          layer_inputs = node.call_args[0]\n          for layer_input in nest.flatten(layer_inputs):\n            kh = layer_input._keras_history\n            input_layer_key = kh.layer.name + '_%s_%s' % (kh.node_index,\n                                                          kh.tensor_index)\n            layer_input_shapes.append(layers_to_output_shapes[input_layer_key])\n          layer_input_shapes = nest.pack_sequence_as(layer_inputs,\n                                                     layer_input_shapes)\n          # Layers expect shapes to be tuples for `compute_output_shape`.\n          layer_input_shapes = tf_utils.convert_shapes(\n              layer_input_shapes, to_tuples=True)\n          layer_output_shapes = layer.compute_output_shape(layer_input_shapes)\n          # Convert back to TensorShapes.\n          layer_output_shapes = tf_utils.convert_shapes(\n              layer_output_shapes, to_tuples=False)\n\n          node_index = layer._inbound_nodes.index(node)  # pylint: disable=protected-access\n          for j, shape in enumerate(nest.flatten(layer_output_shapes)):\n            shape_key = layer.name + '_%s_%s' % (node_index, j)\n            layers_to_output_shapes[shape_key] = shape\n\n      # Read final output shapes from layers_to_output_shapes.\n      output_shapes = []\n      for i in range(len(self._output_layers)):\n        layer, node_index, tensor_index = self._output_coordinates[i]\n        shape_key = layer.name + '_%s_%s' % (node_index, tensor_index)\n        output_shapes.append(layers_to_output_shapes[shape_key])\n      output_shapes = nest.pack_sequence_as(self._nested_outputs, output_shapes)\n      # Store in cache.\n      self._output_shape_cache[cache_key] = output_shapes\n\n    # Return shapes as TensorShapes.\n    return output_shapes\n\n  def _init_set_name(self, name, zero_based=True):\n    if not name:\n      cls_name = self.__class__.__name__\n      if self.__class__ == Functional:\n        # Hide the functional class name from user, since its not a public\n        # visible class. Use \"Model\" instead,\n        cls_name = 'Model'\n      self._name = backend.unique_object_name(\n          generic_utils.to_snake_case(cls_name),\n          zero_based=zero_based)\n    else:\n      self._name = name\n\n  def _run_internal_graph(self, inputs, training=None, mask=None):\n    \"\"\"Computes output tensors for new inputs.\n\n    # Note:\n        - Can be run on non-Keras tensors.\n\n    Args:\n        inputs: Tensor or nested structure of Tensors.\n        training: Boolean learning phase.\n        mask: (Optional) Tensor or nested structure of Tensors.\n\n    Returns:\n        output_tensors\n    \"\"\"\n    inputs = self._flatten_to_reference_inputs(inputs)\n    if mask is None:\n      masks = [None] * len(inputs)\n    else:\n      masks = self._flatten_to_reference_inputs(mask)\n    for input_t, mask in zip(inputs, masks):\n      input_t._keras_mask = mask\n\n    # Dictionary mapping reference tensors to computed tensors.\n    tensor_dict = {}\n    tensor_usage_count = self._tensor_usage_count\n    for x, y in zip(self.inputs, inputs):\n      y = self._conform_to_reference_input(y, ref_input=x)\n      x_id = str(id(x))\n      tensor_dict[x_id] = [y] * tensor_usage_count[x_id]\n\n    nodes_by_depth = self._nodes_by_depth\n    depth_keys = list(nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n\n    for depth in depth_keys:\n      nodes = nodes_by_depth[depth]\n      for node in nodes:\n        if node.is_input:\n          continue  # Input tensors already exist.\n\n        if any(t_id not in tensor_dict for t_id in node.flat_input_ids):\n          continue  # Node is not computable, try skipping.\n\n        args, kwargs = node.map_arguments(tensor_dict)\n        outputs = node.layer(*args, **kwargs)\n\n        # Update tensor_dict.\n        for x_id, y in zip(node.flat_output_ids, nest.flatten(outputs)):\n          tensor_dict[x_id] = [y] * tensor_usage_count[x_id]\n\n    output_tensors = []\n    for x in self.outputs:\n      x_id = str(id(x))\n      assert x_id in tensor_dict, 'Could not compute output ' + str(x)\n      output_tensors.append(tensor_dict[x_id].pop())\n\n    return nest.pack_sequence_as(self._nested_outputs, output_tensors)\n\n  def _flatten_to_reference_inputs(self, tensors):\n    \"\"\"Maps `tensors` to their respective `keras.Input`.\"\"\"\n    if self._enable_dict_to_input_mapping and isinstance(tensors, dict):\n      ref_inputs = self._nested_inputs\n      if not nest.is_nested(ref_inputs):\n        ref_inputs = [self._nested_inputs]\n      if isinstance(ref_inputs, dict):\n        # In the case that the graph is constructed with dict input tensors,\n        # We will use the original dict key to map with the keys in the input\n        # data. Note that the model.inputs is using nest.flatten to process the\n        # input tensors, which means the dict input tensors are ordered by their\n        # keys.\n        ref_input_names = sorted(ref_inputs.keys())\n      else:\n        ref_input_names = [inp._keras_history.layer.name for inp in ref_inputs]\n\n      # Raise an warning if there are more input data comparing to input tensor\n      if len(tensors) > len(ref_input_names):\n        warnings.warn(\n            'Input dict contained keys {} which did not match any model input. '\n            'They will be ignored by the model.'.format(\n                [n for n in tensors.keys() if n not in ref_input_names])\n            )\n\n      try:\n        # Flatten in the order `Input`s were passed during Model construction.\n        return [tensors[n] for n in ref_input_names]\n      except KeyError:\n        # TODO(b/151582614)\n        return nest.flatten(tensors)\n\n    # Otherwise both self.inputs and tensors will already be in same order.\n    return nest.flatten(tensors)\n\n  def _conform_to_reference_input(self, tensor, ref_input):\n    \"\"\"Set shape and dtype based on `keras.Input`s.\"\"\"\n    if isinstance(tensor, ops.Tensor):\n      # Allow (None,) and (None, 1) Tensors to be passed interchangeably. Use\n      # the shape specified by the `keras.Input`.\n      t_shape = tensor.shape\n      t_rank = t_shape.rank\n      ref_shape = ref_input.shape\n      ref_rank = ref_shape.rank\n      keras_history = getattr(tensor, '_keras_history', None)\n      if t_rank is not None and ref_rank is not None:\n        # Should squeeze last dimension.\n        # True if tensor is (BATCH, ..., 1) and reference is (BATCH, ...).\n        if (t_rank == ref_rank + 1 and t_shape[-1] == 1):\n          tensor = array_ops.squeeze_v2(tensor, axis=-1)\n        # Should expand last_dimension.\n        # True if tensor is (BATCH, ...) and reference is (BATCH, ..., 1).\n        elif (t_rank == ref_rank - 1 and ref_shape[-1] == 1):\n          tensor = array_ops.expand_dims_v2(tensor, axis=-1)\n      if keras_history is not None:  # Restore keras history.\n        tensor._keras_history = keras_history\n\n      # Add shape hints to Tensors that may have None shape dims but have shapes\n      # defined by the `keras.Input` (not applicable in eager mode).\n      if not context.executing_eagerly():\n        try:\n          tensor.set_shape(tensor.shape.merge_with(ref_input.shape))\n        except ValueError:\n          logging.warning(\n              'Model was constructed with shape {} for input {}, but it was '\n              'called on an input with incompatible shape {}.'.format(\n                  ref_input.shape, ref_input, tensor.shape))\n\n      # Dtype casting.\n      tensor = math_ops.cast(tensor, dtype=ref_input.dtype)\n    elif tf_utils.is_extension_type(tensor):\n      # Dtype casting (If the extension type has a non-variant dtype and\n      # supports being cast)\n      ref_input_dtype = getattr(ref_input, 'dtype', None)\n      if ref_input_dtype is not None and ref_input_dtype != dtypes.variant:\n        tensor = math_ops.cast(tensor, dtype=ref_input_dtype)\n\n    return tensor\n\n  def get_config(self):\n    return copy.deepcopy(get_network_config(self))\n\n  @classmethod\n  def from_config(cls, config, custom_objects=None):\n    \"\"\"Instantiates a Model from its config (output of `get_config()`).\n\n    Args:\n        config: Model config dictionary.\n        custom_objects: Optional dictionary mapping names\n            (strings) to custom classes or functions to be\n            considered during deserialization.\n\n    Returns:\n        A model instance.\n\n    Raises:\n        ValueError: In case of improperly formatted config dict.\n    \"\"\"\n    with generic_utils.SharedObjectLoadingScope():\n      input_tensors, output_tensors, created_layers = reconstruct_from_config(\n          config, custom_objects)\n      model = cls(inputs=input_tensors, outputs=output_tensors,\n                  name=config.get('name'))\n      connect_ancillary_layers(model, created_layers)\n      return model\n\n  def _validate_graph_inputs_and_outputs(self):\n    \"\"\"Validates the inputs and outputs of a Graph Network.\"\"\"\n    # Check for redundancy in inputs.\n    if len({id(i) for i in self.inputs}) != len(self.inputs):\n      raise ValueError('The list of inputs passed to the model '\n                       'is redundant. '\n                       'All inputs should only appear once.'\n                       ' Found: ' + str(self.inputs))\n\n    for x in self.inputs:\n      # Check that x has appropriate `_keras_history` metadata.\n      if not hasattr(x, '_keras_history'):\n        cls_name = self.__class__.__name__\n        raise ValueError('Input tensors to a ' + cls_name + ' ' +\n                         'must come from `tf.keras.Input`. '\n                         'Received: ' + str(x) +\n                         ' (missing previous layer metadata).')\n      # Check that x is an input tensor.\n      # pylint: disable=protected-access\n      layer = x._keras_history.layer\n      if len(layer._inbound_nodes) > 1 or (\n          layer._inbound_nodes and not layer._inbound_nodes[0].is_input):\n        cls_name = self.__class__.__name__\n        logging.warning(cls_name + ' model inputs must come from '\n                        '`tf.keras.Input` (thus holding past layer metadata), '\n                        'they cannot be the output of '\n                        'a previous non-Input layer. '\n                        'Here, a tensor specified as '\n                        'input to \"' + self.name + '\" was not an Input tensor, '\n                        'it was generated by layer ' + layer.name + '.\\n'\n                        'Note that input tensors are '\n                        'instantiated via `tensor = tf.keras.Input(shape)`.\\n'\n                        'The tensor that caused the issue was: ' + str(x.name))\n\n    # Check compatibility of batch sizes of Input Layers.\n    input_batch_sizes = [\n        training_utils.get_static_batch_size(x._keras_history.layer)\n        for x in self.inputs\n    ]\n    consistent_batch_size = None\n    for batch_size in input_batch_sizes:\n      if batch_size is not None:\n        if (consistent_batch_size is not None and\n            batch_size != consistent_batch_size):\n          raise ValueError('The specified batch sizes of the Input Layers'\n                           ' are incompatible. Found batch sizes: {}'.format(\n                               input_batch_sizes))\n        consistent_batch_size = batch_size\n\n    for x in self.outputs:\n      if not hasattr(x, '_keras_history'):\n        cls_name = self.__class__.__name__\n        raise ValueError('Output tensors of a ' + cls_name + ' model must be '\n                         'the output of a TensorFlow `Layer` '\n                         '(thus holding past layer metadata). Found: ' + str(x))\n\n  def _insert_layers(self, layers, relevant_nodes=None):\n    \"\"\"Inserts Layers into the Network after Network creation.\n\n    This is only valid for Keras Graph Networks.  Layers added via this function\n    will be included in the `call` computation and `get_config` of this Network.\n    They will not be added to the Network's outputs.\n\n\n    Args:\n      layers: Arbitrary nested structure of Layers. Layers must be reachable\n        from one or more of the `keras.Input` Tensors that correspond to this\n        Network's inputs.\n      relevant_nodes: Nodes from the Layers that should be considered part of\n        this Network. If `None`, all Nodes will be considered part of this\n        Network.\n\n    Raises:\n      ValueError: If the layers depend on `Input`s not found in this Model.\n    \"\"\"\n    layers = nest.flatten(layers)\n    tf_utils.assert_no_legacy_layers(layers)\n    node_to_depth = {}\n    for depth, nodes in self._nodes_by_depth.items():\n      node_to_depth.update({node: depth for node in nodes})\n    # The nodes of these Layers that are relevant to this Network. If not\n    # provided, assume all Nodes are relevant\n    if not relevant_nodes:\n      relevant_nodes = nest.flatten([layer._inbound_nodes for layer in layers])\n    network_nodes = set(relevant_nodes + list(node_to_depth.keys()))\n\n    def _get_min_depth(node):\n      \"\"\"Gets the minimum depth at which node can be computed.\"\"\"\n      min_depth = 0\n      for layer, node_id, _, _ in node.iterate_inbound():\n        inbound_node = layer._inbound_nodes[node_id]\n        if inbound_node in node_to_depth:\n          min_depth = min(min_depth, node_to_depth[inbound_node])\n        elif inbound_node not in network_nodes:\n          continue\n        else:\n          # Previous relevant nodes haven't been processed yet.\n          return None\n      # New node is one shallower than its shallowest input.\n      return min_depth - 1\n\n    # Insert nodes into `_nodes_by_depth` and other node attrs.\n    unprocessed_nodes = copy.copy(relevant_nodes)\n    i = 0\n    while unprocessed_nodes:\n      i += 1\n      # Do a sanity check. This can occur if `Input`s from outside this Model\n      # are being relied on.\n      if i > 10000:\n        raise ValueError('Layers could not be added due to missing '\n                         'dependencies.')\n\n      node = unprocessed_nodes.pop(0)\n      depth = _get_min_depth(node)\n      if depth is None:  # Defer until inbound nodes are processed.\n        unprocessed_nodes.append(node)\n        continue\n      node_key = _make_node_key(node.layer.name,\n                                node.layer._inbound_nodes.index(node))\n      if node_key not in self._network_nodes:\n        node_to_depth[node] = depth\n        self._network_nodes.add(node_key)\n        self._nodes_by_depth[depth].append(node)\n\n    # Insert layers and update other layer attrs.\n    layer_set = set(self._self_tracked_trackables)\n    deferred_layers = []\n    for layer in layers:\n      if layer not in layer_set:\n        self._self_tracked_trackables.append(layer)\n        deferred_layers.append(layer)\n        self._layer_call_argspecs[layer] = tf_inspect.getfullargspec(layer.call)\n        layer_set.add(layer)\n    self._handle_deferred_layer_dependencies(deferred_layers)\n\n    self._compute_tensor_usage_count()\n\n  def _compute_tensor_usage_count(self):\n    \"\"\"Compute the #. of tensor usages for all the output tensors of layers.\n\n    The computed tensor usage count is saved as `self._tensor_usage_count`. This\n    is later used for saving memory in eager computation by releasing\n    no-longer-needed tensors as early as possible.\n    \"\"\"\n    tensor_usage_count = collections.Counter()\n    available_tensors = set(str(id(tensor)) for tensor in self.inputs)\n\n    depth_keys = list(self._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    depth_keys = depth_keys[1:]\n\n    for depth in depth_keys:\n      for node in self._nodes_by_depth[depth]:\n        input_tensors = {\n            str(id(tensor)) for tensor in nest.flatten(node.keras_inputs)\n        }\n        if input_tensors.issubset(available_tensors):\n          for tensor in nest.flatten(node.keras_inputs):\n            tensor_usage_count[str(id(tensor))] += 1\n\n          for output_tensor in nest.flatten(node.outputs):\n            available_tensors.add(str(id(output_tensor)))\n\n    for tensor in self.outputs:\n      tensor_usage_count[str(id(tensor))] += 1\n\n    self._tensor_usage_count = tensor_usage_count\n\n  def _assert_weights_created(self):\n    # Override the implementation in Model.\n    # The Functional model should always have weight created already.\n    return\n\n  def _graph_network_add_loss(self, symbolic_loss):\n    new_nodes, new_layers = _map_subgraph_network(self.inputs, [symbolic_loss])\n    # Losses must be keyed on inputs no matter what in order to be supported in\n    # DistributionStrategy.\n    add_loss_layer = base_layer.AddLoss(\n        unconditional=False, dtype=symbolic_loss.dtype)\n    add_loss_layer(symbolic_loss)\n    new_nodes.extend(add_loss_layer.inbound_nodes)\n    new_layers.append(add_loss_layer)\n    self._insert_layers(new_layers, new_nodes)\n\n  def _graph_network_add_metric(self, value, aggregation, name):\n    new_nodes, new_layers = _map_subgraph_network(self.inputs, [value])\n    add_metric_layer = base_layer.AddMetric(\n        aggregation, name, dtype=value.dtype)\n    add_metric_layer(value)\n    new_nodes.extend(add_metric_layer.inbound_nodes)\n    new_layers.append(add_metric_layer)\n    self._insert_layers(new_layers, new_nodes)\n\n  @property\n  def _trackable_saved_model_saver(self):\n    return network_serialization.NetworkSavedModelSaver(self)\n\n  def _get_save_spec(self, dynamic_batch=True):\n    if getattr(self, '_has_explicit_input_shape', True):\n      # Functional models and Sequential models that have an explicit input\n      # shape should use the batch size set by the input layer.\n      dynamic_batch = False\n    return super(Functional, self)._get_save_spec(dynamic_batch)\n\n\ndef _make_node_key(layer_name, node_index):\n  return layer_name + '_ib-' + str(node_index)\n\n\ndef _map_graph_network(inputs, outputs):\n  \"\"\"Validates a network's topology and gather its layers and nodes.\n\n  Args:\n    inputs: List of input tensors.\n    outputs: List of outputs tensors.\n\n  Returns:\n    A tuple `(nodes, nodes_by_depth, layers, layers_by_depth)`.\n    - nodes: list of Node instances.\n    - nodes_by_depth: dict mapping ints (depth) to lists of node instances.\n    - layers: list of Layer instances.\n    - layers_by_depth: dict mapping ints (depth) to lists of layer instances.\n\n  Raises:\n    ValueError: In case the network is not valid (e.g. disconnected graph).\n  \"\"\"\n  # \"depth\" is number of layers between output Node and the Node.\n  # Nodes are ordered from inputs -> outputs.\n  nodes_in_decreasing_depth, layer_indices = _build_map(outputs)\n  network_nodes = {\n      _make_node_key(node.layer.name, node.layer._inbound_nodes.index(node))\n      for node in nodes_in_decreasing_depth\n  }\n\n  nodes_depths = {}  # dict {node: depth value}\n  layers_depths = {}  # dict {layer: depth value}\n\n  for node in reversed(nodes_in_decreasing_depth):\n    # If the depth is not set, the node has no outbound nodes (depth 0).\n    depth = nodes_depths.setdefault(node, 0)\n\n    # Update the depth of the corresponding layer\n    previous_depth = layers_depths.get(node.layer, 0)\n    # If we've seen this layer before at a higher depth,\n    # we should use that depth instead of the node depth.\n    # This is necessary for shared layers that have inputs at different\n    # depth levels in the graph.\n    depth = max(depth, previous_depth)\n    layers_depths[node.layer] = depth\n    nodes_depths[node] = depth\n\n    # Update the depth of inbound nodes.\n    # The \"depth\" of a node is the max of the depths\n    # of all nodes it is connected to + 1.\n    for node_dep in node.parent_nodes:\n      previous_depth = nodes_depths.get(node_dep, 0)\n      nodes_depths[node_dep] = max(depth + 1, previous_depth)\n\n  # Handle inputs that are not connected to outputs.\n  # We do not error out here because the inputs may be used to compute losses\n  # and metrics.\n  for input_t in inputs:\n    input_layer = input_t._keras_history[0]\n    if input_layer not in layers_depths:\n      layers_depths[input_layer] = 0\n      layer_indices[input_layer] = -1\n      nodes_depths[input_layer._inbound_nodes[0]] = 0\n      network_nodes.add(_make_node_key(input_layer.name, 0))\n\n  # Build a dict {depth: list of nodes with this depth}\n  nodes_by_depth = collections.defaultdict(list)\n  for node, depth in nodes_depths.items():\n    nodes_by_depth[depth].append(node)\n\n  # Build a dict {depth: list of layers with this depth}\n  layers_by_depth = collections.defaultdict(list)\n  for layer, depth in layers_depths.items():\n    layers_by_depth[depth].append(layer)\n\n  # Get sorted list of layer depths.\n  depth_keys = list(layers_by_depth.keys())\n  depth_keys.sort(reverse=True)\n\n  # Set self.layers ordered by depth.\n  layers = []\n  for depth in depth_keys:\n    layers_for_depth = layers_by_depth[depth]\n    # Network.layers needs to have a deterministic order:\n    # here we order them by traversal order.\n    layers_for_depth.sort(key=lambda x: layer_indices[x])\n    layers.extend(layers_for_depth)\n\n  # Get sorted list of node depths.\n  depth_keys = list(nodes_by_depth.keys())\n  depth_keys.sort(reverse=True)\n\n  # Check that all tensors required are computable.\n  # computable_tensors: all tensors in the graph\n  # that can be computed from the inputs provided.\n  computable_tensors = set()\n  for x in inputs:\n    computable_tensors.add(id(x))\n\n  layers_with_complete_input = []  # To provide a better error msg.\n  for depth in depth_keys:\n    for node in nodes_by_depth[depth]:\n      layer = node.layer\n      if layer and not node.is_input:\n        for x in nest.flatten(node.keras_inputs):\n          if id(x) not in computable_tensors:\n            raise ValueError('Graph disconnected: '\n                             'cannot obtain value for tensor ' + str(x) +\n                             ' at layer \"' + layer.name + '\". '\n                             'The following previous layers '\n                             'were accessed without issue: ' +\n                             str(layers_with_complete_input))\n        for x in nest.flatten(node.outputs):\n          computable_tensors.add(id(x))\n        layers_with_complete_input.append(layer.name)\n\n  # Ensure name unicity, which will be crucial for serialization\n  # (since serialized nodes refer to layers by their name).\n  all_names = [layer.name for layer in layers]\n  for name in all_names:\n    if all_names.count(name) != 1:\n      raise ValueError('The name \"' + name + '\" is used ' +\n                       str(all_names.count(name)) + ' times in the model. '\n                       'All layer names should be unique.')\n  return network_nodes, nodes_by_depth, layers, layers_by_depth\n\n\ndef _build_map(outputs):\n  \"\"\"This method topologically sorts nodes in order from inputs to outputs.\n\n  It uses a depth-first search to topologically sort nodes that appear in the\n  _keras_history connectivity metadata of `outputs`.\n\n  Args:\n    outputs: the output tensors whose _keras_history metadata should be walked.\n    This may be an arbitrary nested structure.\n\n  Returns:\n    A tuple like (ordered_nodes, layer_to_first_traversal_index)\n    ordered_nodes: list of nodes appearing in the keras history, topologically\n      sorted from original inputs to the `outputs`.\n      (If outputs have different sets of ancestors, the inputs to one output\n      may appear after a different output).\n    layer_to_first_traversal_index:\n      A dict mapping layer to the traversal index in the DFS where it is\n      seen. Note: if a layer is shared by several nodes, the dict will only\n      store the index corresponding to the *first* time the layer seen.\n  \"\"\"\n  finished_nodes = set()\n  nodes_in_progress = set()\n  nodes_in_decreasing_depth = []  # nodes from inputs -> outputs.\n  layer_indices = {}  # layer -> in traversal order.\n  for output in nest.flatten(outputs):\n    _build_map_helper(output, finished_nodes, nodes_in_progress,\n                      nodes_in_decreasing_depth, layer_indices)\n  return nodes_in_decreasing_depth, layer_indices\n\n\ndef _build_map_helper(tensor, finished_nodes, nodes_in_progress,\n                      nodes_in_decreasing_depth, layer_indices):\n  \"\"\"Recursive helper for `_build_map`.\"\"\"\n  layer, node_index, _ = tensor._keras_history  # pylint: disable=protected-access\n  node = layer._inbound_nodes[node_index]  # pylint: disable=protected-access\n\n  # Don't repeat work for shared subgraphs\n  if node in finished_nodes:\n    return\n\n  # Prevent cycles.\n  if node in nodes_in_progress:\n    raise ValueError('The tensor ' + str(tensor) + ' at layer \"' + layer.name +\n                     '\" is part of a cycle.')\n\n  # Store the traversal order for layer sorting.\n  if layer not in layer_indices:\n    layer_indices[layer] = len(layer_indices)\n\n  # Propagate to all previous tensors connected to this node.\n  nodes_in_progress.add(node)\n  if not node.is_input:\n    for tensor in node.keras_inputs:\n      _build_map_helper(tensor, finished_nodes, nodes_in_progress,\n                        nodes_in_decreasing_depth, layer_indices)\n\n  finished_nodes.add(node)\n  nodes_in_progress.remove(node)\n  nodes_in_decreasing_depth.append(node)\n\n\ndef _map_subgraph_network(inputs, outputs):\n  \"\"\"Returns the nodes and layers in the topology from `inputs` to `outputs`.\n\n  Args:\n    inputs: List of input tensors.\n    outputs: List of output tensors.\n\n  Returns:\n    A tuple of List{Node] and List[Layer].\n  \"\"\"\n  if not ops.executing_eagerly_outside_functions():\n    base_layer_utils.create_keras_history(outputs)\n  # Keep only nodes and layers in the topology between inputs and outputs.\n  _, nodes_by_depth, layers, _ = _map_graph_network(inputs, outputs)\n  return nest.flatten([nodes for nodes in nodes_by_depth.values()]), layers\n\n\ndef _should_skip_first_node(layer):\n  \"\"\"Returns True if the first layer node should not be saved or loaded.\"\"\"\n  # Networks that are constructed with an Input layer/shape start with a\n  # pre-existing node linking their input to output. This node is excluded from\n  # the network config.\n  if layer._self_tracked_trackables:\n    return (isinstance(layer, Functional) and\n            # Filter out Sequential models without an input shape.\n            isinstance(layer._self_tracked_trackables[0],\n                       input_layer_module.InputLayer))\n  else:\n    return isinstance(layer, Functional)\n\n\ndef connect_ancillary_layers(model, created_layers):\n  \"\"\"Adds layers that are not connected to the outputs to the model.\"\"\"\n  # Layers not connected to outputs, such as those added in `add_loss`.\n  ancillary_layers = [\n      layer for layer in created_layers.values() if layer not in model.layers\n  ]\n  if ancillary_layers:\n    relevant_nodes = nest.flatten([\n        layer.inbound_nodes[1:]\n        if _should_skip_first_node(layer) else layer.inbound_nodes\n        for layer in created_layers.values()\n    ])\n    model._insert_layers(ancillary_layers, relevant_nodes)\n  return model\n\n\ndef reconstruct_from_config(config, custom_objects=None, created_layers=None):\n  \"\"\"Reconstructs graph from config object.\n\n  Args:\n    config: Dictionary returned from Network.get_config()\n    custom_objects: Optional dictionary mapping names (strings) to custom\n      classes or functions to be considered during deserialization.\n    created_layers: Optional dictionary mapping names to Layer objects. Any\n      layer not in this dictionary will be created and added to the dict.\n      This function will add new nodes to all layers (excluding InputLayers),\n      instead of re-using pre-existing nodes in the layers.\n\n  Returns:\n    Tuple of (input tensors, output tensors, dictionary of created layers)\n  \"\"\"\n  # Layer instances created during the graph reconstruction process.\n  created_layers = created_layers or collections.OrderedDict()\n\n  # Maps input data (tuple of inbound layer name, node index) from the config\n  # to node indices in the newly generated model. The node indices may be\n  # different if the layers have already been called previously.\n  node_index_map = {}\n  node_count_by_layer = {}\n\n  # Dictionary mapping layer instances to\n  # node data that specifies a layer call.\n  # It acts as a queue that maintains any unprocessed\n  # layer call until it becomes possible to process it\n  # (i.e. until the input tensors to the call all exist).\n  unprocessed_nodes = {}\n\n  def add_unprocessed_node(layer, node_data):\n    if layer not in unprocessed_nodes:\n      unprocessed_nodes[layer] = [node_data]\n    else:\n      unprocessed_nodes[layer].append(node_data)\n\n  def get_node_index(layer, config_node_index):\n    \"\"\"Returns node index in layer (might differ from config_node_index).\"\"\"\n    if isinstance(layer, input_layer_module.InputLayer):\n      return 0\n    return node_index_map.get((layer.name, config_node_index), None)\n\n  def _deserialize_keras_tensors(kwargs, layer_map):\n    \"\"\"Deserializes Keras Tensors passed to `call`..\"\"\"\n\n    def _deserialize_keras_tensor(t):\n      \"\"\"Deserializes a single Keras Tensor passed to `call`.\"\"\"\n      if isinstance(t, tf_utils.ListWrapper):\n        t = t.as_list()\n        layer_name = t[0]\n        node_index = t[1]\n        tensor_index = t[2]\n\n        layer = layer_map[layer_name]\n        new_node_index = get_node_index(layer, node_index)\n        if new_node_index is None:\n          # The inbound node may not have been processed yet,\n          # (This can happen e.g. if it depends on a different set\n          # of inputs than those that have been processed already).\n          # raise an IndexError so that the current node puts itself\n          # back on the unprocessed queue.\n          # Caution: This may lead to infinite loops for malformed\n          # network configurations! (or when there is a bug in\n          # the network config loading code).\n          raise IndexError\n        node = layer._inbound_nodes[new_node_index]\n        return nest.flatten(node.outputs)[tensor_index]\n      return t\n\n    kwargs = tf_utils.convert_inner_node_data(kwargs, wrap=True)\n    return nest.map_structure(_deserialize_keras_tensor, kwargs)\n\n  def process_node(layer, node_data):\n    \"\"\"Deserialize a node.\n\n    Args:\n        layer: layer instance.\n        node_data: Nested structure of `ListWrapper`.\n\n    Raises:\n        ValueError: In case of improperly formatted `node_data`.\n    \"\"\"\n    input_tensors = []\n    for input_data in nest.flatten(node_data):\n      input_data = input_data.as_list()\n      inbound_layer_name = input_data[0]\n      inbound_node_index = input_data[1]\n      inbound_tensor_index = input_data[2]\n      if len(input_data) == 3:\n        kwargs = {}\n      elif len(input_data) == 4:\n        kwargs = input_data[3]\n        try:\n          kwargs = _deserialize_keras_tensors(kwargs, created_layers)\n        except IndexError:\n          # Happens if keras tensors in kwargs are still unprocessed\n          add_unprocessed_node(layer, node_data)\n          return\n      else:\n        raise ValueError('Improperly formatted model config.')\n\n      if inbound_layer_name != node_module._CONSTANT_VALUE:\n        inbound_layer = created_layers[inbound_layer_name]\n        inbound_node_index = get_node_index(inbound_layer, inbound_node_index)\n\n        if inbound_node_index is None:\n          add_unprocessed_node(layer, node_data)\n          return\n        inbound_node = inbound_layer._inbound_nodes[inbound_node_index]\n        input_tensors.append(\n            nest.flatten(inbound_node.outputs)[inbound_tensor_index])\n      else:\n        # We received a constant w/ no Keras history attached\n        input_tensors.append(inbound_tensor_index)\n    input_tensors = nest.pack_sequence_as(node_data, input_tensors)\n    # Call layer on its inputs, thus creating the node\n    # and building the layer if needed.\n    if input_tensors is not None:\n      if not layer._preserve_input_structure_in_config:\n        input_tensors = (\n            base_layer_utils.unnest_if_single_tensor(input_tensors))\n      output_tensors = layer(input_tensors, **kwargs)\n\n      # Update node index map.\n      output_index = nest.flatten(output_tensors)[0]._keras_history.node_index\n      node_index_map[(layer.name, node_count_by_layer[layer])] = output_index\n      node_count_by_layer[layer] += 1\n\n  def process_layer(layer_data):\n    \"\"\"Deserializes a layer, then call it on appropriate inputs.\n\n    Args:\n        layer_data: layer config dict.\n\n    Raises:\n        ValueError: In case of improperly formatted `layer_data` dict.\n    \"\"\"\n    layer_name = layer_data['name']\n\n    if layer_name in created_layers:\n      layer = created_layers[layer_name]\n    else:\n      # Instantiate layer.\n      from tensorflow.python.keras.layers import deserialize as deserialize_layer  # pylint: disable=g-import-not-at-top\n\n      layer = deserialize_layer(layer_data, custom_objects=custom_objects)\n      created_layers[layer_name] = layer\n\n    node_count_by_layer[layer] = int(_should_skip_first_node(layer))\n\n    # Gather layer inputs and convert to `ListWrapper` objects.\n    inbound_nodes_data = layer_data['inbound_nodes']\n    inbound_nodes_data = tf_utils.convert_inner_node_data(\n        inbound_nodes_data, wrap=True)\n    for node_data in inbound_nodes_data:\n      # We don't process nodes (i.e. make layer calls)\n      # on the fly because the inbound node may not yet exist,\n      # in case of layer shared at different topological depths\n      # (e.g. a model such as A(B(A(B(x)))))\n      add_unprocessed_node(layer, node_data)\n\n  # First, we create all layers and enqueue nodes to be processed\n  for layer_data in config['layers']:\n    process_layer(layer_data)\n  # Then we process nodes in order of layer depth.\n  # Nodes that cannot yet be processed (if the inbound node\n  # does not yet exist) are re-enqueued, and the process\n  # is repeated until all nodes are processed.\n  while unprocessed_nodes:\n    for layer_data in config['layers']:\n      layer = created_layers[layer_data['name']]\n      if layer in unprocessed_nodes:\n        for node_data in unprocessed_nodes.pop(layer):\n          process_node(layer, node_data)\n\n  input_tensors = []\n  output_tensors = []\n\n  input_layers = tf_utils.convert_inner_node_data(\n      config['input_layers'], wrap=True)\n  for layer_data in nest.flatten(input_layers):\n    layer_name, node_index, tensor_index = layer_data.as_list()\n    assert layer_name in created_layers\n    layer = created_layers[layer_name]\n    node_index = get_node_index(layer, node_index)\n    layer_output_tensors = layer._inbound_nodes[node_index].output_tensors\n    input_tensors.append(nest.flatten(layer_output_tensors)[tensor_index])\n\n  output_layers = tf_utils.convert_inner_node_data(\n      config['output_layers'], wrap=True)\n  for layer_data in nest.flatten(output_layers):\n    layer_name, node_index, tensor_index = layer_data.as_list()\n    assert layer_name in created_layers\n    layer = created_layers[layer_name]\n    node_index = get_node_index(layer, node_index)\n    layer_output_tensors = layer._inbound_nodes[node_index].output_tensors\n    output_tensors.append(nest.flatten(layer_output_tensors)[tensor_index])\n\n  input_tensors = nest.pack_sequence_as(input_layers, input_tensors)\n  output_tensors = nest.pack_sequence_as(output_layers, output_tensors)\n  return input_tensors, output_tensors, created_layers\n\n\ndef get_network_config(network, serialize_layer_fn=None):\n  \"\"\"Builds the config, which consists of the node graph and serialized layers.\n\n  Args:\n    network: A Network object.\n    serialize_layer_fn: Function used to serialize layers.\n\n  Returns:\n    Config dictionary.\n  \"\"\"\n  serialize_layer_fn = (\n      serialize_layer_fn or generic_utils.serialize_keras_object)\n  config = {\n      'name': network.name,\n  }\n  node_conversion_map = {}\n  for layer in network.layers:\n    kept_nodes = 1 if _should_skip_first_node(layer) else 0\n    for original_node_index, node in enumerate(layer._inbound_nodes):\n      node_key = _make_node_key(layer.name, original_node_index)\n      if node_key in network._network_nodes:\n        node_conversion_map[node_key] = kept_nodes\n        kept_nodes += 1\n  layer_configs = []\n\n  with generic_utils.SharedObjectSavingScope():\n    for layer in network.layers:  # From the earliest layers on.\n      filtered_inbound_nodes = []\n      for original_node_index, node in enumerate(layer._inbound_nodes):\n        node_key = _make_node_key(layer.name, original_node_index)\n        if node_key in network._network_nodes and not node.is_input:\n          # The node is relevant to the model:\n          # add to filtered_inbound_nodes.\n          node_data = node.serialize(_make_node_key, node_conversion_map)\n          filtered_inbound_nodes.append(node_data)\n\n      layer_config = serialize_layer_fn(layer)\n      layer_config['name'] = layer.name\n      layer_config['inbound_nodes'] = filtered_inbound_nodes\n      layer_configs.append(layer_config)\n    config['layers'] = layer_configs\n\n  # Gather info about inputs and outputs.\n  model_inputs = []\n  for i in range(len(network._input_layers)):\n    layer, node_index, tensor_index = network._input_coordinates[i]\n    node_key = _make_node_key(layer.name, node_index)\n    if node_key not in network._network_nodes:\n      continue\n    new_node_index = node_conversion_map[node_key]\n    model_inputs.append(\n        tf_utils.ListWrapper([layer.name, new_node_index, tensor_index]))\n  model_inputs = nest.pack_sequence_as(network._nested_inputs, model_inputs)\n  # Preserve external Keras compat for Models with single input.\n  if not nest.is_nested(model_inputs):\n    model_inputs = [model_inputs]\n  model_inputs = tf_utils.convert_inner_node_data(model_inputs)\n  config['input_layers'] = model_inputs\n\n  model_outputs = []\n  for i in range(len(network._output_layers)):\n    layer, node_index, tensor_index = network._output_coordinates[i]\n    node_key = _make_node_key(layer.name, node_index)\n    if node_key not in network._network_nodes:\n      continue\n    new_node_index = node_conversion_map[node_key]\n    model_outputs.append(\n        tf_utils.ListWrapper([layer.name, new_node_index, tensor_index]))\n  model_outputs = nest.pack_sequence_as(network._nested_outputs, model_outputs)\n  # Preserve external Keras compat for Models with single output.\n  if not nest.is_nested(model_outputs):\n    model_outputs = [model_outputs]\n  model_outputs = tf_utils.convert_inner_node_data(model_outputs)\n  config['output_layers'] = model_outputs\n  return config\n\n\ndef shape_with_no_batch_size(x):\n  if x.shape.rank is None:\n    return None\n  shape = x.shape.as_list()\n  if shape:\n    shape[0] = None\n  return shape\n\n\nclass ModuleWrapper(base_layer.Layer):\n  \"\"\"Wrapper for `tf.Module`s to support the Functional and Sequential API.\"\"\"\n\n  def __init__(self, module, method_name=None, **kwargs):\n    \"\"\"Initializes the wrapper Layer for this module.\n\n    Args:\n      module: The `tf.Module` instance to be wrapped.\n      method_name: (Optional) str. The name of the method to use as the forward\n        pass of the module. If not set, defaults to '__call__' if defined, or\n        'call'.\n      **kwargs: Additional keywrod arguments. See `tf.keras.layers.Layer`.\n\n    Raises:\n      ValueError: If `method` is not defined on `module`.\n    \"\"\"\n    super(ModuleWrapper, self).__init__(**kwargs)\n    if method_name is None:\n      if hasattr(module, '__call__'):\n        method_name = '__call__'\n      elif hasattr(module, 'call'):\n        method_name = 'call'\n    if method_name is None or not hasattr(module, method_name):\n      raise ValueError('{} is not defined on object {}'.format(\n          method_name, module))\n\n    self._module = module\n    self._method_name = method_name\n\n    # Check if module.__call__ has a `training` arg or accepts `**kwargs`.\n    method = getattr(module, method_name)\n    method_arg_spec = tf_inspect.getfullargspec(method)\n    self._expects_training_arg = ('training' in method_arg_spec.args or\n                                  method_arg_spec.varkw is not None)\n    self._expects_mask_arg = ('mask' in method_arg_spec.args or\n                              method_arg_spec.varkw is not None)\n\n  def call(self, *args, **kwargs):\n    if 'training' in kwargs and not self._expects_training_arg:\n      kwargs.pop('training')\n    if 'mask' in kwargs and not self._expects_mask_arg:\n      kwargs.pop('mask')\n    return getattr(self._module, self._method_name)(*args, **kwargs)"