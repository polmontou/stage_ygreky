"# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for ragged_map_ops.map_fn.\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom absl.testing import parameterized\nimport numpy as np\n\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import sparse_tensor\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import math_ops as mo\nfrom tensorflow.python.ops import string_ops\nfrom tensorflow.python.ops.ragged import ragged_factory_ops\nfrom tensorflow.python.ops.ragged import ragged_functional_ops\nfrom tensorflow.python.ops.ragged import ragged_map_ops\nfrom tensorflow.python.ops.ragged import ragged_math_ops\nfrom tensorflow.python.ops.ragged import ragged_tensor\nfrom tensorflow.python.platform import googletest\n\n\n@test_util.run_all_in_graph_and_eager_modes\nclass RaggedMapOpTest(test_util.TensorFlowTestCase,\n                      parameterized.TestCase):\n\n  @parameterized.parameters([\n      # The following test sets map over a RaggedTensor and apply a\n      # transformation that returns with shape:\n      # [d1, (d2)] -> [d1]\n      dict(\n          fn=mo.reduce_mean,\n          elems=[[1, 2, 3], [4, 5], [6, 7]],\n          elems_dtype=dtypes.int32,\n          expected_output=[2, 4, 6],\n          result_dtype=dtypes.int32,\n      ),\n      dict(\n          fn=string_ops.reduce_join,\n          elems=[['foo', 'bar', 'baz'], ['a'], ['b', 'c']],\n          expected_output=[b'foobarbaz', b'a', b'bc'],\n          elems_dtype=dtypes.string,\n          result_dtype=dtypes.string,\n      ),\n      # [d1, (d2)] -> [d1, 2]\n      dict(\n          fn=lambda x: array_ops.stack([mo.reduce_mean(x), mo.reduce_sum(x)]),\n          # fn=self.stack_mean_and_sum,\n          elems=[[1, 2, 3], [4, 5], [6, 7]],\n          expected_output=[[2, 6], [4.5, 9], [6.5, 13]],\n          elems_dtype=dtypes.float32,\n          result_dtype=dtypes.float32,\n          expected_ragged_rank=0,\n      ),\n      # [d1, (d2)] -> [d1, (d2)]\n      dict(\n          fn=lambda x: x + np.int64(1),\n          elems=[[1, 2, 3], [4, 5], [6, 7]],\n          expected_output=[[2, 3, 4], [5, 6], [7, 8]],\n          elems_dtype=dtypes.int64,\n          result_dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=1),\n      ),\n      # [d1, (d2), d3] -> [d1, (d2), d3]\n      dict(\n          fn=lambda x: x + np.int64(1),\n          elems=[[[1, 2], [3, 4]], [], [[5, 6], [7, 8], [9, 0]]],\n          elems_ragged_rank=1,\n          expected_ragged_rank=1,\n          result_dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=1),\n          expected_output=[[[2, 3], [4, 5]], [], [[6, 7], [8, 9], [10, 1]]],\n      ),\n      # [d1, (d2)] -> [d1, (d2), (d3)]\n      dict(\n          fn=lambda x: ragged_tensor.RaggedTensor.from_row_starts(x, [0]),\n          elems=[[1, 2, 3], [4, 5], [6, 7]],\n          expected_output=[[[1, 2, 3]], [[4, 5]], [[6, 7]]],\n          result_dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=2),\n      ),\n      # [d1, (d2), (d3)] -> [d1, (d2), (d3)]\n      dict(\n          fn=lambda x: ragged_functional_ops.map_flat_values(mo.add, x, 1),\n          elems=[[[1, 2, 3]], [[4, 5], [6, 7]]],\n          expected_output=[[[2, 3, 4]], [[5, 6], [7, 8]]],\n          result_dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=2),\n      ),\n      # [d1, (d2), (d3)] -> [d1, (d2)]\n      dict(\n          fn=lambda x: ragged_math_ops.reduce_sum(x, axis=1),\n          elems=[[[1, 2, 3]], [[4, 5], [6, 7]]],\n          expected_output=[[6], [9, 13]],\n          result_dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=1),\n      ),\n      # [d1, (d2), (d3)] -> [d1, (d3)]\n      dict(\n          fn=lambda x: ragged_math_ops.reduce_sum(x, axis=0),\n          elems=[[[1, 2, 3]], [[4, 5], [6, 7]]],\n          expected_output=[[1, 2, 3], [10, 12]],\n          result_dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=1),\n      ),\n      # [d1, (d2), (d3)] -> [d1]\n      dict(\n          fn=ragged_math_ops.reduce_sum,\n          elems=[[[1, 2, 3]], [[4, 5], [6, 7]]],\n          expected_output=[6, 22],\n          result_dtype=dtypes.int64,\n      ),\n      # [d1] -> [d1, (d2)]\n      dict(\n          fn=mo.range,\n          elems=[4, 0, 2],\n          expected_output=[[0, 1, 2, 3], [], [0, 1]],\n          result_dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=1),\n      ),\n      # [d1] -> [d1, (d2), (d3)]\n      dict(\n          fn=lambda x: ragged_math_ops.range(mo.range(x)),\n          elems=[5, 0, 3],\n          expected_output=[[[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 3]], [],\n                           [[], [0], [0, 1]]],\n          result_dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=2),\n      ),\n      # [d1, (d2), (d3), (d4a), (d5)] ->  [d1, (d2), (d3), (d4b), (d5)]\n      dict(\n          fn=lambda x: x + np.int64(1),\n          elems=[[[[[1, 2, 3]], [[4], [5]]]], [[[[6, 7]]], [[[8], []]]]],\n          expected_output=[[[[[2, 3, 4]], [[5], [6]]]], [[[[7, 8]]], [[[9],\n                                                                       []]]]],\n          result_dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=4),\n      ),\n      # [d1] -> [d1, (d2), (d3)]\n      dict(\n          fn=ragged_math_ops.range,\n          elems=np.array([1, 2, 3], np.int64),\n          expected_output=[[[0]], [[0, 1]], [[0, 1, 2]]],\n          result_dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=2)),\n      # [0] -> [0, (d2), (d3)]  (github issue #36232)\n      dict(\n          fn=ragged_math_ops.range,\n          elems=np.zeros([0], np.int64),\n          expected_output=[],\n          expected_ragged_rank=2,\n          result_dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=2)),\n  ])\n\n  def testRaggedMap(\n      self,\n      fn,\n      elems,\n      expected_output,\n      expected_ragged_rank=None,\n      result_ragged_rank=None,\n      elems_ragged_rank=None,\n      elems_dtype=dtypes.int64,\n      result_dtype=None,\n      infer_shape=True,\n  ):\n    elems = ragged_factory_ops.constant(elems, elems_dtype, elems_ragged_rank)\n    output = ragged_map_ops.map_fn(\n        fn=fn, elems=elems, dtype=result_dtype, infer_shape=infer_shape)\n\n    expected_rt = ragged_factory_ops.constant(\n        expected_output, ragged_rank=expected_ragged_rank)\n    self.assertAllEqual(expected_rt, output)\n\n  def testRaggedMapOnStructure(self):\n    batman = ragged_factory_ops.constant([[1, 2, 3], [4], [5, 6, 7]])\n    # [[10, 20, 30], [40], [50, 60, 70]]\n    robin = ragged_functional_ops.map_flat_values(mo.multiply, batman, 10)\n\n    features = {'batman': batman, 'robin': robin}\n\n    def _reduce_sum_from_all(f):\n      return mo.reduce_sum(f['batman']) + mo.reduce_sum(f['robin'])\n\n    output = ragged_map_ops.map_fn(\n        fn=_reduce_sum_from_all,\n        elems=features,\n        dtype=dtypes.int32,\n    )\n\n    self.assertAllEqual(output, [66, 44, 198])\n\n  # Test mapping over a dict of RTs can produce a dict of RTs.\n  def testRaggedMapOnStructure_RaggedOutputs(self):\n    batman = ragged_factory_ops.constant([[1, 2, 3], [4], [5, 6, 7]])\n    # [[10, 20, 30], [40], [50, 60, 70]]\n    robin = ragged_functional_ops.map_flat_values(mo.multiply, batman, 10)\n\n    features = {'batman': batman, 'robin': robin}\n\n    def _increment(f):\n      return {\n          'batman': f['batman'] + 1,\n          'robin': f['robin'] + 1,\n      }\n\n    output = ragged_map_ops.map_fn(\n        fn=_increment,\n        elems=features,\n        infer_shape=False,\n        dtype={\n            'batman':\n                ragged_tensor.RaggedTensorType(\n                    dtype=dtypes.int32, ragged_rank=1),\n            'robin':\n                ragged_tensor.RaggedTensorType(\n                    dtype=dtypes.int32, ragged_rank=1)\n        },\n    )\n\n    self.assertAllEqual(output['batman'], [[2, 3, 4], [5], [6, 7, 8]])\n    self.assertAllEqual(output['robin'], [[11, 21, 31], [41], [51, 61, 71]])\n\n  def testZip(self):\n    x = ragged_factory_ops.constant(\n        [[10, 20], [30, 40], [50, 60], [70], [80, 90, 100]], dtypes.int64)\n    y = array_ops.expand_dims(mo.range(x.nrows(out_type=dtypes.int64)), axis=1)\n\n    def _zip(foo):\n      y_val, x_val = foo\n      bar = array_ops.tile(y_val, array_ops.shape(x_val))\n      return array_ops.stack([bar, x_val], axis=1)\n\n    output = ragged_map_ops.map_fn(\n        _zip, (y, x),\n        dtype=ragged_tensor.RaggedTensorType(dtype=dtypes.int64, ragged_rank=1),\n        infer_shape=False)\n\n    self.assertAllEqual(\n        output, [[[0, 10], [0, 20]], [[1, 30], [1, 40]], [[2, 50], [2, 60]],\n                 [[3, 70]], [[4, 80], [4, 90], [4, 100]]])\n\n  def testBatchGather(self):\n    tokens = ragged_factory_ops.constant([['hello', '.', 'there'], ['merhaba'],\n                                          ['bonjour', '.', 'ca va', '?']])\n    indices = ragged_factory_ops.constant([[0, 2], [0], [0, 2]])\n\n    def gather(x):\n      tokens_val, indices_val = x\n      return array_ops.gather(tokens_val, indices_val)\n\n    data = tokens, indices\n    out = ragged_map_ops.map_fn(\n        gather,\n        data,\n        dtype=ragged_tensor.RaggedTensorType(\n            dtype=dtypes.string, ragged_rank=1),\n        infer_shape=False)\n\n    self.assertAllEqual(\n        out, [[b'hello', b'there'], [b'merhaba'], [b'bonjour', b'ca va']])\n\n  def testMismatchRaggedRank(self):\n    elems = ragged_factory_ops.constant([[[1, 2, 3]], [[4, 5], [6, 7]]])\n    fn = lambda x: ragged_math_ops.reduce_sum(x, axis=0)\n    with self.assertRaisesRegex(\n        ValueError, r'(?s)Expected `fn` to return.*But it returned.*'):\n      _ = ragged_map_ops.map_fn(\n          fn,\n          elems,\n          dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=23))\n\n  def testMismatchRaggedRank2(self):\n    elems = ragged_factory_ops.constant([[1, 2, 3], [4, 5], [6, 7]])\n    fn = lambda x: ragged_tensor.RaggedTensor.from_row_starts(x, [0])\n    with self.assertRaisesRegex(\n        ValueError, r'(?s)Expected `fn` to return.*But it returned.*'):\n      _ = ragged_map_ops.map_fn(\n          fn,\n          elems,\n          dtype=ragged_tensor.RaggedTensorType(\n              dtype=dtypes.int64, ragged_rank=10))\n\n  def testMapOnSparseTensor(self):\n    s = sparse_tensor.SparseTensor(\n        indices=[[0, 0], [0, 1], [1, 0], [1, 1]],\n        values=[0, 5, 0, 4],\n        dense_shape=[2, 2],\n    )\n    t2 = ragged_tensor.RaggedTensor.from_sparse(s)\n    id_t2 = ragged_map_ops.map_fn(\n        lambda x: x, t2,\n    )\n    self.assertAllEqual(id_t2, [[0, 5], [0, 4]])\n\n\nif __name__ == '__main__':\n  googletest.main()"