"diff --git a/tensorflow/lite/kernels/unidirectional_sequence_lstm.cc b/tensorflow/lite/kernels/unidirectional_sequence_lstm.cc\nindex 56363f489c2..590a9e95a05 100644\n--- a/tensorflow/lite/kernels/unidirectional_sequence_lstm.cc\n+++ b/tensorflow/lite/kernels/unidirectional_sequence_lstm.cc\n@@ -62,8 +62,12 @@ TfLiteStatus PopulateQuantizedLstmParams8x8_16(\n       context,\n       GetOutputSafe(context, node, lstm::full::kOutputTensor, &output_tensor));\n \n+  TF_LITE_ENSURE(context,\n+                 cell_state->quantization.type != kTfLiteNoQuantization);\n   auto* cell_state_params =\n       static_cast<TfLiteAffineQuantization*>(cell_state->quantization.params);\n+  TF_LITE_ENSURE(context,\n+                 output_tensor->quantization.type != kTfLiteNoQuantization);\n   auto* proj_params = static_cast<TfLiteAffineQuantization*>(\n       output_tensor->quantization.params);\n   if (cell_clip > 0.0) {\n@@ -160,6 +164,8 @@ TfLiteStatus PopulateQuantizedLstmParams8x8_16(\n       TfLiteTensor* intermediate;\n       TF_LITE_ENSURE_OK(context,\n                         GetIntermediatesSafe(context, node, i, &intermediate));\n+      TF_LITE_ENSURE(context,\n+                     intermediate->quantization.type != kTfLiteNoQuantization);\n       auto* params = static_cast<TfLiteAffineQuantization*>(\n           intermediate->quantization.params);\n       intermediate_scale.push_back(params->scale->data[0]);\n@@ -174,6 +180,7 @@ TfLiteStatus PopulateQuantizedLstmParams8x8_16(\n   // is ignored.\n   TfLiteTensor* hidden;\n   TF_LITE_ENSURE_OK(context, GetIntermediatesSafe(context, node, 4, &hidden));\n+  TF_LITE_ENSURE(context, hidden->quantization.type != kTfLiteNoQuantization);\n   auto* hidden_params =\n       static_cast<TfLiteAffineQuantization*>(hidden->quantization.params);\n   intermediate_scale.push_back(hidden_params->scale->data[0]);\n@@ -760,6 +767,8 @@ TfLiteStatus PopulatePrecomputedZPTimesWeightsWithBias(TfLiteContext* context,\n \n   const TfLiteTensor* intermediate =\n       &context->tensors[node->intermediates->data[4]];\n+  TF_LITE_ENSURE(context,\n+                 intermediate->quantization.type != kTfLiteNoQuantization);\n   const auto* params =\n       static_cast<TfLiteAffineQuantization*>(intermediate->quantization.params);\n   const int32_t hidden_zp = params->zero_point->data[0];"