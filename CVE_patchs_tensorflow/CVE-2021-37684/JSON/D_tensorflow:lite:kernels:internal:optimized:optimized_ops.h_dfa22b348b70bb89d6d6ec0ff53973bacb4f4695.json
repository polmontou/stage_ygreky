"diff --git a/tensorflow/lite/kernels/internal/optimized/optimized_ops.h b/tensorflow/lite/kernels/internal/optimized/optimized_ops.h\nindex a5abb056c46..241405a6bba 100644\n--- a/tensorflow/lite/kernels/internal/optimized/optimized_ops.h\n+++ b/tensorflow/lite/kernels/internal/optimized/optimized_ops.h\n@@ -3172,7 +3172,7 @@ inline int NodeOffset(int b, int h, int w, int height, int width) {\n   return (b * height + h) * width + w;\n }\n \n-inline void AveragePool(const PoolParams& params,\n+inline bool AveragePool(const PoolParams& params,\n                         const RuntimeShape& input_shape,\n                         const float* input_data,\n                         const RuntimeShape& output_shape, float* output_data) {\n@@ -3187,6 +3187,9 @@ inline void AveragePool(const PoolParams& params,\n   const int stride_height = params.stride_height;\n   const int stride_width = params.stride_width;\n \n+  if (stride_height == 0) return false;\n+  if (stride_width == 0) return false;\n+\n   // TODO(benoitjacob) make this a proper reference impl without Eigen!\n   const auto in_mat = MapAsMatrixWithLastDimAsRows(input_data, input_shape);\n   auto out_mat = MapAsMatrixWithLastDimAsRows(output_data, output_shape);\n@@ -3232,9 +3235,11 @@ inline void AveragePool(const PoolParams& params,\n                                                   params.float_activation_min,\n                                                   params.float_activation_max);\n   }\n+\n+  return true;\n }\n \n-inline void AveragePool(const PoolParams& params,\n+inline bool AveragePool(const PoolParams& params,\n                         const RuntimeShape& input_shape,\n                         const uint8* input_data,\n                         const RuntimeShape& output_shape, uint8* output_data) {\n@@ -3283,6 +3288,7 @@ inline void AveragePool(const PoolParams& params,\n               std::min(params.filter_height, input_height - in_y_origin);\n           const int filter_count =\n               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);\n+          if (filter_count == 0) return false;\n           memset(acc, 0, tranche_depth * sizeof(acc[0]));\n           const uint8* input_ptr =\n               input_data + depth_base +\n@@ -3369,6 +3375,7 @@ inline void AveragePool(const PoolParams& params,\n       }\n     }\n   }\n+  return true;\n }\n \n inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,"