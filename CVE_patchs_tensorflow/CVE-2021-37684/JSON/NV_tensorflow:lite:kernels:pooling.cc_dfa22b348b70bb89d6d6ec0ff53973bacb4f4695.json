"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h\"\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include <cstdlib>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h\"\n#include \"tensorflow/lite/kernels/internal/reference/pooling.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/kernels/padding.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace pooling {\n\n// This file has two implementation of each pooling op.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nenum PoolType {\n  kAverage,\n  kMax,\n  kL2,\n};\n\nstruct OpData {\n  TfLitePaddingValues padding;\n};\n\nvoid* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  // This is a builtin op, so we don't use the contents in 'buffer', if any.\n  // Instead, we allocate a new object to carry information from Prepare() to\n  // Eval().\n  return new OpData;\n}\n\nvoid Free(TfLiteContext* context, void* buffer) {\n  delete reinterpret_cast<OpData*>(buffer);\n}\n\ntemplate <PoolType pool_type>\nTfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  int batches = input->dims->data[0];\n  int height = input->dims->data[1];\n  int width = input->dims->data[2];\n  int channels_out = input->dims->data[3];\n\n  // Matching GetWindowedOutputSize in TensorFlow.\n  auto padding = params->padding;\n  int out_width, out_height;\n\n  // Prevent division by 0 in optimized pooling implementations\n  TF_LITE_ENSURE(context, params->stride_height > 0);\n  TF_LITE_ENSURE(context, params->stride_width > 0);\n\n  data->padding = ComputePaddingHeightWidth(\n      params->stride_height, params->stride_width, 1, 1, height, width,\n      params->filter_height, params->filter_width, padding, &out_height,\n      &out_width);\n\n  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {\n    if (pool_type == kAverage || pool_type == kMax) {\n      TFLITE_DCHECK_LE(std::abs(input->params.scale - output->params.scale),\n                       1.0e-6);\n      TFLITE_DCHECK_EQ(input->params.zero_point, output->params.zero_point);\n    }\n    if (pool_type == kL2) {\n      // We currently don't have a quantized implementation of L2Pool\n      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);\n    }\n  }\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);\n  output_size->data[0] = batches;\n  output_size->data[1] = out_height;\n  output_size->data[2] = out_width;\n  output_size->data[3] = channels_out;\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,\n                              TfLitePoolParams* params, OpData* data,\n                              const TfLiteTensor* input, TfLiteTensor* output) {\n  float activation_min, activation_max;\n  CalculateActivationRange(params->activation, &activation_min,\n                           &activation_max);\n#define TF_LITE_AVERAGE_POOL(type)                                            \\\n  tflite::PoolParams op_params;                                               \\\n  op_params.stride_height = params->stride_height;                            \\\n  op_params.stride_width = params->stride_width;                              \\\n  op_params.filter_height = params->filter_height;                            \\\n  op_params.filter_width = params->filter_width;                              \\\n  op_params.padding_values.height = data->padding.height;                     \\\n  op_params.padding_values.width = data->padding.width;                       \\\n  op_params.float_activation_min = activation_min;                            \\\n  op_params.float_activation_max = activation_max;                            \\\n  TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\\n                                            GetTensorData<float>(input),      \\\n                                            GetTensorShape(output),           \\\n                                            GetTensorData<float>(output)))\n  if (kernel_type == kReference) {\n    TF_LITE_AVERAGE_POOL(reference_ops);\n  } else {\n    TF_LITE_AVERAGE_POOL(optimized_ops);\n  }\n#undef TF_LITE_AVERAGE_POOL\n  return kTfLiteOk;\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,\n                                       TfLitePoolParams* params, OpData* data,\n                                       const TfLiteTensor* input,\n                                       TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  (void)CalculateActivationRangeQuantized(context, params->activation, output,\n                                          &activation_min, &activation_max);\n#define TF_LITE_AVERAGE_POOL(type)                                            \\\n  tflite::PoolParams op_params;                                               \\\n  op_params.stride_height = params->stride_height;                            \\\n  op_params.stride_width = params->stride_width;                              \\\n  op_params.filter_height = params->filter_height;                            \\\n  op_params.filter_width = params->filter_width;                              \\\n  op_params.padding_values.height = data->padding.height;                     \\\n  op_params.padding_values.width = data->padding.width;                       \\\n  op_params.quantized_activation_min = activation_min;                        \\\n  op_params.quantized_activation_max = activation_max;                        \\\n  TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\\n                                            GetTensorData<uint8_t>(input),    \\\n                                            GetTensorShape(output),           \\\n                                            GetTensorData<uint8_t>(output)))\n  if (kernel_type == kReference) {\n    TF_LITE_AVERAGE_POOL(reference_ops);\n  } else {\n    TF_LITE_AVERAGE_POOL(optimized_ops);\n  }\n#undef TF_LITE_AVERAGE_POOL\n  return kTfLiteOk;\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,\n                                      TfLitePoolParams* params, OpData* data,\n                                      const TfLiteTensor* input,\n                                      TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n\n  (void)CalculateActivationRangeQuantized(context, params->activation, output,\n                                          &activation_min, &activation_max);\n#define TF_LITE_AVERAGE_POOL(type)                                            \\\n  tflite::PoolParams op_params;                                               \\\n  op_params.stride_height = params->stride_height;                            \\\n  op_params.stride_width = params->stride_width;                              \\\n  op_params.filter_height = params->filter_height;                            \\\n  op_params.filter_width = params->filter_width;                              \\\n  op_params.padding_values.height = data->padding.height;                     \\\n  op_params.padding_values.width = data->padding.width;                       \\\n  op_params.quantized_activation_min = activation_min;                        \\\n  op_params.quantized_activation_max = activation_max;                        \\\n  TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\\n                                            GetTensorData<int8_t>(input),     \\\n                                            GetTensorShape(output),           \\\n                                            GetTensorData<int8_t>(output)))\n  if (kernel_type == kReference) {\n    TF_LITE_AVERAGE_POOL(reference_integer_ops);\n  } else {\n    TF_LITE_AVERAGE_POOL(optimized_integer_ops);\n  }\n#undef TF_LITE_AVERAGE_POOL\n  return kTfLiteOk;\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,\n                                       TfLitePoolParams* params, OpData* data,\n                                       const TfLiteTensor* input,\n                                       TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  CalculateActivationRangeQuantized(context, params->activation, output,\n                                    &activation_min, &activation_max);\n#define TF_LITE_AVERAGE_POOL(type)                                            \\\n  tflite::PoolParams op_params;                                               \\\n  op_params.stride_height = params->stride_height;                            \\\n  op_params.stride_width = params->stride_width;                              \\\n  op_params.filter_height = params->filter_height;                            \\\n  op_params.filter_width = params->filter_width;                              \\\n  op_params.padding_values.height = data->padding.height;                     \\\n  op_params.padding_values.width = data->padding.width;                       \\\n  op_params.quantized_activation_min = activation_min;                        \\\n  op_params.quantized_activation_max = activation_max;                        \\\n  TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\\n                                            GetTensorData<int16_t>(input),    \\\n                                            GetTensorShape(output),           \\\n                                            GetTensorData<int16_t>(output)))\n  TF_LITE_AVERAGE_POOL(reference_integer_ops);\n#undef TF_LITE_AVERAGE_POOL\n  return kTfLiteOk;\n}\n\ntemplate <KernelType kernel_type>\nvoid MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,\n                  TfLitePoolParams* params, OpData* data,\n                  const TfLiteTensor* input, TfLiteTensor* output) {\n  float activation_min, activation_max;\n  CalculateActivationRange(params->activation, &activation_min,\n                           &activation_max);\n#define TF_LITE_MAX_POOL(type)                                                 \\\n  tflite::PoolParams op_params;                                                \\\n  op_params.stride_height = params->stride_height;                             \\\n  op_params.stride_width = params->stride_width;                               \\\n  op_params.filter_height = params->filter_height;                             \\\n  op_params.filter_width = params->filter_width;                               \\\n  op_params.padding_values.height = data->padding.height;                      \\\n  op_params.padding_values.width = data->padding.width;                        \\\n  op_params.float_activation_min = activation_min;                             \\\n  op_params.float_activation_max = activation_max;                             \\\n  type::MaxPool(op_params, GetTensorShape(input), GetTensorData<float>(input), \\\n                GetTensorShape(output), GetTensorData<float>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_MAX_POOL(reference_ops);\n  } else {\n    TF_LITE_MAX_POOL(optimized_ops);\n  }\n#undef TF_LITE_MAX_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid MaxEvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node,\n                           TfLitePoolParams* params, OpData* data,\n                           const TfLiteTensor* input, TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  (void)CalculateActivationRangeQuantized(context, params->activation, output,\n                                          &activation_min, &activation_max);\n#define TF_LITE_MAX_POOL(type)                                         \\\n  tflite::PoolParams op_params;                                        \\\n  op_params.stride_height = params->stride_height;                     \\\n  op_params.stride_width = params->stride_width;                       \\\n  op_params.filter_height = params->filter_height;                     \\\n  op_params.filter_width = params->filter_width;                       \\\n  op_params.padding_values.height = data->padding.height;              \\\n  op_params.padding_values.width = data->padding.width;                \\\n  op_params.quantized_activation_min = activation_min;                 \\\n  op_params.quantized_activation_max = activation_max;                 \\\n  type::MaxPool(op_params, GetTensorShape(input),                      \\\n                GetTensorData<uint8_t>(input), GetTensorShape(output), \\\n                GetTensorData<uint8_t>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_MAX_POOL(reference_ops);\n  } else {\n    TF_LITE_MAX_POOL(optimized_ops);\n  }\n#undef TF_LITE_MAX_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid MaxEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,\n                          TfLitePoolParams* params, OpData* data,\n                          const TfLiteTensor* input, TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  (void)CalculateActivationRangeQuantized(context, params->activation, output,\n                                          &activation_min, &activation_max);\n#define TF_LITE_MAX_POOL(type)                                        \\\n  tflite::PoolParams op_params;                                       \\\n  op_params.stride_height = params->stride_height;                    \\\n  op_params.stride_width = params->stride_width;                      \\\n  op_params.filter_height = params->filter_height;                    \\\n  op_params.filter_width = params->filter_width;                      \\\n  op_params.padding_values.height = data->padding.height;             \\\n  op_params.padding_values.width = data->padding.width;               \\\n  op_params.quantized_activation_min = activation_min;                \\\n  op_params.quantized_activation_max = activation_max;                \\\n  type::MaxPool(op_params, GetTensorShape(input),                     \\\n                GetTensorData<int8_t>(input), GetTensorShape(output), \\\n                GetTensorData<int8_t>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_MAX_POOL(reference_integer_ops);\n  } else {\n    TF_LITE_MAX_POOL(optimized_integer_ops);\n  }\n#undef TF_LITE_MAX_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid MaxEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,\n                           TfLitePoolParams* params, OpData* data,\n                           const TfLiteTensor* input, TfLiteTensor* output) {\n  int32_t activation_min;\n  int32_t activation_max;\n  CalculateActivationRangeQuantized(context, params->activation, output,\n                                    &activation_min, &activation_max);\n#define TF_LITE_MAX_POOL(type)                                         \\\n  tflite::PoolParams op_params;                                        \\\n  op_params.stride_height = params->stride_height;                     \\\n  op_params.stride_width = params->stride_width;                       \\\n  op_params.filter_height = params->filter_height;                     \\\n  op_params.filter_width = params->filter_width;                       \\\n  op_params.padding_values.height = data->padding.height;              \\\n  op_params.padding_values.width = data->padding.width;                \\\n  op_params.quantized_activation_min = activation_min;                 \\\n  op_params.quantized_activation_max = activation_max;                 \\\n  type::MaxPool(op_params, GetTensorShape(input),                      \\\n                GetTensorData<int16_t>(input), GetTensorShape(output), \\\n                GetTensorData<int16_t>(output))\n  TF_LITE_MAX_POOL(reference_integer_ops);\n#undef TF_LITE_MAX_POOL\n}\n\ntemplate <KernelType kernel_type>\nvoid L2EvalFloat(TfLiteContext* context, TfLiteNode* node,\n                 TfLitePoolParams* params, OpData* data,\n                 const TfLiteTensor* input, TfLiteTensor* output) {\n  float activation_min, activation_max;\n  CalculateActivationRange(params->activation, &activation_min,\n                           &activation_max);\n#define TF_LITE_L2_POOL(type)                                                 \\\n  tflite::PoolParams op_params;                                               \\\n  op_params.stride_height = params->stride_height;                            \\\n  op_params.stride_width = params->stride_width;                              \\\n  op_params.filter_height = params->filter_height;                            \\\n  op_params.filter_width = params->filter_width;                              \\\n  op_params.padding_values.height = data->padding.height;                     \\\n  op_params.padding_values.width = data->padding.width;                       \\\n  op_params.float_activation_min = activation_min;                            \\\n  op_params.float_activation_max = activation_max;                            \\\n  type::L2Pool(op_params, GetTensorShape(input), GetTensorData<float>(input), \\\n               GetTensorShape(output), GetTensorData<float>(output))\n  if (kernel_type == kReference) {\n    TF_LITE_L2_POOL(reference_ops);\n  } else {\n    TF_LITE_L2_POOL(optimized_ops);\n  }\n#undef TF_LITE_L2_POOL\n}\n\n#undef TF_LITE_KERNEL_TYPE_DISPATCH\n\ntemplate <KernelType kernel_type>\nTfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      return AverageEvalFloat<kernel_type>(context, node, params, data, input,\n                                           output);\n    case kTfLiteUInt8:\n      return AverageEvalQuantizedUint8<kernel_type>(context, node, params, data,\n                                                    input, output);\n    case kTfLiteInt8:\n      return AverageEvalQuantizedInt8<kernel_type>(context, node, params, data,\n                                                   input, output);\n    case kTfLiteInt16:\n      return AverageEvalQuantizedInt16<kernel_type>(context, node, params, data,\n                                                    input, output);\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",\n                         TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      MaxEvalFloat<kernel_type>(context, node, params, data, input, output);\n      break;\n    case kTfLiteUInt8:\n      MaxEvalQuantizedUInt8<kernel_type>(context, node, params, data, input,\n                                         output);\n      break;\n    case kTfLiteInt8:\n      MaxEvalQuantizedInt8<kernel_type>(context, node, params, data, input,\n                                        output);\n      break;\n    case kTfLiteInt16:\n      MaxEvalQuantizedInt16<kernel_type>(context, node, params, data, input,\n                                         output);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",\n                         TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus L2Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      L2EvalFloat<kernel_type>(context, node, params, data, input, output);\n      break;\n    case kTfLiteUInt8:\n    // We don't have a quantized implementation, so just fall through to the\n    // 'default' case.\n    default:\n      context->ReportError(context, \"Type %d not currently supported.\",\n                           input->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\n}  // namespace pooling\n\nTfLiteRegistration* Register_AVERAGE_POOL_REF() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kAverage>,\n                                 pooling::AverageEval<pooling::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_MAX_POOL_REF() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kMax>,\n                                 pooling::MaxEval<pooling::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_L2_POOL_REF() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kL2>,\n                                 pooling::L2Eval<pooling::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_AVERAGE_POOL_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      pooling::Init, pooling::Free, pooling::GenericPrepare<pooling::kAverage>,\n      pooling::AverageEval<pooling::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_MAX_POOL_GENERIC_OPT() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kMax>,\n                                 pooling::MaxEval<pooling::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_L2_POOL_GENERIC_OPT() {\n  static TfLiteRegistration r = {pooling::Init, pooling::Free,\n                                 pooling::GenericPrepare<pooling::kL2>,\n                                 pooling::L2Eval<pooling::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_AVERAGE_POOL_2D() {\n  return Register_AVERAGE_POOL_GENERIC_OPT();\n}\n\nTfLiteRegistration* Register_MAX_POOL_2D() {\n  return Register_MAX_POOL_GENERIC_OPT();\n}\n\nTfLiteRegistration* Register_L2_POOL_2D() {\n  return Register_L2_POOL_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"