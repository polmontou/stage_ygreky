"diff --git a/tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h b/tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h\nindex 2d7056fcd85..0b65b1f49cf 100644\n--- a/tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h\n+++ b/tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h\n@@ -1487,7 +1487,7 @@ void Sub(const T* input1_data, const Dims<4>& input1_dims, const T* input2_data,\n       output_data);\n }\n \n-inline void AveragePool(const float* input_data, const Dims<4>& input_dims,\n+inline bool AveragePool(const float* input_data, const Dims<4>& input_dims,\n                         int stride_width, int stride_height, int pad_width,\n                         int pad_height, int kwidth, int kheight,\n                         float output_activation_min,\n@@ -1502,8 +1502,8 @@ inline void AveragePool(const float* input_data, const Dims<4>& input_dims,\n   params.padding_values.width = pad_width;\n   params.float_activation_min = output_activation_min;\n   params.float_activation_max = output_activation_max;\n-  AveragePool(params, DimsToShape(input_dims), input_data,\n-              DimsToShape(output_dims), output_data);\n+  return AveragePool(params, DimsToShape(input_dims), input_data,\n+                     DimsToShape(output_dims), output_data);\n }\n \n // Transitional version that will be moved shortly to legacy_reference_ops, as\n@@ -1562,29 +1562,31 @@ inline void BroadcastMul(const uint8* input1_data, const Dims<4>& input1_dims,\n \n // legacy, for compatibility with old checked-in code\n template <FusedActivationFunctionType Ac>\n-void AveragePool(const float* input_data, const Dims<4>& input_dims,\n+bool AveragePool(const float* input_data, const Dims<4>& input_dims,\n                  int stride_width, int stride_height, int pad_width,\n                  int pad_height, int kwidth, int kheight, float* output_data,\n                  const Dims<4>& output_dims) {\n   float output_activation_min, output_activation_max;\n   GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);\n \n-  AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,\n-              pad_height, kwidth, kheight, output_activation_min,\n-              output_activation_max, output_data, output_dims);\n+  return AveragePool(input_data, input_dims, stride_width, stride_height,\n+                     pad_width, pad_height, kwidth, kheight,\n+                     output_activation_min, output_activation_max, output_data,\n+                     output_dims);\n }\n \n // legacy, for compatibility with old checked-in code\n template <FusedActivationFunctionType Ac>\n-void AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,\n+bool AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,\n                  int pad_width, int pad_height, int filter_width,\n                  int filter_height, float* output_data,\n                  const Dims<4>& output_dims) {\n-  AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,\n-                  filter_width, filter_height, output_data, output_dims);\n+  return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,\n+                         pad_height, filter_width, filter_height, output_data,\n+                         output_dims);\n }\n \n-inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,\n+inline bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,\n                         int stride_width, int stride_height, int pad_width,\n                         int pad_height, int filter_width, int filter_height,\n                         int32 output_activation_min,\n@@ -1599,13 +1601,13 @@ inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,\n   params.padding_values.width = pad_width;\n   params.quantized_activation_min = output_activation_min;\n   params.quantized_activation_max = output_activation_max;\n-  AveragePool(params, DimsToShape(input_dims), input_data,\n-              DimsToShape(output_dims), output_data);\n+  return AveragePool(params, DimsToShape(input_dims), input_data,\n+                     DimsToShape(output_dims), output_data);\n }\n \n // legacy, for compatibility with old checked-in code\n template <FusedActivationFunctionType Ac>\n-void AveragePool(const uint8* input_data, const Dims<4>& input_dims,\n+bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,\n                  int stride_width, int stride_height, int pad_width,\n                  int pad_height, int filter_width, int filter_height,\n                  int32 output_activation_min, int32 output_activation_max,\n@@ -1619,21 +1621,23 @@ void AveragePool(const uint8* input_data, const Dims<4>& input_dims,\n     TFLITE_DCHECK_EQ(output_activation_min, 0);\n     TFLITE_DCHECK_EQ(output_activation_max, 255);\n   }\n-  AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,\n-              pad_height, filter_width, filter_height, output_activation_min,\n-              output_activation_max, output_data, output_dims);\n+  return AveragePool(input_data, input_dims, stride_width, stride_height,\n+                     pad_width, pad_height, filter_width, filter_height,\n+                     output_activation_min, output_activation_max, output_data,\n+                     output_dims);\n }\n \n // legacy, for compatibility with old checked-in code\n template <FusedActivationFunctionType Ac>\n-void AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,\n+bool AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,\n                  int pad_width, int pad_height, int filter_width,\n                  int filter_height, int32 output_activation_min,\n                  int32 output_activation_max, uint8* output_data,\n                  const Dims<4>& output_dims) {\n-  AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,\n-                  filter_width, filter_height, output_activation_min,\n-                  output_activation_max, output_data, output_dims);\n+  return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,\n+                         pad_height, filter_width, filter_height,\n+                         output_activation_min, output_activation_max,\n+                         output_data, output_dims);\n }\n \n inline void MaxPool(const float* input_data, const Dims<4>& input_dims,"