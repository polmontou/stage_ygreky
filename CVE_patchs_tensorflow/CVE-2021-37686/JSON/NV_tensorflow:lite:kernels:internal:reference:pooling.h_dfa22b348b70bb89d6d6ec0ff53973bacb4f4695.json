"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#ifndef TENSORFLOW_LITE_KERNELS_INTERNAL_REFERENCE_POOLING_H_\n#define TENSORFLOW_LITE_KERNELS_INTERNAL_REFERENCE_POOLING_H_\n\n#include \"tensorflow/lite/kernels/internal/common.h\"\n#include \"tensorflow/lite/kernels/internal/cppmath.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n\nnamespace tflite {\nnamespace reference_ops {\n\ninline bool AveragePool(const PoolParams& params,\n                        const RuntimeShape& input_shape,\n                        const float* input_data,\n                        const RuntimeShape& output_shape, float* output_data) {\n  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);\n  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);\n  const int batches = MatchingDim(input_shape, 0, output_shape, 0);\n  const int depth = MatchingDim(input_shape, 3, output_shape, 3);\n  const int input_height = input_shape.Dims(1);\n  const int input_width = input_shape.Dims(2);\n  const int output_height = output_shape.Dims(1);\n  const int output_width = output_shape.Dims(2);\n  const int stride_height = params.stride_height;\n  const int stride_width = params.stride_width;\n  for (int batch = 0; batch < batches; ++batch) {\n    for (int out_y = 0; out_y < output_height; ++out_y) {\n      for (int out_x = 0; out_x < output_width; ++out_x) {\n        for (int channel = 0; channel < depth; ++channel) {\n          const int in_x_origin =\n              (out_x * stride_width) - params.padding_values.width;\n          const int in_y_origin =\n              (out_y * stride_height) - params.padding_values.height;\n          // Compute the boundaries of the filter region clamped so as to\n          // ensure that the filter window fits in the input array.\n          const int filter_x_start = std::max(0, -in_x_origin);\n          const int filter_x_end =\n              std::min(params.filter_width, input_width - in_x_origin);\n          const int filter_y_start = std::max(0, -in_y_origin);\n          const int filter_y_end =\n              std::min(params.filter_height, input_height - in_y_origin);\n          float total = 0.f;\n          float filter_count = 0;\n          for (int filter_y = filter_y_start; filter_y < filter_y_end;\n               ++filter_y) {\n            for (int filter_x = filter_x_start; filter_x < filter_x_end;\n                 ++filter_x) {\n              const int in_x = in_x_origin + filter_x;\n              const int in_y = in_y_origin + filter_y;\n              total +=\n                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];\n              filter_count++;\n            }\n          }\n          if (filter_count == 0) return false;\n          const float average = total / filter_count;\n          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =\n              ActivationFunctionWithMinMax(average, params.float_activation_min,\n                                           params.float_activation_max);\n        }\n      }\n    }\n  }\n  return true;\n}\n\ninline bool AveragePool(const PoolParams& params,\n                        const RuntimeShape& input_shape,\n                        const uint8_t* input_data,\n                        const RuntimeShape& output_shape,\n                        uint8_t* output_data) {\n  TFLITE_DCHECK_LE(params.quantized_activation_min,\n                   params.quantized_activation_max);\n  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);\n  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);\n  const int batches = MatchingDim(input_shape, 0, output_shape, 0);\n  const int depth = MatchingDim(input_shape, 3, output_shape, 3);\n  const int input_height = input_shape.Dims(1);\n  const int input_width = input_shape.Dims(2);\n  const int output_height = output_shape.Dims(1);\n  const int output_width = output_shape.Dims(2);\n  const int stride_height = params.stride_height;\n  const int stride_width = params.stride_width;\n  for (int batch = 0; batch < batches; ++batch) {\n    for (int out_y = 0; out_y < output_height; ++out_y) {\n      for (int out_x = 0; out_x < output_width; ++out_x) {\n        for (int channel = 0; channel < depth; ++channel) {\n          const int in_x_origin =\n              (out_x * stride_width) - params.padding_values.width;\n          const int in_y_origin =\n              (out_y * stride_height) - params.padding_values.height;\n          // Compute the boundaries of the filter region clamped so as to\n          // ensure that the filter window fits in the input array.\n          const int filter_x_start = std::max(0, -in_x_origin);\n          const int filter_x_end =\n              std::min(params.filter_width, input_width - in_x_origin);\n          const int filter_y_start = std::max(0, -in_y_origin);\n          const int filter_y_end =\n              std::min(params.filter_height, input_height - in_y_origin);\n          int32_t acc = 0;\n          int filter_count = 0;\n          for (int filter_y = filter_y_start; filter_y < filter_y_end;\n               ++filter_y) {\n            for (int filter_x = filter_x_start; filter_x < filter_x_end;\n                 ++filter_x) {\n              const int in_x = in_x_origin + filter_x;\n              const int in_y = in_y_origin + filter_y;\n              acc +=\n                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];\n              filter_count++;\n            }\n          }\n          if (filter_count == 0) return false;\n          acc = (acc + filter_count / 2) / filter_count;\n          acc = std::max(acc, params.quantized_activation_min);\n          acc = std::min(acc, params.quantized_activation_max);\n          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =\n              static_cast<uint8_t>(acc);\n        }\n      }\n    }\n  }\n  return true;\n}\n\ninline void L2Pool(const PoolParams& params, const RuntimeShape& input_shape,\n                   const float* input_data, const RuntimeShape& output_shape,\n                   float* output_data) {\n  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);\n  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);\n  const int batches = MatchingDim(input_shape, 0, output_shape, 0);\n  const int depth = MatchingDim(input_shape, 3, output_shape, 3);\n  const int input_height = input_shape.Dims(1);\n  const int input_width = input_shape.Dims(2);\n  const int output_height = output_shape.Dims(1);\n  const int output_width = output_shape.Dims(2);\n  const int stride_height = params.stride_height;\n  const int stride_width = params.stride_width;\n  for (int batch = 0; batch < batches; ++batch) {\n    for (int out_y = 0; out_y < output_height; ++out_y) {\n      for (int out_x = 0; out_x < output_width; ++out_x) {\n        for (int channel = 0; channel < depth; ++channel) {\n          const int in_x_origin =\n              (out_x * stride_width) - params.padding_values.width;\n          const int in_y_origin =\n              (out_y * stride_height) - params.padding_values.height;\n          // Compute the boundaries of the filter region clamped so as to\n          // ensure that the filter window fits in the input array.\n          const int filter_x_start = std::max(0, -in_x_origin);\n          const int filter_x_end =\n              std::min(params.filter_width, input_width - in_x_origin);\n          const int filter_y_start = std::max(0, -in_y_origin);\n          const int filter_y_end =\n              std::min(params.filter_height, input_height - in_y_origin);\n          float sum_squares = 0.f;\n          int filter_count = 0;\n          for (int filter_y = filter_y_start; filter_y < filter_y_end;\n               ++filter_y) {\n            for (int filter_x = filter_x_start; filter_x < filter_x_end;\n                 ++filter_x) {\n              const int in_x = in_x_origin + filter_x;\n              const int in_y = in_y_origin + filter_y;\n              const float val =\n                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];\n              sum_squares += val * val;\n              filter_count++;\n            }\n          }\n          const float l2pool_result = std::sqrt(sum_squares / filter_count);\n          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =\n              ActivationFunctionWithMinMax(l2pool_result,\n                                           params.float_activation_min,\n                                           params.float_activation_max);\n        }\n      }\n    }\n  }\n}\n\ninline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,\n                    const float* input_data, const RuntimeShape& output_shape,\n                    float* output_data) {\n  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);\n  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);\n  const int batches = MatchingDim(input_shape, 0, output_shape, 0);\n  const int depth = MatchingDim(input_shape, 3, output_shape, 3);\n  const int input_height = input_shape.Dims(1);\n  const int input_width = input_shape.Dims(2);\n  const int output_height = output_shape.Dims(1);\n  const int output_width = output_shape.Dims(2);\n  const int stride_height = params.stride_height;\n  const int stride_width = params.stride_width;\n  for (int batch = 0; batch < batches; ++batch) {\n    for (int out_y = 0; out_y < output_height; ++out_y) {\n      for (int out_x = 0; out_x < output_width; ++out_x) {\n        for (int channel = 0; channel < depth; ++channel) {\n          const int in_x_origin =\n              (out_x * stride_width) - params.padding_values.width;\n          const int in_y_origin =\n              (out_y * stride_height) - params.padding_values.height;\n          // Compute the boundaries of the filter region clamped so as to\n          // ensure that the filter window fits in the input array.\n          const int filter_x_start = std::max(0, -in_x_origin);\n          const int filter_x_end =\n              std::min(params.filter_width, input_width - in_x_origin);\n          const int filter_y_start = std::max(0, -in_y_origin);\n          const int filter_y_end =\n              std::min(params.filter_height, input_height - in_y_origin);\n          float max = std::numeric_limits<float>::lowest();\n          for (int filter_y = filter_y_start; filter_y < filter_y_end;\n               ++filter_y) {\n            for (int filter_x = filter_x_start; filter_x < filter_x_end;\n                 ++filter_x) {\n              const int in_x = in_x_origin + filter_x;\n              const int in_y = in_y_origin + filter_y;\n              max = std::max(\n                  max,\n                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);\n            }\n          }\n          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =\n              ActivationFunctionWithMinMax(max, params.float_activation_min,\n                                           params.float_activation_max);\n        }\n      }\n    }\n  }\n}\n\ninline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,\n                    const uint8_t* input_data, const RuntimeShape& output_shape,\n                    uint8_t* output_data) {\n  TFLITE_DCHECK_LE(params.quantized_activation_min,\n                   params.quantized_activation_max);\n  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);\n  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);\n  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);\n  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);\n  const int batches = MatchingDim(input_shape, 0, output_shape, 0);\n  const int depth = MatchingDim(input_shape, 3, output_shape, 3);\n  const int input_height = input_shape.Dims(1);\n  const int input_width = input_shape.Dims(2);\n  const int output_height = output_shape.Dims(1);\n  const int output_width = output_shape.Dims(2);\n  const int stride_height = params.stride_height;\n  const int stride_width = params.stride_width;\n  for (int batch = 0; batch < batches; ++batch) {\n    for (int out_y = 0; out_y < output_height; ++out_y) {\n      for (int out_x = 0; out_x < output_width; ++out_x) {\n        for (int channel = 0; channel < depth; ++channel) {\n          const int in_x_origin =\n              (out_x * stride_width) - params.padding_values.width;\n          const int in_y_origin =\n              (out_y * stride_height) - params.padding_values.height;\n          // Compute the boundaries of the filter region clamped so as to\n          // ensure that the filter window fits in the input array.\n          const int filter_x_start = std::max(0, -in_x_origin);\n          const int filter_x_end =\n              std::min(params.filter_width, input_width - in_x_origin);\n          const int filter_y_start = std::max(0, -in_y_origin);\n          const int filter_y_end =\n              std::min(params.filter_height, input_height - in_y_origin);\n          uint8_t max = 0;\n          for (int filter_y = filter_y_start; filter_y < filter_y_end;\n               ++filter_y) {\n            for (int filter_x = filter_x_start; filter_x < filter_x_end;\n                 ++filter_x) {\n              const int in_x = in_x_origin + filter_x;\n              const int in_y = in_y_origin + filter_y;\n              max = std::max(\n                  max,\n                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);\n            }\n          }\n          max = std::max<uint8_t>(max, params.quantized_activation_min);\n          max = std::min<uint8_t>(max, params.quantized_activation_max);\n          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =\n              static_cast<uint8_t>(max);\n        }\n      }\n    }\n  }\n}\n}  // namespace reference_ops\n}  // namespace tflite\n\n#endif  // TENSORFLOW_LITE_KERNELS_INTERNAL_REFERENCE_POOLING_H_"