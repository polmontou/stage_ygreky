"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/string_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace gather {\nconstexpr int kInputTensor = 0;\nconstexpr int kInputPositions = 1;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const auto* params =\n      reinterpret_cast<const TfLiteGatherParams*>(node->builtin_data);\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const TfLiteTensor* positions;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputPositions, &positions));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  switch (positions->type) {\n    case kTfLiteInt64:\n    case kTfLiteInt32:\n      break;\n    default:\n      context->ReportError(\n          context, \"Positions of type '%s' are not supported by gather.\",\n          TfLiteTypeGetName(positions->type));\n      return kTfLiteError;\n  }\n\n  // Assign to output the input type.\n  output->type = input->type;\n\n  // Check conditions for different types.\n  switch (input->type) {\n    case kTfLiteFloat32:\n    case kTfLiteUInt8:\n    case kTfLiteInt8:\n    case kTfLiteInt16:\n    case kTfLiteInt64:\n    case kTfLiteInt32:\n    case kTfLiteBool:\n      break;\n    case kTfLiteString: {\n      // Only 1D input is supported.\n      TF_LITE_ENSURE_EQ(context, NumDimensions(input), 1);\n    } break;\n    default:\n      context->ReportError(context, \"Type '%s' is not supported by gather.\",\n                           TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n\n  int axis = params->axis;\n  if (axis < 0) {\n    axis += NumDimensions(input);\n  }\n  TF_LITE_ENSURE(context, 0 <= axis && axis < NumDimensions(input));\n\n  int batch_dims = params->batch_dims;\n  // batch_dims should be in range: [-rank(positions), rank(positions)].\n  // Negative batch_dims is added with rank of positions.\n  if (batch_dims < 0) {\n    batch_dims += NumDimensions(positions);\n  }\n  TF_LITE_ENSURE(context, batch_dims <= axis);\n  TF_LITE_ENSURE(context, 0 <= batch_dims && batch_dims < NumDimensions(input));\n  TF_LITE_ENSURE(context, batch_dims <= NumDimensions(positions));\n  for (int i = 0; i < batch_dims; ++i) {\n    TF_LITE_ENSURE_EQ(context, input->dims->data[i], positions->dims->data[i]);\n  }\n\n  const int num_dimensions =\n      NumDimensions(input) + NumDimensions(positions) - 1 - batch_dims;\n  TfLiteIntArray* output_shape = TfLiteIntArrayCreate(num_dimensions);\n  int output_index = 0;\n  for (int i = 0; i < axis; ++i) {\n    output_shape->data[output_index++] = input->dims->data[i];\n  }\n  for (int i = batch_dims; i < positions->dims->size; ++i) {\n    output_shape->data[output_index++] = positions->dims->data[i];\n  }\n  for (int i = axis + 1; i < input->dims->size; ++i) {\n    output_shape->data[output_index++] = input->dims->data[i];\n  }\n  return context->ResizeTensor(context, output, output_shape);\n}\n\ntemplate <typename InputT, typename PositionsT>\nTfLiteStatus Gather(TfLiteContext* context, const TfLiteGatherParams& params,\n                    const TfLiteTensor* input, const TfLiteTensor* positions,\n                    TfLiteTensor* output) {\n  const PositionsT* indexes = GetTensorData<PositionsT>(positions);\n  bool indices_has_only_positive_elements = true;\n  const size_t num_indices = positions->bytes / sizeof(PositionsT);\n  for (size_t i = 0; i < num_indices; i++) {\n    if (indexes[i] < 0) {\n      indices_has_only_positive_elements = false;\n      break;\n    }\n  }\n  TF_LITE_ENSURE(context, indices_has_only_positive_elements);\n\n  tflite::GatherParams op_params;\n  op_params.axis = params.axis;\n  op_params.batch_dims = params.batch_dims;\n  optimized_ops::Gather(op_params, GetTensorShape(input),\n                        GetTensorData<InputT>(input), GetTensorShape(positions),\n                        GetTensorData<PositionsT>(positions),\n                        GetTensorShape(output), GetTensorData<InputT>(output));\n  return kTfLiteOk;\n}\n\ntemplate <typename PositionT>\nTfLiteStatus GatherStrings(TfLiteContext* context, const TfLiteTensor* input,\n                           const TfLiteTensor* positions,\n                           TfLiteTensor* output) {\n  DynamicBuffer buffer;\n\n  const PositionT* indexes = GetTensorData<PositionT>(positions);\n  bool indices_has_only_positive_elements = true;\n  const size_t num_indices = positions->bytes / sizeof(PositionT);\n  for (size_t i = 0; i < num_indices; i++) {\n    if (indexes[i] < 0) {\n      indices_has_only_positive_elements = false;\n      break;\n    }\n  }\n  TF_LITE_ENSURE(context, indices_has_only_positive_elements);\n\n  const PositionT num_strings = GetStringCount(input);\n  const int num_indexes = NumElements(positions);\n\n  for (int i = 0; i < num_indexes; ++i) {\n    const PositionT pos = indexes[i];\n    TF_LITE_ENSURE(context, pos < num_strings);\n    const auto string_ref = GetString(input, pos);\n    buffer.AddString(string_ref.str, string_ref.len);\n  }\n  buffer.WriteToTensor(output, /*new_shape=*/nullptr);\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const auto* params =\n      reinterpret_cast<const TfLiteGatherParams*>(node->builtin_data);\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const TfLiteTensor* positions;\n  TF_LITE_ENSURE_OK(context,\n                    GetInputSafe(context, node, kInputPositions, &positions));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  if (positions->type == kTfLiteInt32) {\n    switch (input->type) {\n      case kTfLiteFloat32:\n        return Gather<float, int32_t>(context, *params, input, positions,\n                                      output);\n      case kTfLiteUInt8:\n        return Gather<uint8_t, int32_t>(context, *params, input, positions,\n                                        output);\n      case kTfLiteInt8:\n        return Gather<int8_t, int32_t>(context, *params, input, positions,\n                                       output);\n      case kTfLiteInt16:\n        return Gather<int16_t, int32_t>(context, *params, input, positions,\n                                        output);\n      case kTfLiteInt32:\n        return Gather<int32_t, int32_t>(context, *params, input, positions,\n                                        output);\n      case kTfLiteInt64:\n        return Gather<int64_t, int32_t>(context, *params, input, positions,\n                                        output);\n      case kTfLiteBool:\n        return Gather<bool, int32_t>(context, *params, input, positions,\n                                     output);\n      case kTfLiteString:\n        return GatherStrings<int32_t>(context, input, positions, output);\n      default:\n        context->ReportError(context, \"Type '%s' is not supported by gather.\",\n                             TfLiteTypeGetName(input->type));\n        return kTfLiteError;\n    }\n  }\n  if (positions->type == kTfLiteInt64) {\n    switch (input->type) {\n      case kTfLiteFloat32:\n        return Gather<float, int64_t>(context, *params, input, positions,\n                                      output);\n      case kTfLiteUInt8:\n        return Gather<uint8_t, int64_t>(context, *params, input, positions,\n                                        output);\n      case kTfLiteInt8:\n        return Gather<int8_t, int64_t>(context, *params, input, positions,\n                                       output);\n      case kTfLiteInt16:\n        return Gather<int16_t, int64_t>(context, *params, input, positions,\n                                        output);\n      case kTfLiteInt32:\n        return Gather<int32_t, int64_t>(context, *params, input, positions,\n                                        output);\n      case kTfLiteInt64:\n        return Gather<int64_t, int64_t>(context, *params, input, positions,\n                                        output);\n      case kTfLiteBool:\n        return Gather<bool, int64_t>(context, *params, input, positions,\n                                     output);\n      case kTfLiteString:\n        return GatherStrings<int64_t>(context, input, positions, output);\n      default:\n        context->ReportError(context, \"Type '%s' is not supported by gather.\",\n                             TfLiteTypeGetName(input->type));\n        return kTfLiteError;\n    }\n  }\n  context->ReportError(context,\n                       \"Positions of type '%s' are not supported by gather.\",\n                       TfLiteTypeGetName(positions->type));\n  return kTfLiteError;\n}\n}  // namespace gather\n\nTfLiteRegistration* Register_GATHER() {\n  static TfLiteRegistration r = {nullptr, nullptr, gather::Prepare,\n                                 gather::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"