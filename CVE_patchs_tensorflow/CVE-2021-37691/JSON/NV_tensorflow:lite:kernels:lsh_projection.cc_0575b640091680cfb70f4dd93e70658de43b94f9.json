"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// LSH Projection projects an input to a bit vector via locality sensitive\n// hashing.\n//\n// Options:\n//   Sparse:\n//     Computed bit vector is considered to be sparse.\n//     Each output element is an int32 made up by multiple bits computed from\n// hash functions.\n//\n//   Dense:\n//     Computed bit vector is considered to be dense. Each output element is\n// either 0 or 1 that represents a bit.\n//\n// Input:\n//   Tensor[0]: Hash functions. Dim.size == 2, DataType: Float.\n//              Tensor[0].Dim[0]: Num of hash functions. Must be at least 1.\n//              Tensor[0].Dim[1]: Num of projected output bits generated by\n//                                each hash function.\n//   In sparse case, Tensor[0].Dim[1] + ceil( log2(Tensor[0].Dim[0] )) <= 32.\n//\n//   Tensor[1]: Input. Dim.size >= 1, No restriction on DataType.\n//   Tensor[2]: Optional, Weight. Dim.size == 1, DataType: Float.\n//              If not set, each element of input is considered to have same\n// weight of 1.0 Tensor[1].Dim[0] == Tensor[2].Dim[0]\n//\n// Output:\n//   Sparse:\n//     Output.Dim == { Tensor[0].Dim[0] }\n//     A tensor of int32 that represents hash signatures,\n//\n//     NOTE: To avoid collisions across hash functions, an offset value of\n//     k * (1 << Tensor[0].Dim[1]) will be added to each signature,\n//     k is the index of the hash function.\n//   Dense:\n//     Output.Dim == { Tensor[0].Dim[0] * Tensor[0].Dim[1] }\n//     A flattened tensor represents projected bit vectors.\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include <cstring>\n#include <memory>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include <farmhash.h>\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace lsh_projection {\n\nTfLiteStatus Resize(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);\n  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* hash;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &hash));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(hash), 2);\n  // Support up to 32 bits.\n  TF_LITE_ENSURE(context, SizeOfDimension(hash, 1) <= 32);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input));\n  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);\n  TF_LITE_ENSURE(context, SizeOfDimension(input, 0) >= 1);\n\n  if (NumInputs(node) == 3) {\n    const TfLiteTensor* weight;\n    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &weight));\n    TF_LITE_ENSURE_EQ(context, NumDimensions(weight), 1);\n    TF_LITE_ENSURE_EQ(context, SizeOfDimension(weight, 0),\n                      SizeOfDimension(input, 0));\n  }\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);\n  switch (params->type) {\n    case kTfLiteLshProjectionSparse:\n      outputSize->data[0] = SizeOfDimension(hash, 0);\n      break;\n    case kTfLiteLshProjectionDense:\n      outputSize->data[0] = SizeOfDimension(hash, 0) * SizeOfDimension(hash, 1);\n      break;\n    default:\n      return kTfLiteError;\n  }\n  return context->ResizeTensor(context, output, outputSize);\n}\n\n// Compute sign bit of dot product of hash(seed, input) and weight.\n// NOTE: use float as seed, and convert it to double as a temporary solution\n//       to match the trained model. This is going to be changed once the new\n//       model is trained in an optimized method.\n//\nint RunningSignBit(const TfLiteTensor* input, const TfLiteTensor* weight,\n                   float seed) {\n  double score = 0.0;\n  int input_item_bytes = input->bytes / SizeOfDimension(input, 0);\n  char* input_ptr = input->data.raw;\n\n  const size_t seed_size = sizeof(float);\n  const size_t key_bytes = sizeof(float) + input_item_bytes;\n  std::unique_ptr<char[]> key(new char[key_bytes]);\n\n  const float* weight_ptr = GetTensorData<float>(weight);\n\n  for (int i = 0; i < SizeOfDimension(input, 0); ++i) {\n    // Create running hash id and value for current dimension.\n    memcpy(key.get(), &seed, seed_size);\n    memcpy(key.get() + seed_size, input_ptr, input_item_bytes);\n\n    int64_t hash_signature = ::util::Fingerprint64(key.get(), key_bytes);\n    double running_value = static_cast<double>(hash_signature);\n    input_ptr += input_item_bytes;\n    if (weight_ptr == nullptr) {\n      score += running_value;\n    } else {\n      score += weight_ptr[i] * running_value;\n    }\n  }\n\n  return (score > 0) ? 1 : 0;\n}\n\nvoid SparseLshProjection(const TfLiteTensor* hash, const TfLiteTensor* input,\n                         const TfLiteTensor* weight, int32_t* out_buf) {\n  int num_hash = SizeOfDimension(hash, 0);\n  int num_bits = SizeOfDimension(hash, 1);\n  for (int i = 0; i < num_hash; i++) {\n    int32_t hash_signature = 0;\n    for (int j = 0; j < num_bits; j++) {\n      float seed = GetTensorData<float>(hash)[i * num_bits + j];\n      int bit = RunningSignBit(input, weight, seed);\n      hash_signature = (hash_signature << 1) | bit;\n    }\n    *out_buf++ = hash_signature + i * (1 << num_bits);\n  }\n}\n\nvoid DenseLshProjection(const TfLiteTensor* hash, const TfLiteTensor* input,\n                        const TfLiteTensor* weight, int32_t* out_buf) {\n  int num_hash = SizeOfDimension(hash, 0);\n  int num_bits = SizeOfDimension(hash, 1);\n  for (int i = 0; i < num_hash; i++) {\n    for (int j = 0; j < num_bits; j++) {\n      float seed = GetTensorData<float>(hash)[i * num_bits + j];\n      int bit = RunningSignBit(input, weight, seed);\n      *out_buf++ = bit;\n    }\n  }\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);\n\n  TfLiteTensor* out_tensor;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));\n  int32_t* out_buf = out_tensor->data.i32;\n  const TfLiteTensor* hash;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &hash));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input));\n  const TfLiteTensor* weight =\n      NumInputs(node) == 2 ? nullptr : GetInput(context, node, 2);\n\n  switch (params->type) {\n    case kTfLiteLshProjectionDense:\n      DenseLshProjection(hash, input, weight, out_buf);\n      break;\n    case kTfLiteLshProjectionSparse:\n      SparseLshProjection(hash, input, weight, out_buf);\n      break;\n    default:\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n}  // namespace lsh_projection\n\nTfLiteRegistration* Register_LSH_PROJECTION() {\n  static TfLiteRegistration r = {nullptr, nullptr, lsh_projection::Resize,\n                                 lsh_projection::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"