"# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Functional tests for 3d pooling operations.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import gradient_checker\nfrom tensorflow.python.ops import gradients_impl\nfrom tensorflow.python.ops import nn_ops\nimport tensorflow.python.ops.nn_grad  # pylint: disable=unused-import\nfrom tensorflow.python.platform import test\n\n\ndef GetTestConfigs():\n  \"\"\"Get all the valid tests configs to run.\n\n  Returns:\n    all the valid test configs as tuples of data_format and use_gpu.\n  \"\"\"\n  test_configs = [(\"NDHWC\", False), (\"NDHWC\", True)]\n  if test.is_gpu_available(cuda_only=True):\n    # \"NCHW\" format is currently supported exclusively on CUDA GPUs.\n    test_configs += [(\"NCDHW\", True)]\n  return test_configs\n\n\n# TODO(mjanusz): Add microbenchmarks for 3d pooling.\nclass PoolingTest(test.TestCase):\n\n  def _VerifyOneTest(self, pool_func, input_sizes, window, strides, padding,\n                     data_format, expected, use_gpu):\n    \"\"\"Verifies the output values of the pooling function.\n\n    Args:\n      pool_func: Function to be called: co.MaxPool, co.AvgPool.\n      input_sizes: Input tensor dimensions.\n      window: Tuple of kernel dims: planes, rows, cols.\n      strides: Tuple of strides for dims: planes, rows, cols.\n      padding: Padding type.\n      data_format: The data format we use to run the pooling operation.\n      expected: An array containing the expected operation outputs.\n      use_gpu: Whether to run ops on GPU.\n    \"\"\"\n    total_size = 1\n    for s in input_sizes:\n      total_size *= s\n    # Initializes the input tensor with array containing incrementing\n    # numbers from 1.\n    x = [f * 1.0 for f in range(1, total_size + 1)]\n    with self.cached_session(use_gpu=use_gpu) as sess:\n      t = constant_op.constant(x, shape=input_sizes)\n      window = [1] + list(window) + [1]\n      strides = [1] + list(strides) + [1]\n      if data_format == \"NCDHW\":\n        t = test_util.NHWCToNCHW(t)\n        window = test_util.NHWCToNCHW(window)\n        strides = test_util.NHWCToNCHW(strides)\n      t = pool_func(\n          t,\n          ksize=window,\n          strides=strides,\n          padding=padding,\n          data_format=data_format)\n      if data_format == \"NCDHW\":\n        t = test_util.NCHWToNHWC(t)\n      vals = self.evaluate(t)\n    # Verifies values.\n    actual = vals.flatten()\n    self.assertAllClose(expected, actual)\n\n  def _VerifyValues(self, pool_func, input_sizes, window, strides,\n                    padding, expected):\n    for data_format, use_gpu in GetTestConfigs():\n      self._VerifyOneTest(pool_func, input_sizes, window, strides, padding,\n                          data_format, expected, use_gpu)\n\n  def testAvgPool3dValidPadding(self):\n    expected_output = [20.5, 21.5, 22.5]\n    self._VerifyValues(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 3, 3, 3, 3],\n        window=(2, 2, 2),\n        strides=(2, 2, 2),\n        padding=\"VALID\",\n        expected=expected_output)\n\n  def testAvgPool3dSamePadding(self):\n    expected_output = [20.5, 21.5, 22.5, 26.5, 27.5, 28.5]\n    self._VerifyValues(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 2, 2, 4, 3],\n        window=(2, 2, 2),\n        strides=(2, 2, 2),\n        padding=\"SAME\",\n        expected=expected_output)\n\n  def testAvgPool3dSamePaddingDifferentStrides(self):\n    expected_output = [1.5, 4.5, 7.5, 17.5, 20.5, 23.5, 33.5, 36.5, 39.5]\n    self._VerifyValues(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 5, 8, 1, 1],\n        window=(1, 2, 3),\n        strides=(2, 3, 1),\n        padding=\"SAME\",\n        expected=expected_output)\n\n  def testMaxPool3dValidPadding(self):\n    expected_output = [40.0, 41.0, 42.0]\n    self._VerifyValues(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 3, 3, 3, 3],\n        window=(2, 2, 2),\n        strides=(2, 2, 2),\n        padding=\"VALID\",\n        expected=expected_output)\n\n  def testMaxPool3dSamePadding(self):\n    expected_output = [31., 32., 33., 34., 35., 36.]\n    self._VerifyValues(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 2, 2, 3, 3],\n        window=(2, 2, 2),\n        strides=(2, 2, 2),\n        padding=\"SAME\",\n        expected=expected_output)\n\n  def testMaxPool3dSamePaddingDifferentStrides(self):\n    expected_output = [2., 5., 8., 18., 21., 24., 34., 37., 40.]\n    self._VerifyValues(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 5, 8, 1, 1],\n        window=(1, 2, 3),\n        strides=(2, 3, 1),\n        padding=\"SAME\",\n        expected=expected_output)\n\n    # Test pooling on a larger input, with different stride and kernel\n    # size for the 'z' dimension.\n\n    # Simulate max pooling in numpy to get the expected output.\n    input_data = np.arange(1, 5 * 27 * 27 * 64 + 1).reshape((5, 27, 27, 64))\n    input_data = np.pad(input_data, [[0, 0], [0, 1], [0, 1], [0, 0]],\n                        mode=\"constant\")\n    expected_output = input_data[:, 1::2, 1::2, :]\n    expected_output[:, -1, :, :] = input_data[:, -2, 1::2, :]\n    expected_output[:, :, -1, :] = input_data[:, 1::2, -2, :]\n    expected_output[:, -1, -1, :] = input_data[:, -2, -2, :]\n\n    self._VerifyValues(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 5, 27, 27, 64],\n        window=(1, 2, 2),\n        strides=(1, 2, 2),\n        padding=\"SAME\",\n        expected=expected_output.flatten())\n\n  def testKernelSmallerThanStride(self):\n    self._VerifyValues(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 3, 3, 3, 1],\n        window=[1, 1, 1],\n        strides=[2, 2, 2],\n        padding=\"SAME\",\n        expected=[1, 3, 7, 9, 19, 21, 25, 27])\n\n    self._VerifyValues(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 7, 7, 7, 1],\n        window=[2, 2, 2],\n        strides=[3, 3, 3],\n        padding=\"VALID\",\n        expected=[58, 61, 79, 82, 205, 208, 226, 229])\n\n    self._VerifyValues(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 3, 3, 3, 1],\n        window=[1, 1, 1],\n        strides=[2, 2, 2],\n        padding=\"SAME\",\n        expected=[1, 3, 7, 9, 19, 21, 25, 27])\n\n    self._VerifyValues(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 7, 7, 7, 1],\n        window=[2, 2, 2],\n        strides=[3, 3, 3],\n        padding=\"VALID\",\n        expected=[29.5, 32.5, 50.5, 53.5, 176.5, 179.5, 197.5, 200.5])\n\n  def testMaxPool3DEmptyTensorOutputShape(self):\n    \"\"\"Verifies the output shape of the max pooling function when tensor is empty.\n\n    Args: none\n    \"\"\"\n    input_sizes = [0, 112, 112, 112, 64]\n\n    input_data = 1.\n    input_tensor = constant_op.constant(\n        input_data, shape=input_sizes, name=\"input\")\n    max_pool_3d = nn_ops.max_pool3d(\n        input_tensor,\n        ksize=[2, 2, 2],\n        strides=[2, 2, 2],\n        padding=\"VALID\",\n        data_format=\"NDHWC\",\n        name=\"max_pool_3d\")\n    values = self.evaluate(max_pool_3d)\n    self.assertEqual(values.shape, (0, 56, 56, 56, 64))\n\n  def _ConstructAndTestGradientForConfig(self,\n                                         pool_func,\n                                         input_sizes,\n                                         output_sizes,\n                                         window,\n                                         strides,\n                                         padding,\n                                         data_format,\n                                         use_gpu):\n    \"\"\"Verifies the gradients of a pooling function.\n\n    Args:\n      pool_func: Function to be called, co.MaxPool, co.AvgPool,\n        or the Lua version.\n      input_sizes: Input tensor dimensions.\n      output_sizes: Output tensor dimensions.\n      window: Tuple of kernel dims: planes, rows, cols.\n      strides: Tuple of strides for dims: planes, rows, cols.\n      padding: Padding type.\n      data_format: Data format string.\n      use_gpu: Whether to run on GPU.\n    \"\"\"\n    total_size = 1\n    for s in input_sizes:\n      total_size *= s\n    # Initializes the input tensor with array containing incrementing\n    # numbers from 1.\n    x = np.arange(1, total_size + 1, dtype=np.float32)\n    with self.cached_session(use_gpu=use_gpu):\n      input_tensor = constant_op.constant(x, shape=input_sizes, name=\"input\")\n      err_g_margin = 1e-3\n      err_gg_margin = 1.5e-2\n      if pool_func == nn_ops.avg_pool3d:\n        func_name = \"avg_pool3d\"\n        x_init_value = None\n      else:\n        x_init_value = np.asfarray(np.arange(1, total_size + 1),\n                                   dtype=np.float32).reshape(input_sizes)\n        func_name = \"max_pool3d\"\n\n      ksize = [1, window[0], window[1], window[2], 1]\n      strides = [1, strides[0], strides[1], strides[2], 1]\n      t = input_tensor\n\n      if data_format == \"NCDHW\":\n        ksize = test_util.NHWCToNCHW(ksize)\n        strides = test_util.NHWCToNCHW(strides)\n        t = test_util.NHWCToNCHW(t)\n        output_sizes = test_util.NHWCToNCHW(output_sizes)\n\n      t = pool_func(\n          t,\n          ksize=ksize,\n          strides=strides,\n          padding=padding,\n          data_format=data_format,\n          name=func_name)\n      t_g = gradients_impl.gradients(t**2, input_tensor)[0]\n\n      err_g = gradient_checker.compute_gradient_error(\n          input_tensor,\n          input_sizes,\n          t,\n          output_sizes,\n          x_init_value=x_init_value,\n          delta=1e-2)\n      err_gg = gradient_checker.compute_gradient_error(\n          input_tensor,\n          input_sizes,\n          t_g,\n          input_sizes,\n          x_init_value=x_init_value,\n          delta=1e-2)\n\n    print(\"%s gradient error = \" % func_name, err_g)\n    self.assertLess(err_g, err_g_margin)\n    print(\"%s second-order gradient error = \" % func_name, err_gg)\n    self.assertLess(err_gg, err_gg_margin)\n\n  def _ConstructAndTestGradient(self,\n                                pool_func,\n                                **kwargs):\n    \"\"\"Runs _ConstructAndTestGradientForConfig for all tests configurations.\"\"\"\n\n    for data_format, use_gpu in GetTestConfigs():\n      self._ConstructAndTestGradientForConfig(pool_func,\n                                              data_format=data_format,\n                                              use_gpu=use_gpu,\n                                              **kwargs)\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradValidPadding1_1_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 3, 3, 3, 1],\n        output_sizes=[1, 3, 3, 3, 1],\n        window=(1, 1, 1),\n        strides=(1, 1, 1),\n        padding=\"VALID\")\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradValidPadding2_1_6_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 2, 3, 4, 2],\n        output_sizes=[1, 1, 2, 3, 2],\n        window=(2, 2, 2),\n        strides=(1, 1, 1),\n        padding=\"VALID\")\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradValidPadding2_1_7_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 3, 2, 7, 1],\n        output_sizes=[1, 2, 1, 6, 1],\n        window=(2, 2, 2),\n        strides=(1, 1, 1),\n        padding=\"VALID\")\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradValidPadding1_2_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 3, 3, 3, 1],\n        output_sizes=[1, 2, 2, 2, 1],\n        window=(1, 1, 1),\n        strides=(2, 2, 2),\n        padding=\"VALID\")\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradValidPadding2_2_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.max_pool3d,\n        input_sizes=[2, 2, 2, 2, 1],\n        output_sizes=[2, 1, 1, 1, 1],\n        window=(2, 2, 2),\n        strides=(2, 2, 2),\n        padding=\"VALID\")\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradSamePadding1_1_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 3, 2, 4, 1],\n        output_sizes=[1, 3, 2, 4, 1],\n        window=(1, 1, 1),\n        strides=(1, 1, 1),\n        padding=\"SAME\")\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradSamePadding1_2_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 3, 2, 4, 1],\n        output_sizes=[1, 2, 1, 2, 1],\n        window=(1, 1, 1),\n        strides=(2, 2, 2),\n        padding=\"SAME\")\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradSamePadding2_1_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 3, 2, 4, 1],\n        output_sizes=[1, 3, 2, 4, 1],\n        window=(2, 2, 2),\n        strides=(1, 1, 1),\n        padding=\"SAME\")\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradSamePadding2_2_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 5, 2, 4, 2],\n        output_sizes=[1, 3, 1, 2, 2],\n        window=(2, 2, 2),\n        strides=(2, 2, 2),\n        padding=\"SAME\")\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradSamePadding3_1_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.max_pool3d,\n        input_sizes=[1, 3, 4, 2, 1],\n        output_sizes=[1, 3, 4, 2, 1],\n        window=(3, 3, 3),\n        strides=(1, 1, 1),\n        padding=\"SAME\")\n\n  @test_util.run_deprecated_v1\n  def testAvgPoolGradValidPadding1_1_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 3, 3, 3, 1],\n        output_sizes=[1, 3, 3, 3, 1],\n        window=(1, 1, 1),\n        strides=(1, 1, 1),\n        padding=\"VALID\")\n\n  @test_util.run_deprecated_v1\n  def testAvgPoolGradValidPadding1_2_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 3, 3, 3, 1],\n        output_sizes=[1, 2, 2, 2, 1],\n        window=(1, 1, 1),\n        strides=(2, 2, 2),\n        padding=\"VALID\")\n\n  @test_util.run_deprecated_v1\n  def testAvgPoolGradValidPadding2_1_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 3, 3, 3, 2],\n        output_sizes=[1, 2, 2, 2, 2],\n        window=(2, 2, 2),\n        strides=(1, 1, 1),\n        padding=\"VALID\")\n\n  @test_util.run_deprecated_v1\n  def testAvgPoolGradValidPadding2_2_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool3d,\n        input_sizes=[2, 2, 2, 2, 2],\n        output_sizes=[2, 1, 1, 1, 2],\n        window=(2, 2, 2),\n        strides=(2, 2, 2),\n        padding=\"VALID\")\n\n  @test_util.run_deprecated_v1\n  def testAvgPoolGradSamePadding1_1_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 3, 2, 4, 2],\n        output_sizes=[1, 3, 2, 4, 2],\n        window=(1, 1, 1),\n        strides=(1, 1, 1),\n        padding=\"SAME\")\n\n  @test_util.run_deprecated_v1\n  def testAvgPoolGradSamePadding1_2_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 3, 2, 4, 2],\n        output_sizes=[1, 2, 1, 2, 2],\n        window=(1, 1, 1),\n        strides=(2, 2, 2),\n        padding=\"SAME\")\n\n  @test_util.run_deprecated_v1\n  def testAvgPoolGradSamePadding2_1_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 2, 2, 2, 1],\n        output_sizes=[1, 2, 2, 2, 1],\n        window=(2, 2, 2),\n        strides=(1, 1, 1),\n        padding=\"SAME\")\n\n  @test_util.run_deprecated_v1\n  def testAvgPoolGradSamePadding2_2_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 5, 2, 4, 1],\n        output_sizes=[1, 3, 1, 2, 1],\n        window=(2, 2, 2),\n        strides=(2, 2, 2),\n        padding=\"SAME\")\n\n  @test_util.run_deprecated_v1\n  def testAvgPoolGradSamePadding3_1_3d(self):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool3d,\n        input_sizes=[1, 3, 6, 2, 1],\n        output_sizes=[1, 3, 6, 2, 1],\n        window=(3, 3, 3),\n        strides=(1, 1, 1),\n        padding=\"SAME\")\n\n\nif __name__ == \"__main__\":\n  test.main()"