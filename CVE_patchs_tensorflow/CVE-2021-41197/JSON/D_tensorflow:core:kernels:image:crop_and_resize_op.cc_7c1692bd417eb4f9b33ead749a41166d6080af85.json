"diff --git a/tensorflow/core/kernels/image/crop_and_resize_op.cc b/tensorflow/core/kernels/image/crop_and_resize_op.cc\nindex b6c49335ebf..0fd905acabd 100644\n--- a/tensorflow/core/kernels/image/crop_and_resize_op.cc\n+++ b/tensorflow/core/kernels/image/crop_and_resize_op.cc\n@@ -170,14 +170,15 @@ class CropAndResizeOp : public AsyncOpKernel {\n         context, crop_height > 0 && crop_width > 0,\n         errors::InvalidArgument(\"crop dimensions must be positive\"), done);\n \n+    TensorShape shape;\n+    OP_REQUIRES_OK_ASYNC(context, shape.AddDimWithStatus(num_boxes), done);\n+    OP_REQUIRES_OK_ASYNC(context, shape.AddDimWithStatus(crop_height), done);\n+    OP_REQUIRES_OK_ASYNC(context, shape.AddDimWithStatus(crop_width), done);\n+    OP_REQUIRES_OK_ASYNC(context, shape.AddDimWithStatus(depth), done);\n     // Allocate output tensor.\n     Tensor* output = nullptr;\n-    OP_REQUIRES_OK_ASYNC(\n-        context,\n-        context->allocate_output(\n-            0, TensorShape({num_boxes, crop_height, crop_width, depth}),\n-            &output),\n-        done);\n+    OP_REQUIRES_OK_ASYNC(context, context->allocate_output(0, shape, &output),\n+                         done);\n \n     auto compute_callback = [this, context, output]() {\n       const Tensor& image = context->input(0);\n@@ -417,14 +418,15 @@ class CropAndResizeGradImageOp : public AsyncOpKernel {\n           done);\n     }\n \n+    TensorShape shape;\n+    OP_REQUIRES_OK_ASYNC(context, shape.AddDimWithStatus(batch_size), done);\n+    OP_REQUIRES_OK_ASYNC(context, shape.AddDimWithStatus(image_height), done);\n+    OP_REQUIRES_OK_ASYNC(context, shape.AddDimWithStatus(image_width), done);\n+    OP_REQUIRES_OK_ASYNC(context, shape.AddDimWithStatus(depth), done);\n     // Allocate output tensor.\n     Tensor* output = nullptr;\n-    OP_REQUIRES_OK_ASYNC(\n-        context,\n-        context->allocate_output(\n-            0, TensorShape({batch_size, image_height, image_width, depth}),\n-            &output),\n-        done);\n+    OP_REQUIRES_OK_ASYNC(context, context->allocate_output(0, shape, &output),\n+                         done);\n \n     auto compute_callback = [this, context, output]() {\n       const Tensor& grads = context->input(0);"