"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/array_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#define EIGEN_USE_GPU\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#include <vector>\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_types.h\"\n#include \"tensorflow/core/framework/type_index.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/gtl/array_slice.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\n// Forward declarations of functors that will be defined in tile_ops_impl.h\nnamespace functor {\ntemplate <typename Device, typename T, typename Tmultiple>\nstruct Tile {\n  void operator()(const Device& d, Tensor* out, const Tensor& in,\n                  const gtl::ArraySlice<Tmultiple> broadcast_array) const;\n};\n\ntemplate <typename Device, typename T, int NDIM>\nstruct TileGrad {\n  void operator()(const Device& d, typename TTypes<T, NDIM>::Tensor out,\n                  typename TTypes<T, NDIM>::ConstTensor in,\n                  const Eigen::DSizes<Eigen::DenseIndex, NDIM>& indices,\n                  const Eigen::DSizes<Eigen::DenseIndex, NDIM>& sizes,\n                  bool first) const;\n};\n\ntemplate <typename Device, typename T>\nstruct TileGrad<Device, T, 0> {\n  void operator()(const Device& d, typename TTypes<T, 0>::Tensor out,\n                  typename TTypes<T, 0>::ConstTensor in,\n                  const Eigen::DSizes<Eigen::DenseIndex, 0>&,\n                  const Eigen::DSizes<Eigen::DenseIndex, 0>&, bool first) const;\n};\n\ntemplate <typename Device, typename T, int NDIM, int REDUCEDNDIM>\nstruct ReduceAndReshape {\n  void operator()(\n      const Device& d, typename TTypes<T, NDIM>::Tensor out,\n      typename TTypes<T, NDIM>::ConstTensor in,\n      const Eigen::DSizes<Eigen::DenseIndex, REDUCEDNDIM>& reduce_dim,\n      const Eigen::DSizes<Eigen::DenseIndex, NDIM>& reshape_dim) const;\n};\n\n// Explicit instantiations are defined in tile_ops_{cpu,gpu}_impl.*,\n// below are their declarations.\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nextern template struct Tile<GPUDevice, bool, int32>;\nextern template struct Tile<GPUDevice, bool, int64_t>;\nextern template struct Tile<GPUDevice, float, int32>;\nextern template struct Tile<GPUDevice, float, int64_t>;\nextern template struct Tile<GPUDevice, double, int32>;\nextern template struct Tile<GPUDevice, double, int64_t>;\nextern template struct Tile<GPUDevice, complex64, int32>;\nextern template struct Tile<GPUDevice, complex64, int64_t>;\nextern template struct Tile<GPUDevice, complex128, int32>;\nextern template struct Tile<GPUDevice, complex128, int64_t>;\nextern template struct Tile<GPUDevice, Eigen::half, int32>;\nextern template struct Tile<GPUDevice, Eigen::half, int64_t>;\nextern template struct Tile<GPUDevice, int16, int32>;\nextern template struct Tile<GPUDevice, int16, int64_t>;\nextern template struct Tile<GPUDevice, int32, int32>;\nextern template struct Tile<GPUDevice, int32, int64_t>;\nextern template struct Tile<GPUDevice, int64_t, int32>;\nextern template struct Tile<GPUDevice, int64_t, int64_t>;\n#define DECLARE_CUDA_DIM(T, NDIM)                      \\\n  extern template struct TileGrad<GPUDevice, T, NDIM>; \\\n  extern template struct ReduceAndReshape<GPUDevice, T, NDIM, 1>\n#else  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#define DECLARE_CUDA_DIM(T, NDIM)\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define DECLARE_TYPE(T)                             \\\n  extern template struct Tile<CPUDevice, T, int32>; \\\n  extern template struct Tile<CPUDevice, T, int64_t>;\nTF_CALL_bool(DECLARE_TYPE);\nTF_CALL_float(DECLARE_TYPE);\nTF_CALL_bfloat16(DECLARE_TYPE);\nTF_CALL_double(DECLARE_TYPE);\nTF_CALL_uint8(DECLARE_TYPE);\nTF_CALL_int32(DECLARE_TYPE);\nTF_CALL_int16(DECLARE_TYPE);\nTF_CALL_int64(DECLARE_TYPE);\nTF_CALL_uint32(DECLARE_TYPE);\nTF_CALL_uint64(DECLARE_TYPE);\nTF_CALL_half(DECLARE_TYPE);\nTF_CALL_complex64(DECLARE_TYPE);\nTF_CALL_complex128(DECLARE_TYPE);\nTF_CALL_tstring(DECLARE_TYPE);\nTF_CALL_variant(DECLARE_TYPE);\n#undef DECLARE_TYPE\n\n#define DECLARE_DIM(T, NDIM)                           \\\n  DECLARE_CUDA_DIM(T, NDIM);                           \\\n  extern template struct TileGrad<CPUDevice, T, NDIM>; \\\n  extern template struct ReduceAndReshape<CPUDevice, T, NDIM, 1>;\n\n#define DECLARE_TYPE(T) \\\n  DECLARE_DIM(T, 1)     \\\n  DECLARE_DIM(T, 2)     \\\n  DECLARE_DIM(T, 3)     \\\n  DECLARE_DIM(T, 4)     \\\n  DECLARE_DIM(T, 5)     \\\n  DECLARE_DIM(T, 6)     \\\n  DECLARE_DIM(T, 7)\nTF_CALL_float(DECLARE_TYPE);\nTF_CALL_bfloat16(DECLARE_TYPE);\nTF_CALL_double(DECLARE_TYPE);\nTF_CALL_int16(DECLARE_TYPE);\nTF_CALL_int32(DECLARE_TYPE);\nTF_CALL_int64(DECLARE_TYPE);\nTF_CALL_half(DECLARE_TYPE);\nTF_CALL_complex64(DECLARE_TYPE);\nTF_CALL_complex128(DECLARE_TYPE);\n#undef DECLARE_TYPE\n\n#undef DECLARE_DIM\n#undef DECLARE_CUDA_DIM\n\n}  // namespace functor\n\n// --------------------------------------------------------------------------\ntemplate <typename Device, typename Tmultiples>\nclass TileOp : public OpKernel {\n public:\n  explicit TileOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& multiples = context->input(1);\n\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsVector(multiples.shape()),\n        errors::InvalidArgument(\"Expected multiples to be 1-D, but got shape \",\n                                multiples.shape().DebugString()));\n    OP_REQUIRES(context, input.dims() == multiples.NumElements(),\n                errors::InvalidArgument(\n                    \"Expected multiples argument to be a vector of length \",\n                    input.dims(), \" but got length \", multiples.dim_size(0)));\n    const int input_dims = input.dims();\n\n    // Eigen doesn't support scalars on the GPU, so handle 0-D specially\n    if (input_dims == 0) {\n      context->set_output(0, input);\n      return;\n    }\n\n    const gtl::ArraySlice<Tmultiples> multiples_array(\n        multiples.flat<Tmultiples>().data(), input_dims);\n    TensorShape output_shape;\n    for (int i = 0; i < input_dims; ++i) {\n      OP_REQUIRES(\n          context, multiples_array[i] >= 0,\n          errors::InvalidArgument(\"Expected multiples[\", i, \"] >= 0, but got \",\n                                  multiples_array[i]));\n      output_shape.AddDim(input.dim_size(i) * multiples_array[i]);\n    }\n    if (output_shape == input.shape()) {\n      context->set_output(0, input);\n      return;\n    }\n    Tensor* result = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(0, output_shape, &result));\n\n    // If there's no output, there's nothing to do.\n    if (output_shape.num_elements() == 0) return;\n\n#define HANDLE_TYPE(DT)                               \\\n  if (context->input(0).dtype() == DT) {              \\\n    HandleCase<DT>(context, multiples_array, result); \\\n    return;                                           \\\n  }\n\n#define HANDLE_TYPE_NAME(T) HANDLE_TYPE(DataTypeToEnum<T>::value)\n\n    // Invoke macro using TF_CALL_* so type-filtering for platform applies.\n    TF_CALL_bool(HANDLE_TYPE_NAME);\n    TF_CALL_bfloat16(HANDLE_TYPE_NAME);\n    TF_CALL_float(HANDLE_TYPE_NAME);\n    TF_CALL_double(HANDLE_TYPE_NAME);\n    TF_CALL_uint8(HANDLE_TYPE_NAME);\n    TF_CALL_int8(HANDLE_TYPE_NAME);\n    TF_CALL_int32(HANDLE_TYPE_NAME);\n    TF_CALL_int16(HANDLE_TYPE_NAME);\n    TF_CALL_int64(HANDLE_TYPE_NAME);\n    TF_CALL_uint32(HANDLE_TYPE_NAME);\n    TF_CALL_uint64(HANDLE_TYPE_NAME);\n    TF_CALL_half(HANDLE_TYPE_NAME);\n    TF_CALL_tstring(HANDLE_TYPE_NAME);  // when DEVICE=CPUDevice.\n    TF_CALL_complex64(HANDLE_TYPE_NAME);\n    TF_CALL_complex128(HANDLE_TYPE_NAME);\n    TF_CALL_variant(HANDLE_TYPE_NAME);  // when DEVICE=CPUDevice\n\n#undef HANDLE_TYPE_NAME\n#undef HANDLE_TYPE\n\n    OP_REQUIRES(\n        context, false,\n        errors::Unimplemented(\n            \"TileOp : The input data type is not supported, DataType : \",\n            DataTypeString(context->input(0).dtype()),\n            \", Dimension : \", input_dims));\n  }\n\n private:\n  template <DataType DT>\n  void HandleCaseImpl(OpKernelContext* context,\n                      const gtl::ArraySlice<Tmultiples> multiples_array,\n                      Tensor* result) {\n    typedef typename EnumToDataType<DT>::Type T;\n    functor::Tile<Device, T, Tmultiples>()(context->eigen_device<Device>(),\n                                           result, context->input(0),\n                                           multiples_array);\n  }\n\n  template <DataType DT>\n  void HandleCase(OpKernelContext* context,\n                  const gtl::ArraySlice<Tmultiples> multiples_array,\n                  Tensor* result);\n\n  TF_DISALLOW_COPY_AND_ASSIGN(TileOp);\n};\n\ntemplate <typename Device, typename Tmultiples>\ntemplate <DataType DT>\ninline void TileOp<Device, Tmultiples>::HandleCase(\n    OpKernelContext* context, const gtl::ArraySlice<Tmultiples> multiples_array,\n    Tensor* result) {\n  // TODO(vrv): print out the device name if useful. Currently disabled to avoid\n  // having to use RTTI.\n  LOG(FATAL) << \"TileOp: Invalid combination of Device, DT: \"\n             // << typeid(Device).name() << \", \"\n             << DataTypeString(DT);\n}\n\n#define HANDLE_CASE(device, dtype, Tmultiples)                             \\\n  template <>                                                              \\\n  template <>                                                              \\\n  void TileOp<device, Tmultiples>::HandleCase<dtype>(                      \\\n      OpKernelContext * context,                                           \\\n      const gtl::ArraySlice<Tmultiples> multiples_array, Tensor* result) { \\\n    HandleCaseImpl<dtype>(context, multiples_array, result);               \\\n  }\n\n#define HANDLE_TYPE_NAME_CPU(T)                            \\\n  HANDLE_CASE(CPUDevice, DataTypeToEnum<T>::value, int32); \\\n  HANDLE_CASE(CPUDevice, DataTypeToEnum<T>::value, int64_t);\n\n#define HANDLE_TYPE_NAME_GPU(T)                            \\\n  HANDLE_CASE(GPUDevice, DataTypeToEnum<T>::value, int32); \\\n  HANDLE_CASE(GPUDevice, DataTypeToEnum<T>::value, int64_t);\n\nTF_CALL_bool(HANDLE_TYPE_NAME_CPU);\nTF_CALL_float(HANDLE_TYPE_NAME_CPU);\nTF_CALL_bfloat16(HANDLE_TYPE_NAME_CPU);\nTF_CALL_double(HANDLE_TYPE_NAME_CPU);\nTF_CALL_uint8(HANDLE_TYPE_NAME_CPU);\nTF_CALL_int8(HANDLE_TYPE_NAME_CPU);\nTF_CALL_int32(HANDLE_TYPE_NAME_CPU);\nTF_CALL_int16(HANDLE_TYPE_NAME_CPU);\nTF_CALL_int64(HANDLE_TYPE_NAME_CPU);\nTF_CALL_uint32(HANDLE_TYPE_NAME_CPU);\nTF_CALL_uint64(HANDLE_TYPE_NAME_CPU);\nTF_CALL_half(HANDLE_TYPE_NAME_CPU);\nTF_CALL_complex64(HANDLE_TYPE_NAME_CPU);\nTF_CALL_complex128(HANDLE_TYPE_NAME_CPU);\nTF_CALL_tstring(HANDLE_TYPE_NAME_CPU);\nTF_CALL_variant(HANDLE_TYPE_NAME_CPU);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nTF_CALL_bool(HANDLE_TYPE_NAME_GPU);\nTF_CALL_float(HANDLE_TYPE_NAME_GPU);\nTF_CALL_double(HANDLE_TYPE_NAME_GPU);\nTF_CALL_int16(HANDLE_TYPE_NAME_GPU);\nTF_CALL_int32(HANDLE_TYPE_NAME_GPU);\nTF_CALL_int64(HANDLE_TYPE_NAME_GPU);\nTF_CALL_half(HANDLE_TYPE_NAME_GPU);\nTF_CALL_complex64(HANDLE_TYPE_NAME_GPU);\nTF_CALL_complex128(HANDLE_TYPE_NAME_GPU);\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n\n#undef HANDLE_TYPE_NAME_CPU\n#undef HANDLE_TYPE_NAME_GPU\n#undef HANDLE_CASE\n\n// --------------------------------------------------------------------------\ntemplate <typename Device, typename Tmultiples>\nclass TileGradientOp : public OpKernel {\n public:\n  explicit TileGradientOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& multiples = context->input(1);\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsVector(multiples.shape()),\n        errors::InvalidArgument(\"Expected multiples to be 1-D, but got shape \",\n                                multiples.shape().DebugString()));\n    OP_REQUIRES(context, input.dims() == multiples.NumElements(),\n                errors::InvalidArgument(\n                    \"Expected multiples argument to be a vector of length \",\n                    input.dims(), \" but got length \", multiples.dim_size(0)));\n\n    const int input_dims = input.dims();\n\n    // Eigen doesn't support scalars on the GPU, so handle 0-D specially\n    if (input_dims == 0) {\n      context->set_output(0, input);\n      return;\n    }\n\n    const gtl::ArraySlice<Tmultiples> multiples_array(\n        multiples.flat<Tmultiples>().data(), input_dims);\n    TensorShape output_shape;\n    std::vector<Tmultiples> input_dim_size_vec;\n    for (int i = 0; i < input_dims; ++i) {\n      OP_REQUIRES(\n          context, multiples_array[i] > 0,\n          errors::InvalidArgument(\"Expected multiples[\", i, \"] > 0, but got \",\n                                  multiples_array[i]));\n      OP_REQUIRES(context, input.dim_size(i) % multiples_array[i] == 0,\n                  errors::InvalidArgument(\"Expected input_dim[\", i,\n                                          \"] to be divisible by multiples[\", i,\n                                          \"], but \", input.dim_size(i), \" % \",\n                                          multiples_array[i], \" != 0\"));\n      output_shape.AddDim(input.dim_size(i) / multiples_array[i]);\n      input_dim_size_vec.push_back(input.dim_size(i));\n    }\n    if (output_shape == input.shape()) {\n      context->set_output(0, input);\n      return;\n    }\n    Tensor* result = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(0, output_shape, &result));\n\n#define HANDLE_DIM(DT, NDIM)                                           \\\n  if (context->input(0).dtype() == DT && input_dims == NDIM) {         \\\n    HandleCase<DT, NDIM>(context, input_dim_size_vec, multiples_array, \\\n                         result);                                      \\\n    return;                                                            \\\n  }\n\n#define HANDLE_TYPE(T) \\\n  HANDLE_DIM(T, 1)     \\\n  HANDLE_DIM(T, 2)     \\\n  HANDLE_DIM(T, 3)     \\\n  HANDLE_DIM(T, 4)     \\\n  HANDLE_DIM(T, 5)     \\\n  HANDLE_DIM(T, 6)     \\\n  HANDLE_DIM(T, 7)\n\n#define HANDLE_TYPE_NAME(T) HANDLE_TYPE(DataTypeToEnum<T>::value)\n\n    TF_CALL_float(HANDLE_TYPE_NAME);\n    TF_CALL_double(HANDLE_TYPE_NAME);\n    TF_CALL_int32(HANDLE_TYPE_NAME);\n    TF_CALL_int16(HANDLE_TYPE_NAME);\n    TF_CALL_int64(HANDLE_TYPE_NAME);\n    TF_CALL_half(HANDLE_TYPE_NAME);\n    TF_CALL_bfloat16(HANDLE_TYPE_NAME);\n    TF_CALL_complex64(HANDLE_TYPE_NAME);\n    TF_CALL_complex128(HANDLE_TYPE_NAME);\n\n#undef HANDLE_TYPE_NAME\n#undef HANDLE_TYPE\n#undef HANDLE_DIM\n\n    OP_REQUIRES(context, false,\n                errors::Unimplemented(\"TileGradientOp : The input data type or \"\n                                      \"dimension is not supported, DataType : \",\n                                      DataTypeString(context->input(0).dtype()),\n                                      \", Dimension : \", input_dims));\n  }\n\n private:\n  template <DataType DT, int NDIM>\n  void HandleCase(OpKernelContext* context,\n                  const std::vector<Tmultiples>& input_dims,\n                  const gtl::ArraySlice<Tmultiples> multiples_array,\n                  Tensor* result);\n\n  template <DataType DT, int NDIM>\n  void HandleCaseImpl(OpKernelContext* context,\n                      const std::vector<Tmultiples>& input_dims,\n                      const gtl::ArraySlice<Tmultiples> multiples_array,\n                      Tensor* result) {\n    typedef typename EnumToDataType<DT>::Type T;\n\n    bool reduction_only = true;\n    std::vector<Tmultiples> reduction_dims;\n\n    for (int i = 0; i < NDIM; ++i) {\n      if (input_dims[i] > multiples_array[i] && multiples_array[i] > 1) {\n        reduction_only = false;\n        break;\n      } else {\n        if (multiples_array[i] == input_dims[i]) {\n          reduction_dims.push_back(i);\n        }\n      }\n    }\n\n    if (reduction_only) {\n#define HANDLE_DIM(D)                                            \\\n  if (reduction_dims.size() == (D)) {                            \\\n    HandleReduce<T, NDIM, (D)>(context, reduction_dims, result); \\\n    return;                                                      \\\n  }\n      // NOTE(keveman): Handling the most common case here.\n      // Adding more cases here would require more templating and code\n      // explosion. For instance, HANDLE_DIM(2) wouldn't make sense for NDIM=1.\n      HANDLE_DIM(1);\n\n// Fall through to the unoptimized version.\n#undef HANDLE_DIM\n    }\n\n    Eigen::DSizes<Eigen::DenseIndex, NDIM> indices;\n    Eigen::DSizes<Eigen::DenseIndex, NDIM> sizes;\n\n    // Accumulate slices along the dimensions into the output. The number of\n    // slices along dimension 'i' is simply the multiple along dimension 'i'\n    // passed to the original Tile op.\n    for (int i = 0; i < NDIM; ++i) {\n      sizes[i] = input_dims[i] / multiples_array[i];\n      indices[i] = 0;\n    }\n\n    bool first = true;\n    while (true) {\n      functor::TileGrad<Device, T, NDIM>()(\n          context->eigen_device<Device>(), result->tensor<T, NDIM>(),\n          context->input(0).tensor<T, NDIM>(), indices, sizes, first);\n      first = false;\n      // Increment the begin indices.\n      int i = 0;\n      while (i < NDIM && indices[i] / sizes[i] == multiples_array[i] - 1) {\n        indices[i] = 0;\n        ++i;\n      }\n      // We are finished if we have iterated to the maximum along all\n      // dimensions.\n      if (i == NDIM) {\n        break;\n      }\n      indices[i] += sizes[i];\n    }\n  }\n\n  template <typename T, int NDIM, int REDUCENDIM>\n  void HandleReduce(OpKernelContext* context,\n                    const std::vector<Tmultiples>& reduce_dim_in,\n                    Tensor* result) {\n    static_assert(NDIM >= REDUCENDIM, \"Too many reduced dimensions\");\n    Eigen::DSizes<Eigen::DenseIndex, REDUCENDIM> reduce_dim;\n    Eigen::DSizes<Eigen::DenseIndex, NDIM> reshape_dim;\n\n    for (int i = 0; i < REDUCENDIM; ++i) {\n      reduce_dim[i] = reduce_dim_in[i];\n    }\n\n    for (int i = 0; i < NDIM; ++i) {\n      reshape_dim[i] = result->dim_size(i);\n    }\n\n    functor::ReduceAndReshape<Device, T, NDIM, REDUCENDIM>()(\n        context->eigen_device<Device>(), result->tensor<T, NDIM>(),\n        context->input(0).tensor<T, NDIM>(), reduce_dim, reshape_dim);\n  }\n\n  TF_DISALLOW_COPY_AND_ASSIGN(TileGradientOp);\n};\n\ntemplate <typename Device, typename Tmultiples>\ntemplate <DataType DT, int NDIM>\ninline void TileGradientOp<Device, Tmultiples>::HandleCase(\n    OpKernelContext* context, const std::vector<Tmultiples>& input_dims,\n    const gtl::ArraySlice<Tmultiples> multiples_array, Tensor* result) {\n  LOG(FATAL) << \"TileGradientOp: Invalid combination of Device, DT and NDIM: \"\n             << TypeIndex::Make<Device>().name() << \", \" << DataTypeString(DT)\n             << \", \" << NDIM;\n}\n\n#define HANDLE_CASE(device, T, dtype, Tmultiples, ndim)                        \\\n  template <>                                                                  \\\n  template <>                                                                  \\\n  void TileGradientOp<device, Tmultiples>::HandleCase<dtype, ndim>(            \\\n      OpKernelContext * context, const std::vector<Tmultiples>& input_dims,    \\\n      const gtl::ArraySlice<Tmultiples> multiples_array, Tensor* result) {     \\\n    HandleCaseImpl<dtype, ndim>(context, input_dims, multiples_array, result); \\\n  }\n\n// 0-D handled specially above\n#define HANDLE_CASE_DIM(device, T, dtype)    \\\n  HANDLE_CASE(device, T, dtype, int32, 1);   \\\n  HANDLE_CASE(device, T, dtype, int32, 2);   \\\n  HANDLE_CASE(device, T, dtype, int32, 3);   \\\n  HANDLE_CASE(device, T, dtype, int32, 4);   \\\n  HANDLE_CASE(device, T, dtype, int32, 5);   \\\n  HANDLE_CASE(device, T, dtype, int32, 6);   \\\n  HANDLE_CASE(device, T, dtype, int32, 7);   \\\n  HANDLE_CASE(device, T, dtype, int64_t, 1); \\\n  HANDLE_CASE(device, T, dtype, int64_t, 2); \\\n  HANDLE_CASE(device, T, dtype, int64_t, 3); \\\n  HANDLE_CASE(device, T, dtype, int64_t, 4); \\\n  HANDLE_CASE(device, T, dtype, int64_t, 5); \\\n  HANDLE_CASE(device, T, dtype, int64_t, 6); \\\n  HANDLE_CASE(device, T, dtype, int64_t, 7);\n\n#define HANDLE_TYPE_NAME_CPU(T) \\\n  HANDLE_CASE_DIM(CPUDevice, T, DataTypeToEnum<T>::value);\n\n#define HANDLE_TYPE_NAME_GPU(T) \\\n  HANDLE_CASE_DIM(GPUDevice, T, DataTypeToEnum<T>::value);\n\nTF_CALL_float(HANDLE_TYPE_NAME_CPU);\nTF_CALL_double(HANDLE_TYPE_NAME_CPU);\nTF_CALL_int16(HANDLE_TYPE_NAME_CPU);\nTF_CALL_int32(HANDLE_TYPE_NAME_CPU);\nTF_CALL_int64(HANDLE_TYPE_NAME_CPU);\nTF_CALL_half(HANDLE_TYPE_NAME_CPU);\nTF_CALL_complex64(HANDLE_TYPE_NAME_CPU);\nTF_CALL_complex128(HANDLE_TYPE_NAME_CPU);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nTF_CALL_float(HANDLE_TYPE_NAME_GPU);\nTF_CALL_double(HANDLE_TYPE_NAME_GPU);\nTF_CALL_int16(HANDLE_TYPE_NAME_GPU);\nTF_CALL_int32(HANDLE_TYPE_NAME_GPU);\nTF_CALL_int64(HANDLE_TYPE_NAME_GPU);\nTF_CALL_half(HANDLE_TYPE_NAME_GPU);\nTF_CALL_complex64(HANDLE_TYPE_NAME_GPU);\nTF_CALL_complex128(HANDLE_TYPE_NAME_GPU);\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n\n#undef HANDLE_TYPE_NAME_CPU\n#undef HANDLE_TYPE_NAME_GPU\n#undef HANDLE_CASE_DIM\n#undef HANDLE_CASE\n\nREGISTER_KERNEL_BUILDER(Name(\"Tile\")\n                            .Device(DEVICE_CPU)\n                            .HostMemory(\"multiples\")\n                            .TypeConstraint<int32>(\"Tmultiples\"),\n                        TileOp<CPUDevice, int32>);\nREGISTER_KERNEL_BUILDER(Name(\"Tile\")\n                            .Device(DEVICE_CPU)\n                            .HostMemory(\"multiples\")\n                            .TypeConstraint<int64_t>(\"Tmultiples\"),\n                        TileOp<CPUDevice, int64>);\nREGISTER_KERNEL_BUILDER(Name(\"TileGrad\")\n                            .Device(DEVICE_CPU)\n                            .HostMemory(\"multiples\")\n                            .TypeConstraint<int32>(\"Tmultiples\"),\n                        TileGradientOp<CPUDevice, int32>);\nREGISTER_KERNEL_BUILDER(Name(\"TileGrad\")\n                            .Device(DEVICE_CPU)\n                            .HostMemory(\"multiples\")\n                            .TypeConstraint<int64_t>(\"Tmultiples\"),\n                        TileGradientOp<CPUDevice, int64>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#define REGISTER_GPU_TILE(type)                                      \\\n  REGISTER_KERNEL_BUILDER(Name(\"Tile\")                               \\\n                              .Device(DEVICE_GPU)                    \\\n                              .TypeConstraint<type>(\"T\")             \\\n                              .TypeConstraint<int32>(\"Tmultiples\")   \\\n                              .HostMemory(\"multiples\"),              \\\n                          TileOp<GPUDevice, int32>);                 \\\n  REGISTER_KERNEL_BUILDER(Name(\"Tile\")                               \\\n                              .Device(DEVICE_GPU)                    \\\n                              .TypeConstraint<type>(\"T\")             \\\n                              .TypeConstraint<int64_t>(\"Tmultiples\") \\\n                              .HostMemory(\"multiples\"),              \\\n                          TileOp<GPUDevice, int64>);\n\n#define REGISTER_GPU_TILE_GRAD(type)                                 \\\n  REGISTER_KERNEL_BUILDER(Name(\"TileGrad\")                           \\\n                              .Device(DEVICE_GPU)                    \\\n                              .TypeConstraint<type>(\"T\")             \\\n                              .TypeConstraint<int32>(\"Tmultiples\")   \\\n                              .HostMemory(\"multiples\"),              \\\n                          TileGradientOp<GPUDevice, int32>);         \\\n  REGISTER_KERNEL_BUILDER(Name(\"TileGrad\")                           \\\n                              .Device(DEVICE_GPU)                    \\\n                              .TypeConstraint<type>(\"T\")             \\\n                              .TypeConstraint<int64_t>(\"Tmultiples\") \\\n                              .HostMemory(\"multiples\"),              \\\n                          TileGradientOp<GPUDevice, int64>);\n\n#define REGISTER_GPU(type) \\\n  REGISTER_GPU_TILE(type); \\\n  REGISTER_GPU_TILE_GRAD(type);\n\nTF_CALL_bool(REGISTER_GPU_TILE);\nTF_CALL_float(REGISTER_GPU);\nTF_CALL_double(REGISTER_GPU);\nTF_CALL_half(REGISTER_GPU);\nTF_CALL_int16(REGISTER_GPU);\nTF_CALL_int32(REGISTER_GPU);\nTF_CALL_int64(REGISTER_GPU);\nTF_CALL_complex64(REGISTER_GPU);\nTF_CALL_complex128(REGISTER_GPU)\n\n#undef REGISTER_GPU_TILE\n#undef REGISTER_GPU_TILE_GRAD\n#undef REGISTER_GPU\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n\n}  // namespace tensorflow"