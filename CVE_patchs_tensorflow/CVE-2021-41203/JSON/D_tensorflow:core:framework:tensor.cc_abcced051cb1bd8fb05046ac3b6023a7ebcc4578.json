"diff --git a/tensorflow/core/framework/tensor.cc b/tensorflow/core/framework/tensor.cc\nindex 2abd8fce1c4..5e26bf05c03 100644\n--- a/tensorflow/core/framework/tensor.cc\n+++ b/tensorflow/core/framework/tensor.cc\n@@ -52,6 +52,7 @@ limitations under the License.\n #include \"tensorflow/core/lib/gtl/inlined_vector.h\"\n #include \"tensorflow/core/lib/strings/str_util.h\"\n #include \"tensorflow/core/lib/strings/strcat.h\"\n+#include \"tensorflow/core/platform/errors.h\"\n #include \"tensorflow/core/platform/logging.h\"\n #include \"tensorflow/core/platform/macros.h\"\n #include \"tensorflow/core/platform/protobuf.h\"\n@@ -723,11 +724,11 @@ bool Tensor::RefCountIsOne() const {\n // The macro CASES() expands to a switch statement conditioned on\n // TYPE_ENUM. Each case expands the STMTS after a typedef for T.\n #define SINGLE_ARG(...) __VA_ARGS__\n-#define CASE(TYPE, STMTS)             \\\n-  case DataTypeToEnum<TYPE>::value: { \\\n-    typedef TYPE T;                   \\\n-    STMTS;                            \\\n-    break;                            \\\n+#define CASE(TYPE, STMTS)               \\\n+  case DataTypeToEnum<TYPE>::value: {   \\\n+    typedef TF_ATTRIBUTE_UNUSED TYPE T; \\\n+    STMTS;                              \\\n+    break;                              \\\n   }\n #define CASES_WITH_DEFAULT(TYPE_ENUM, STMTS, INVALID, DEFAULT) \\\n   switch (TYPE_ENUM) {                                         \\\n@@ -763,9 +764,8 @@ bool Tensor::RefCountIsOne() const {\n   }\n \n #define CASES(TYPE_ENUM, STMTS)                                      \\\n-  CASES_WITH_DEFAULT(TYPE_ENUM, STMTS,                               \\\n-                     LOG(FATAL) << \"Unexpected type: \" << TYPE_ENUM; \\\n-                     , LOG(FATAL) << \"Type not set\";)\n+  CASES_WITH_DEFAULT(TYPE_ENUM, STMTS, LOG(FATAL) << \"Type not set\"; \\\n+                     , LOG(FATAL) << \"Unexpected type: \" << TYPE_ENUM;)\n \n Tensor::Tensor(Allocator* a, DataType type, const TensorShape& shape)\n     : shape_(shape), buf_(nullptr) {\n@@ -795,6 +795,16 @@ Tensor::Tensor(Allocator* a, DataType type, const TensorShape& shape,\n   }\n }\n \n+Status Tensor::BuildTensor(DataType type, const TensorShape& shape,\n+                           Tensor* out_tensor) {\n+  // Avoid crashes due to invalid or unsupported types.\n+  CASES_WITH_DEFAULT(\n+      type, {}, return errors::InvalidArgument(\"Type not set\"),\n+      return errors::InvalidArgument(\"Unexpected type: \", DataType_Name(type)));\n+  *out_tensor = Tensor(type, shape);\n+  return Status::OK();\n+}\n+\n // NOTE(mrry): The default allocator for a Tensor (when none is specified) is\n // the default CPU allocator for NUMA zone 0. Accessing that currently involves\n // acquiring a lock, which guards initialization of the per-NUMA zone"