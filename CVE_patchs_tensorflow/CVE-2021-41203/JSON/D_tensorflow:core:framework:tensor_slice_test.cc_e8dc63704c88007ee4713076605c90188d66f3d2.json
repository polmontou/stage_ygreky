"diff --git a/tensorflow/core/framework/tensor_slice_test.cc b/tensorflow/core/framework/tensor_slice_test.cc\nindex ae8fa902d48..8226c580e3e 100644\n--- a/tensorflow/core/framework/tensor_slice_test.cc\n+++ b/tensorflow/core/framework/tensor_slice_test.cc\n@@ -15,6 +15,8 @@ limitations under the License.\n \n #include \"tensorflow/core/framework/tensor_slice.h\"\n \n+#include <limits>\n+\n #include \"tensorflow/core/lib/core/status_test_util.h\"\n #include \"tensorflow/core/platform/logging.h\"\n #include \"tensorflow/core/platform/protobuf.h\"\n@@ -125,6 +127,48 @@ TEST(TensorSliceTest, Serialization) {\n   }\n }\n \n+// Testing `BuildTensorSlice` with valid and invalid input protos.\n+TEST(TensorSliceTest, BuildTensorSlice) {\n+  TensorSliceProto proto;\n+  TensorSlice({{0, -1}, {0, 10}, {14, 1}}).AsProto(&proto);\n+  TensorSlice s;\n+\n+  // Successful building.\n+  {\n+    TF_ASSERT_OK(TensorSlice::BuildTensorSlice(proto, &s));\n+    EXPECT_EQ(\"-:0,10:14,1\", s.DebugString());\n+  }\n+\n+  // Failed building due to negative extent start.\n+  {\n+    TensorSliceProto invalid_proto = proto;\n+    invalid_proto.mutable_extent(0)->set_start(-1);\n+    EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());\n+  }\n+\n+  // Failed building due to negative extent length.\n+  {\n+    TensorSliceProto invalid_proto = proto;\n+    invalid_proto.mutable_extent(2)->set_length(-1);\n+    EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());\n+  }\n+\n+  // Failed building due to missing extent length.\n+  {\n+    TensorSliceProto invalid_proto = proto;\n+    invalid_proto.mutable_extent(2)->clear_length();\n+    EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());\n+  }\n+\n+  // Failed building due to extent end overflowing.\n+  {\n+    TensorSliceProto invalid_proto = proto;\n+    invalid_proto.mutable_extent(2)->set_length(\n+        std::numeric_limits<int64_t>::max());\n+    EXPECT_FALSE(TensorSlice::BuildTensorSlice(invalid_proto, &s).ok());\n+  }\n+}\n+\n // Testing the slice intersection\n TEST(TensorSliceTest, Intersection) {\n   // \"EVERYTHING\" intersects with everything"