"diff --git a/tensorflow/core/util/saved_tensor_slice_util.h b/tensorflow/core/util/saved_tensor_slice_util.h\nindex d0b08b3c294..b992061a15d 100644\n--- a/tensorflow/core/util/saved_tensor_slice_util.h\n+++ b/tensorflow/core/util/saved_tensor_slice_util.h\n@@ -59,6 +59,9 @@ Status ParseShapeAndSlice(const string& shape_and_slice, TensorShape* shape,\n template <typename T>\n struct SaveTypeTraits;\n \n+template <typename T>\n+int TensorProtoDataSize(const TensorProto& t);\n+\n template <typename T>\n const typename SaveTypeTraits<T>::SavedType* TensorProtoData(\n     const TensorProto& t);\n@@ -95,6 +98,10 @@ void Fill(T* data, size_t n, TensorProto* t);\n #define TENSOR_PROTO_EXTRACT_TYPE(TYPE, FIELD, FTYPE)             \\\n   TENSOR_PROTO_EXTRACT_TYPE_HELPER(TYPE, FIELD, FTYPE, FTYPE)     \\\n   template <>                                                     \\\n+  inline int TensorProtoDataSize<TYPE>(const TensorProto& t) {    \\\n+    return t.FIELD##_val_size();                                  \\\n+  }                                                               \\\n+  template <>                                                     \\\n   inline void Fill(const TYPE* data, size_t n, TensorProto* t) {  \\\n     typename protobuf::RepeatedField<FTYPE> copy(data, data + n); \\\n     t->mutable_##FIELD##_val()->Swap(&copy);                      \\\n@@ -104,6 +111,10 @@ void Fill(T* data, size_t n, TensorProto* t);\n #define TENSOR_PROTO_EXTRACT_TYPE_COMPLEX(TYPE, FIELD, FTYPE)       \\\n   TENSOR_PROTO_EXTRACT_TYPE_HELPER(TYPE, FIELD, FTYPE, TYPE)        \\\n   template <>                                                       \\\n+  inline int TensorProtoDataSize<TYPE>(const TensorProto& t) {      \\\n+    return t.FIELD##_val_size() / 2;                                \\\n+  }                                                                 \\\n+  template <>                                                       \\\n   inline void Fill(const TYPE* data, size_t n, TensorProto* t) {    \\\n     const FTYPE* sub = reinterpret_cast<const FTYPE*>(data);        \\\n     typename protobuf::RepeatedField<FTYPE> copy(sub, sub + 2 * n); \\\n@@ -136,6 +147,11 @@ TENSOR_PROTO_EXTRACT_TYPE(quint16, int, int32);\n template <>\n struct SaveTypeTraits<qint32> : SaveTypeTraits<int32> {};\n \n+template <>\n+inline int TensorProtoDataSize<qint32>(const TensorProto& t) {\n+  return t.int_val_size();\n+}\n+\n template <>\n inline const int32* TensorProtoData<qint32>(const TensorProto& t) {\n   static_assert(SaveTypeTraits<qint32>::supported,\n@@ -158,6 +174,11 @@ struct SaveTypeTraits<Eigen::half> {\n   typedef protobuf::RepeatedField<int32> RepeatedField;\n };\n \n+template <>\n+inline int TensorProtoDataSize<Eigen::half>(const TensorProto& t) {\n+  return t.half_val_size();\n+}\n+\n template <>\n inline const int* TensorProtoData<Eigen::half>(const TensorProto& t) {\n   return t.half_val().data();\n@@ -187,6 +208,11 @@ struct SaveTypeTraits<tstring> {\n   typedef protobuf::RepeatedPtrField<string> RepeatedField;\n };\n \n+template <>\n+inline int TensorProtoDataSize<tstring>(const TensorProto& t) {\n+  return t.string_val_size();\n+}\n+\n template <>\n inline const string* const* TensorProtoData<tstring>(const TensorProto& t) {\n   static_assert(SaveTypeTraits<tstring>::supported,"