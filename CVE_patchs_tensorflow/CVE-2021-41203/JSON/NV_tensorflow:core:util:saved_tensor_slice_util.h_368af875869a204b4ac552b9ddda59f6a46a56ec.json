"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// Utilities for saving/restoring tensor slice checkpoints.\n\n#ifndef TENSORFLOW_CORE_UTIL_SAVED_TENSOR_SLICE_UTIL_H_\n#define TENSORFLOW_CORE_UTIL_SAVED_TENSOR_SLICE_UTIL_H_\n\n#include <string>  // for string\n#include \"tensorflow/core/framework/tensor.pb.h\"\n#include \"tensorflow/core/framework/tensor_slice.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/lib/core/status.h\"  // for Status\n#include \"tensorflow/core/platform/protobuf.h\"\n\nnamespace tensorflow {\n\nnamespace checkpoint {\n\n// The key for the metadata in the tensor slice checkpoint files. It is \"\" so\n// that the metadata is always at the beginning of a checkpoint file.\nextern const char kSavedTensorSlicesKey[];\n\n// Encode a tensor name + a tensor slice into an ordered code and outputs it as\n// a string.\n// The format is\n//  <0>\n//  <tensor_name>\n//  <rank>\n//  <dim-0-start><dim-0-length>\n//  <dim-1-start><dim-1-length>\n//  ...\n\nstring EncodeTensorNameSlice(const string& name,\n                             const tensorflow::TensorSlice& slice);\n\n// Parse out the name and the slice from string encoded as an ordered code.\nStatus DecodeTensorNameSlice(const string& code, string* name,\n                             tensorflow::TensorSlice* slice);\n\n// Extracts the full shape, slice spec, and shape of the slice from\n// \"shape_and_slice\".  On non-OK return, caller must clear the out-arguments\n// before reusing.\nStatus ParseShapeAndSlice(const string& shape_and_slice, TensorShape* shape,\n                          TensorSlice* slice, TensorShape* shape_slice);\n\ntemplate <typename T>\nstruct SaveTypeTraits;\n\ntemplate <typename T>\nint TensorProtoDataSize(const TensorProto& t);\n\ntemplate <typename T>\nconst typename SaveTypeTraits<T>::SavedType* TensorProtoData(\n    const TensorProto& t);\n\ntemplate <typename T>\ntypename SaveTypeTraits<T>::RepeatedField* MutableTensorProtoData(\n    TensorProto* t);\n\ntemplate <typename T>\nvoid Fill(T* data, size_t n, TensorProto* t);\n\n#define TENSOR_PROTO_EXTRACT_TYPE_HELPER(TYPE, FIELD, FTYPE, STYPE)      \\\n  template <>                                                            \\\n  struct SaveTypeTraits<TYPE> {                                          \\\n    static constexpr bool supported = true;                              \\\n    typedef STYPE SavedType;                                             \\\n    typedef protobuf::RepeatedField<FTYPE> RepeatedField;                \\\n  };                                                                     \\\n  template <>                                                            \\\n  inline const STYPE* TensorProtoData<TYPE>(const TensorProto& t) {      \\\n    static_assert(SaveTypeTraits<TYPE>::supported,                       \\\n                  \"Specified type \" #TYPE \" not supported for Restore\"); \\\n    return reinterpret_cast<const STYPE*>(t.FIELD##_val().data());       \\\n  }                                                                      \\\n  template <>                                                            \\\n  inline protobuf::RepeatedField<FTYPE>* MutableTensorProtoData<TYPE>(   \\\n      TensorProto * t) {                                                 \\\n    static_assert(SaveTypeTraits<TYPE>::supported,                       \\\n                  \"Specified type \" #TYPE \" not supported for Save\");    \\\n    return reinterpret_cast<protobuf::RepeatedField<FTYPE>*>(            \\\n        t->mutable_##FIELD##_val());                                     \\\n  }\n\n#define TENSOR_PROTO_EXTRACT_TYPE(TYPE, FIELD, FTYPE)             \\\n  TENSOR_PROTO_EXTRACT_TYPE_HELPER(TYPE, FIELD, FTYPE, FTYPE)     \\\n  template <>                                                     \\\n  inline int TensorProtoDataSize<TYPE>(const TensorProto& t) {    \\\n    return t.FIELD##_val_size();                                  \\\n  }                                                               \\\n  template <>                                                     \\\n  inline void Fill(const TYPE* data, size_t n, TensorProto* t) {  \\\n    typename protobuf::RepeatedField<FTYPE> copy(data, data + n); \\\n    t->mutable_##FIELD##_val()->Swap(&copy);                      \\\n  }\n\n// Complex needs special treatment since proto doesn't have native complex\n#define TENSOR_PROTO_EXTRACT_TYPE_COMPLEX(TYPE, FIELD, FTYPE)       \\\n  TENSOR_PROTO_EXTRACT_TYPE_HELPER(TYPE, FIELD, FTYPE, TYPE)        \\\n  template <>                                                       \\\n  inline int TensorProtoDataSize<TYPE>(const TensorProto& t) {      \\\n    return t.FIELD##_val_size() / 2;                                \\\n  }                                                                 \\\n  template <>                                                       \\\n  inline void Fill(const TYPE* data, size_t n, TensorProto* t) {    \\\n    const FTYPE* sub = reinterpret_cast<const FTYPE*>(data);        \\\n    typename protobuf::RepeatedField<FTYPE> copy(sub, sub + 2 * n); \\\n    t->mutable_##FIELD##_val()->Swap(&copy);                        \\\n  }\n\nTENSOR_PROTO_EXTRACT_TYPE(bool, bool, bool);\nTENSOR_PROTO_EXTRACT_TYPE(float, float, float);\nTENSOR_PROTO_EXTRACT_TYPE(double, double, double);\nTENSOR_PROTO_EXTRACT_TYPE_COMPLEX(complex64, scomplex, float);\nTENSOR_PROTO_EXTRACT_TYPE_COMPLEX(complex128, dcomplex, double);\nTENSOR_PROTO_EXTRACT_TYPE(int32, int, int32);\nTENSOR_PROTO_EXTRACT_TYPE(uint32, uint32, uint32);\nTENSOR_PROTO_EXTRACT_TYPE(int64_t, int64, protobuf_int64);\nTENSOR_PROTO_EXTRACT_TYPE(uint64, uint64, protobuf_uint64);\nTENSOR_PROTO_EXTRACT_TYPE(uint16, int, int32);\nTENSOR_PROTO_EXTRACT_TYPE(uint8, int, int32);\nTENSOR_PROTO_EXTRACT_TYPE(int8, int, int32);\nTENSOR_PROTO_EXTRACT_TYPE(int16, int, int32);\nTENSOR_PROTO_EXTRACT_TYPE(qint8, int, int32);\nTENSOR_PROTO_EXTRACT_TYPE(quint8, int, int32);\nTENSOR_PROTO_EXTRACT_TYPE(quint16, int, int32);\n\n#undef TENSOR_PROTO_EXTRACT_TYPE_COMPLEX\n#undef TENSOR_PROTO_EXTRACT_TYPE_HELPER\n#undef TENSOR_PROTO_EXTRACT_TYPE\n\n// Custom implementation for qint32, based on the one for int32.\n\ntemplate <>\nstruct SaveTypeTraits<qint32> : SaveTypeTraits<int32> {};\n\ntemplate <>\ninline int TensorProtoDataSize<qint32>(const TensorProto& t) {\n  return t.int_val_size();\n}\n\ntemplate <>\ninline const int32* TensorProtoData<qint32>(const TensorProto& t) {\n  static_assert(SaveTypeTraits<qint32>::supported,\n                \"Specified type qint32 not supported for Restore\");\n  return reinterpret_cast<const int32*>(t.int_val().data());\n}\n\ninline void Fill(const qint32* data, size_t n, TensorProto* t) {\n  const int32* p = reinterpret_cast<const int32*>(data);\n  typename protobuf::RepeatedField<int32> copy(p, p + n);\n  t->mutable_int_val()->Swap(&copy);\n}\n\n// Custom implementation for Eigen::half.\n\ntemplate <>\nstruct SaveTypeTraits<Eigen::half> {\n  static constexpr bool supported = true;\n  typedef int SavedType;\n  typedef protobuf::RepeatedField<int32> RepeatedField;\n};\n\ntemplate <>\ninline int TensorProtoDataSize<Eigen::half>(const TensorProto& t) {\n  return t.half_val_size();\n}\n\ntemplate <>\ninline const int* TensorProtoData<Eigen::half>(const TensorProto& t) {\n  return t.half_val().data();\n}\n\ntemplate <>\ninline protobuf::RepeatedField<int32>* MutableTensorProtoData<Eigen::half>(\n    TensorProto* t) {\n  return t->mutable_half_val();\n}\n\ntemplate <>\ninline void Fill(const Eigen::half* data, size_t n, TensorProto* t) {\n  typename protobuf::RepeatedField<int32>* val = t->mutable_half_val();\n  val->Resize(n, 0);\n  for (size_t i = 0; i < n; ++i) {\n    val->Set(i, Eigen::numext::bit_cast<uint16>(data[i]));\n  }\n}\n\n// Custom implementation for string.\n\ntemplate <>\nstruct SaveTypeTraits<tstring> {\n  static constexpr bool supported = true;\n  typedef const string* SavedType;\n  typedef protobuf::RepeatedPtrField<string> RepeatedField;\n};\n\ntemplate <>\ninline int TensorProtoDataSize<tstring>(const TensorProto& t) {\n  return t.string_val_size();\n}\n\ntemplate <>\ninline const string* const* TensorProtoData<tstring>(const TensorProto& t) {\n  static_assert(SaveTypeTraits<tstring>::supported,\n                \"Specified type tstring not supported for Restore\");\n  return t.string_val().data();\n}\n\ntemplate <>\ninline protobuf::RepeatedPtrField<string>* MutableTensorProtoData<tstring>(\n    TensorProto* t) {\n  static_assert(SaveTypeTraits<tstring>::supported,\n                \"Specified type tstring not supported for Save\");\n  return t->mutable_string_val();\n}\n\ntemplate <>\ninline void Fill(const tstring* data, size_t n, TensorProto* t) {\n  typename protobuf::RepeatedPtrField<string> copy(data, data + n);\n  t->mutable_string_val()->Swap(&copy);\n}\n\n}  // namespace checkpoint\n\n}  // namespace tensorflow\n\n#endif  // TENSORFLOW_CORE_UTIL_SAVED_TENSOR_SLICE_UTIL_H_"