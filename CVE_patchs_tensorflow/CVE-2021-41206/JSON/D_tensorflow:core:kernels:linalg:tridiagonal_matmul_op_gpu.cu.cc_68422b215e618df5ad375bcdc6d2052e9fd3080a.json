"diff --git a/tensorflow/core/kernels/linalg/tridiagonal_matmul_op_gpu.cu.cc b/tensorflow/core/kernels/linalg/tridiagonal_matmul_op_gpu.cu.cc\nindex a1fe54e073b..c1b75f2cd0e 100644\n--- a/tensorflow/core/kernels/linalg/tridiagonal_matmul_op_gpu.cu.cc\n+++ b/tensorflow/core/kernels/linalg/tridiagonal_matmul_op_gpu.cu.cc\n@@ -66,6 +66,12 @@ class TridiagonalMatMulOpGpu : public OpKernel {\n     const Tensor& rhs = context->input(3);\n \n     const int ndims = rhs.dims();\n+    OP_REQUIRES(\n+        context, ndims >= 2,\n+        errors::InvalidArgument(\"Input must have rank >= 2, but got \", ndims));\n+    OP_REQUIRES_OK(context, ValidateInputTensor(superdiag, \"superdiag\", rhs));\n+    OP_REQUIRES_OK(context, ValidateInputTensor(maindiag, \"maindiag\", rhs));\n+    OP_REQUIRES_OK(context, ValidateInputTensor(subdiag, \"subdiag\", rhs));\n     int64 batch_size = 1;\n     for (int i = 0; i < ndims - 2; i++) {\n       batch_size *= rhs.dim_size(i);\n@@ -85,6 +91,39 @@ class TridiagonalMatMulOpGpu : public OpKernel {\n         maindiag.flat<Scalar>().data(), subdiag.flat<Scalar>().data(),\n         rhs.flat<Scalar>().data(), output->flat<Scalar>().data()));\n   }\n+\n+ private:\n+  Status ValidateInputTensor(const Tensor& tensor,\n+                             const std::string& tensor_name,\n+                             const Tensor& rhs) {\n+    const int ndims = rhs.dims();\n+    if (tensor.dims() != ndims) {\n+      return errors::InvalidArgument(tensor_name,\n+                                     \" must have same rank as rhs, but got \",\n+                                     tensor.dims(), \" and \", ndims);\n+    }\n+    for (int i = 0; i < ndims - 2; i++) {\n+      if (tensor.dim_size(i) != rhs.dim_size(i)) {\n+        return errors::InvalidArgument(\n+            tensor_name,\n+            \" must have same outer dimensions as rhs, but for index \", i,\n+            \", got \", tensor.dim_size(i), \" and \", rhs.dim_size(i));\n+      }\n+    }\n+    if (tensor.dim_size(ndims - 2) != 1) {\n+      return errors::InvalidArgument(\n+          tensor_name, \"'s second-to-last dimension must be 1, but got \",\n+          tensor.dim_size(ndims - 2));\n+    }\n+    if (tensor.dim_size(ndims - 1) != rhs.dim_size(ndims - 2)) {\n+      return errors::InvalidArgument(tensor_name,\n+                                     \"'s last dimension size must be rhs's \"\n+                                     \"second-to-last dimension size, but got \",\n+                                     tensor.dim_size(ndims - 1), \" and \",\n+                                     rhs.dim_size(ndims - 2));\n+    }\n+    return Status::OK();\n+  }\n };\n \n REGISTER_LINALG_OP_GPU(\"TridiagonalMatMul\", (TridiagonalMatMulOpGpu<float>),"