"diff --git a/tensorflow/python/kernel_tests/pooling_ops_test.py b/tensorflow/python/kernel_tests/pooling_ops_test.py\nindex 6f1b5ede1f3..79adfff643f 100644\n--- a/tensorflow/python/kernel_tests/pooling_ops_test.py\n+++ b/tensorflow/python/kernel_tests/pooling_ops_test.py\n@@ -618,6 +618,7 @@ class PoolingTest(test.TestCase, parameterized.TestCase):\n \n   @parameterized.parameters(\n       GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n+  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n   @test_util.run_deprecated_v1\n   def testMaxPoolNegativeInputExpPaddingAdv(self, **kwargs):\n     expected_output = [-1, -1, -3, -5, -7, -7, -9, -11, -19, -19, -21, -23, -31,\n@@ -2390,6 +2391,82 @@ class PoolingTest(test.TestCase, parameterized.TestCase):\n             explicit_paddings=[1, 1, 1, 1, 1, 1, 0, 0],\n             data_format=\"NHWC\"))\n \n+  def testMaxPoolGradEagerShapeErrors(self):\n+    with context.eager_mode():\n+      orig_in = array_ops.ones((1, 1, 1, 1))\n+\n+      # Test invalid orig_out shape\n+      orig_out = array_ops.ones((1, 1, 1, 2))\n+      grad = array_ops.ones((1, 1, 1, 1))\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          r\"Expected orig_output shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n+        gen_nn_ops.max_pool_grad(\n+            orig_in, orig_out, grad, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n+            padding=\"VALID\")\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          r\"Expected orig_output shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n+        gen_nn_ops.max_pool_grad_grad(\n+            orig_in, orig_out, grad, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n+            padding=\"VALID\")\n+\n+      # Test invalid grad shape\n+      orig_out = array_ops.ones((1, 1, 1, 1))\n+      grad = array_ops.ones((1, 1, 1, 2))\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          r\"Expected grad shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n+        gen_nn_ops.max_pool_grad(\n+            orig_in, orig_out, grad, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n+            padding=\"VALID\")\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          r\"Expected grad shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n+        gen_nn_ops.max_pool_grad_grad(\n+            orig_in, orig_out, grad, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n+            padding=\"VALID\")\n+\n+  def testMaxPoolGradWithArgmaxEagerShapeErrors(self):\n+    with context.eager_mode():\n+      inp = array_ops.ones((1, 1, 1, 1))\n+\n+      # Test invalid grad shape\n+      grad = array_ops.ones((1, 1, 1, 2))\n+      argmax = array_ops.zeros((1, 1, 1, 1), dtype=dtypes.int64)\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          r\"Expected grad shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n+        gen_nn_ops.max_pool_grad_with_argmax(\n+            inp, grad, argmax, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n+            padding=\"VALID\")\n+      # max_pool_grad_grad_with_argmax is only implemented for GPUs\n+      if test.is_gpu_available():\n+        with self.assertRaisesRegex(\n+            errors_impl.InvalidArgumentError,\n+            r\"Expected grad shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n+          gen_nn_ops.max_pool_grad_grad_with_argmax(\n+              inp, grad, argmax, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n+              padding=\"VALID\")\n+\n+      # Test invalid argmax shape\n+      grad = array_ops.ones((1, 1, 1, 1))\n+      argmax = array_ops.ones((1, 1, 1, 2), dtype=dtypes.int64)\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          r\"Expected argmax shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n+        gen_nn_ops.max_pool_grad_with_argmax(\n+            inp, grad, argmax, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n+            padding=\"VALID\")\n+      # max_pool_grad_grad_with_argmax is only implemented for GPUs\n+      if test.is_gpu_available():\n+        with self.assertRaisesRegex(\n+            errors_impl.InvalidArgumentError,\n+            r\"Expected argmax shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n+          gen_nn_ops.max_pool_grad_grad_with_argmax(\n+              inp, grad, argmax, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n+              padding=\"VALID\")\n+\n \n def GetMaxPoolFwdTest(input_size, filter_size, strides, padding):\n "