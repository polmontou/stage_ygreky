"diff --git a/tensorflow/python/kernel_tests/tridiagonal_matmul_op_test.py b/tensorflow/python/kernel_tests/tridiagonal_matmul_op_test.py\nindex 3fd04bf1911..3bca2a39f08 100644\n--- a/tensorflow/python/kernel_tests/tridiagonal_matmul_op_test.py\n+++ b/tensorflow/python/kernel_tests/tridiagonal_matmul_op_test.py\n@@ -19,12 +19,15 @@ import itertools\n import numpy as np\n \n from tensorflow.python.client import session\n+from tensorflow.python.eager import context\n from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors_impl\n from tensorflow.python.framework import ops\n from tensorflow.python.ops import array_ops\n from tensorflow.python.ops import control_flow_ops\n from tensorflow.python.ops import gradient_checker_v2\n+from tensorflow.python.ops import linalg_ops\n from tensorflow.python.ops import math_ops\n from tensorflow.python.ops import variables\n from tensorflow.python.ops.linalg import linalg_impl\n@@ -175,6 +178,37 @@ class TridiagonalMulOpTest(test.TestCase):\n     rhs = self._randomComplexArray((b, m, n))\n     self._gradientTest(diags, rhs, dtype=dtypes.complex128)\n \n+  def _testErrorWithShapesEager(self, exception_regex, superdiag_shape,\n+                                maindiag_shape, subdiag_shape, rhs_shape):\n+    with context.eager_mode():\n+      superdiag = array_ops.ones(superdiag_shape)\n+      maindiag = array_ops.ones(maindiag_shape)\n+      subdiag = array_ops.ones(subdiag_shape)\n+      rhs = array_ops.ones(rhs_shape)\n+      with self.assertRaisesRegex(errors_impl.InvalidArgumentError,\n+                                  exception_regex):\n+        linalg_ops.tridiagonal_mat_mul(superdiag, maindiag, subdiag, rhs)\n+\n+  def testInvalidShapesEagerGpu(self):\n+    if not test.is_gpu_available():\n+      self.skipTest('Test requires GPU')\n+    self._testErrorWithShapesEager('Input must have rank >= 2, but got ',\n+                                   [2], [2], [2], [2])\n+    self._testErrorWithShapesEager(\n+        'superdiag must have same rank as rhs, but got 3 and 2',\n+        [2, 1, 2], [2, 1], [2, 1], [2, 2])\n+    self._testErrorWithShapesEager(\n+        'maindiag must have same outer dimensions as rhs, but for index 0, got '\n+        '3 and 2',\n+        [2, 1, 2], [3, 1, 2], [2, 1, 2], [2, 2, 2])\n+    self._testErrorWithShapesEager(\n+        \"subdiag's second-to-last dimension must be 1, but got 3\",\n+        [2, 1, 2], [2, 1, 2], [2, 3, 2], [2, 2, 2])\n+    self._testErrorWithShapesEager(\n+        \"subdiag's last dimension size must be rhs's second-to-last dimension \"\n+        \"size, but got 3 and 2\",\n+        [2, 1, 2], [2, 1, 2], [2, 1, 3], [2, 2, 2])\n+\n   # Benchmark\n   class TridiagonalMatMulBenchmark(test.Benchmark):\n     sizes = [(100000, 1, 1), (1000000, 1, 1), (10000000, 1, 1), (100000, 10, 1),"