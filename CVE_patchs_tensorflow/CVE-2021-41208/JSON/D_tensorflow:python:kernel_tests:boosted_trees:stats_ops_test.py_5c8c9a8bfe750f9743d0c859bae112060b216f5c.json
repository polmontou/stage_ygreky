"diff --git a/tensorflow/python/kernel_tests/boosted_trees/stats_ops_test.py b/tensorflow/python/kernel_tests/boosted_trees/stats_ops_test.py\nindex 423f74d8ee2..82e907c6099 100644\n--- a/tensorflow/python/kernel_tests/boosted_trees/stats_ops_test.py\n+++ b/tensorflow/python/kernel_tests/boosted_trees/stats_ops_test.py\n@@ -17,9 +17,11 @@ import numpy as np\n \n from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors\n from tensorflow.python.framework import test_util\n from tensorflow.python.ops import array_ops\n from tensorflow.python.ops import boosted_trees_ops\n+from tensorflow.python.ops import gen_boosted_trees_ops\n from tensorflow.python.ops import sparse_ops\n from tensorflow.python.platform import googletest\n \n@@ -1665,6 +1667,199 @@ class StatsOpsTest(test_util.TensorFlowTestCase):\n     \"\"\"Tests numeric precision.\"\"\"\n     self._verify_precision(length=50000000)\n \n+  def testBoostedTreesCalculateBestGainsPerFeatureSecurity(self):\n+    node_id_range = [1, 2]\n+    stats_summary_list = [[[[]]]]\n+    l1 = [1.0]\n+    l2 = [1.0]\n+    tree_complexity = [1.0]\n+    min_node_weight = [1.17]\n+    max_splits = 1\n+    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n+      gen_boosted_trees_ops.boosted_trees_calculate_best_gains_per_feature(\n+          node_id_range=node_id_range,\n+          stats_summary_list=stats_summary_list,\n+          l1=l1,\n+          l2=l2,\n+          tree_complexity=tree_complexity,\n+          min_node_weight=min_node_weight,\n+          max_splits=max_splits)\n+\n+  def testBoostedTreesCalculateBestFeatureSplitSecurity(self):\n+    node_id_range = [1, 2]\n+    stats_summary = [[[[]]]]\n+    split_type = 'equality'\n+    l1 = [1.0]\n+    l2 = [1.0]\n+    tree_complexity = [1.0]\n+    min_node_weight = [1.17]\n+    logits_dimension = 5\n+    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n+      gen_boosted_trees_ops.boosted_trees_calculate_best_feature_split(\n+          node_id_range=node_id_range,\n+          stats_summary=stats_summary,\n+          l1=l1,\n+          l2=l2,\n+          tree_complexity=tree_complexity,\n+          min_node_weight=min_node_weight,\n+          logits_dimension=logits_dimension,\n+          split_type=split_type)\n+\n+  def testBoostedTreesCalculateBestFeatureSplitSecurity2(self):\n+    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n+      gen_boosted_trees_ops.boosted_trees_calculate_best_feature_split(\n+          node_id_range=[0, 8],\n+          stats_summary=[[[[1.0], [2.0], [3.0]]]],\n+          l1=[0.5],\n+          l2=[0.5],\n+          tree_complexity=[0.1],\n+          min_node_weight=[1.0],\n+          logits_dimension=8)\n+\n+  def testBoostedTreesCalculateBestFeatureSplitV2Security(self):\n+    node_id_range = [1, 2]\n+    stats_summaries_list = [[[[[]]]]]\n+    split_types = ['inequality']\n+    candidate_feature_ids = [1, 2, 3, 4]\n+    l1 = [1.0]\n+    l2 = [1.0]\n+    tree_complexity = [1.0]\n+    min_node_weight = [1.17]\n+    logits_dimension = 5\n+    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n+      gen_boosted_trees_ops.boosted_trees_calculate_best_feature_split_v2(\n+          node_id_range=node_id_range,\n+          stats_summaries_list=stats_summaries_list,\n+          split_types=split_types,\n+          candidate_feature_ids=candidate_feature_ids,\n+          l1=l1,\n+          l2=l2,\n+          tree_complexity=tree_complexity,\n+          min_node_weight=min_node_weight,\n+          logits_dimension=logits_dimension)\n+\n+  def testBoostedTreesSparseCalculateBestFeatureSplitSecurity(self):\n+    node_id_range = []\n+    stats_summary_indices = [[]]\n+    stats_summary_values = [1.0]\n+    stats_summary_shape = [1, 1, 1, 1]\n+    l1 = [1.0]\n+    l2 = [1.0]\n+    tree_complexity = [0.5]\n+    min_node_weight = [1.0]\n+    logits_dimension = 3\n+    split_type = 'inequality'\n+    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n+      gen_boosted_trees_ops.boosted_trees_sparse_calculate_best_feature_split(\n+          node_id_range=node_id_range,\n+          stats_summary_indices=stats_summary_indices,\n+          stats_summary_values=stats_summary_values,\n+          stats_summary_shape=stats_summary_shape,\n+          l1=l1,\n+          l2=l2,\n+          tree_complexity=tree_complexity,\n+          min_node_weight=min_node_weight,\n+          logits_dimension=logits_dimension,\n+          split_type=split_type)\n+\n+  def testBoostedTreesSparseCalculateBestFeatureSplitSecurity2(self):\n+    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n+      gen_boosted_trees_ops.boosted_trees_sparse_calculate_best_feature_split(\n+          node_id_range=[0, 1],\n+          stats_summary_indices=[[0, -1, -1, -1], [1, 0, -1, 0], [1, 0, 0, -1]],\n+          stats_summary_values=[0.1, 0.2, 0.3],\n+          stats_summary_shape=[1, 1, 1, 1],\n+          l1=[0.5],\n+          l2=[0.5],\n+          tree_complexity=[0.1],\n+          min_node_weight=[1.0],\n+          logits_dimension=1)\n+\n+  def testBoostedTreesMakeStatsSummarySecurity(self):\n+    node_ids = [1, 2]\n+    gradients = [[]]\n+    hessians = [[0.2], [0.1]]\n+    bucketized_features_list = [[1], [2]]\n+    max_splits = 3\n+    num_buckets = 3\n+    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n+      gen_boosted_trees_ops.boosted_trees_make_stats_summary(\n+          node_ids=node_ids,\n+          gradients=gradients,\n+          hessians=hessians,\n+          bucketized_features_list=bucketized_features_list,\n+          max_splits=max_splits,\n+          num_buckets=num_buckets)\n+\n+  def testBoostedTreesMakeStatsSummarySecurity2(self):\n+    node_ids = [1, 2, 3]\n+    gradients = [[0.1], [0.2]]\n+    hessians = [[0.2], [0.1]]\n+    bucketized_features_list = [[1], [2]]\n+    max_splits = 3\n+    num_buckets = 3\n+    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n+      gen_boosted_trees_ops.boosted_trees_make_stats_summary(\n+          node_ids=node_ids,\n+          gradients=gradients,\n+          hessians=hessians,\n+          bucketized_features_list=bucketized_features_list,\n+          max_splits=max_splits,\n+          num_buckets=num_buckets)\n+\n+  def testBoostedTreesAggregateStatsSecurity(self):\n+    node_ids = [1, 2]\n+    gradients = [[]]\n+    hessians = [[100.0]]\n+    feature = [[0, 0, 0]]\n+    max_splits = 100\n+    num_buckets = 100\n+    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n+      gen_boosted_trees_ops.boosted_trees_aggregate_stats(\n+          node_ids=node_ids,\n+          gradients=gradients,\n+          hessians=hessians,\n+          feature=feature,\n+          max_splits=max_splits,\n+          num_buckets=num_buckets)\n+\n+  def testBoostedTreesAggregateStatsSecurity2(self):\n+    node_ids = [-10]\n+    gradients = [[0.0, 0.0]]\n+    hessians = [[100.0]]\n+    feature = [[0, 0, 0]]\n+    max_splits = 100\n+    num_buckets = 100\n+    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n+      self.evaluate(\n+          gen_boosted_trees_ops.boosted_trees_aggregate_stats(\n+              node_ids=node_ids,\n+              gradients=gradients,\n+              hessians=hessians,\n+              feature=feature,\n+              max_splits=max_splits,\n+              num_buckets=num_buckets))\n+\n+  def testBoostedTreesSparseAggregateStatsSecurity(self):\n+    node_ids = []\n+    gradients = [[1.0]]\n+    hessians = [[100.0]]\n+    feature_indices = [[0, 0, 0]]\n+    feature_values = [0, 0, 0]\n+    feature_shape = [0, 0, 0]\n+    max_splits = 100\n+    num_buckets = 100\n+    with self.assertRaises((errors.InvalidArgumentError, ValueError)):\n+      gen_boosted_trees_ops.boosted_trees_sparse_aggregate_stats(\n+          node_ids=node_ids,\n+          gradients=gradients,\n+          hessians=hessians,\n+          feature_indices=feature_indices,\n+          feature_values=feature_values,\n+          feature_shape=feature_shape,\n+          max_splits=max_splits,\n+          num_buckets=num_buckets)\n+\n \n class BestMultiDimFeatureSplitMultiClassV2Op(StatsOpsTest):\n   \"\"\"Tests multi-class/multi-regression for best splits using V2 op.\"\"\""