"diff --git a/tensorflow/python/kernel_tests/array_ops/stack_op_test.py b/tensorflow/python/kernel_tests/array_ops/stack_op_test.py\nindex 1a5cc5f0293..4ee468cd091 100644\n--- a/tensorflow/python/kernel_tests/array_ops/stack_op_test.py\n+++ b/tensorflow/python/kernel_tests/array_ops/stack_op_test.py\n@@ -16,12 +16,16 @@\n \n import numpy as np\n \n+from tensorflow.python import tf2\n from tensorflow.python.eager import context\n+from tensorflow.python.eager import def_function\n from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors\n from tensorflow.python.framework import ops\n from tensorflow.python.framework import test_util\n from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import gen_array_ops\n from tensorflow.python.ops import gradient_checker_v2\n from tensorflow.python.platform import test\n \n@@ -69,6 +73,19 @@ class StackOpTest(test.TestCase):\n             c = array_ops.parallel_stack(xs)\n             self.assertAllEqual(c, data)\n \n+  def testParallelConcatShapeZero(self):\n+    if not tf2.enabled():\n+      self.skipTest(\"only fails in TF2\")\n+\n+    @def_function.function\n+    def f():\n+      y = gen_array_ops.parallel_concat(values=[[\"tf\"]], shape=0)\n+      return y\n+\n+    with self.assertRaisesRegex(errors.InvalidArgumentError,\n+                                r\"0th dimension of value .* is less than\"):\n+      f()\n+\n   def testSimpleParallelGPU(self):\n     # tf.parallel_stack is only supported in graph mode.\n     with ops.Graph().as_default():"