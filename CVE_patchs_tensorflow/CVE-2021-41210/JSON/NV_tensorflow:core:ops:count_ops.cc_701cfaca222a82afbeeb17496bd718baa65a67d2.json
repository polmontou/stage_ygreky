"/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\nnamespace tensorflow {\n\nusing shape_inference::InferenceContext;\nusing shape_inference::ShapeHandle;\n\nStatus DenseCountSparseOutputShapeFn(InferenceContext *c) {\n  auto values = c->input(0);\n  auto weights = c->input(1);\n  ShapeHandle output;\n  auto num_weights = c->NumElements(weights);\n  if (c->ValueKnown(num_weights) && c->Value(num_weights) == 0) {\n    output = values;\n  } else {\n    TF_RETURN_IF_ERROR(c->Merge(weights, values, &output));\n  }\n  auto rank = c->Rank(output);\n  auto nvals = c->UnknownDim();\n  c->set_output(0, c->Matrix(nvals, rank));  // out.indices\n  c->set_output(1, c->Vector(nvals));        // out.values\n  c->set_output(2, c->Vector(rank));         // out.dense_shape\n  return Status::OK();\n}\n\nStatus SparseCountSparseOutputShapeFn(InferenceContext *c) {\n  ShapeHandle unused;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 2, &unused));\n  auto rank = c->Dim(c->input(0), 1);\n  auto nvals = c->UnknownDim();\n  c->set_output(0, c->Matrix(nvals, rank));  // out.indices\n  c->set_output(1, c->Vector(nvals));        // out.values\n  c->set_output(2, c->Vector(rank));         // out.dense_shape\n  return Status::OK();\n}\n\nStatus RaggedCountSparseOutputShapeFn(InferenceContext *c) {\n  int32_t rank = c->Rank(c->input(1));\n  if (rank != c->kUnknownRank) {\n    ++rank;  // Add the ragged dimension\n  }\n  auto nvals = c->UnknownDim();\n  c->set_output(0, c->Matrix(nvals, rank));  // out.indices\n  c->set_output(1, c->Vector(nvals));        // out.values\n  c->set_output(2, c->Vector(rank));         // out.dense_shape\n  return Status::OK();\n}\n\nREGISTER_OP(\"DenseCountSparseOutput\")\n    .Input(\"values: T\")\n    .Input(\"weights: output_type\")\n    .Attr(\"T: {int32, int64}\")\n    .Attr(\"minlength: int >= -1 = -1\")\n    .Attr(\"maxlength: int >= -1 = -1\")\n    .Attr(\"binary_output: bool\")\n    .Attr(\"output_type: {int32, int64, float, double}\")\n    .SetShapeFn(DenseCountSparseOutputShapeFn)\n    .Output(\"output_indices: int64\")\n    .Output(\"output_values: output_type\")\n    .Output(\"output_dense_shape: int64\");\n\nREGISTER_OP(\"SparseCountSparseOutput\")\n    .Input(\"indices: int64\")\n    .Input(\"values: T\")\n    .Input(\"dense_shape: int64\")\n    .Input(\"weights: output_type\")\n    .Attr(\"T: {int32, int64}\")\n    .Attr(\"minlength: int >= -1 = -1\")\n    .Attr(\"maxlength: int >= -1 = -1\")\n    .Attr(\"binary_output: bool\")\n    .Attr(\"output_type: {int32, int64, float, double}\")\n    .SetShapeFn(SparseCountSparseOutputShapeFn)\n    .Output(\"output_indices: int64\")\n    .Output(\"output_values: output_type\")\n    .Output(\"output_dense_shape: int64\");\n\nREGISTER_OP(\"RaggedCountSparseOutput\")\n    .Input(\"splits: int64\")\n    .Input(\"values: T\")\n    .Input(\"weights: output_type\")\n    .Attr(\"T: {int32, int64}\")\n    .Attr(\"minlength: int >= -1 = -1\")\n    .Attr(\"maxlength: int >= -1 = -1\")\n    .Attr(\"binary_output: bool\")\n    .Attr(\"output_type: {int32, int64, float, double}\")\n    .SetShapeFn(RaggedCountSparseOutputShapeFn)\n    .Output(\"output_indices: int64\")\n    .Output(\"output_values: output_type\")\n    .Output(\"output_dense_shape: int64\");\n\n}  // namespace tensorflow"