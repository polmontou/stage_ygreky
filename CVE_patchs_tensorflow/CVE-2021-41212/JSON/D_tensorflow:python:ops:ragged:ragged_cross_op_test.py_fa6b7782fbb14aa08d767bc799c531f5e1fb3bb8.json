"diff --git a/tensorflow/python/ops/ragged/ragged_cross_op_test.py b/tensorflow/python/ops/ragged/ragged_cross_op_test.py\nindex 99f88d06a81..71085257f68 100644\n--- a/tensorflow/python/ops/ragged/ragged_cross_op_test.py\n+++ b/tensorflow/python/ops/ragged/ragged_cross_op_test.py\n@@ -18,10 +18,12 @@ from absl.testing import parameterized\n \n import numpy as np\n \n+from tensorflow.python.eager import def_function\n from tensorflow.python.framework import dtypes\n from tensorflow.python.framework import errors\n from tensorflow.python.framework import ops\n from tensorflow.python.framework import sparse_tensor\n+from tensorflow.python.framework import tensor_spec\n from tensorflow.python.framework import test_util\n from tensorflow.python.ops import sparse_ops\n from tensorflow.python.ops.ragged import ragged_array_ops\n@@ -358,6 +360,16 @@ class RaggedCrossOpTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n                   dense_const([[2], [3]])],\n           exception=(ValueError, errors.InvalidArgumentError),\n           message='inputs must all have the same batch dimension size'),\n+      dict(\n+          testcase_name='3DDenseTensor',\n+          inputs=[dense_const([[[1]]])],\n+          exception=(ValueError, errors.InvalidArgumentError),\n+          message='tf.ragged.cross only supports inputs with rank=2'),\n+      dict(\n+          testcase_name='0DDenseTensor',\n+          inputs=[dense_const(1)],\n+          exception=(ValueError, errors.InvalidArgumentError),\n+          message='tf.ragged.cross only supports inputs with rank=2'),\n   ])\n   def testStaticError(self, inputs, exception=ValueError, message=None):\n     with self.assertRaisesRegex(exception, message):\n@@ -368,17 +380,36 @@ class RaggedCrossOpTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n           testcase_name='3DRaggedTensor',\n           inputs=[ragged_const([[[1]]], ragged_rank=1)],\n           message='tf.ragged.cross only supports inputs with rank=2'),\n+      dict(\n+          testcase_name='0DDenseTensor',\n+          inputs=[dense_const(1)],\n+          signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],\n+          exception=(ValueError, errors.InvalidArgumentError),\n+          message='tf.ragged.cross only supports inputs with rank=2'),\n+      dict(\n+          testcase_name='1DDenseTensor',\n+          inputs=[dense_const([1])],\n+          signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],\n+          exception=(ValueError, errors.InvalidArgumentError),\n+          message='tf.ragged.cross only supports inputs with rank=2'),\n       dict(\n           testcase_name='3DDenseTensor',\n           inputs=[dense_const([[[1]]])],\n+          signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],\n+          exception=(ValueError, errors.InvalidArgumentError),\n           message='tf.ragged.cross only supports inputs with rank=2'),\n   ])\n   def testRuntimeError(self,\n                        inputs,\n                        exception=errors.InvalidArgumentError,\n-                       message=None):\n+                       message=None,\n+                       signature=None):\n+    @def_function.function(input_signature=signature)\n+    def fn(x):\n+      return ragged_array_ops.cross(x)\n+\n     with self.assertRaisesRegex(exception, message):\n-      self.evaluate(ragged_array_ops.cross(inputs))\n+      self.evaluate(fn(inputs))\n \n   def _ragged_to_sparse(self, t):\n     if ragged_tensor.is_ragged(t):"