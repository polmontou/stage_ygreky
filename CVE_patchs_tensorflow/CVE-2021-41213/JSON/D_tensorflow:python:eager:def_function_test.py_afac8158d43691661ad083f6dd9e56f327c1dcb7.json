"diff --git a/tensorflow/python/eager/def_function_test.py b/tensorflow/python/eager/def_function_test.py\nindex af68b2d8471..bc440464208 100644\n--- a/tensorflow/python/eager/def_function_test.py\n+++ b/tensorflow/python/eager/def_function_test.py\n@@ -25,6 +25,7 @@ from absl.testing import parameterized\n from six.moves import range\n \n from tensorflow.python.autograph.core import converter\n+from tensorflow.python.eager import backprop\n from tensorflow.python.eager import def_function\n from tensorflow.python.eager import lift_to_graph\n from tensorflow.python.framework import constant_op\n@@ -36,6 +37,7 @@ from tensorflow.python.framework import tensor_spec\n from tensorflow.python.framework import test_util\n from tensorflow.python.module import module\n from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import cond_v2\n from tensorflow.python.ops import control_flow_ops\n from tensorflow.python.ops import math_ops\n from tensorflow.python.ops import random_ops\n@@ -1261,6 +1263,117 @@ class DefFunctionTest(test.TestCase, parameterized.TestCase):\n     self.assertAllEqual(obj2.testDouble.experimental_get_tracing_count(), 3)\n     self.assertAllEqual(obj1.testDouble.experimental_get_tracing_count(), 2)\n \n+  def test_recursive_tf_function(self):\n+\n+    @def_function.function\n+    def recursive_fn(n):\n+      if n > 0:\n+        return recursive_fn(n - 1)\n+      return 1\n+\n+    self.assertEqual(recursive_fn(5).numpy(), 1)\n+\n+  def test_recursive_tf_function_with_gradients(self):\n+\n+    @def_function.function\n+    def recursive_fn(n, x):\n+      if n > 0:\n+        return n * recursive_fn(n - 1, x)\n+      else:\n+        return x\n+\n+    x = variables.Variable(1.0)\n+    with backprop.GradientTape() as tape:\n+      g = recursive_fn(5, x)\n+\n+    dg_dx = tape.gradient(g, x)\n+    self.assertEqual(dg_dx.numpy(), 120)\n+\n+  def test_recursive_python_function(self):\n+\n+    def recursive_py_fn(n):\n+      if n > 0:\n+        return recursive_py_fn(n - 1)\n+      return 1\n+\n+    @def_function.function\n+    def recursive_fn(n):\n+      return recursive_py_fn(n)\n+\n+    self.assertEqual(recursive_fn(5).numpy(), 1)\n+\n+  def test_recursive_python_function_with_gradients(self):\n+\n+    def recursive_py_fn(n, x):\n+      if n > 0:\n+        return n * recursive_py_fn(n - 1, x)\n+      return x\n+\n+    @def_function.function\n+    def recursive_fn(n, x):\n+      return recursive_py_fn(n, x)\n+\n+    x = variables.Variable(1.0)\n+    with backprop.GradientTape() as tape:\n+      g = recursive_fn(5, x)\n+\n+    dg_dx = tape.gradient(g, x)\n+    self.assertEqual(dg_dx.numpy(), 120)\n+\n+  def test_recursive_tf_function_call_each_other(self):\n+\n+    @def_function.function\n+    def recursive_fn1(n):\n+      if n <= 1:\n+        return 1\n+      return recursive_fn2(n - 1)\n+\n+    @def_function.function\n+    def recursive_fn2(n):\n+      if n <= 1:\n+        return 2\n+      return recursive_fn1(n - 1)\n+\n+    self.assertEqual(recursive_fn1(5).numpy(), 1)\n+    self.assertEqual(recursive_fn1(6).numpy(), 2)\n+    self.assertEqual(recursive_fn2(5).numpy(), 2)\n+    self.assertEqual(recursive_fn2(6).numpy(), 1)\n+\n+  def test_recursive_tf_function_call_each_other_with_gradients(self):\n+\n+    @def_function.function\n+    def recursive_fn1(n, x):\n+      if n <= 1:\n+        return x\n+      return n * recursive_fn2(n - 1, x)\n+\n+    @def_function.function\n+    def recursive_fn2(n, x):\n+      if n <= 1:\n+        return 2 * x\n+      return n * recursive_fn1(n - 1, x)\n+\n+    x = variables.Variable(1.0)\n+    with backprop.GradientTape() as tape:\n+      g1 = recursive_fn1(5, x)\n+\n+    dg1_dx = tape.gradient(g1, x)\n+    self.assertEqual(dg1_dx.numpy(), 120)\n+\n+    with backprop.GradientTape() as tape:\n+      g2 = recursive_fn2(5, x)\n+\n+    dg2_dx = tape.gradient(g2, x)\n+    self.assertEqual(dg2_dx.numpy(), 240)\n+\n+  def test_recursive_tf_function_with_cond(self):\n+    @def_function.function(autograph=False)\n+    def recursive_fn(n):\n+      return cond_v2.cond_v2(n > 0, recursive_fn(n - 1), 1)\n+\n+    with self.assertRaises(RecursionError):\n+      recursive_fn(constant_op.constant(5))\n+\n \n if __name__ == '__main__':\n   ops.enable_eager_execution()"