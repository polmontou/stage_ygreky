"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\nnamespace tensorflow {\n\nusing shape_inference::DimensionHandle;\nusing shape_inference::InferenceContext;\nusing shape_inference::ShapeHandle;\n\nStatus RaggedGatherShapeFn(InferenceContext* c);\n\n//==============================================================================\n// Registered Ops\n//==============================================================================\n\nREGISTER_OP(\"RaggedGather\")\n    .Input(\"params_nested_splits: PARAMS_RAGGED_RANK * Tsplits\")\n    .Input(\"params_dense_values: Tvalues\")\n    .Input(\"indices: Tindices\")\n    .Output(\"output_nested_splits: OUTPUT_RAGGED_RANK * Tsplits\")\n    .Output(\"output_dense_values: Tvalues\")\n    .Attr(\"Tvalues: type\")\n    .Attr(\"Tindices: {int32, int64}\")\n    .Attr(\"Tsplits: {int32, int64} = DT_INT64\")\n    .Attr(\"PARAMS_RAGGED_RANK: int >= 1\")\n    .Attr(\"OUTPUT_RAGGED_RANK: int >= 0\")\n    .SetShapeFn(RaggedGatherShapeFn);\n\nREGISTER_OP(\"RaggedCross\")\n    .Input(\"ragged_values: ragged_values_types\")\n    .Input(\"ragged_row_splits: ragged_splits_types\")\n    .Input(\"sparse_indices: Nsparse * int64\")\n    .Input(\"sparse_values: sparse_values_types\")\n    .Input(\"sparse_shape: Nsparse * int64\")\n    .Input(\"dense_inputs: dense_types\")\n    .Output(\"output_values: out_values_type\")\n    .Output(\"output_row_splits: out_row_splits_type\")\n    .Attr(\"Nsparse: int >= 0\")\n    .Attr(\"input_order: string\")\n    .Attr(\"hashed_output: bool\")\n    .Attr(\"num_buckets: int >= 0\")\n    .Attr(\"hash_key: int\")\n    .Attr(\"ragged_values_types: list({int64, string}) >= 0\")\n    .Attr(\"ragged_splits_types: list({int32, int64}) >= 0\")\n    .Attr(\"sparse_values_types: list({int64, string}) >= 0\")\n    .Attr(\"dense_types: list({int64, string}) >= 0\")\n    .Attr(\"out_values_type: {int64, string}\")\n    .Attr(\"out_row_splits_type: {int32, int64}\")\n    .SetShapeFn([](shape_inference::InferenceContext* c) {\n      std::vector<DataType> ragged_values_types;\n      std::vector<DataType> ragged_splits_types;\n      std::vector<DataType> dense_types;\n\n      TF_RETURN_IF_ERROR(\n          c->GetAttr(\"ragged_values_types\", &ragged_values_types));\n      TF_RETURN_IF_ERROR(\n          c->GetAttr(\"ragged_splits_types\", &ragged_splits_types));\n      TF_RETURN_IF_ERROR(c->GetAttr(\"dense_types\", &dense_types));\n\n      int num_ragged = ragged_values_types.size();\n      if (num_ragged != ragged_splits_types.size()) {\n        return errors::InvalidArgument(\n            \"Parameters `values` and `row_splits` must be the same length\");\n      }\n\n      int num_sparse;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"Nsparse\", &num_sparse));\n\n      ShapeHandle out_values = c->UnknownShapeOfRank(1);\n      ShapeHandle out_splits = c->UnknownShapeOfRank(1);\n\n      // Merge the shapes of row_splits from ragged inputs.  (This is one plus\n      // the batch size.)\n      int ragged_splits_start = num_ragged;\n      for (int i = 0; i < ragged_splits_types.size(); ++i) {\n        ShapeHandle row_splits = c->input(i + ragged_splits_start);\n        if (!c->Merge(out_splits, row_splits, &out_splits).ok()) {\n          return errors::InvalidArgument(\n              \"inputs must all have the same batch dimension size.\");\n        }\n      }\n\n      // Merge the batch size of each dense input into out_splits.\n      int dense_start = num_ragged * 2 + num_sparse * 3;\n      for (int i = 0; i < dense_types.size(); ++i) {\n        ShapeHandle dense_input = c->input(i + dense_start);\n        int32 rank = c->Rank(dense_input);\n        if (rank == InferenceContext::kUnknownRank) {\n          continue;\n        } else if (rank != 2) {\n          return errors::InvalidArgument(\n              \"tf.ragged.cross only supports inputs with rank=2\");\n        }\n        int64_t batch_size = c->Value(c->Dim(dense_input, 0));\n        if (batch_size != InferenceContext::kUnknownDim) {\n          ShapeHandle row_splits = c->Vector(batch_size + 1);\n          if (!c->Merge(out_splits, row_splits, &out_splits).ok()) {\n            return errors::InvalidArgument(\n                \"inputs must all have the same batch dimension size.\");\n          }\n        }\n      }\n\n      c->set_output(0, out_values);\n      c->set_output(1, out_splits);\n      return Status::OK();\n    });\n\n//==============================================================================\n// Shape Functions\n//==============================================================================\n\nStatus RaggedGatherShapeFn(InferenceContext* c) {\n  int num_splits;\n  int64_t PARAMS_RAGGED_RANK;\n  TF_RETURN_IF_ERROR(\n      c->GetAttr<int64_t>(\"PARAMS_RAGGED_RANK\", &PARAMS_RAGGED_RANK));\n  TF_RETURN_IF_ERROR(c->GetAttr<int>(\"OUTPUT_RAGGED_RANK\", &num_splits));\n\n  // Check rank of `indices`.\n  ShapeHandle indices = c->input(PARAMS_RAGGED_RANK + 1);\n  TF_RETURN_IF_ERROR(\n      c->WithRank(indices, num_splits - PARAMS_RAGGED_RANK + 1, &indices));\n\n  // Check that all params_nested_splits have rank 1.\n  for (int64_t i = 0; i < PARAMS_RAGGED_RANK; ++i) {\n    ShapeHandle splits = c->input(i);\n    TF_RETURN_IF_ERROR(c->WithRank(splits, 1, &splits));\n  }\n\n  // Check that `params_dense_values` has rank>=1.\n  ShapeHandle params_dense_values = c->input(PARAMS_RAGGED_RANK);\n  TF_RETURN_IF_ERROR(\n      c->WithRankAtLeast(params_dense_values, 1, &params_dense_values));\n\n  // Set the rank for the `splits` outputs.\n  for (int i = 0; i < num_splits; ++i) {\n    c->set_output(i, c->UnknownShapeOfRank(1));\n  }\n\n  // Calculate the `values` shape.\n  ShapeHandle value = c->UnknownShape();\n  ShapeHandle values = c->UnknownShape();\n  TF_RETURN_IF_ERROR(c->Subshape(params_dense_values, 1, &value));\n  TF_RETURN_IF_ERROR(c->Concatenate(c->UnknownShapeOfRank(1), value, &values));\n  c->set_output(num_splits, values);\n\n  return Status::OK();\n}\n\n}  // namespace tensorflow"