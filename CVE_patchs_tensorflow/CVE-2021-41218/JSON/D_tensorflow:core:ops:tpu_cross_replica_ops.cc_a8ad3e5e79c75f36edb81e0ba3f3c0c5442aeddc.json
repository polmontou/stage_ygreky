"diff --git a/tensorflow/core/ops/tpu_cross_replica_ops.cc b/tensorflow/core/ops/tpu_cross_replica_ops.cc\nindex 045b2dffaf6..74be53c921a 100644\n--- a/tensorflow/core/ops/tpu_cross_replica_ops.cc\n+++ b/tensorflow/core/ops/tpu_cross_replica_ops.cc\n@@ -32,6 +32,7 @@ REGISTER_OP(\"AllToAll\")\n     .Attr(\"split_count: int\")\n     .SetShapeFn([](InferenceContext* c) {\n       ShapeHandle input = c->input(0);\n+      ShapeHandle group_assignment = c->input(1);\n       if (!c->RankKnown(input)) {\n         c->set_output(0, c->UnknownShape());\n         return Status::OK();\n@@ -42,6 +43,21 @@ REGISTER_OP(\"AllToAll\")\n       int split_dimension;\n       int split_count;\n       TF_RETURN_IF_ERROR(c->GetAttr(\"split_count\", &split_count));\n+      if (split_count < 1) {\n+        return errors::InvalidArgument(\"split_count \", split_count,\n+                                       \" must at least be one.\");\n+      }\n+      if (c->RankKnown(group_assignment) && c->Rank(group_assignment) != 2) {\n+        return errors::InvalidArgument(\"group_assignment must have rank 2.\");\n+      }\n+      DimensionHandle num_replicas_per_group = c->Dim(group_assignment, 1);\n+      if (c->ValueKnown(num_replicas_per_group) &&\n+          (c->Value(num_replicas_per_group) != split_count)) {\n+        return errors::InvalidArgument(\n+            \"split_count \", split_count,\n+            \" must equal the size of the second dimension of group_assignment \",\n+            c->Value(num_replicas_per_group));\n+      }\n \n       TF_RETURN_IF_ERROR(c->GetAttr(\"concat_dimension\", &concat_dimension));\n \n@@ -65,6 +81,12 @@ REGISTER_OP(\"AllToAll\")\n           dims[i] = c->MakeDim(c->Value(dims[i]) * split_count);\n         }\n         if (i == split_dimension) {\n+          if (c->ValueKnown(dims[i]) &&\n+              (c->Value(dims[i]) % split_count != 0)) {\n+            return errors::InvalidArgument(\n+                \"input dimension \", c->Value(dims[i]),\n+                \" not divisible by split_count \", split_count);\n+          }\n           dims[i] = c->MakeDim(c->Value(dims[i]) / split_count);\n         }\n       }"