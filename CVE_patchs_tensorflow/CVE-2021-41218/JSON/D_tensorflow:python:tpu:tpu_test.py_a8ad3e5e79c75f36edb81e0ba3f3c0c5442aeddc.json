"diff --git a/tensorflow/python/tpu/tpu_test.py b/tensorflow/python/tpu/tpu_test.py\nindex 10707fc3d51..48139171e1a 100644\n--- a/tensorflow/python/tpu/tpu_test.py\n+++ b/tensorflow/python/tpu/tpu_test.py\n@@ -32,6 +32,7 @@ from tensorflow.python.platform import test\n from tensorflow.python.tpu import tpu\n from tensorflow.python.tpu import tpu_feed\n from tensorflow.python.tpu import training_loop\n+from tensorflow.python.tpu.ops import tpu_ops\n \n \n class TPUContextTest(test.TestCase):\n@@ -165,6 +166,51 @@ class TPUGraphPruneTest(test.TestCase):\n         graph.get_operation_by_name(\"import/y\").get_attr(\n             tpu._TPU_REPLICATE_ATTR)\n \n+\n+class TPUOpsTest(test.TestCase):\n+\n+  def test_all_to_all_zero_split_count(self):\n+    with self.assertRaisesRegex(\n+        ValueError, \"split_count 0 must at least be one\"):\n+      tpu_ops.all_to_all(\n+          x=[0.0, 0.1652, 0.6543],\n+          group_assignment=[1, -1],\n+          concat_dimension=0,\n+          split_dimension=0,\n+          split_count=0)\n+\n+  def test_all_to_all_group_assignment_wrong_shape(self):\n+    with self.assertRaisesRegex(\n+        ValueError, \"group_assignment must have rank 2\"):\n+      tpu_ops.all_to_all(\n+          x=[0.0, 0.1652, 0.6543],\n+          group_assignment=[1, -1],\n+          concat_dimension=0,\n+          split_dimension=0,\n+          split_count=2)\n+\n+  def test_all_to_all_split_count_not_equal_to_group_assignment_shape(self):\n+    with self.assertRaisesRegex(\n+        ValueError, \"split_count 1 must equal the size of the second dimension \"\n+        \"of group_assignment 2\"):\n+      tpu_ops.all_to_all(\n+          x=[0.0, 0.1652, 0.6543],\n+          group_assignment=[[0, 1], [2, 3]],\n+          concat_dimension=0,\n+          split_dimension=0,\n+          split_count=1)\n+\n+  def test_all_to_all_split_count_not_divide_input_shape(self):\n+    with self.assertRaisesRegex(\n+        ValueError, \"input dimension 3 not divisible by split_count 2\"):\n+      tpu_ops.all_to_all(\n+          x=[[0.0], [0.1652], [0.6543]],\n+          group_assignment=[[0, 1], [2, 3]],\n+          concat_dimension=1,\n+          split_dimension=0,\n+          split_count=2)\n+\n+\n def do_einsum():\n   a = array_ops.placeholder(dtype=dtypes.float32, name=\"a\", shape=[2, 3, 4])\n   b = array_ops.placeholder(dtype=dtypes.float32, name=\"b\", shape=[2, 4, 5])"