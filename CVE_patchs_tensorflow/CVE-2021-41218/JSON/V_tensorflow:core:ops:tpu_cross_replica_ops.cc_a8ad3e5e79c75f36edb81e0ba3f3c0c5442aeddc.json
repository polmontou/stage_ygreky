"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\nnamespace tensorflow {\nusing shape_inference::DimensionHandle;\nusing shape_inference::InferenceContext;\nusing shape_inference::ShapeHandle;\n\nREGISTER_OP(\"AllToAll\")\n    .Input(\"input: T\")\n    .Input(\"group_assignment: int32\")\n    .Output(\"output: T\")\n    .Attr(\"T: {numbertype, bool}\")\n    .Attr(\"concat_dimension: int\")\n    .Attr(\"split_dimension: int\")\n    .Attr(\"split_count: int\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle input = c->input(0);\n      if (!c->RankKnown(input)) {\n        c->set_output(0, c->UnknownShape());\n        return Status::OK();\n      }\n\n      int64_t rank = c->Rank(input);\n      int concat_dimension;\n      int split_dimension;\n      int split_count;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"split_count\", &split_count));\n\n      TF_RETURN_IF_ERROR(c->GetAttr(\"concat_dimension\", &concat_dimension));\n\n      if (concat_dimension < 0 || concat_dimension >= rank) {\n        return errors::InvalidArgument(\"concat_dimension \", concat_dimension,\n                                       \" is out of range of input rank \", rank);\n      }\n\n      TF_RETURN_IF_ERROR(c->GetAttr(\"split_dimension\", &split_dimension));\n      if (split_dimension < 0 || split_dimension >= rank) {\n        return errors::InvalidArgument(\"split_dimension \", split_dimension,\n                                       \" is out of range of input rank \", rank);\n      }\n\n      std::vector<DimensionHandle> dims;\n      dims.resize(rank);\n\n      for (int32_t i = 0; i < rank; ++i) {\n        dims[i] = c->Dim(input, i);\n        if (i == concat_dimension) {\n          dims[i] = c->MakeDim(c->Value(dims[i]) * split_count);\n        }\n        if (i == split_dimension) {\n          dims[i] = c->MakeDim(c->Value(dims[i]) / split_count);\n        }\n      }\n\n      c->set_output(0, c->MakeShape(dims));\n      return Status::OK();\n    });\n\nREGISTER_OP(\"CrossReplicaSum\")\n    .Input(\"input: T\")\n    .Input(\"group_assignment: int32\")\n    .Output(\"output: T\")\n    .Attr(\"T: {half, bfloat16, float, float64, int32, uint32}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"CollectivePermute\")\n    .Input(\"input: T\")\n    .Input(\"source_target_pairs: int32\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n}  // namespace tensorflow"