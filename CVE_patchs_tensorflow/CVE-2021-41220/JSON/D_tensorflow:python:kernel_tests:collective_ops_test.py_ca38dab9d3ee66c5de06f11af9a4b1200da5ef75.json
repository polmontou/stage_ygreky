"diff --git a/tensorflow/python/kernel_tests/collective_ops_test.py b/tensorflow/python/kernel_tests/collective_ops_test.py\nindex 73e8110dbdc..98b95c5666c 100644\n--- a/tensorflow/python/kernel_tests/collective_ops_test.py\n+++ b/tensorflow/python/kernel_tests/collective_ops_test.py\n@@ -1182,6 +1182,69 @@ class InputPipelineTest(test.TestCase):\n     self.assertAllEqual(self.evaluate(f()), [[3.], [3.]])\n \n \n+@combinations.generate(\n+    combinations.times(\n+        combinations.combine(collective_op=[\n+            combinations.NamedObject('all_reduce_v2',\n+                                     CollectiveOpsV2.all_reduce),\n+            combinations.NamedObject('all_gather_v2',\n+                                     CollectiveOpsV2.all_gather)\n+        ]), device_combination))\n+class InvalidInputTest(test.TestCase, parameterized.TestCase):\n+\n+  def setUp(self):\n+    _setup_context()\n+    super().setUp()\n+\n+  def testInvalidGroupKey(self, collective_op, device, communication):\n+    dev0 = '/device:%s:0' % device\n+    group_size = 2\n+    group_key = [100]\n+    instance_key = 100\n+    in_tensor = constant_op.constant([1.])\n+\n+    with self.assertRaises(errors.InvalidArgumentError):\n+      with ops.device(dev0):\n+        collective_op(\n+            in_tensor,\n+            group_size,\n+            group_key,\n+            instance_key,\n+            communication_hint=communication)\n+\n+  def testInvalidGroupSize(self, collective_op, device, communication):\n+    dev0 = '/device:%s:0' % device\n+    group_size = -2\n+    group_key = 100\n+    instance_key = 100\n+    in_tensor = constant_op.constant([1.])\n+\n+    with self.assertRaises(errors.InvalidArgumentError):\n+      with ops.device(dev0):\n+        collective_op(\n+            in_tensor,\n+            group_size,\n+            group_key,\n+            instance_key,\n+            communication_hint=communication)\n+\n+  def testInvalidInstanceKey(self, collective_op, device, communication):\n+    dev0 = '/device:%s:0' % device\n+    group_size = 2\n+    group_key = 100\n+    instance_key = [100]\n+    in_tensor = constant_op.constant([1.])\n+\n+    with self.assertRaises(errors.InvalidArgumentError):\n+      with ops.device(dev0):\n+        collective_op(\n+            in_tensor,\n+            group_size,\n+            group_key,\n+            instance_key,\n+            communication_hint=communication)\n+\n+\n class CollectiveOpsV3Test(test.TestCase, parameterized.TestCase):\n \n   def setUp(self):"