"diff --git a/tensorflow/core/ops/cudnn_rnn_ops_test.cc b/tensorflow/core/ops/cudnn_rnn_ops_test.cc\nindex 8e8c8193a14..91043efa425 100644\n--- a/tensorflow/core/ops/cudnn_rnn_ops_test.cc\n+++ b/tensorflow/core/ops/cudnn_rnn_ops_test.cc\n@@ -68,6 +68,11 @@ TEST(CudnnRNNOpsTest, ForwardLstm_ShapeFn) {\n                    .Attr(\"direction\", \"unidirectional\")\n                    .Finalize(&op.node_def));\n   INFER_OK(op, input_shapes_desc, output_shapes_desc);\n+  INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");\n+  INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");\n+  // Disabled because the kernel does not check shape of input_c.\n+  // INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[?,?,?];[?];[?]\");\n+  INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");\n }\n \n TEST(CudnnRNNOpsTest, ForwardV2Lstm_ShapeFn) {\n@@ -100,6 +105,11 @@ TEST(CudnnRNNOpsTest, ForwardV2Lstm_ShapeFn) {\n                    .Attr(\"direction\", \"unidirectional\")\n                    .Finalize(&op.node_def));\n   INFER_OK(op, input_shapes_desc, output_shapes_desc);\n+  INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");\n+  INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");\n+  // Disabled because the kernel does not check shape of input_c.\n+  // INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[?,?,?];[?];[?]\");\n+  INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");\n }\n \n TEST(CudnnRNNOpsTest, ForwardV3Lstm_ShapeFn) {\n@@ -137,6 +147,52 @@ TEST(CudnnRNNOpsTest, ForwardV3Lstm_ShapeFn) {\n                    .Attr(\"direction\", \"unidirectional\")\n                    .Finalize(&op.node_def));\n   INFER_OK(op, input_shapes_desc, output_shapes_desc);\n+  INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?];[?]\");\n+  INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?];[?]\");\n+  INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[?,?,?];[];[?];[?]\");\n+  INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[];[?]\");\n+  INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[?];[]\");\n+}\n+\n+TEST(CudnnRNNOpsTest, ForwardV3Gru) {\n+  int max_seq_length = 2;\n+  int batch_size = 3;\n+  int num_units = 4;\n+  int num_layers = 5;\n+  int dir_count = 1;\n+  std::vector<int> input_shape = {max_seq_length, batch_size, num_units};\n+  std::vector<int> input_h_shape = {num_layers * dir_count, batch_size,\n+                                    num_units};\n+  std::vector<int> input_c_shape = {num_layers * dir_count, batch_size,\n+                                    num_units};\n+  std::vector<int> output_shape = {max_seq_length, batch_size,\n+                                   num_units * dir_count};\n+  std::vector<int> seq_lengths_shape = {batch_size};\n+  auto shape_to_str = [](const std::vector<int>& v) {\n+    return strings::StrCat(\"[\", absl::StrJoin(v, \",\"), \"]\");\n+  };\n+  string input_shapes_desc = strings::StrCat(\n+      shape_to_str(input_shape), \";\", shape_to_str(input_h_shape), \";\",\n+      shape_to_str(input_c_shape), \";\", \"[?]\", \";\",\n+      shape_to_str(seq_lengths_shape));\n+  string output_shapes_desc = \"[d0_0,d0_1,d1_2];in1;[];?;?\";\n+\n+  ShapeInferenceTestOp op(\"CudnnRNNV3\");\n+  TF_ASSERT_OK(NodeDefBuilder(\"test\", \"CudnnRNNV3\")\n+                   .Input({\"input\", 0, DT_FLOAT})\n+                   .Input({\"input_h\", 0, DT_FLOAT})\n+                   .Input({\"input_c\", 0, DT_FLOAT})\n+                   .Input({\"params\", 0, DT_FLOAT})\n+                   .Input({\"sequence_lengths\", 0, DT_INT32})\n+                   .Attr(\"rnn_mode\", \"gru\")\n+                   .Attr(\"input_mode\", \"auto_select\")\n+                   .Attr(\"direction\", \"unidirectional\")\n+                   .Finalize(&op.node_def));\n+  INFER_OK(op, input_shapes_desc, output_shapes_desc);\n+  INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[];[?];[?]\");\n+  INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[];[?];[?]\");\n+  INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[];[?]\");\n+  INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[?];[]\");\n }\n \n }  // end namespace tensorflow"