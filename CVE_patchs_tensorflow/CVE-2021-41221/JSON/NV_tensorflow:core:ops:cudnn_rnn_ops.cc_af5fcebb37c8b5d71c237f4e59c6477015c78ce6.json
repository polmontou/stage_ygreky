"/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n#include \"tensorflow/core/lib/strings/strcat.h\"\n\nnamespace tensorflow {\nnamespace {\n\nconstexpr auto kRNNModeAttrs =\n    \"rnn_mode: {'rnn_relu', 'rnn_tanh', 'lstm', 'gru'} = 'lstm'\";\n\nconstexpr auto kRNNInputModeAttrs =\n    \"input_mode: {'linear_input', 'skip_input', 'auto_select'} = \"\n    \"'linear_input'\";\n\nconstexpr auto kRNNDirectionAttrs =\n    \"direction: {'unidirectional', 'bidirectional'} = 'unidirectional'\";\n\n}  // namespace\n\nusing shape_inference::DimensionHandle;\nusing shape_inference::InferenceContext;\nusing shape_inference::ShapeHandle;\n\nREGISTER_OP(\"CudnnRNNParamsSize\")\n    .Input(\"num_layers: int32\")\n    .Input(\"num_units: int32\")\n    .Input(\"input_size: int32\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(\"S: {int32, int64}\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Attr(\"num_proj: int = 0\")\n    .Output(\"params_size: S\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      // num_layers, num_units, and input_size should be scalars.\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n\n      c->set_output(0, c->Vector(1));\n      return Status::OK();\n    });\n\nREGISTER_OP(\"CudnnRNN\")\n    .Input(\"input: T\")\n    .Input(\"input_h: T\")\n    .Input(\"input_c: T\")\n    .Input(\"params: T\")\n    .SetIsStateful()\n    .Output(\"output: T\")\n    .Output(\"output_h: T\")\n    .Output(\"output_c: T\")\n    .Output(\"reserve_space: T\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Attr(\"is_training: bool = true\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      auto input_shape = c->input(0);\n      auto input_h_shape = c->input(1);\n      TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));\n\n      auto seq_length = c->Dim(input_shape, 0);\n      auto batch_size = c->Dim(input_shape, 1);\n      auto num_units = c->Dim(input_h_shape, 2);\n\n      string direction;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));\n      string rnn_mode;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"rnn_mode\", &rnn_mode));\n      int dir_count = (direction == \"bidirectional\") ? 2 : 1;\n      DimensionHandle output_size;\n      TF_RETURN_IF_ERROR(c->Multiply(num_units, dir_count, &output_size));\n      auto output_shape = c->MakeShape({seq_length, batch_size, output_size});\n      auto output_h_shape = input_h_shape;\n      auto output_c_shape TF_ATTRIBUTE_UNUSED =\n          (rnn_mode == \"lstm\") ? output_h_shape : c->MakeShape({});\n      c->set_output(0, output_shape);\n      c->set_output(1, output_h_shape);\n      c->set_output(2, output_c_shape);\n      c->set_output(3, c->UnknownShape());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"CudnnRNNV2\")\n    .Input(\"input: T\")\n    .Input(\"input_h: T\")\n    .Input(\"input_c: T\")\n    .Input(\"params: T\")\n    .SetIsStateful()\n    .Output(\"output: T\")\n    .Output(\"output_h: T\")\n    .Output(\"output_c: T\")\n    .Output(\"reserve_space: T\")\n    .Output(\"host_reserved: int8\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Attr(\"is_training: bool = true\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      auto input_shape = c->input(0);\n      auto input_h_shape = c->input(1);\n      TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));\n\n      auto seq_length = c->Dim(input_shape, 0);\n      auto batch_size = c->Dim(input_shape, 1);\n      auto num_units = c->Dim(input_h_shape, 2);\n      string direction;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));\n      string rnn_mode;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"rnn_mode\", &rnn_mode));\n      int dir_count = (direction == \"bidirectional\") ? 2 : 1;\n      DimensionHandle output_size;\n      TF_RETURN_IF_ERROR(c->Multiply(num_units, dir_count, &output_size));\n      auto output_shape = c->MakeShape({seq_length, batch_size, output_size});\n      auto output_h_shape = input_h_shape;\n      auto output_c_shape TF_ATTRIBUTE_UNUSED =\n          (rnn_mode == \"lstm\") ? output_h_shape : c->MakeShape({});\n      c->set_output(0, output_shape);\n      c->set_output(1, output_h_shape);\n      c->set_output(2, output_c_shape);\n      c->set_output(3, c->UnknownShape());\n      c->set_output(4, c->UnknownShape());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"CudnnRNNV3\")\n    .Input(\"input: T\")\n    .Input(\"input_h: T\")\n    .Input(\"input_c: T\")\n    .Input(\"params: T\")\n    .Input(\"sequence_lengths: int32\")\n    .SetIsStateful()\n    .Output(\"output: T\")\n    .Output(\"output_h: T\")\n    .Output(\"output_c: T\")\n    .Output(\"reserve_space: T\")\n    .Output(\"host_reserved: int8\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Attr(\"num_proj: int = 0\")\n    .Attr(\"is_training: bool = true\")\n    .Attr(\"time_major: bool = true\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      auto input_shape = c->input(0);\n      auto input_h_shape = c->input(1);\n      auto input_c_shape = c->input(2);\n      TF_RETURN_IF_ERROR(c->WithRank(input_shape, 3, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(input_h_shape, 3, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 1, &unused));\n\n      auto max_seq_length = c->Dim(input_shape, 0);\n      auto batch_size = c->Dim(input_shape, 1);\n      auto num_units = c->Dim(input_h_shape, 2);\n\n      string direction;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"direction\", &direction));\n      string rnn_mode;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"rnn_mode\", &rnn_mode));\n      if (rnn_mode == \"lstm\") {\n        TF_RETURN_IF_ERROR(c->WithRank(input_c_shape, 3, &unused));\n      }\n      int dir_count = (direction == \"bidirectional\") ? 2 : 1;\n      DimensionHandle output_size;\n      TF_RETURN_IF_ERROR(c->Multiply(num_units, dir_count, &output_size));\n      auto output_shape =\n          c->MakeShape({max_seq_length, batch_size, output_size});\n      auto output_h_shape = input_h_shape;\n      auto output_c_shape TF_ATTRIBUTE_UNUSED =\n          (rnn_mode == \"lstm\") ? input_c_shape : c->MakeShape({});\n      c->set_output(0, output_shape);\n      c->set_output(1, output_h_shape);\n      c->set_output(2, output_c_shape);\n      c->set_output(3, c->UnknownShape());\n      c->set_output(4, c->UnknownShape());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"CudnnRNNBackprop\")\n    .Input(\"input: T\")\n    .Input(\"input_h: T\")\n    .Input(\"input_c: T\")\n    .Input(\"params: T\")\n    .Input(\"output: T\")\n    .Input(\"output_h: T\")\n    .Input(\"output_c: T\")\n    .Input(\"output_backprop: T\")\n    .Input(\"output_h_backprop: T\")\n    .Input(\"output_c_backprop: T\")\n    .Input(\"reserve_space: T\")\n    .SetIsStateful()\n    .Output(\"input_backprop: T\")\n    .Output(\"input_h_backprop: T\")\n    .Output(\"input_c_backprop: T\")\n    .Output(\"params_backprop: T\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .SetShapeFn([](InferenceContext* c) {\n      auto input_shape = c->input(0);\n      auto input_h_shape = c->input(1);\n      auto input_c_shape = c->input(2);\n      auto params_shape = c->input(3);\n      c->set_output(0, input_shape);\n      c->set_output(1, input_h_shape);\n      c->set_output(2, input_c_shape);\n      c->set_output(3, params_shape);\n      return Status::OK();\n    });\n\nREGISTER_OP(\"CudnnRNNBackpropV2\")\n    .Input(\"input: T\")\n    .Input(\"input_h: T\")\n    .Input(\"input_c: T\")\n    .Input(\"params: T\")\n    .Input(\"output: T\")\n    .Input(\"output_h: T\")\n    .Input(\"output_c: T\")\n    .Input(\"output_backprop: T\")\n    .Input(\"output_h_backprop: T\")\n    .Input(\"output_c_backprop: T\")\n    .Input(\"reserve_space: T\")\n    .Input(\"host_reserved: int8\")\n    .SetIsStateful()\n    .Output(\"input_backprop: T\")\n    .Output(\"input_h_backprop: T\")\n    .Output(\"input_c_backprop: T\")\n    .Output(\"params_backprop: T\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .SetShapeFn([](InferenceContext* c) {\n      auto input_shape = c->input(0);\n      auto input_h_shape = c->input(1);\n      auto input_c_shape = c->input(2);\n      auto params_shape = c->input(3);\n      c->set_output(0, input_shape);\n      c->set_output(1, input_h_shape);\n      c->set_output(2, input_c_shape);\n      c->set_output(3, params_shape);\n      return Status::OK();\n    });\n\nREGISTER_OP(\"CudnnRNNBackpropV3\")\n    .Input(\"input: T\")\n    .Input(\"input_h: T\")\n    .Input(\"input_c: T\")\n    .Input(\"params: T\")\n    .Input(\"sequence_lengths: int32\")\n    .Input(\"output: T\")\n    .Input(\"output_h: T\")\n    .Input(\"output_c: T\")\n    .Input(\"output_backprop: T\")\n    .Input(\"output_h_backprop: T\")\n    .Input(\"output_c_backprop: T\")\n    .Input(\"reserve_space: T\")\n    .Input(\"host_reserved: int8\")\n    .SetIsStateful()\n    .Output(\"input_backprop: T\")\n    .Output(\"input_h_backprop: T\")\n    .Output(\"input_c_backprop: T\")\n    .Output(\"params_backprop: T\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Attr(\"num_proj: int = 0\")\n    .Attr(\"time_major: bool = true\")\n    .SetShapeFn([](InferenceContext* c) {\n      auto input_shape = c->input(0);\n      auto input_h_shape = c->input(1);\n      auto input_c_shape = c->input(2);\n      auto params_shape = c->input(3);\n      c->set_output(0, input_shape);\n      c->set_output(1, input_h_shape);\n      c->set_output(2, input_c_shape);\n      c->set_output(3, params_shape);\n      return Status::OK();\n    });\n\nREGISTER_OP(\"CudnnRNNParamsToCanonical\")\n    .Input(\"num_layers: int32\")\n    .Input(\"num_units: int32\")\n    .Input(\"input_size: int32\")\n    .Input(\"params: T\")\n    .Output(\"weights: num_params * T\")\n    .Output(\"biases: num_params * T\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(\"num_params: int\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));\n      int num_params;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"num_params\", &num_params));\n      // Set shape for weight matrices\n      for (int i = 0; i < num_params; i++) {\n        c->set_output(i, c->Matrix(InferenceContext::kUnknownDim,\n                                   InferenceContext::kUnknownDim));\n      }\n      // Set shape for bias vectors\n      for (int i = 0; i < num_params; i++) {\n        c->set_output(num_params + i, c->Vector(InferenceContext::kUnknownDim));\n      }\n      return Status::OK();\n    });\n\nREGISTER_OP(\"CudnnRNNParamsToCanonicalV2\")\n    .Input(\"num_layers: int32\")\n    .Input(\"num_units: int32\")\n    .Input(\"input_size: int32\")\n    .Input(\"params: T\")\n    .Output(\"weights: num_params_weights * T\")\n    .Output(\"biases: num_params_biases * T\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(\"num_params_weights: int\")\n    .Attr(\"num_params_biases: int\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Attr(\"num_proj: int = 0\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &unused));\n      int num_params_weights;\n      int num_params_biases;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"num_params_weights\", &num_params_weights));\n      TF_RETURN_IF_ERROR(c->GetAttr(\"num_params_biases\", &num_params_biases));\n      // Set shape for weight matrices\n      for (int i = 0; i < num_params_weights; i++) {\n        c->set_output(i, c->Matrix(InferenceContext::kUnknownDim,\n                                   InferenceContext::kUnknownDim));\n      }\n      // Set shape for bias vectors\n      for (int i = 0; i < num_params_biases; i++) {\n        c->set_output(num_params_weights + i,\n                      c->Vector(InferenceContext::kUnknownDim));\n      }\n      return Status::OK();\n    });\n\nREGISTER_OP(\"CudnnRNNCanonicalToParams\")\n    .Input(\"num_layers: int32\")\n    .Input(\"num_units: int32\")\n    .Input(\"input_size: int32\")\n    .Input(\"weights: num_params * T\")\n    .Input(\"biases: num_params * T\")\n    .Output(\"params: T\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(\"num_params: int\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .SetShapeFn([](InferenceContext* c) {\n      c->set_output(0, c->Vector(InferenceContext::kUnknownDim));\n      return Status::OK();\n    });\n\nREGISTER_OP(\"CudnnRNNCanonicalToParamsV2\")\n    .Input(\"num_layers: int32\")\n    .Input(\"num_units: int32\")\n    .Input(\"input_size: int32\")\n    .Input(\"weights: num_params_weights * T\")\n    .Input(\"biases: num_params_biases * T\")\n    .Output(\"params: T\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(\"num_params_weights: int\")\n    .Attr(\"num_params_biases: int\")\n    .Attr(kRNNModeAttrs)\n    .Attr(kRNNInputModeAttrs)\n    .Attr(kRNNDirectionAttrs)\n    .Attr(\"dropout: float = 0.0\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .Attr(\"num_proj: int = 0\")\n    .SetShapeFn([](InferenceContext* c) {\n      c->set_output(0, c->Vector(InferenceContext::kUnknownDim));\n      return Status::OK();\n    });\n\n}  // namespace tensorflow"