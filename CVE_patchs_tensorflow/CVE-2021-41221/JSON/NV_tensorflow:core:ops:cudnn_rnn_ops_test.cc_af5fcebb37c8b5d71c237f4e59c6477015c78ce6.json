"/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/framework/node_def_builder.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference_testutil.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_testutil.h\"\n#include \"tensorflow/core/lib/core/status_test_util.h\"\n#include \"tensorflow/core/lib/strings/str_util.h\"\n#include \"tensorflow/core/platform/test.h\"\n\nnamespace tensorflow {\n\nTEST(CudnnRNNOpsTest, ParamsSize_ShapeFn) {\n  ShapeInferenceTestOp op(\"CudnnRNNParamsSize\");\n  INFER_OK(op, \"[];[];[]\", \"[1]\");\n  INFER_OK(op, \"?;[];[]\", \"[1]\");\n  INFER_OK(op, \"[];?;[]\", \"[1]\");\n  INFER_OK(op, \"[];[];?\", \"[1]\");\n  INFER_OK(op, \"[];?;?\", \"[1]\");\n  INFER_OK(op, \"?;?;?\", \"[1]\");\n\n  INFER_ERROR(\"Shape must be rank 0 \", op, \"[1,2];?;[]\");\n  INFER_ERROR(\"Shape must be rank 0 \", op, \"?;[2];[]\");\n  INFER_ERROR(\"Shape must be rank 0 \", op, \"?;?;[1]\");\n}\n\nTEST(CudnnRNNOpsTest, ForwardLstm_ShapeFn) {\n  int seq_length = 2;\n  int batch_size = 3;\n  int num_units = 4;\n  int num_layers = 5;\n  int dir_count = 1;\n  std::vector<int> input_shape = {seq_length, batch_size, num_units};\n  std::vector<int> input_h_shape = {num_layers * dir_count, batch_size,\n                                    num_units};\n  std::vector<int> output_shape = {seq_length, batch_size,\n                                   num_units * dir_count};\n  auto shape_to_str = [](const std::vector<int>& v) {\n    return strings::StrCat(\"[\", absl::StrJoin(v, \",\"), \"]\");\n  };\n  string input_shapes_desc = strings::StrCat(\n      shape_to_str(input_shape), \";\", shape_to_str(input_h_shape), \";\",\n      shape_to_str(input_h_shape), \";\", \"[?]\");\n  string output_shapes_desc = \"[d0_0,d0_1,d1_2];in1;in1;?\";\n\n  ShapeInferenceTestOp op(\"CudnnRNN\");\n  TF_ASSERT_OK(NodeDefBuilder(\"test\", \"CudnnRNN\")\n                   .Input({\"input\", 0, DT_FLOAT})\n                   .Input({\"input_h\", 0, DT_FLOAT})\n                   .Input({\"input_c\", 0, DT_FLOAT})\n                   .Input({\"params\", 0, DT_FLOAT})\n                   .Attr(\"rnn_mode\", \"lstm\")\n                   .Attr(\"input_mode\", \"auto_select\")\n                   .Attr(\"direction\", \"unidirectional\")\n                   .Finalize(&op.node_def));\n  INFER_OK(op, input_shapes_desc, output_shapes_desc);\n  INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");\n  INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");\n  // Disabled because the kernel does not check shape of input_c.\n  // INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[?,?,?];[?];[?]\");\n  INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");\n}\n\nTEST(CudnnRNNOpsTest, ForwardV2Lstm_ShapeFn) {\n  int seq_length = 2;\n  int batch_size = 3;\n  int num_units = 4;\n  int num_layers = 5;\n  int dir_count = 1;\n  std::vector<int> input_shape = {seq_length, batch_size, num_units};\n  std::vector<int> input_h_shape = {num_layers * dir_count, batch_size,\n                                    num_units};\n  std::vector<int> output_shape = {seq_length, batch_size,\n                                   num_units * dir_count};\n  auto shape_to_str = [](const std::vector<int>& v) {\n    return strings::StrCat(\"[\", absl::StrJoin(v, \",\"), \"]\");\n  };\n  string input_shapes_desc = strings::StrCat(\n      shape_to_str(input_shape), \";\", shape_to_str(input_h_shape), \";\",\n      shape_to_str(input_h_shape), \";\", \"[?]\");\n  string output_shapes_desc = \"[d0_0,d0_1,d1_2];in1;in1;?;?\";\n\n  ShapeInferenceTestOp op(\"CudnnRNNV2\");\n  TF_ASSERT_OK(NodeDefBuilder(\"test\", \"CudnnRNNV2\")\n                   .Input({\"input\", 0, DT_FLOAT})\n                   .Input({\"input_h\", 0, DT_FLOAT})\n                   .Input({\"input_c\", 0, DT_FLOAT})\n                   .Input({\"params\", 0, DT_FLOAT})\n                   .Attr(\"rnn_mode\", \"lstm\")\n                   .Attr(\"input_mode\", \"auto_select\")\n                   .Attr(\"direction\", \"unidirectional\")\n                   .Finalize(&op.node_def));\n  INFER_OK(op, input_shapes_desc, output_shapes_desc);\n  INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?]\");\n  INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?]\");\n  // Disabled because the kernel does not check shape of input_c.\n  // INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[?,?,?];[?];[?]\");\n  INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[]\");\n}\n\nTEST(CudnnRNNOpsTest, ForwardV3Lstm_ShapeFn) {\n  int max_seq_length = 2;\n  int batch_size = 3;\n  int num_units = 4;\n  int num_layers = 5;\n  int dir_count = 1;\n  std::vector<int> input_shape = {max_seq_length, batch_size, num_units};\n  std::vector<int> input_h_shape = {num_layers * dir_count, batch_size,\n                                    num_units};\n  std::vector<int> input_c_shape = {num_layers * dir_count, batch_size,\n                                    num_units};\n  std::vector<int> output_shape = {max_seq_length, batch_size,\n                                   num_units * dir_count};\n  std::vector<int> seq_lengths_shape = {batch_size};\n  auto shape_to_str = [](const std::vector<int>& v) {\n    return strings::StrCat(\"[\", absl::StrJoin(v, \",\"), \"]\");\n  };\n  string input_shapes_desc = strings::StrCat(\n      shape_to_str(input_shape), \";\", shape_to_str(input_h_shape), \";\",\n      shape_to_str(input_c_shape), \";\", \"[?]\", \";\",\n      shape_to_str(seq_lengths_shape));\n  string output_shapes_desc = \"[d0_0,d0_1,d1_2];in1;in2;?;?\";\n\n  ShapeInferenceTestOp op(\"CudnnRNNV3\");\n  TF_ASSERT_OK(NodeDefBuilder(\"test\", \"CudnnRNNV3\")\n                   .Input({\"input\", 0, DT_FLOAT})\n                   .Input({\"input_h\", 0, DT_FLOAT})\n                   .Input({\"input_c\", 0, DT_FLOAT})\n                   .Input({\"params\", 0, DT_FLOAT})\n                   .Input({\"sequence_lengths\", 0, DT_INT32})\n                   .Attr(\"rnn_mode\", \"lstm\")\n                   .Attr(\"input_mode\", \"auto_select\")\n                   .Attr(\"direction\", \"unidirectional\")\n                   .Finalize(&op.node_def));\n  INFER_OK(op, input_shapes_desc, output_shapes_desc);\n  INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[?,?,?];[?];[?]\");\n  INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[?,?,?];[?];[?]\");\n  INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[?,?,?];[];[?];[?]\");\n  INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[];[?]\");\n  INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[?,?,?];[?];[]\");\n}\n\nTEST(CudnnRNNOpsTest, ForwardV3Gru) {\n  int max_seq_length = 2;\n  int batch_size = 3;\n  int num_units = 4;\n  int num_layers = 5;\n  int dir_count = 1;\n  std::vector<int> input_shape = {max_seq_length, batch_size, num_units};\n  std::vector<int> input_h_shape = {num_layers * dir_count, batch_size,\n                                    num_units};\n  std::vector<int> input_c_shape = {num_layers * dir_count, batch_size,\n                                    num_units};\n  std::vector<int> output_shape = {max_seq_length, batch_size,\n                                   num_units * dir_count};\n  std::vector<int> seq_lengths_shape = {batch_size};\n  auto shape_to_str = [](const std::vector<int>& v) {\n    return strings::StrCat(\"[\", absl::StrJoin(v, \",\"), \"]\");\n  };\n  string input_shapes_desc = strings::StrCat(\n      shape_to_str(input_shape), \";\", shape_to_str(input_h_shape), \";\",\n      shape_to_str(input_c_shape), \";\", \"[?]\", \";\",\n      shape_to_str(seq_lengths_shape));\n  string output_shapes_desc = \"[d0_0,d0_1,d1_2];in1;[];?;?\";\n\n  ShapeInferenceTestOp op(\"CudnnRNNV3\");\n  TF_ASSERT_OK(NodeDefBuilder(\"test\", \"CudnnRNNV3\")\n                   .Input({\"input\", 0, DT_FLOAT})\n                   .Input({\"input_h\", 0, DT_FLOAT})\n                   .Input({\"input_c\", 0, DT_FLOAT})\n                   .Input({\"params\", 0, DT_FLOAT})\n                   .Input({\"sequence_lengths\", 0, DT_INT32})\n                   .Attr(\"rnn_mode\", \"gru\")\n                   .Attr(\"input_mode\", \"auto_select\")\n                   .Attr(\"direction\", \"unidirectional\")\n                   .Finalize(&op.node_def));\n  INFER_OK(op, input_shapes_desc, output_shapes_desc);\n  INFER_ERROR(\"Shape must be rank 3 \", op, \"[];[?,?,?];[];[?];[?]\");\n  INFER_ERROR(\"Shape must be rank 3 \", op, \"[?,?,?];[];[];[?];[?]\");\n  INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[];[?]\");\n  INFER_ERROR(\"Shape must be rank 1 \", op, \"[?,?,?];[?,?,?];[];[?];[]\");\n}\n\n}  // end namespace tensorflow"