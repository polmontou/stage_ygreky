"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/array_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#define EIGEN_USE_GPU\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#include <numeric>\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/bounds_check.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/kernels/ops_util.h\"\n#include \"tensorflow/core/kernels/split_lib.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/lib/gtl/array_slice.h\"\n#include \"tensorflow/core/util/work_sharder.h\"\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#include \"tensorflow/core/common_runtime/gpu/gpu_event_mgr.h\"\n#include \"tensorflow/core/kernels/gpu_device_array.h\"\n#include \"tensorflow/core/kernels/split_lib_gpu.h\"\n#include \"tensorflow/core/platform/stream_executor.h\"\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\ntemplate <typename Device, typename T, typename Tlen>\nclass SplitVOpBase : public OpKernel {\n public:\n  explicit SplitVOpBase(OpKernelConstruction* c) : OpKernel(c) {}\n\n  void ComputeEasyCases(OpKernelContext* context, bool* done,\n                        std::vector<Tlen>* split_sizes_vec) {\n    const int32_t num_split = context->num_outputs();\n    const Tensor& input = context->input(0);\n    const TensorShape& input_shape = input.shape();\n    const Tensor& split_tensor = context->input(1);\n    const Tensor& split_dim_tensor = context->input(2);\n\n    OP_REQUIRES(context, split_dim_tensor.NumElements() == 1,\n                errors::InvalidArgument(\"split_dim_tensor must have \"\n                                        \"exactly one element.\"));\n\n    const int32_t split_dim_orig = split_dim_tensor.flat<int32>()(0);\n    const int32_t split_dim =\n        split_dim_orig < 0 ? split_dim_orig + input.dims() : split_dim_orig;\n\n    OP_REQUIRES(\n        context,\n        split_tensor.dims() == 1 && split_tensor.NumElements() == num_split,\n        errors::InvalidArgument(\"size of the split_tensor must be 1-D and have \"\n                                \"the same elements as outputs got \",\n                                split_tensor.dims(), \" -D and \",\n                                split_tensor.NumElements(), \" elements\"));\n\n    auto split_sizes_d = split_tensor.vec<Tlen>();\n\n    split_sizes_vec->resize(split_sizes_d.size());\n\n    std::copy(split_sizes_d.data(), split_sizes_d.data() + split_sizes_d.size(),\n              split_sizes_vec->begin());\n\n    OP_REQUIRES(\n        context, num_split > 0,\n        errors::InvalidArgument(\n            \"Number of ways to split should be > 0, but got \", num_split));\n\n    OP_REQUIRES(\n        context, 0 <= split_dim && split_dim < input.dims(),\n        errors::InvalidArgument(\"-input rank(-\", input.dims(),\n                                \") <= split_dim < input rank (\", input.dims(),\n                                \"), but got \", split_dim_orig));\n\n    Tlen input_size_split_dim = input_shape.dim_size(split_dim);\n\n    // Special case 1: num_split == 1. Nothing to do.\n    if (num_split == 1) {\n      context->set_output(0, context->input(0));\n      OP_REQUIRES(\n          context, (*split_sizes_vec)[0] == input_size_split_dim,\n          errors::InvalidArgument(\"If there is only one output, it must have \"\n                                  \"the same size as the input. Input size: \",\n                                  input_size_split_dim,\n                                  \" output size: \", (*split_sizes_vec)[0]));\n      *done = true;\n      return;\n    }\n\n    // Determine sizes of output, in case of a -1 input value\n    int neg_one_dim = -1;\n    Tlen determined_size = 0;\n    for (int d = 0; d < split_sizes_vec->size(); ++d) {\n      Tlen size = (*split_sizes_vec)[d];\n\n      if (size == -1) {\n        OP_REQUIRES(context, neg_one_dim == -1,\n                    errors::InvalidArgument(\"There can only be one -1 in the \"\n                                            \"input.\"));\n        neg_one_dim = d;\n      } else {\n        determined_size += size;\n      }\n    }\n\n    OP_REQUIRES(\n        context,\n        (neg_one_dim == -1 && determined_size == input_size_split_dim) ||\n            (neg_one_dim >= 0 && determined_size <= input_size_split_dim),\n        errors::InvalidArgument(\"Determined shape must either match \"\n                                \"input shape along split_dim exactly if \"\n                                \"fully specified, or be less than the size of \"\n                                \"the input along split_dim if not fully \"\n                                \"specified.  Got: \",\n                                determined_size));\n\n    if (neg_one_dim >= 0) {\n      (*split_sizes_vec)[neg_one_dim] = input_size_split_dim - determined_size;\n    }\n\n    // Special case 2: split along the 1st dimension. The requirements are that\n    // either we are splitting the outer dimension of two or more such that\n    // every outer subpart is aligned or that the split sizes mean that they are\n    // always aligned. In these cases, we can share the underlying buffer.\n    //\n    // Apply this optimization conservatively: if input is aligned,\n    // the resulting tensors must be aligned. It's conservative\n    // because if the immediate consumer of the resulting tensors are\n    // not using eigen for computation, its perfectly fine to avoid\n    // the copying.\n    if (SplitHasAlignedOutputsInFirstDimension(\n            input_shape, split_dim, absl::MakeConstSpan(*split_sizes_vec))) {\n      Tlen start = 0;\n      for (int i = 0; i < num_split; ++i) {\n        context->set_output(i,\n                            input.Slice(start, start + (*split_sizes_vec)[i]));\n        start += (*split_sizes_vec)[i];\n      }\n      *done = true;\n      return;\n    }\n  }\n\n  template <typename IndexType>\n  std::tuple<IndexType, IndexType, IndexType> SetDims(\n      const TensorShape& input_shape, const int32_t split_dim) const {\n    static_assert(std::is_integral<IndexType>::value,\n                  \"IndexType must be an integer type\");\n    int32_t prefix_dim_size = 1;\n    for (int i = 0; i < split_dim; ++i) {\n      prefix_dim_size *= input_shape.dim_size(i);\n    }\n\n    // Caller must ensure that dim_size and suffix_dim_size are <\n    // std::numeric_limits<IndexType>::max()\n    IndexType split_dim_size =\n        static_cast<IndexType>(input_shape.dim_size(split_dim));\n\n    IndexType suffix_dim_size = 1;\n    for (int i = split_dim + 1; i < input_shape.dims(); ++i) {\n      suffix_dim_size *= static_cast<IndexType>(input_shape.dim_size(i));\n    }\n    return std::make_tuple(prefix_dim_size, split_dim_size, suffix_dim_size);\n  }\n\n private:\n  // Determines whether the given split configuration can be done using slicing\n  // on the first dimension of the tensor. The requirement is that each result\n  // tensor from the slice is correctly aligned within the input tensor.\n  static bool SplitHasAlignedOutputsInFirstDimension(\n      const TensorShape& input_shape, int32_t split_dim,\n      absl::Span<const Tlen> split_sizes) {\n    if (split_dim != 0) {\n      return false;\n    }\n    Tlen start = 0;\n    for (const Tlen split_size : split_sizes) {\n      if (!IsDim0SliceAligned<T>(input_shape, start, start + split_size)) {\n        return false;\n      }\n      start += split_size;\n    }\n    return true;\n  }\n};\n\ntemplate <typename T, typename Tlen, typename InputReshapedType, int NDims>\nclass SplitVOpCPUImpl {\n public:\n  void ParallelSplitByInputData(OpKernelContext* context,\n                                const InputReshapedType& input_reshaped,\n                                const TensorShape& input_shape,\n                                const std::vector<Tlen>& split_sizes_vec,\n                                const int32_t split_dim) const {\n    const T* p_data = input_reshaped.data();\n    const uint32 elem_pkg = input_reshaped.dimensions().rank() == 3\n                                ? input_reshaped.dimension(2)\n                                : 1;\n    const uint32 line_elem_num =\n        (input_reshaped.dimensions().rank() >= 2 ? input_reshaped.dimension(1)\n                                                 : 1) *\n        elem_pkg;\n    const uint32 line_num = input_reshaped.dimension(0);\n\n    // Prepare the output matrix.\n    std::vector<T*> outputs(split_sizes_vec.size());\n    for (uint64 i = 0; i < split_sizes_vec.size(); ++i) {\n      TensorShape output_shape(input_shape);\n      output_shape.set_dim(split_dim, split_sizes_vec[i]);\n      Tensor* result = nullptr;\n      OP_REQUIRES_OK(context,\n                     context->allocate_output(i, output_shape, &result));\n      outputs[i] = static_cast<T*>(&result->flat<T>()(0));\n    }\n\n    auto sub_split_func = [&split_sizes_vec, &p_data, elem_pkg, &outputs,\n                           line_elem_num](int32_t start_part,\n                                          int32_t end_part) {\n      int start = start_part * line_elem_num;\n      int end = end_part * line_elem_num;\n      uint32 times = 0;\n      for (int32_t i = start; i < end;) {\n        for (uint32 j = 0; j < split_sizes_vec.size(); ++j) {\n          const auto copy_elem_num = split_sizes_vec[j] * elem_pkg;\n          std::copy_n(p_data + i, copy_elem_num,\n                      &(outputs[j][(start_part + times) * copy_elem_num]));\n          i += copy_elem_num;\n        }\n        ++times;\n      }\n    };\n\n    uint32 part_size =\n        context->device()->tensorflow_cpu_worker_threads()->num_threads;\n    Shard(part_size,\n          context->device()->tensorflow_cpu_worker_threads()->workers, line_num,\n          line_num, sub_split_func);\n  }\n\n  template <typename MakeSizesType, typename ReshapeResultType>\n  void operator()(OpKernelContext* context,\n                  const InputReshapedType& input_reshaped,\n                  const std::vector<int64_t>& split_start_points,\n                  const TensorShape& input_shape, int32_t split_dim,\n                  Eigen::DenseIndex prefix_dim_size,\n                  Eigen::DenseIndex split_dim_size,\n                  Eigen::DenseIndex suffix_dim_size,\n                  std::vector<Tlen>& split_sizes_vec,\n                  const MakeSizesType& make_sizes,\n                  const ReshapeResultType& reshape_result) const {\n    Eigen::DSizes<Eigen::DenseIndex, NDims> indices;\n    for (int i = 0; i < NDims; ++i) {\n      indices[i] = 0;\n    }\n    const auto num_threads =\n        context->device()->tensorflow_cpu_worker_threads()->num_threads;\n    // TODO(jewillco): Tune heuristic further.\n    const auto input_element_count = input_shape.num_elements();\n    const int num_split = split_start_points.size();\n    const bool use_parallelism_between_outputs =\n        (num_split >= kMinimumSplitNum &&\n         input_element_count >= std::min(num_threads, num_split) * 4096 &&\n         input_element_count < num_split * 180 * 1024);\n\n    auto range_output_func = [&indices, context, &input_shape, split_dim,\n                              &split_sizes_vec, &split_start_points,\n                              use_parallelism_between_outputs, &input_reshaped,\n                              &make_sizes,\n                              &reshape_result](int64_t start, int64_t limit) {\n      for (int64_t i = start; i < limit; ++i) {\n        TensorShape output_shape(input_shape);\n        output_shape.set_dim(split_dim, split_sizes_vec[i]);\n        Tensor* result = nullptr;\n        OP_REQUIRES_OK(context,\n                       context->allocate_output(i, output_shape, &result));\n\n        const auto sizes = make_sizes(split_sizes_vec[i]);\n\n        if (sizes.TotalSize() > 0) {\n          auto result_shaped = reshape_result(result, split_sizes_vec[i]);\n\n          auto current_indices = indices;\n          current_indices[NDims - 2] = split_start_points[i];\n          if (use_parallelism_between_outputs) {\n            // Use sequential implementation for single output.\n            result_shaped = input_reshaped.slice(current_indices, sizes);\n          } else {\n            // This implementation may be parallel internally.\n            functor::Split<CPUDevice, T, NDims>()(\n                context->eigen_device<CPUDevice>(), result_shaped,\n                input_reshaped, current_indices, sizes);\n          }\n        }\n      }\n    };\n\n    // 1. Parallel performance is not as good as serial when the amount of data\n    // is too small (<kMinimumInputSize);\n    // 2. There is sufficient data on the 0th dimension to ensure parallelism;\n    // 3. This method only supports non-zero split.\n    if ((input_element_count >= kMinimumInputSize) &&\n        input_reshaped.dimension(0) > kMinimumDim0Size && split_dim) {\n      // Each thread processes the same amount of data, and then copies data\n      // to all output tensors .\n      ParallelSplitByInputData(context, input_reshaped, input_shape,\n                               split_sizes_vec, split_dim);\n    } else if (use_parallelism_between_outputs) {\n      // A thread maps a output tensor, this thread will traverse all the data,\n      // and then put specified data to mapped output tensor. Run in parallel,\n      // disabling parallelism in functor.\n      Shard(num_split,\n            context->device()->tensorflow_cpu_worker_threads()->workers,\n            num_split, input_element_count / num_split, range_output_func);\n    } else {\n      // Run sequentially, but allow internal parallelism in functor.\n      range_output_func(0, num_split);\n    }\n  }\n  static constexpr uint64 kMinimumInputSize = 4096 * 512;\n  static constexpr uint64 kMinimumDim0Size = 8;\n  static constexpr uint64 kMinimumSplitNum = 4;\n};\n\ntemplate <typename T, typename Tlen>\nclass SplitVOpCPU : public SplitVOpBase<CPUDevice, T, Tlen> {\n public:\n  typedef SplitVOpBase<CPUDevice, T, Tlen> Base;\n  explicit SplitVOpCPU(OpKernelConstruction* c) : Base(c) {}\n\n  void Compute(OpKernelContext* context) override {\n    bool done = false;\n    std::vector<Tlen> split_sizes_vec;\n    Base::ComputeEasyCases(context, &done, &split_sizes_vec);\n    if (!context->status().ok() || done) {\n      return;\n    }\n    const int32_t num_split = Base::num_outputs();\n    const Tensor& input = context->input(0);\n    const TensorShape& input_shape = input.shape();\n    const int32_t split_dim_orig = context->input(2).flat<int32>()(0);\n    const int32_t split_dim =\n        split_dim_orig < 0 ? split_dim_orig + input.dims() : split_dim_orig;\n\n    // Android also uses int32 indexing, so check here also.\n    OP_REQUIRES(\n        context,\n        FastBoundsCheck(input.NumElements(),\n                        std::numeric_limits<Eigen::DenseIndex>::max()),\n        errors::InvalidArgument(\"Split requires input size < \",\n                                std::numeric_limits<Eigen::DenseIndex>::max()));\n\n    Eigen::DenseIndex prefix_dim_size;\n    Eigen::DenseIndex split_dim_size;\n    Eigen::DenseIndex suffix_dim_size;\n\n    std::tie(prefix_dim_size, split_dim_size, suffix_dim_size) =\n        Base::template SetDims<Eigen::DenseIndex>(input_shape, split_dim);\n    std::vector<int64_t> split_start_points(num_split);\n    for (int i = 0; i < num_split; ++i) {\n      if (i == 0) {\n        split_start_points[i] = 0;\n      } else {\n        split_start_points[i] =\n            split_start_points[i - 1] + split_sizes_vec[i - 1];\n      }\n    }\n\n    if (prefix_dim_size == 1) {\n      auto input_reshaped =\n          input.shaped<T, 2>({split_dim_size, suffix_dim_size});\n      auto make_sizes = [&](Eigen::DenseIndex split_size) {\n        return Eigen::DSizes<Eigen::DenseIndex, 2>{split_size, suffix_dim_size};\n      };\n      auto reshape_result = [&](Tensor* result, Tlen split_size) {\n        return result->shaped<T, 2>({split_size, suffix_dim_size});\n      };\n      SplitVOpCPUImpl<T, Tlen, decltype(input_reshaped), 2>{}(\n          context, input_reshaped, split_start_points, input_shape, split_dim,\n          prefix_dim_size, split_dim_size, suffix_dim_size, split_sizes_vec,\n          make_sizes, reshape_result);\n    } else {\n      auto input_reshaped = input.shaped<T, 3>(\n          {prefix_dim_size, split_dim_size, suffix_dim_size});\n      auto make_sizes = [&](Eigen::DenseIndex split_size) {\n        return Eigen::DSizes<Eigen::DenseIndex, 3>{prefix_dim_size, split_size,\n                                                   suffix_dim_size};\n      };\n      auto reshape_result = [&](Tensor* result, Tlen split_size) {\n        return result->shaped<T, 3>(\n            {prefix_dim_size, split_size, suffix_dim_size});\n      };\n      SplitVOpCPUImpl<T, Tlen, decltype(input_reshaped), 3>{}(\n          context, input_reshaped, split_start_points, input_shape, split_dim,\n          prefix_dim_size, split_dim_size, suffix_dim_size, split_sizes_vec,\n          make_sizes, reshape_result);\n    }\n  }\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n// Partial specialization for GPU\ntemplate <typename T, typename Tlen>\nclass SplitVOpGPU : public SplitVOpBase<GPUDevice, T, Tlen> {\n public:\n  typedef SplitVOpBase<GPUDevice, T, Tlen> Base;\n  explicit SplitVOpGPU(OpKernelConstruction* c) : Base(c) {}\n\n  void Compute(OpKernelContext* context) override {\n    bool done = false;\n    std::vector<Tlen> split_sizes_vec;\n    Base::ComputeEasyCases(context, &done, &split_sizes_vec);\n    if (!context->status().ok() || done) {\n      return;\n    }\n    const int32_t num_split = Base::num_outputs();\n    const Tensor& input = context->input(0);\n    const TensorShape& input_shape = input.shape();\n    const int32_t split_dim_orig = context->input(2).flat<int32>()(0);\n    const int32_t split_dim =\n        split_dim_orig < 0 ? split_dim_orig + input.dims() : split_dim_orig;\n    OP_REQUIRES(\n        context,\n        FastBoundsCheck(input.NumElements(), std::numeric_limits<int32>::max()),\n        errors::InvalidArgument(\"Split on GPU requires input size \"\n                                \"< max int32\"));\n\n    int32_t prefix_dim_size;\n    int32_t split_dim_size;\n    int32_t suffix_dim_size;\n    std::tie(prefix_dim_size, split_dim_size, suffix_dim_size) =\n        Base::template SetDims<int32>(input_shape, split_dim);\n\n    // use the same approach as concat (see documentation there)\n    // reshape to 2D\n\n    if (num_split > 16) {\n      GpuDeviceArrayOnHost<T*> ptrs(context, num_split);\n      OP_REQUIRES_OK(context, ptrs.Init());\n\n      GpuDeviceArrayOnHost<Tlen> offsets(context, num_split + 1);\n      OP_REQUIRES_OK(context, offsets.Init());\n\n      Tlen offset = 0;\n      int entry = split_sizes_vec[0];\n      bool fixed_size =\n          std::all_of(split_sizes_vec.begin(), split_sizes_vec.end(),\n                      [&entry](int n) { return n == entry; });\n\n      for (int i = 0; i < num_split; ++i) {\n        TensorShape output_shape(input_shape);\n        output_shape.set_dim(split_dim, split_sizes_vec[i]);\n        Tensor* result = nullptr;\n        OP_REQUIRES_OK(context,\n                       context->allocate_output(i, output_shape, &result));\n        ptrs.Set(i, result->flat<T>().data());\n        offsets.Set(i, offset);\n        offset += split_sizes_vec[i] * suffix_dim_size;\n      }\n      offsets.Set(num_split, offset);\n      OP_REQUIRES_OK(context, ptrs.Finalize());\n      OP_REQUIRES_OK(context, offsets.Finalize());\n\n      if (input.NumElements() > 0) {\n        SplitVOpGPULaunch<T, Tlen>().Run(\n            context->eigen_device<GPUDevice>(), fixed_size,\n            input.flat<T>().data(), prefix_dim_size,\n            input.NumElements() / prefix_dim_size, offsets.data(), ptrs.data());\n        OP_REQUIRES(\n            context, context->op_device_context()->stream()->ok(),\n            errors::Internal(\"Launch of gpu kernel for SplitVOp failed\"));\n      }\n    } else {\n      Eigen::DenseIndex prefix_dim_size;\n      Eigen::DenseIndex split_dim_size;\n      Eigen::DenseIndex suffix_dim_size;\n\n      std::tie(prefix_dim_size, split_dim_size, suffix_dim_size) =\n          Base::template SetDims<Eigen::DenseIndex>(input_shape, split_dim);\n      auto input_reshaped = input.shaped<T, 2>(\n          {prefix_dim_size, split_dim_size * suffix_dim_size});\n\n      Eigen::DSizes<Eigen::DenseIndex, 2> indices{0, 0};\n\n      for (int i = 0; i < num_split; ++i) {\n        TensorShape output_shape(input_shape);\n        output_shape.set_dim(split_dim, split_sizes_vec[i]);\n        Tensor* result = nullptr;\n        OP_REQUIRES_OK(context,\n                       context->allocate_output(i, output_shape, &result));\n\n        Eigen::DSizes<Eigen::DenseIndex, 2> sizes{\n            prefix_dim_size, split_sizes_vec[i] * suffix_dim_size};\n\n        if (sizes.TotalSize() > 0) {\n          auto result_shaped = result->shaped<T, 2>(\n              {prefix_dim_size, split_sizes_vec[i] * suffix_dim_size});\n\n          functor::SplitCustom<GPUDevice, T>()(\n              context->eigen_device<GPUDevice>(), result_shaped, input_reshaped,\n              indices, sizes);\n        }\n        indices[1] += split_sizes_vec[i] * suffix_dim_size;\n      }\n    }\n  }\n};\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_SPLIT(type, len_type)                          \\\n  REGISTER_KERNEL_BUILDER(Name(\"SplitV\")                        \\\n                              .Device(DEVICE_CPU)               \\\n                              .TypeConstraint<len_type>(\"Tlen\") \\\n                              .TypeConstraint<type>(\"T\")        \\\n                              .HostMemory(\"size_splits\")        \\\n                              .HostMemory(\"split_dim\"),         \\\n                          SplitVOpCPU<type, len_type>);\n\n#define REGISTER_SPLIT_LEN(type) \\\n  REGISTER_SPLIT(type, int32);   \\\n  REGISTER_SPLIT(type, int64_t);\n\nTF_CALL_ALL_TYPES(REGISTER_SPLIT_LEN);\n\n#undef REGISTER_SPLIT_LEN\n#undef REGISTER_SPLIT\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_GPU(type, len_type)                            \\\n  REGISTER_KERNEL_BUILDER(Name(\"SplitV\")                        \\\n                              .Device(DEVICE_GPU)               \\\n                              .TypeConstraint<len_type>(\"Tlen\") \\\n                              .TypeConstraint<type>(\"T\")        \\\n                              .HostMemory(\"size_splits\")        \\\n                              .HostMemory(\"split_dim\"),         \\\n                          SplitVOpGPU<type, len_type>);\n\n#define REGISTER_GPU_LEN(type) \\\n  REGISTER_GPU(type, int32);   \\\n  REGISTER_GPU(type, int64_t);\n\nTF_CALL_bfloat16(REGISTER_GPU_LEN);\nTF_CALL_GPU_NUMBER_TYPES(REGISTER_GPU_LEN);\nTF_CALL_COMPLEX_TYPES(REGISTER_GPU_LEN);\n#undef REGISTER_GPU_LEN\n#undef REGISTER_GPU\n\n// special GPU kernel for int32\n\n#define REGISTER_GPU_int32(len_type)                            \\\n  REGISTER_KERNEL_BUILDER(Name(\"SplitV\")                        \\\n                              .Device(DEVICE_GPU)               \\\n                              .TypeConstraint<int32>(\"T\")       \\\n                              .TypeConstraint<len_type>(\"Tlen\") \\\n                              .HostMemory(\"size_splits\")        \\\n                              .HostMemory(\"split_dim\")          \\\n                              .HostMemory(\"value\")              \\\n                              .HostMemory(\"output\"),            \\\n                          SplitVOpCPU<int32, len_type>);\n\nREGISTER_GPU_int32(int32);\nREGISTER_GPU_int32(int64_t);\n\n#undef REGISTER_GPU_int32\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n}  // end namespace tensorflow"