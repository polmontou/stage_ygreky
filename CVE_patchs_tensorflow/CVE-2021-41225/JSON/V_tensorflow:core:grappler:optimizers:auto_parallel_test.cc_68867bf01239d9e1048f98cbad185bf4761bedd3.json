"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/grappler/optimizers/auto_parallel.h\"\n#include \"tensorflow/cc/ops/standard_ops.h\"\n#include \"tensorflow/core/framework/node_def.pb.h\"\n#include \"tensorflow/core/grappler/grappler_item.h\"\n#include \"tensorflow/core/grappler/utils.h\"\n#include \"tensorflow/core/lib/core/status_test_util.h\"\n#include \"tensorflow/core/platform/test.h\"\n\nnamespace tensorflow {\nnamespace grappler {\nnamespace {\n\nclass AutoParallelTest : public ::testing::Test {};\n\nTEST_F(AutoParallelTest, SimpleParallel) {\n  tensorflow::Scope s = tensorflow::Scope::DisabledShapeInferenceScope();\n  Output constant_a = ops::Const(s.WithOpName(\"constant_a\"), 1.0f, {1});\n  Output constant_b = ops::Const(s.WithOpName(\"constant_b\"), 1, {1});\n  Output var = ops::Variable(s.WithOpName(\"var\"), {1}, DT_FLOAT);\n  Output assign = ops::Assign(s.WithOpName(\"assign\"), {var}, {constant_a});\n  Output identity = ops::Identity(s.WithOpName(\"identity\"), {var});\n  Output fifo_queue = ops::FIFOQueue(s.WithOpName(\"fifo_queue\"), {DT_FLOAT});\n  auto dequeue = ops::QueueDequeueMany(s.WithOpName(\"dequeue\"), {fifo_queue},\n                                       {constant_b}, {DT_FLOAT});\n  Output add = ops::AddN(s.WithOpName(\"add\"), {constant_a, dequeue[0]});\n  Output learning_rate = ops::Const(s.WithOpName(\"learning_rate\"), 0.01f, {1});\n  Output apply_gradient = ops::ApplyGradientDescent(\n      s.WithOpName(\"apply_gradient\"), {var}, {learning_rate}, {add});\n\n  GrapplerItem item;\n  item.init_ops.push_back(\"assign\");\n  item.fetch.push_back(\"apply_gradient\");\n  item.init_ops.push_back(\"assign\");\n  TF_CHECK_OK(s.ToGraphDef(&item.graph));\n\n  AutoParallel parallel(2);\n  GraphDef output;\n  Status status = parallel.Optimize(nullptr, item, &output);\n  TF_EXPECT_OK(status);\n  EXPECT_EQ(21, output.node_size());\n\n  const NodeDef& node_assign = output.node(0);\n  EXPECT_EQ(\"assign\", node_assign.name());\n  EXPECT_EQ(\"AutoParallel-Replica-0/constant_a\", node_assign.input(1));\n\n  const NodeDef& node_constant_b = output.node(1);\n  EXPECT_EQ(\"constant_b\", node_constant_b.name());\n\n  const NodeDef& node_fifo_queue = output.node(2);\n  EXPECT_EQ(\"fifo_queue\", node_fifo_queue.name());\n\n  const NodeDef& node_identity = output.node(3);\n  EXPECT_EQ(\"identity\", node_identity.name());\n  EXPECT_EQ(\"var\", node_identity.input(0));\n\n  const NodeDef& node_var = output.node(4);\n  EXPECT_EQ(\"var\", node_var.name());\n\n  const NodeDef& node_div_const0 = output.node(5);\n  EXPECT_EQ(\"AutoParallel-Replica-0/AutoParallel-Div-Const\",\n            node_div_const0.name());\n\n  const NodeDef& node_div0 = output.node(6);\n  EXPECT_EQ(\"AutoParallel-Replica-0/AutoParallel-Div-apply_gradient\",\n            node_div0.name());\n  const NodeDef& node_add0 = output.node(7);\n  EXPECT_EQ(\"AutoParallel-Replica-0/add\", node_add0.name());\n\n  const NodeDef& node_gradient0 = output.node(8);\n  EXPECT_EQ(\"AutoParallel-Replica-0/apply_gradient\", node_gradient0.name());\n\n  const NodeDef& node_constant_a0 = output.node(9);\n  EXPECT_EQ(\"AutoParallel-Replica-0/constant_a\", node_constant_a0.name());\n\n  const NodeDef& node_dequeue0 = output.node(10);\n  EXPECT_EQ(\"AutoParallel-Replica-0/dequeue\", node_dequeue0.name());\n\n  const NodeDef& node_learning_rate0 = output.node(11);\n  EXPECT_EQ(\"AutoParallel-Replica-0/learning_rate\", node_learning_rate0.name());\n\n  const NodeDef& node_div_const1 = output.node(12);\n  EXPECT_EQ(\"AutoParallel-Replica-1/AutoParallel-Div-Const\",\n            node_div_const1.name());\n\n  const NodeDef& node_div1 = output.node(13);\n  EXPECT_EQ(\"AutoParallel-Replica-1/AutoParallel-Div-apply_gradient\",\n            node_div1.name());\n\n  const NodeDef& node_add1 = output.node(14);\n  EXPECT_EQ(\"AutoParallel-Replica-1/add\", node_add1.name());\n\n  const NodeDef& node_gradient1 = output.node(15);\n  EXPECT_EQ(\"AutoParallel-Replica-1/apply_gradient\", node_gradient1.name());\n\n  const NodeDef& node_constant_a1 = output.node(16);\n  EXPECT_EQ(\"AutoParallel-Replica-1/constant_a\", node_constant_a1.name());\n\n  const NodeDef& node_dequeue1 = output.node(17);\n  EXPECT_EQ(\"AutoParallel-Replica-1/dequeue\", node_dequeue1.name());\n\n  const NodeDef& node_learning_rate1 = output.node(18);\n  EXPECT_EQ(\"AutoParallel-Replica-1/learning_rate\", node_learning_rate1.name());\n\n  const NodeDef& node_fetch = output.node(19);\n  EXPECT_EQ(\"AutoParallel-Control-Fetch\", node_fetch.name());\n  EXPECT_EQ(\"^AutoParallel-Replica-0/apply_gradient\", node_fetch.input(0));\n  EXPECT_EQ(\"^AutoParallel-Replica-1/apply_gradient\", node_fetch.input(1));\n\n  const NodeDef& node_gradient = output.node(20);\n  EXPECT_EQ(\"apply_gradient\", node_gradient.name());\n  EXPECT_EQ(\"^AutoParallel-Control-Fetch\", node_gradient.input(0));\n}\n\n}  // namespace\n}  // namespace grappler\n}  // namespace tensorflow"