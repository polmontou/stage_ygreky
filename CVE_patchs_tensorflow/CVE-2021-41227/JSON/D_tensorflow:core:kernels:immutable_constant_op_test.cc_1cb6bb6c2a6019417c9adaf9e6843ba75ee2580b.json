"diff --git a/tensorflow/core/kernels/immutable_constant_op_test.cc b/tensorflow/core/kernels/immutable_constant_op_test.cc\nindex d52a8b55a35..40ce8918a39 100644\n--- a/tensorflow/core/kernels/immutable_constant_op_test.cc\n+++ b/tensorflow/core/kernels/immutable_constant_op_test.cc\n@@ -146,7 +146,8 @@ TEST(ImmutableConstantOpTest, ExecutionError) {\n       error::INTERNAL);\n }\n \n-Status CreateTempFile(Env* env, float value, uint64 size, string* filename) {\n+Status CreateTempFileFloat(Env* env, float value, uint64 size,\n+                           string* filename) {\n   const string dir = testing::TmpDir();\n   *filename = io::JoinPath(dir, strings::StrCat(\"file_\", value));\n   std::unique_ptr<WritableFile> file;\n@@ -166,8 +167,8 @@ TEST(ImmutableConstantOpTest, FromFile) {\n   auto root = Scope::NewRootScope().ExitOnError();\n \n   string two_file, three_file;\n-  TF_ASSERT_OK(CreateTempFile(env, 2.0f, 1000, &two_file));\n-  TF_ASSERT_OK(CreateTempFile(env, 3.0f, 1000, &three_file));\n+  TF_ASSERT_OK(CreateTempFileFloat(env, 2.0f, 1000, &two_file));\n+  TF_ASSERT_OK(CreateTempFileFloat(env, 3.0f, 1000, &three_file));\n   auto node1 = ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, two_file);\n   auto node2 =\n       ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, three_file);\n@@ -190,5 +191,39 @@ TEST(ImmutableConstantOpTest, FromFile) {\n   EXPECT_EQ(outputs.front().flat<float>()(2), 2.0f * 3.0f);\n }\n \n+Status CreateTempFileBadString(Env* env, char value, uint64 size,\n+                               const string suffix, string* filename) {\n+  const string dir = testing::TmpDir();\n+  *filename = io::JoinPath(dir, strings::StrCat(\"file_\", suffix));\n+  std::unique_ptr<WritableFile> file;\n+  TF_RETURN_IF_ERROR(env->NewWritableFile(*filename, &file));\n+  TF_RETURN_IF_ERROR(file->Append(std::string(size, value)));\n+  TF_RETURN_IF_ERROR(file->Close());\n+  return Status::OK();\n+}\n+\n+TEST(ImmutableConstantOpTest, FromFileStringUnimplmented) {\n+  const TensorShape kFileTensorShape({1});\n+  Env* env = Env::Default();\n+  auto root = Scope::NewRootScope().ExitOnError();\n+\n+  string bad_file;\n+  TF_ASSERT_OK(CreateTempFileBadString(env, '\\xe2', 128, \"bad_e2\", &bad_file));\n+  auto result =\n+      ops::ImmutableConst(root, DT_STRING, kFileTensorShape, bad_file);\n+  GraphDef graph_def;\n+  TF_ASSERT_OK(root.ToGraphDef(&graph_def));\n+  SessionOptions session_options;\n+  session_options.env = Env::Default();\n+  std::unique_ptr<Session> session(NewSession(session_options));\n+  ASSERT_TRUE(session != nullptr) << \"Failed to create session\";\n+  TF_ASSERT_OK(session->Create(graph_def)) << \"Can't create test graph\";\n+  std::vector<Tensor> outputs;\n+  // Check that the run returned error.\n+  EXPECT_EQ(\n+      session->Run({}, {result.node()->name() + \":0\"}, {}, &outputs).code(),\n+      error::UNIMPLEMENTED);\n+}\n+\n }  // namespace\n }  // namespace tensorflow"