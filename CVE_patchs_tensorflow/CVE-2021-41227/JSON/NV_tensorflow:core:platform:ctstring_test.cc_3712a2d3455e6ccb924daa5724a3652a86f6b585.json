"/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/platform/ctstring.h\"\n\n#include <memory>\n#include <string>\n\n#include \"tensorflow/core/platform/ctstring_internal.h\"\n#include \"tensorflow/core/platform/test.h\"\n\nstatic const char kLongString[] =\n    \"abcdefghij\"\n    \"klmnopqrst\"\n    \"uvwxyz0123\"\n    \"456789ABCD\"\n    \"EFGHIKLMNO\";\nconst size_t kLongStringLen = sizeof(kLongString) / sizeof(char) - sizeof(char);\n\nTEST(TF_CTStringTest, InitAssignMoveDealloc) {\n  EXPECT_GT(::strlen(kLongString), TF_TString_SmallCapacity);\n\n  {\n    // Empty String\n    TF_TString s10, s11, s12;\n    TF_TString_Init(&s10);\n    TF_TString_Init(&s11);\n    TF_TString_Init(&s12);\n\n    EXPECT_EQ(0, TF_TString_GetSize(&s10));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s10));\n    EXPECT_STREQ(\"\", TF_TString_GetDataPointer(&s10));\n    EXPECT_STREQ(\"\", TF_TString_GetMutableDataPointer(&s10));\n\n    TF_TString_Assign(&s11, &s10);\n\n    EXPECT_EQ(0, TF_TString_GetSize(&s11));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s10));\n    EXPECT_STREQ(\"\", TF_TString_GetDataPointer(&s11));\n    EXPECT_STREQ(\"\", TF_TString_GetMutableDataPointer(&s11));\n\n    TF_TString_Move(&s12, &s11);\n\n    EXPECT_EQ(0, TF_TString_GetSize(&s11));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s10));\n    EXPECT_STREQ(\"\", TF_TString_GetDataPointer(&s11));\n    EXPECT_STREQ(\"\", TF_TString_GetMutableDataPointer(&s11));\n\n    EXPECT_EQ(0, TF_TString_GetSize(&s12));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s10));\n    EXPECT_STREQ(\"\", TF_TString_GetDataPointer(&s12));\n    EXPECT_STREQ(\"\", TF_TString_GetMutableDataPointer(&s12));\n\n    TF_TString_Dealloc(&s10);\n    TF_TString_Dealloc(&s11);\n    TF_TString_Dealloc(&s12);\n  }\n\n  {\n    // Small String\n    TF_TString s20, s21, s22;\n    TF_TString_Init(&s20);\n    TF_TString_Init(&s21);\n    TF_TString_Init(&s22);\n\n    TF_TString_Copy(&s20, \"a\", 1);\n\n    EXPECT_EQ(1, TF_TString_GetSize(&s20));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s20));\n    EXPECT_STREQ(\"a\", TF_TString_GetDataPointer(&s20));\n    EXPECT_STREQ(\"a\", TF_TString_GetMutableDataPointer(&s20));\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s20));\n\n    TF_TString_Assign(&s21, &s20);\n\n    EXPECT_EQ(1, TF_TString_GetSize(&s21));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s21));\n    EXPECT_STREQ(\"a\", TF_TString_GetDataPointer(&s21));\n    EXPECT_STREQ(\"a\", TF_TString_GetMutableDataPointer(&s21));\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s21));\n\n    TF_TString_Move(&s22, &s21);\n\n    EXPECT_EQ(1, TF_TString_GetSize(&s22));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s22));\n    EXPECT_STREQ(\"a\", TF_TString_GetDataPointer(&s22));\n    EXPECT_STREQ(\"a\", TF_TString_GetMutableDataPointer(&s22));\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s22));\n\n    TF_TString_Dealloc(&s20);\n    TF_TString_Dealloc(&s21);  // Nothing to dealloc, since it was moved.\n    TF_TString_Dealloc(&s22);\n  }\n\n  {\n    // Small String -> Large String and View\n    TF_TString s30, s31;\n    TF_TString_Init(&s30);\n    TF_TString_Init(&s31);\n\n    size_t s = TF_TString_SmallCapacity - 1;\n\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s30));\n\n    // Small String\n    TF_TString_Copy(&s30, kLongString, s);\n\n    EXPECT_STREQ(std::string(kLongString, s).data(),\n                 TF_TString_GetDataPointer(&s30));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s30));\n    EXPECT_GT(TF_TString_SmallCapacity, TF_TString_GetSize(&s30));\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s30));\n\n    // Small String at capacity\n    TF_TString_AppendN(&s30, &kLongString[s++], 1);\n\n    EXPECT_STREQ(std::string(kLongString, s).data(),\n                 TF_TString_GetDataPointer(&s30));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s30));\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetSize(&s30));\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s30));\n\n    // Large String\n    TF_TString_AppendN(&s30, &kLongString[s++], 1);\n\n    EXPECT_STREQ(std::string(kLongString, s).data(),\n                 TF_TString_GetDataPointer(&s30));\n    EXPECT_STREQ(std::string(kLongString, s).data(),\n                 TF_TString_GetMutableDataPointer(&s30));\n    EXPECT_EQ(TF_TSTR_LARGE, TF_TString_GetType(&s30));\n    EXPECT_EQ(s, TF_TString_GetSize(&s30));\n    EXPECT_LT(TF_TString_SmallCapacity, TF_TString_GetSize(&s30));\n    EXPECT_LT(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s30));\n\n    // Large String Move\n    TF_TString_Move(&s31, &s30);\n\n    EXPECT_STREQ(\"\", TF_TString_GetDataPointer(&s30));\n    EXPECT_STREQ(\"\", TF_TString_GetMutableDataPointer(&s30));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s30));\n    EXPECT_EQ(0, TF_TString_GetSize(&s30));\n\n    EXPECT_STREQ(std::string(kLongString, s).data(),\n                 TF_TString_GetDataPointer(&s31));\n    EXPECT_STREQ(std::string(kLongString, s).data(),\n                 TF_TString_GetMutableDataPointer(&s31));\n    EXPECT_EQ(TF_TSTR_LARGE, TF_TString_GetType(&s31));\n    EXPECT_EQ(s, TF_TString_GetSize(&s31));\n    EXPECT_LT(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s31));\n\n    TF_TString_Dealloc(&s30);\n    TF_TString_Dealloc(&s31);\n  }\n\n  {\n    // Small String -> Large String -> Larger -> View\n    const char kStr[] = \"abcdef\";\n    const char kStrLen = sizeof(kStr) / sizeof(char) - sizeof(char);\n    TF_TString s40, s41;\n\n    TF_TString_Init(&s40);\n    TF_TString_Init(&s41);\n\n    TF_TString_Copy(&s40, kLongString, kLongStringLen);\n\n    EXPECT_EQ(kLongStringLen, TF_TString_GetSize(&s40));\n\n    TF_TString_Assign(&s41, &s40);\n\n    EXPECT_STREQ(kLongString, TF_TString_GetDataPointer(&s40));\n    EXPECT_STREQ(kLongString, TF_TString_GetMutableDataPointer(&s40));\n    EXPECT_EQ(kLongStringLen, TF_TString_GetSize(&s41));\n\n    TF_TString_AppendN(&s40, kLongString, kLongStringLen);\n    TF_TString_Append(&s40, &s41);\n\n    std::string longerString(kLongString);\n    longerString += kLongString;\n    longerString += kLongString;\n    EXPECT_STREQ(longerString.data(), TF_TString_GetDataPointer(&s40));\n    EXPECT_STREQ(longerString.data(), TF_TString_GetMutableDataPointer(&s40));\n    EXPECT_EQ(longerString.size(), TF_TString_GetSize(&s40));\n\n    TF_TString_AssignView(&s40, kStr, kStrLen);\n\n    EXPECT_EQ(TF_TSTR_VIEW, TF_TString_GetType(&s40));\n    EXPECT_EQ(kStr, TF_TString_GetDataPointer(&s40));\n    EXPECT_EQ(6, TF_TString_GetSize(&s40));\n    EXPECT_EQ(0, TF_TString_GetCapacity(&s40));\n\n    EXPECT_NE(kStr, TF_TString_GetMutableDataPointer(&s40));\n    EXPECT_STREQ(kStr, TF_TString_GetMutableDataPointer(&s40));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s40));\n    EXPECT_EQ(6, TF_TString_GetSize(&s40));\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s40));\n\n    TF_TString_Dealloc(&s40);\n    TF_TString_Dealloc(&s41);\n  }\n\n  {\n    // Small String -> Large String -> Smaller\n    TF_TString s50;\n\n    TF_TString_Init(&s50);\n\n    TF_TString_Copy(&s50, \"a\", 1);\n\n    EXPECT_STREQ(\"a\", TF_TString_GetDataPointer(&s50));\n    EXPECT_STREQ(\"a\", TF_TString_GetMutableDataPointer(&s50));\n    EXPECT_EQ(1, TF_TString_GetSize(&s50));\n\n    TF_TString_Copy(&s50, kLongString, kLongStringLen);\n\n    EXPECT_STREQ(kLongString, TF_TString_GetDataPointer(&s50));\n    EXPECT_STREQ(kLongString, TF_TString_GetMutableDataPointer(&s50));\n    EXPECT_EQ(kLongStringLen, TF_TString_GetSize(&s50));\n\n    // align16(kLongStringLen) - 1 = 63\n    size_t cap1 = TF_TString_GetCapacity(&s50);\n\n    // Test reduced allocation with on large type.\n    TF_TString_Copy(&s50, kLongString, TF_TString_SmallCapacity + 1);\n\n    // align16(TF_TString_SmallCapacity+1) - 1 = 31\n    size_t cap2 = TF_TString_GetCapacity(&s50);\n\n    EXPECT_STREQ(std::string(kLongString, TF_TString_SmallCapacity + 1).data(),\n                 TF_TString_GetMutableDataPointer(&s50));\n    EXPECT_EQ(TF_TSTR_LARGE, TF_TString_GetType(&s50));\n\n    EXPECT_GT(cap1, cap2);\n\n    TF_TString_Copy(&s50, \"c\", 1);\n\n    EXPECT_STREQ(\"c\", TF_TString_GetDataPointer(&s50));\n    EXPECT_STREQ(\"c\", TF_TString_GetMutableDataPointer(&s50));\n    EXPECT_EQ(1, TF_TString_GetSize(&s50));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s50));\n\n    TF_TString_Dealloc(&s50);\n  }\n}\n\nTEST(TF_CTStringTest, ResizeReserve) {\n  {\n    // Resize\n    TF_TString s60;\n\n    TF_TString_Init(&s60);\n\n    TF_TString_Resize(&s60, 2, 'a');\n\n    EXPECT_EQ(0, ::memcmp(\"aa\", TF_TString_GetDataPointer(&s60), 2));\n\n    TF_TString_Resize(&s60, 4, '\\0');\n\n    EXPECT_EQ(0, ::memcmp(\"aa\\0\\0\", TF_TString_GetDataPointer(&s60), 4));\n\n    TF_TString_Resize(&s60, 6, 'b');\n\n    EXPECT_EQ(0, ::memcmp(\"aa\\0\\0bb\", TF_TString_GetDataPointer(&s60), 6));\n\n    TF_TString_Resize(&s60, 2, 'c');\n\n    EXPECT_EQ(0, ::memcmp(\"aa\", TF_TString_GetDataPointer(&s60), 2));\n\n    TF_TString_Dealloc(&s60);\n  }\n  {\n    // Reserve\n    TF_TString s70;\n\n    TF_TString_Init(&s70);\n\n    TF_TString_Reserve(&s70, TF_TString_SmallCapacity - 1);\n\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s70));\n    EXPECT_EQ(0, TF_TString_GetSize(&s70));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s70));\n\n    TF_TString_Reserve(&s70, TF_TString_SmallCapacity);\n\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s70));\n    EXPECT_EQ(0, TF_TString_GetSize(&s70));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s70));\n\n    TF_TString_Copy(&s70, \"hello\", 5);\n\n    EXPECT_EQ(5, TF_TString_GetSize(&s70));\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s70));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s70));\n\n    TF_TString_Reserve(&s70, 100);\n\n    // Test 16 byte alignment (7*16 - 1 = 111)\n    EXPECT_EQ(111, TF_TString_GetCapacity(&s70));\n    EXPECT_EQ(5, TF_TString_GetSize(&s70));\n    EXPECT_EQ(TF_TSTR_LARGE, TF_TString_GetType(&s70));\n\n    TF_TString_AssignView(&s70, kLongString, kLongStringLen);\n    TF_TString_Reserve(&s70, 10);\n\n    EXPECT_EQ(TF_TSTR_VIEW, TF_TString_GetType(&s70));\n    EXPECT_EQ(0, TF_TString_GetCapacity(&s70));\n\n    TF_TString_Reserve(&s70, 100);\n\n    // Converted to LARGE since it can no longer fit in SMALL.\n    EXPECT_EQ(TF_TSTR_LARGE, TF_TString_GetType(&s70));\n    EXPECT_EQ(111, TF_TString_GetCapacity(&s70));\n\n    TF_TString_Reserve(&s70, 200);\n\n    EXPECT_EQ(TF_TSTR_LARGE, TF_TString_GetType(&s70));\n    EXPECT_EQ(207, TF_TString_GetCapacity(&s70));\n\n    TF_TString_Dealloc(&s70);\n  }\n  {\n    // ReserveAmortized\n    TF_TString s70;\n\n    TF_TString_Init(&s70);\n\n    TF_TString_ReserveAmortized(&s70, TF_TString_SmallCapacity - 1);\n\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s70));\n    EXPECT_EQ(0, TF_TString_GetSize(&s70));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s70));\n\n    TF_TString_ReserveAmortized(&s70, TF_TString_SmallCapacity);\n\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s70));\n    EXPECT_EQ(0, TF_TString_GetSize(&s70));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s70));\n\n    TF_TString_Copy(&s70, \"hello\", 5);\n\n    EXPECT_EQ(5, TF_TString_GetSize(&s70));\n    EXPECT_EQ(TF_TString_SmallCapacity, TF_TString_GetCapacity(&s70));\n    EXPECT_EQ(TF_TSTR_SMALL, TF_TString_GetType(&s70));\n\n    TF_TString_ReserveAmortized(&s70, 100);\n\n    // Test 16 byte alignment (7*16 - 1 = 111)\n    EXPECT_EQ(111, TF_TString_GetCapacity(&s70));\n    EXPECT_EQ(5, TF_TString_GetSize(&s70));\n    EXPECT_EQ(TF_TSTR_LARGE, TF_TString_GetType(&s70));\n\n    TF_TString_AssignView(&s70, kLongString, kLongStringLen);\n    TF_TString_ReserveAmortized(&s70, 10);\n\n    EXPECT_EQ(TF_TSTR_VIEW, TF_TString_GetType(&s70));\n    EXPECT_EQ(0, TF_TString_GetCapacity(&s70));\n\n    TF_TString_ReserveAmortized(&s70, 100);\n\n    // Converted to LARGE since it can no longer fit in SMALL.\n    EXPECT_EQ(TF_TSTR_LARGE, TF_TString_GetType(&s70));\n    EXPECT_EQ(111, TF_TString_GetCapacity(&s70));\n\n    TF_TString_ReserveAmortized(&s70, 200);\n\n    EXPECT_EQ(TF_TSTR_LARGE, TF_TString_GetType(&s70));\n    // 223 = 2*previous_capacity+1\n    EXPECT_EQ(223, TF_TString_GetCapacity(&s70));\n\n    TF_TString_Dealloc(&s70);\n  }\n}\n\nTEST(TF_CTStringTest, OffsetType) {\n  {\n    TF_TString s71;\n\n    TF_TString_Init(&s71);\n    size_t header_length = 24;\n    size_t size = 8;\n    TF_TString_ResizeUninitialized(&s71, header_length + size);\n    uint32_t save_size = s71.u.offset.size;\n    uint32_t save_offset = s71.u.offset.offset;\n    uint32_t save_count = s71.u.offset.count;\n\n    s71.u.offset.size = TF_TString_ToInternalSizeT(size, TF_TSTR_OFFSET);\n    s71.u.offset.offset = header_length;\n    s71.u.offset.count = 0;\n    EXPECT_EQ(size, TF_TString_GetSize(&s71));\n    EXPECT_EQ(TF_TSTR_OFFSET, TF_TString_GetType(&s71));\n\n    // restore state so string can be deallocated\n    s71.u.offset.size = save_size;\n    s71.u.offset.offset = save_offset;\n    s71.u.offset.count = save_count;\n    TF_TString_Dealloc(&s71);\n  }\n}"