"diff --git a/tensorflow/core/ops/array_ops.cc b/tensorflow/core/ops/array_ops.cc\nindex 1a88b16b865..8c76caf4f0f 100644\n--- a/tensorflow/core/ops/array_ops.cc\n+++ b/tensorflow/core/ops/array_ops.cc\n@@ -24,6 +24,7 @@ limitations under the License.\n #include \"tensorflow/core/framework/types.h\"\n #include \"tensorflow/core/framework/types.pb.h\"\n #include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/platform/types.h\"\n #include \"tensorflow/core/util/mirror_pad_mode.h\"\n #include \"tensorflow/core/util/padding.h\"\n #include \"tensorflow/core/util/strided_slice_op.h\"\n@@ -3028,6 +3029,12 @@ REGISTER_OP(\"Dequantize\")\n         return errors::InvalidArgument(\"axis should be at least -1, got \",\n                                        axis);\n       }\n+      auto input_dims = c->Rank(c->input(0));\n+      if (axis > input_dims) {\n+        return errors::InvalidArgument(\n+            \"Axis must be less than input dimension(\", input_dims, \"), got \",\n+            axis);\n+      }\n       const int minmax_rank = (axis == -1) ? 0 : 1;\n       TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));\n       ShapeHandle minmax;\n@@ -3035,6 +3042,13 @@ REGISTER_OP(\"Dequantize\")\n       TF_RETURN_IF_ERROR(c->WithRank(c->input(2), minmax_rank, &minmax));\n       if (axis != -1) {\n         ShapeHandle input;\n+        if (axis >= kint32max) {\n+          // Check int32 max bound for a corner case to prevent integer flow\n+          // when input actually has kint32max rank and above bound check is not\n+          // triggered.\n+          return errors::InvalidArgument(\n+              \"Axis cannot be >= kint32max value, got \", axis);\n+        }\n         TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), axis + 1, &input));\n         DimensionHandle depth;\n         TF_RETURN_IF_ERROR("