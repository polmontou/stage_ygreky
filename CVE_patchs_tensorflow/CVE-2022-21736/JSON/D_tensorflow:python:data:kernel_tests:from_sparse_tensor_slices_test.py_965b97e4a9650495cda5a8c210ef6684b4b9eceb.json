"diff --git a/tensorflow/python/data/kernel_tests/from_sparse_tensor_slices_test.py b/tensorflow/python/data/kernel_tests/from_sparse_tensor_slices_test.py\nindex 04f2c27bb9f..3d8ee43272f 100644\n--- a/tensorflow/python/data/kernel_tests/from_sparse_tensor_slices_test.py\n+++ b/tensorflow/python/data/kernel_tests/from_sparse_tensor_slices_test.py\n@@ -134,6 +134,25 @@ class FromSparseTensorSlicesTest(test_base.DatasetTestBase,\n       with self.assertRaises(errors.InvalidArgumentError):\n         sess.run(init_op, feed_dict={st: sparse_feed})\n \n+  @combinations.generate(combinations.combine(tf_api_version=1, mode=[\"graph\"]))\n+  def testEmptySparseTensorSlicesInvalid2(self):\n+    \"\"\"Test a dataset based on invalid `tf.sparse.SparseTensor`.\"\"\"\n+    st = array_ops.sparse_placeholder(dtypes.float64)\n+    iterator = dataset_ops.make_initializable_iterator(\n+        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n+    init_op = iterator.initializer\n+\n+    with self.cached_session() as sess:\n+      # Test with an empty sparse tensor but with non empty values.\n+      empty_indices = [[]]\n+      empty_values = []\n+      dense_shape = [1, 1]\n+      sparse_feed = sparse_tensor.SparseTensorValue(empty_indices, empty_values,\n+                                                    dense_shape)\n+      # Here, we expect the test to fail when running the feed.\n+      with self.assertRaises(errors.InvalidArgumentError):\n+        sess.run(init_op, feed_dict={st: sparse_feed})\n+\n   @combinations.generate(combinations.combine(tf_api_version=2, mode=[\"eager\"]))\n   def testFromSparseTensorSlicesError(self):\n     with self.assertRaises(AttributeError):"