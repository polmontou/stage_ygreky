"# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for `tf.data.Dataset.from_sparse_tensor_slices()`.\"\"\"\nfrom absl.testing import parameterized\nimport numpy as np\n\nfrom tensorflow.python.data.kernel_tests import checkpoint_test_base\nfrom tensorflow.python.data.kernel_tests import test_base\nfrom tensorflow.python.data.ops import dataset_ops\nfrom tensorflow.python.framework import combinations\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import sparse_tensor\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.platform import test\n\n\nclass FromSparseTensorSlicesTest(test_base.DatasetTestBase,\n                                 parameterized.TestCase):\n\n  @combinations.generate(\n      combinations.times(\n          combinations.combine(tf_api_version=1, mode=[\"graph\"]),\n          combinations.combine(slices=[[\n              [1., 2., 3.], [1.], [1.], [1., 2.], [], [1., 2.], [], [], []\n          ], [[1., 2.], [], [1., 2.], [1.], [1., 2.], [], [1., 2.]]])))\n  def testFromSparseTensorSlices(self, slices):\n    \"\"\"Test a dataset based on slices of a `tf.sparse.SparseTensor`.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n    get_next = sparse_tensor.SparseTensor(*iterator.get_next())\n\n    with self.cached_session() as sess:\n      # Test with sparse tensor in the appropriate order.\n      # pylint: disable=g-complex-comprehension\n      indices = np.array(\n          [[i, j] for i in range(len(slices)) for j in range(len(slices[i]))])\n      values = np.array([val for s in slices for val in s])\n      # pylint: enable=g-complex-comprehension\n      dense_shape = np.array([len(slices), max(len(s) for s in slices) + 1])\n      sparse_feed = sparse_tensor.SparseTensorValue(indices, values,\n                                                    dense_shape)\n      sess.run(init_op, feed_dict={st: sparse_feed})\n      for i, s in enumerate(slices):\n        results = sess.run(get_next)\n        self.assertAllEqual(s, results.values)\n        expected_indices = np.array(\n            [[j] for j in range(len(slices[i]))]).reshape([-1, 1])\n        self.assertAllEqual(expected_indices, results.indices)\n        self.assertAllEqual(dense_shape[1:], results.dense_shape)\n      with self.assertRaises(errors.OutOfRangeError):\n        sess.run(get_next)\n\n  @combinations.generate(\n      combinations.times(\n          combinations.combine(tf_api_version=1, mode=[\"graph\"]),\n          combinations.combine(slices=[[\n              [1., 2., 3.], [1.], [1.], [1., 2.], [], [1., 2.], [], [], []\n          ], [[1., 2.], [], [1., 2.], [1.], [1., 2.], [], [1., 2.]]])))\n  def testFromSparseTensorSlicesInReverse(self, slices):\n    \"\"\"Test a dataset based on slices of a `tf.sparse.SparseTensor` in reverse order.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n\n    with self.cached_session() as sess:\n      # pylint: disable=g-complex-comprehension\n      indices = np.array(\n          [[i, j] for i in range(len(slices)) for j in range(len(slices[i]))])\n      values = np.array([val for s in slices for val in s])\n      # pylint: enable=g-complex-comprehension\n      dense_shape = np.array([len(slices), max(len(s) for s in slices) + 1])\n      # Test with sparse tensor in the reverse order, which is not\n      # currently supported.\n      reverse_order_indices = indices[::-1, :]\n      reverse_order_values = values[::-1]\n      sparse_feed = sparse_tensor.SparseTensorValue(\n          reverse_order_indices, reverse_order_values, dense_shape)\n      with self.assertRaises(errors.UnimplementedError):\n        sess.run(init_op, feed_dict={st: sparse_feed})\n\n  @combinations.generate(combinations.combine(tf_api_version=1, mode=[\"graph\"]))\n  def testEmptySparseTensorSlices(self):\n    \"\"\"Test a dataset based on slices of an empty `tf.sparse.SparseTensor`.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n    get_next = sparse_tensor.SparseTensor(*iterator.get_next())\n\n    with self.cached_session() as sess:\n      # Test with an empty sparse tensor.\n      empty_indices = np.empty((0, 4), dtype=np.int64)\n      empty_values = np.empty((0,), dtype=np.float64)\n      empty_dense_shape = [0, 4, 37, 9]\n      sparse_feed = sparse_tensor.SparseTensorValue(empty_indices, empty_values,\n                                                    empty_dense_shape)\n      sess.run(init_op, feed_dict={st: sparse_feed})\n      with self.assertRaises(errors.OutOfRangeError):\n        sess.run(get_next)\n\n  @combinations.generate(combinations.combine(tf_api_version=1, mode=[\"graph\"]))\n  def testEmptySparseTensorSlicesInvalid(self):\n    \"\"\"Test a dataset based on invalid `tf.sparse.SparseTensor`.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n\n    with self.cached_session() as sess:\n      # Test with an empty sparse tensor but with non empty values.\n      empty_indices = np.empty((0, 4), dtype=np.int64)\n      non_empty_values = [1, 2, 3, 4]\n      empty_dense_shape = [0, 4, 37, 9]\n      sparse_feed = sparse_tensor.SparseTensorValue(empty_indices,\n                                                    non_empty_values,\n                                                    empty_dense_shape)\n      # Here, we expect the test to fail when running the feed.\n      with self.assertRaises(errors.InvalidArgumentError):\n        sess.run(init_op, feed_dict={st: sparse_feed})\n\n  @combinations.generate(combinations.combine(tf_api_version=2, mode=[\"eager\"]))\n  def testFromSparseTensorSlicesError(self):\n    with self.assertRaises(AttributeError):\n      dataset_ops.Dataset.from_sparse_tensor_slices(None)\n\n\nclass FromSparseTensorSlicesCheckpointTest(\n    checkpoint_test_base.CheckpointTestBase, parameterized.TestCase):\n\n  def _build_sparse_tensor_slice_dataset(self, slices):\n    # pylint: disable=g-complex-comprehension\n    indices = np.array(\n        [[i, j] for i in range(len(slices)) for j in range(len(slices[i]))],\n        dtype=np.int64)\n    values = np.array([val for s in slices for val in s], dtype=np.float64)\n    # pylint: enable=g-complex-comprehension\n    dense_shape = np.array(\n        [len(slices), max(len(s) for s in slices) + 1], dtype=np.int64)\n    sparse_components = sparse_tensor.SparseTensor(indices, values, dense_shape)\n    return dataset_ops.Dataset.from_sparse_tensor_slices(sparse_components)\n\n  @combinations.generate(\n      combinations.times(test_base.v1_only_combinations(),\n                         checkpoint_test_base.default_test_combinations()))\n  def test(self, verify_fn):\n    slices = [[1., 2., 3.], [1.], [1.], [1., 2.], [], [1., 2.], [], [], []]\n\n    verify_fn(\n        self,\n        lambda: self._build_sparse_tensor_slice_dataset(slices),\n        num_outputs=9,\n        sparse_tensors=True)\n\n\nif __name__ == \"__main__\":\n  test.main()"