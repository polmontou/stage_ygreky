"diff --git a/tensorflow/python/kernel_tests/math_ops/bincount_op_test.py b/tensorflow/python/kernel_tests/math_ops/bincount_op_test.py\nindex 3574fac5e18..9161b3b0822 100644\n--- a/tensorflow/python/kernel_tests/math_ops/bincount_op_test.py\n+++ b/tensorflow/python/kernel_tests/math_ops/bincount_op_test.py\n@@ -344,6 +344,14 @@ class BincountOpTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n             gen_math_ops.dense_bincount(\n                 input=[[[1, 2, 3], [0, 3, 2]]], weights=[], size=10))\n \n+  @test_util.run_in_graph_and_eager_modes\n+  def test_size_is_not_scalar(self):  # b/206619828\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"Shape must be rank 0 but is rank 1\"):\n+      self.evaluate(\n+          gen_math_ops.dense_bincount(\n+              input=[0], size=[1, 1], weights=[3], binary_output=False))\n+\n \n class SparseBincountOpTest(test_util.TensorFlowTestCase,\n                            parameterized.TestCase):\n@@ -511,6 +519,19 @@ class SparseBincountOpTest(test_util.TensorFlowTestCase,\n                 weights=[],\n                 binary_output=True)))\n \n+  @test_util.run_in_graph_and_eager_modes\n+  def test_size_is_not_scalar(self):  # b/206619828\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"Shape must be rank 0 but is rank 1\"):\n+      self.evaluate(\n+          gen_math_ops.sparse_bincount(\n+              indices=[[0], [1]],\n+              values=[0, 0],\n+              dense_shape=[1, 1],\n+              size=[1, 1],\n+              weights=[0, 0],\n+              binary_output=False))\n+\n \n class RaggedBincountOpTest(test_util.TensorFlowTestCase,\n                            parameterized.TestCase):\n@@ -650,6 +671,19 @@ class RaggedBincountOpTest(test_util.TensorFlowTestCase,\n                 size=size,\n                 binary_output=True)))\n \n+  @test_util.run_in_graph_and_eager_modes\n+  def test_size_is_not_scalar(self):  # b/206619828\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"Shape must be rank 0 but is rank 1\"):\n+      self.evaluate(\n+          gen_math_ops.ragged_bincount(\n+              splits=[0, 0, 1],\n+              values=[1],\n+              size=[1, 1],\n+              weights=[0, 0, 0],\n+              binary_output=False,\n+              name=None))\n+\n \n if __name__ == \"__main__\":\n   googletest.main()"