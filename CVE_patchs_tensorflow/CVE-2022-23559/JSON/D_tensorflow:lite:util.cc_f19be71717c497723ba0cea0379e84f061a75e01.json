"diff --git a/tensorflow/lite/util.cc b/tensorflow/lite/util.cc\nindex 84dbc16b607..cb2d1ef73a9 100644\n--- a/tensorflow/lite/util.cc\n+++ b/tensorflow/lite/util.cc\n@@ -27,6 +27,7 @@ limitations under the License.\n \n #include \"tensorflow/lite/builtin_ops.h\"\n #include \"tensorflow/lite/c/common.h\"\n+#include \"tensorflow/lite/core/macros.h\"\n #include \"tensorflow/lite/schema/schema_generated.h\"\n \n namespace tflite {\n@@ -176,4 +177,19 @@ bool IsValidationSubgraph(const char* name) {\n   // NOLINTNEXTLINE: can't use absl::StartsWith as absl is not allowed.\n   return name && std::string(name).find(kValidationSubgraphNamePrefix) == 0;\n }\n+\n+TfLiteStatus MultiplyAndCheckOverflow(size_t a, size_t b, size_t* product) {\n+  // Multiplying a * b where a and b are size_t cannot result in overflow in a\n+  // size_t accumulator if both numbers have no non-zero bits in their upper\n+  // half.\n+  constexpr size_t size_t_bits = 8 * sizeof(size_t);\n+  constexpr size_t overflow_upper_half_bit_position = size_t_bits / 2;\n+  *product = a * b;\n+  // If neither integers have non-zero bits past 32 bits can't overflow.\n+  // Otherwise check using slow devision.\n+  if (TFLITE_EXPECT_FALSE((a | b) >> overflow_upper_half_bit_position != 0)) {\n+    if (a != 0 && *product / a != b) return kTfLiteError;\n+  }\n+  return kTfLiteOk;\n+}\n }  // namespace tflite"