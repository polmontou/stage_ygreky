"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/util.h\"\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <initializer_list>\n#include <memory>\n#include <string>\n#include <vector>\n\n#include \"tensorflow/lite/builtin_ops.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/core/macros.h\"\n#include \"tensorflow/lite/schema/schema_generated.h\"\n\nnamespace tflite {\nnamespace {\n\nTfLiteStatus UnresolvedOpInvoke(TfLiteContext* context, TfLiteNode* node) {\n  context->ReportError(context,\n                       \"Encountered an unresolved custom op. Did you miss \"\n                       \"a custom op or delegate?\");\n  return kTfLiteError;\n}\n\n}  // namespace\n\nbool IsFlexOp(const char* custom_name) {\n  return custom_name && strncmp(custom_name, kFlexCustomCodePrefix,\n                                strlen(kFlexCustomCodePrefix)) == 0;\n}\n\nstd::unique_ptr<TfLiteIntArray, TfLiteIntArrayDeleter> BuildTfLiteIntArray(\n    const std::vector<int>& data) {\n  std::unique_ptr<TfLiteIntArray, TfLiteIntArrayDeleter> result(\n      TfLiteIntArrayCreate(data.size()));\n  std::copy(data.begin(), data.end(), result->data);\n  return result;\n}\n\nTfLiteIntArray* ConvertVectorToTfLiteIntArray(const std::vector<int>& input) {\n  return ConvertArrayToTfLiteIntArray(static_cast<int>(input.size()),\n                                      input.data());\n}\n\nTfLiteIntArray* ConvertArrayToTfLiteIntArray(const int rank, const int* dims) {\n  TfLiteIntArray* output = TfLiteIntArrayCreate(rank);\n  for (size_t i = 0; i < rank; i++) {\n    output->data[i] = dims[i];\n  }\n  return output;\n}\n\nbool EqualArrayAndTfLiteIntArray(const TfLiteIntArray* a, const int b_size,\n                                 const int* b) {\n  if (!a) return false;\n  if (a->size != b_size) return false;\n  for (int i = 0; i < a->size; ++i) {\n    if (a->data[i] != b[i]) return false;\n  }\n  return true;\n}\n\nsize_t CombineHashes(std::initializer_list<size_t> hashes) {\n  size_t result = 0;\n  // Hash combiner used by TensorFlow core.\n  for (size_t hash : hashes) {\n    result = result ^\n             (hash + 0x9e3779b97f4a7800ULL + (result << 10) + (result >> 4));\n  }\n  return result;\n}\n\nTfLiteStatus GetSizeOfType(TfLiteContext* context, const TfLiteType type,\n                           size_t* bytes) {\n  // TODO(levp): remove the default case so that new types produce compilation\n  // error.\n  switch (type) {\n    case kTfLiteFloat32:\n      *bytes = sizeof(float);\n      break;\n    case kTfLiteInt32:\n      *bytes = sizeof(int32_t);\n      break;\n    case kTfLiteUInt32:\n      *bytes = sizeof(uint32_t);\n      break;\n    case kTfLiteUInt8:\n      *bytes = sizeof(uint8_t);\n      break;\n    case kTfLiteInt64:\n      *bytes = sizeof(int64_t);\n      break;\n    case kTfLiteUInt64:\n      *bytes = sizeof(uint64_t);\n      break;\n    case kTfLiteBool:\n      *bytes = sizeof(bool);\n      break;\n    case kTfLiteComplex64:\n      *bytes = sizeof(std::complex<float>);\n      break;\n    case kTfLiteComplex128:\n      *bytes = sizeof(std::complex<double>);\n      break;\n    case kTfLiteInt16:\n      *bytes = sizeof(int16_t);\n      break;\n    case kTfLiteInt8:\n      *bytes = sizeof(int8_t);\n      break;\n    case kTfLiteFloat16:\n      *bytes = sizeof(TfLiteFloat16);\n      break;\n    case kTfLiteFloat64:\n      *bytes = sizeof(double);\n      break;\n    default:\n      if (context) {\n        context->ReportError(\n            context,\n            \"Type %d is unsupported. Only float16, float32, float64, int8, \"\n            \"int16, int32, int64, uint8, uint64, bool, complex64 and \"\n            \"complex128 supported currently.\",\n            type);\n      }\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n\nTfLiteRegistration CreateUnresolvedCustomOp(const char* custom_op_name) {\n  return TfLiteRegistration{nullptr,\n                            nullptr,\n                            nullptr,\n                            /*invoke*/ &UnresolvedOpInvoke,\n                            nullptr,\n                            BuiltinOperator_CUSTOM,\n                            custom_op_name,\n                            1};\n}\n\nbool IsUnresolvedCustomOp(const TfLiteRegistration& registration) {\n  return registration.builtin_code == tflite::BuiltinOperator_CUSTOM &&\n         registration.invoke == &UnresolvedOpInvoke;\n}\n\nstd::string GetOpNameByRegistration(const TfLiteRegistration& registration) {\n  auto op = registration.builtin_code;\n  std::string result =\n      EnumNameBuiltinOperator(static_cast<BuiltinOperator>(op));\n  if ((op == kTfLiteBuiltinCustom || op == kTfLiteBuiltinDelegate) &&\n      registration.custom_name) {\n    result += \" \" + std::string(registration.custom_name);\n  }\n  return result;\n}\n\nbool IsValidationSubgraph(const char* name) {\n  // NOLINTNEXTLINE: can't use absl::StartsWith as absl is not allowed.\n  return name && std::string(name).find(kValidationSubgraphNamePrefix) == 0;\n}\n\nTfLiteStatus MultiplyAndCheckOverflow(size_t a, size_t b, size_t* product) {\n  // Multiplying a * b where a and b are size_t cannot result in overflow in a\n  // size_t accumulator if both numbers have no non-zero bits in their upper\n  // half.\n  constexpr size_t size_t_bits = 8 * sizeof(size_t);\n  constexpr size_t overflow_upper_half_bit_position = size_t_bits / 2;\n  *product = a * b;\n  // If neither integers have non-zero bits past 32 bits can't overflow.\n  // Otherwise check using slow devision.\n  if (TFLITE_EXPECT_FALSE((a | b) >> overflow_upper_half_bit_position != 0)) {\n    if (a != 0 && *product / a != b) return kTfLiteError;\n  }\n  return kTfLiteOk;\n}\n}  // namespace tflite"