"load(\"//tensorflow:tensorflow.bzl\", \"if_not_windows\", \"tf_cc_test\")\nload(\"//tensorflow/lite:build_def.bzl\", \"tflite_cc_shared_object\", \"tflite_copts\", \"tflite_copts_warnings\")\nload(\"//tensorflow/lite:special_rules.bzl\", \"internal_visibility_allowlist\", \"tflite_portable_test_suite\")\nload(\"//tensorflow:tensorflow.bzl\", \"get_compatible_with_portable\")\n\npackage(\n    default_visibility = [\"//visibility:public\"],\n    licenses = [\"notice\"],\n)\n\nexports_files(glob([\n    \"testdata/*.bin\",\n    \"testdata/*.pb\",\n    \"testdata/*.tflite\",\n    \"testdata/*.csv\",\n    \"models/testdata/*\",\n]) + [\n    \"create_op_resolver.h\",\n    \"create_op_resolver_with_selected_ops.cc\",\n])\n\n# Config to keep symbol tables even for optimized builds. Debug builds already\n# preserve symbols.\nconfig_setting(\n    name = \"tflite_keep_symbols\",\n    define_values = {\"tflite_keep_symbols\": \"true\"},\n)\n\nconfig_setting(\n    name = \"gemmlowp_profiling\",\n    values = {\n        \"copt\": \"-DGEMMLOWP_PROFILING\",\n    },\n)\n\nconfig_setting(\n    name = \"tflite_use_simple_memory_planner\",\n    values = {\n        \"copt\": \"-DTFLITE_USE_SIMPLE_MEMORY_PLANNER\",\n    },\n)\n\nconfig_setting(\n    name = \"mips\",\n    values = {\n        \"cpu\": \"mips\",\n    },\n)\n\nconfig_setting(\n    name = \"mips64\",\n    values = {\n        \"cpu\": \"mips64\",\n    },\n)\n\n# Without \"cpu\":\"k8\", when building with --copt=-DTF_LITE_STATIC_MEMORY, we get\n# the following error:\n# Multiple matches are not allowed unless one is unambiguously more specialized.\n#\n# The reason for this is that some of the tflite BUILD files (e.g.\n# kernels/internal/BUILD) have config_settings based on \"cpu\":\"k8\" and the\n# tf_lite_static_memory config_setting needs to be more specialized. It may be\n# possible to change the existing config_settings to allow for\n# tf_lite_static_memory to not require \"cpu\":\"k8\". We are not attempting that\n# since we currently only using the BUILD files for x86.\nconfig_setting(\n    name = \"tf_lite_static_memory\",\n    values = {\n        \"copt\": \"-DTF_LITE_STATIC_MEMORY\",\n        \"cpu\": \"k8\",\n    },\n)\n\nSTABLE_FRAMEWORK_LIB_HDRS = [\n    \"allocation.h\",\n    \"context_util.h\",\n    \"core/macros.h\",\n    \"error_reporter.h\",\n    \"interpreter.h\",\n    \"model.h\",\n    \"model_builder.h\",\n    \"interpreter_builder.h\",\n    \"mutable_op_resolver.h\",\n    \"op_resolver.h\",\n    \"stderr_reporter.h\",\n]\n\nFRAMEWORK_LIB_HDRS = STABLE_FRAMEWORK_LIB_HDRS + [\n    \"context.h\",\n    \"core/subgraph.h\",\n    \"graph_info.h\",\n    \"optional_debug_tools.h\",\n    \"signature_runner.h\",\n]\n\nexports_files(\n    FRAMEWORK_LIB_HDRS,\n    visibility = [\"//tensorflow/lite/core/shims:__subpackages__\"],\n)\n\ncc_library(\n    name = \"version\",\n    hdrs = [\"version.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n    # Note that we only use the header defines from :version_lib.\n    deps = [\"//tensorflow/core:version_lib\"],\n)\n\n# TODO(b/128420794): Migrate clients to use :version directly.\nalias(\n    name = \"schema_fbs_version\",\n    actual = \":version\",\n    # avoid_dep tells build_cleaner to not use schema_fbs_version.\n    tags = [\"avoid_dep\"],\n)\n\ncc_library(\n    name = \"arena_planner\",\n    srcs = [\"arena_planner.cc\"],\n    hdrs = [\"arena_planner.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n    deps = [\n        \":graph_info\",\n        \":memory_planner\",\n        \":simple_memory_arena\",\n        \":util\",\n        \"//tensorflow/lite/c:common\",\n    ],\n)\n\ncc_test(\n    name = \"arena_planner_test\",\n    size = \"small\",\n    srcs = [\"arena_planner_test.cc\"],\n    tags = [\n        \"tflite_not_portable_android\",\n    ],\n    deps = [\n        \":arena_planner\",\n        \":graph_info\",\n        \"//tensorflow/core:tflite_portable_logging\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/testing:util\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\ncc_library(\n    name = \"simple_planner\",\n    srcs = [\"simple_planner.cc\"],\n    hdrs = [\"simple_planner.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n    deps = [\n        \":graph_info\",\n        \":memory_planner\",\n        \":util\",\n        \"//tensorflow/lite/c:common\",\n    ],\n)\n\ncc_test(\n    name = \"simple_planner_test\",\n    size = \"small\",\n    srcs = [\"simple_planner_test.cc\"],\n    deps = [\n        \":graph_info\",\n        \":simple_planner\",\n        \"//tensorflow/core:tflite_portable_logging\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/testing:util\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\n# Main library. No ops are included here.\n# TODO(aselle): Resolve problems preventing C99 usage.\ncc_library(\n    name = \"context\",\n    hdrs = [\"context.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n    deps = [\"//tensorflow/lite/c:common\"],\n)\n\ncc_library(\n    name = \"external_cpu_backend_context\",\n    srcs = [\"external_cpu_backend_context.cc\"],\n    hdrs = [\"external_cpu_backend_context.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n    deps = [\n        \"//tensorflow/lite/c:common\",\n    ],\n)\n\ncc_library(\n    name = \"graph_info\",\n    hdrs = [\"graph_info.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n    deps = [\"//tensorflow/lite/c:common\"],\n)\n\ncc_library(\n    name = \"memory_planner\",\n    hdrs = [\"memory_planner.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n    deps = [\"//tensorflow/lite/c:common\"],\n)\n\ncc_library(\n    name = \"simple_memory_arena\",\n    srcs = [\"simple_memory_arena.cc\"],\n    hdrs = [\"simple_memory_arena.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n    deps = [\n        \":macros\",\n        \"//tensorflow/lite/c:common\",\n    ],\n)\n\ncc_library(\n    name = \"simple_memory_arena_debug_dump\",\n    srcs = [\"simple_memory_arena_debug_dump.cc\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n    deps = [\n        \":simple_memory_arena\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"builtin_op_data\",\n    hdrs = [\"builtin_op_data.h\"],\n    compatible_with = get_compatible_with_portable(),\n    deps = [\"//tensorflow/lite/c:common\"],\n)\n\ncc_library(\n    name = \"kernel_api\",\n    hdrs = [\n        \"builtin_op_data.h\",\n        \"builtin_ops.h\",\n        \"context_util.h\",\n    ],\n    compatible_with = get_compatible_with_portable(),\n    deps = [\"//tensorflow/lite/c:common\"],\n)\n\ncc_library(\n    name = \"builtin_ops\",\n    hdrs = [\"builtin_ops.h\"],\n    compatible_with = get_compatible_with_portable(),\n)\n\nexports_files([\"builtin_ops.h\"])\n\ncc_library(\n    name = \"string\",\n    hdrs = [\n        \"string_type.h\",\n    ],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n)\n\ncc_library(\n    name = \"allocation\",\n    srcs = [\n        \"allocation.cc\",\n    ] + select({\n        \"//tensorflow:android\": [\n            \"mmap_allocation.cc\",\n        ],\n        \"//tensorflow:windows\": [\n            \"mmap_allocation_disabled.cc\",\n        ],\n        \"//conditions:default\": [\n            \"mmap_allocation.cc\",\n        ],\n    }),\n    hdrs = [\n        \"allocation.h\",\n    ],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n    deps = [\n        \":string\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/core/api\",\n    ],\n)\n\ncc_library(\n    name = \"model_builder\",\n    srcs = [\"model_builder.cc\"],\n    hdrs = [\"model_builder.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n    visibility = internal_visibility_allowlist(),\n    deps = [\n        \":allocation\",\n        \":mutable_op_resolver\",\n        \":stderr_reporter\",\n        \":string\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/core/api:error_reporter\",\n        \"//tensorflow/lite/core/api:op_resolver\",\n        \"//tensorflow/lite/core/api:verifier\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n        \"@flatbuffers\",\n    ],\n)\n\n# The library that implements the full C++ API.\n# See also 'framework' below, which is the corresponding public target.\n# DEPRECATED: use 'framework_stable' or 'framework' instead.\nalias(\n    name = \"framework_lib\",\n    actual = \"framework\",\n    visibility = [\"//tensorflow/lite:__subpackages__\"],\n)\n\n# The public target for the full C++ API, including experimental APIs.\n#\n# Experimental APIs are functional, tested and usable in production; however,\n# the corresponding API surface has not been finalized, and is subject to\n# change.\nalias(\n    name = \"framework\",\n    actual = \"framework_experimental\",\n)\n\n# The public target for the C++ API excluding experimental APIs.\n# TODO(ahentz): investigate dependency on gemm_support requiring usage of tf_copts.\ncc_library(\n    name = \"framework_stable\",\n    srcs = [],\n    hdrs = FRAMEWORK_LIB_HDRS,\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts() + tflite_copts_warnings(),\n    deps = [\n        \":allocation\",\n        \":cc_api_stable\",\n        \":external_cpu_backend_context\",\n        \":graph_info\",\n        \":kernel_api\",\n        \":macros\",\n        \":memory_planner\",\n        \":mutable_op_resolver\",\n        \":stderr_reporter\",\n        \":string\",\n        \":type_to_tflitetype\",\n        \":util\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/core/api\",\n        \"//tensorflow/lite/core/api:verifier\",\n        \"//tensorflow/lite/experimental/resource\",\n        \"//tensorflow/lite/internal:signature_def\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n        \"@flatbuffers//:runtime_cc\",\n    ],\n)\n\n# The full C++ API, including experimental APIs.\n#\n# Experimental APIs are functional, tested and usable in production; however,\n# the corresponding API surface has not been finalized, and is subject to\n# change.\n#\n# Note that if you have code which depends on both stable and experimental API\n# features, it's fine to depend only on 'framework_experimental', since\n# that includes 'framework_stable' as a subset.\ncc_library(\n    name = \"framework_experimental\",\n    srcs = [],\n    hdrs = FRAMEWORK_LIB_HDRS,\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts() + tflite_copts_warnings(),\n    deps = [\n        \":allocation\",\n        \":cc_api_experimental\",\n        \":external_cpu_backend_context\",\n        \":graph_info\",\n        \":kernel_api\",\n        \":macros\",\n        \":memory_planner\",\n        \":model_builder\",\n        \":mutable_op_resolver\",\n        \":optional_debug_tools\",\n        \":stderr_reporter\",\n        \":string\",\n        \":type_to_tflitetype\",\n        \":util\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/core/api\",\n        \"//tensorflow/lite/core/api:verifier\",\n        \"//tensorflow/lite/experimental/resource\",\n        \"//tensorflow/lite/internal:signature_def\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n        \"@flatbuffers//:runtime_cc\",\n    ],\n    alwayslink = 1,  # TODO(b/161243354): eliminate this.\n)\n\n# The key parts of the C++ API.  This target defines the TF Lite classes for\n# loading models and interpreting them.\n# DEPRECATED: prefer to depend on :cc_api_stable or :cc_api_experimental.\nalias(\n    name = \"cc_api\",\n    actual = \"cc_api_experimental\",\n    visibility = [\n        \"//tensorflow/lite/core/shims:__subpackages__\",\n        \"//tensorflow/lite/delegates/flex:__subpackages__\",\n        \"//tensorflow/lite/kernels:__subpackages__\",\n    ],\n)\n\n# The key parts of the C++ API, excluding experimental APIs.\n# This target defines the TF Lite classes for loading models and interpreting them.\n#\n# This target has restricted visibility; for a public target that exposes\n# these APIs, see 'framework_stable' above.\ncc_library(\n    name = \"cc_api_stable\",\n    srcs = [\n        \"core/subgraph.h\",\n        \"interpreter.cc\",\n        \"interpreter_builder.cc\",\n        \"signature_runner.h\",\n    ],\n    hdrs = [\n        \"interpreter.h\",\n        \"interpreter_builder.h\",\n        \"model.h\",\n        \"model_builder.h\",\n    ],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts() + tflite_copts_warnings() +\n            # As xnn_enable_qs8_explicit_true and xnn_enable_qu8_explicit_true\n            # could be specified simultaneously, use two selects here.\n            select({\n                \"@XNNPACK//:xnn_enable_qs8_explicit_false\": [],\n                \"@XNNPACK//:xnn_enable_qs8_explicit_true\": [\n                    \"-DTFLITE_ALWAYS_CREATE_LAZY_DELEGATE_PROVIDERS\",\n                ],\n                \"//tensorflow:emscripten\": [\n                    \"-DTFLITE_ALWAYS_CREATE_LAZY_DELEGATE_PROVIDERS\",\n                ],\n                \"//conditions:default\": [],\n            }) + select({\n        \"@XNNPACK//:xnn_enable_qu8_explicit_false\": [],\n        \"@XNNPACK//:xnn_enable_qu8_explicit_true\": [\n            \"-DTFLITE_ALWAYS_CREATE_LAZY_DELEGATE_PROVIDERS\",\n        ],\n        \"//tensorflow:emscripten\": [\n            \"-DTFLITE_ALWAYS_CREATE_LAZY_DELEGATE_PROVIDERS\",\n        ],\n        \"//conditions:default\": [],\n    }),\n    visibility = [\n        \"//tensorflow/lite/core/shims:__subpackages__\",\n        \"//tensorflow/lite/delegates/flex:__subpackages__\",\n        \"//tensorflow/lite/kernels:__subpackages__\",\n    ],\n    deps = [\n        \":allocation\",\n        \":arena_planner\",\n        \":external_cpu_backend_context\",\n        \":graph_info\",\n        \":kernel_api\",\n        \":macros\",\n        \":memory_planner\",\n        \":minimal_logging\",\n        \":model_builder\",\n        \":mutable_op_resolver\",\n        \":shared_library\",\n        \":simple_memory_arena\",\n        \":stderr_reporter\",\n        \":string\",\n        \":type_to_tflitetype\",\n        \":util\",\n        \":version\",\n        \"//tensorflow/lite/c:c_api_types\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/core/api\",\n        \"//tensorflow/lite/core/api:verifier\",\n        \"//tensorflow/lite/delegates:telemetry\",\n        \"//tensorflow/lite/experimental/resource\",\n        \"//tensorflow/lite/internal:signature_def\",\n        \"//tensorflow/lite/kernels/internal:compatibility\",\n        \"//tensorflow/lite/profiling:platform_profiler\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n        \"//tensorflow/lite/schema:schema_utils\",\n        \"@flatbuffers//:runtime_cc\",\n        \"@ruy//ruy:denormal\",\n    ],\n    alwayslink = 1,  # TODO(b/161243354): eliminate this.\n)\n\n# The key parts of the C++ API, including experimental APIs.\n#\n# This target has restricted visibility; for a public target that exposes\n# these APIs, see 'framework_experimental' above.\ncc_library(\n    name = \"cc_api_experimental\",\n    srcs = [\n        \"core/subgraph.cc\",\n        \"graph_info.cc\",\n        \"interpreter_builder_experimental.cc\",\n        \"interpreter_experimental.cc\",\n        \"signature_runner.cc\",\n    ],\n    hdrs = [\n        \"core/subgraph.h\",\n        \"graph_info.h\",\n        \"interpreter.h\",\n        \"interpreter_builder.h\",\n        \"model.h\",\n        \"model_builder.h\",\n        \"signature_runner.h\",\n    ],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts() + tflite_copts_warnings(),\n    visibility = [\n        \"//tensorflow/lite/core/shims:__subpackages__\",\n        \"//tensorflow/lite/delegates/flex:__subpackages__\",\n        \"//tensorflow/lite/kernels:__subpackages__\",\n    ],\n    deps = [\n        \":allocation\",\n        \":builtin_ops\",\n        \":cc_api_stable\",\n        \":external_cpu_backend_context\",\n        \":graph_info\",\n        \":kernel_api\",\n        \":macros\",\n        \":memory_planner\",\n        \":minimal_logging\",\n        \":mutable_op_resolver\",\n        \":stderr_reporter\",\n        \":string\",\n        \":type_to_tflitetype\",\n        \":util\",\n        \"@flatbuffers//:runtime_cc\",\n        \"@ruy//ruy:denormal\",\n        \"//tensorflow/lite/c:c_api_types\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/core/api\",\n        \"//tensorflow/lite/core/api:verifier\",\n        \"//tensorflow/lite/experimental/resource\",\n        \"//tensorflow/lite/internal:signature_def\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n    ] + select({\n        \":tflite_use_simple_memory_planner\": [\n            \":simple_planner\",\n        ],\n        \"//conditions:default\": [\n            \":arena_planner\",\n        ],\n    }),\n    alwayslink = 1,  # TODO(b/161243354): eliminate this.\n)\n\ncc_library(\n    name = \"optional_debug_tools\",\n    srcs = [\n        \"optional_debug_tools.cc\",\n    ],\n    hdrs = [\"optional_debug_tools.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts() + tflite_copts_warnings(),\n    visibility = [\n        \"//visibility:public\",\n    ],\n    deps = [\n        \":kernel_api\",\n        \":macros\",\n        \"//tensorflow/lite:cc_api_experimental\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n    ],\n)\n\ncc_library(\n    name = \"error_reporter\",\n    hdrs = [\"error_reporter.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts() + tflite_copts_warnings(),\n    visibility = [\n        \"//visibility:public\",\n    ],\n    deps = [\n        \"//tensorflow/lite:stderr_reporter\",\n        \"//tensorflow/lite/core/api:error_reporter\",\n    ],\n)\n\ncc_library(\n    name = \"stderr_reporter\",\n    srcs = [\"stderr_reporter.cc\"],\n    hdrs = [\"stderr_reporter.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts() + tflite_copts_warnings(),\n    visibility = [\n        \"//visibility:public\",\n    ],\n    deps = [\n        \":minimal_logging\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/core/api:error_reporter\",\n    ],\n)\n\ncc_library(\n    name = \"op_resolver\",\n    hdrs = [\"op_resolver.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts() + tflite_copts_warnings(),\n    visibility = [\n        \"//visibility:public\",\n    ],\n    deps = [\n        \"//tensorflow/lite:mutable_op_resolver\",\n        \"//tensorflow/lite/core/api:op_resolver\",\n    ],\n)\n\ncc_library(\n    name = \"mutable_op_resolver\",\n    srcs = [\"mutable_op_resolver.cc\"],\n    hdrs = [\"mutable_op_resolver.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts() + tflite_copts_warnings(),\n    visibility = [\n        \"//visibility:public\",\n    ],\n    deps = [\n        \":util\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/core/api:op_resolver\",\n        \"//tensorflow/lite/core/api:op_resolver_internal\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n    ],\n)\n\ncc_library(\n    name = \"string_util\",\n    srcs = [\"string_util.cc\"],\n    hdrs = [\"string_util.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings(),\n    deps = [\n        \":string\",\n        \"//tensorflow/lite/c:common\",\n    ],\n)\n\n# Link this library to inject XNNPACK delegate to TFLite runtime automatically\n# by utilizing the weak symbols if they're supported by the platform.\ncc_library(\n    name = \"tflite_with_xnnpack\",\n    srcs = [\"tflite_with_xnnpack.cc\"],\n    copts = tflite_copts() + tflite_copts_warnings(),\n    linkstatic = True,\n    deps = [\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/delegates/xnnpack:xnnpack_delegate\",\n    ],\n    alwayslink = 1,\n)\n\n# Enables applying XNNPACK delegate for float models in TFLite runtime.\n# WARNING: This build flag is experimental and subject to change.\nconfig_setting(\n    name = \"tflite_with_xnnpack_explicit_true\",\n    define_values = {\"tflite_with_xnnpack\": \"true\"},\n)\n\nconfig_setting(\n    name = \"tflite_with_xnnpack_explicit_false\",\n    define_values = {\"tflite_with_xnnpack\": \"false\"},\n)\n\ncc_library(\n    name = \"tflite_with_xnnpack_enabled\",\n    compatible_with = get_compatible_with_portable(),\n    defines = [\"TFLITE_BUILD_WITH_XNNPACK_DELEGATE\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \"//tensorflow/lite/delegates/xnnpack:xnnpack_delegate\",\n    ],\n)\n\ncc_library(\n    name = \"tflite_with_xnnpack_default\",\n    compatible_with = get_compatible_with_portable(),\n    visibility = [\"//visibility:private\"],\n    # Note: adding \":tflite_with_xnnpack_enabled\" to the values of following\n    # configuration conditions will make TFLite interpreter to apply XNNPACK\n    # delegate by default.\n    deps = select({\n        \"//tensorflow:android\": [\":tflite_with_xnnpack_enabled\"],\n        # XNNPACK delivers significant benefits w/ WASM and is already in use\n        # by most WASM clients.\n        \"//tensorflow:emscripten\": [\":tflite_with_xnnpack_enabled\"],\n        \"//tensorflow:ios\": [\":tflite_with_xnnpack_enabled\"],\n        \"//tensorflow:macos\": [],\n        \"//tensorflow:windows\": [\":tflite_with_xnnpack_enabled\"],\n        \"//conditions:default\": [],\n    }),\n)\n\ncc_library(\n    name = \"tflite_with_xnnpack_optional\",\n    srcs = [\"tflite_with_xnnpack_optional.cc\"],\n    hdrs = [\n        \"core/macros.h\",\n        \"tflite_with_xnnpack_optional.h\",\n    ],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts() + tflite_copts_warnings(),\n    deps = [\n        \"//tensorflow/lite/c:common\",\n    ] + select({\n        \":tflite_with_xnnpack_explicit_true\": [\n            \"//tensorflow/lite/delegates/xnnpack:xnnpack_delegate_hdrs_only\",\n            \":tflite_with_xnnpack_enabled\",\n        ],\n        \":tflite_with_xnnpack_explicit_false\": [],\n        \"//conditions:default\": [\n            \"//tensorflow/lite/delegates/xnnpack:xnnpack_delegate_hdrs_only\",\n            \":tflite_with_xnnpack_default\",\n        ],\n    }),\n)\n\ncc_test(\n    name = \"string_util_test\",\n    size = \"small\",\n    srcs = [\"string_util_test.cc\"],\n    features = [\"-dynamic_link_test_srcs\"],  # see go/dynamic_link_test_srcs\n    deps = [\n        \":framework\",\n        \":string\",\n        \":string_util\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/testing:util\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\ncc_library(\n    name = \"interpreter_test_util\",\n    testonly = True,\n    hdrs = [\"interpreter_test_util.h\"],\n    deps = [\n        \":builtin_op_data\",\n        \":external_cpu_backend_context\",\n        \":framework\",\n        \":string_util\",\n        \":version\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/core/api\",\n        \"//tensorflow/lite/internal:signature_def\",\n        \"//tensorflow/lite/kernels:builtin_ops\",\n        \"//tensorflow/lite/kernels:cpu_backend_context\",\n        \"//tensorflow/lite/kernels:kernel_util\",\n        \"//tensorflow/lite/kernels/internal:compatibility\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n        \"//tensorflow/lite/testing:util\",\n        \"//third_party/eigen3\",\n        \"@com_google_googletest//:gtest\",\n    ],\n)\n\n# Test main interpreter\ncc_test(\n    name = \"interpreter_test\",\n    size = \"small\",\n    srcs = [\n        \"interpreter_test.cc\",\n    ],\n    features = [\"-dynamic_link_test_srcs\"],  # see go/dynamic_link_test_srcs\n    tags = [\n        \"tflite_smoke_test\",\n    ],\n    deps = [\n        \":external_cpu_backend_context\",\n        \":framework\",\n        \":interpreter_test_util\",\n        \":string\",\n        \":string_util\",\n        \":util\",\n        \"//tensorflow/lite/c:c_api_types\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/delegates/utils:simple_delegate\",\n        \"//tensorflow/lite/kernels:builtin_ops\",\n        \"//tensorflow/lite/kernels:kernel_util\",\n        \"//tensorflow/lite/kernels/internal:compatibility\",\n        \"//tensorflow/lite/testing:util\",\n        \"//third_party/eigen3\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\n# Test subgraph.\ncc_test(\n    name = \"subgraph_test\",\n    size = \"small\",\n    srcs = [\n        \"core/subgraph_test.cc\",\n    ],\n    deps = [\n        \":framework\",\n        \"//tensorflow/lite/kernels:builtin_ops\",\n        \"//tensorflow/lite/testing:util\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\n# Test signature runner.\ncc_test(\n    name = \"signature_runner_test\",\n    size = \"small\",\n    srcs = [\"signature_runner_test.cc\"],\n    data = [\n        \"testdata/multi_signatures.bin\",\n    ],\n    deps = [\n        \":framework\",\n        \"//tensorflow/lite/kernels:builtin_ops\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n        \"//tensorflow/lite/testing:util\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\n# Test graph utils\ncc_test(\n    name = \"graph_info_test\",\n    size = \"small\",\n    srcs = [\"graph_info_test.cc\"],\n    features = [\"-dynamic_link_test_srcs\"],  # see go/dynamic_link_test_srcs\n    deps = [\n        \":framework\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/testing:util\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\n# Test arena allocator\ncc_test(\n    name = \"simple_memory_arena_test\",\n    size = \"small\",\n    srcs = [\"simple_memory_arena_test.cc\"],\n    features = [\"-dynamic_link_test_srcs\"],  # see go/dynamic_link_test_srcs\n    deps = [\n        \":simple_memory_arena\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/testing:util\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\n# Test model framework.\ncc_test(\n    name = \"model_test\",\n    size = \"small\",\n    srcs = [\"model_test.cc\"],\n    data = [\n        \"testdata/0_subgraphs.bin\",\n        \"testdata/2_subgraphs.bin\",\n        \"testdata/2_subgraphs_dont_delegate_name.bin\",\n        \"testdata/add_shared_tensors.bin\",\n        \"testdata/empty_model.bin\",\n        \"testdata/multi_add_flex.bin\",\n        \"testdata/segment_sum_invalid_buffer.bin\",\n        \"testdata/sparse_tensor.bin\",\n        \"testdata/test_min_runtime.bin\",\n        \"testdata/test_model.bin\",\n        \"testdata/test_model_broken.bin\",\n        \"testdata/test_model_redux_precision.bin\",\n        \"testdata/while_op_with_forwarding_input.bin\",\n    ],\n    tags = [\n        \"no_windows\",  # TODO(b/194459105): the test is flaky.\n        \"tflite_not_portable\",\n        \"tflite_smoke_test\",\n    ],\n    deps = [\n        \":framework\",\n        \":interpreter_test_util\",\n        \":string\",\n        \"//tensorflow/lite:string_util\",\n        \"//tensorflow/lite/core/api\",\n        \"//tensorflow/lite/core/api:verifier\",\n        \"//tensorflow/lite/kernels:builtin_ops\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n        \"//tensorflow/lite/testing:util\",\n        \"@com_google_googletest//:gtest_main\",\n        \"@flatbuffers//:runtime_cc\",\n    ],\n)\n\n# Test model framework with the flex library linked into the target.\ntf_cc_test(\n    name = \"model_flex_test\",\n    size = \"small\",\n    srcs = [\"model_flex_test.cc\"],\n    data = [\n        \"testdata/multi_add_flex.bin\",\n    ],\n    tags = [\n        \"no_gpu\",  # GPU + flex is not officially supported.\n        \"no_windows\",  # No weak symbols with MSVC.\n        \"tflite_not_portable_android\",\n        \"tflite_not_portable_ios\",\n    ],\n    deps = [\n        \":framework\",\n        \"//tensorflow/lite/core/api\",\n        \"//tensorflow/lite/delegates/flex:delegate\",\n        \"//tensorflow/lite/kernels:builtin_ops\",\n        \"//tensorflow/lite/testing:util\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\n# Test model framework with the XNNPACK delegate.\ncc_test(\n    name = \"model_xnnpack_test\",\n    size = \"small\",\n    srcs = [\n        \"model_xnnpack_test.cc\",\n    ],\n    data = [\n        \"testdata/multi_add.bin\",\n    ],\n    tags = [\n        \"no_windows\",  # TODO(b/194459105): the test is flaky.\n        \"tflite_not_portable_android\",\n        \"tflite_not_portable_ios\",\n        \"tflite_smoke_test\",\n    ],\n    deps = [\n        \":framework\",\n        \":string\",\n        \":tflite_with_xnnpack\",\n        \":util\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/kernels:builtin_ops\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"allocation_test\",\n    size = \"small\",\n    srcs = [\"allocation_test.cc\"],\n    data = [\n        \"testdata/empty_model.bin\",\n    ],\n    tags = [\n        \"tflite_smoke_test\",\n    ],\n    deps = [\n        \":allocation\",\n        \"//tensorflow/lite/testing:util\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\n# Test OpResolver.\ncc_test(\n    name = \"mutable_op_resolver_test\",\n    size = \"small\",\n    srcs = [\"mutable_op_resolver_test.cc\"],\n    features = [\"-dynamic_link_test_srcs\"],  # see go/dynamic_link_test_srcs\n    deps = [\n        \":framework\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n        \"//tensorflow/lite/testing:util\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"stderr_reporter_test\",\n    srcs = [\"stderr_reporter_test.cc\"],\n    deps = [\n        \":stderr_reporter\",\n        \"//tensorflow/lite/core/api:error_reporter\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"optional_debug_tools_test\",\n    size = \"small\",\n    srcs = [\"optional_debug_tools_test.cc\"],\n    data = [\"testdata/add.bin\"],\n    tags = [\n        \"nomsan\",  # TODO(b/186359792)\n    ],\n    deps = [\n        \":framework\",\n        \":optional_debug_tools\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/delegates/xnnpack:xnnpack_delegate\",\n        \"//tensorflow/lite/kernels:builtin_ops\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\ncc_library(\n    name = \"util\",\n    srcs = [\"util.cc\"],\n    hdrs = [\"util.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings() + tflite_copts(),\n    deps = [\n        \":kernel_api\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n    ],\n)\n\ncc_library(\n    name = \"create_op_resolver_header\",\n    hdrs = [\"create_op_resolver.h\"],\n    deps = [\n        \":mutable_op_resolver\",\n        \":op_resolver\",\n    ],\n)\n\n# Defines CreateOpResolver with all builtin ops.\ncc_library(\n    name = \"create_op_resolver_with_builtin_ops\",\n    srcs = [\"create_op_resolver_with_builtin_ops.cc\"],\n    hdrs = [\"create_op_resolver.h\"],\n    copts = tflite_copts(),\n    deps = [\n        \":mutable_op_resolver\",\n        \":op_resolver\",\n        \"//tensorflow/lite/kernels:builtin_ops\",\n    ],\n    # Some targets only have an implicit dependency on CreateOpResolver.\n    # This avoids warnings about backwards references when linking.\n    alwayslink = True,\n)\n\n# Defines CreateOpResolver with a selected subset of ops.\ncc_library(\n    name = \"create_op_resolver_with_selected_ops\",\n    srcs = [\"create_op_resolver_with_selected_ops.cc\"],\n    hdrs = [\"create_op_resolver.h\"],\n    copts = tflite_copts(),\n    deps = [\n        \":mutable_op_resolver\",\n        \":op_resolver\",\n        \"//tensorflow/lite/kernels:builtin_ops\",\n    ],\n    # Some targets only have an implicit dependency on CreateOpResolver.\n    # This avoids warnings about backwards references when linking.\n    alwayslink = True,\n)\n\ncc_test(\n    name = \"util_test\",\n    size = \"small\",\n    srcs = [\"util_test.cc\"],\n    features = [\"-dynamic_link_test_srcs\"],  # see go/dynamic_link_test_srcs\n    deps = [\n        \":util\",\n        \"//tensorflow/lite/c:common\",\n        \"//tensorflow/lite/schema:schema_fbs\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\ncc_library(\n    name = \"minimal_logging\",\n    srcs = [\n        \"minimal_logging.cc\",\n    ] + select({\n        \"//tensorflow:android\": [\n            \"minimal_logging_android.cc\",\n        ],\n        \"//tensorflow:ios\": [\n            \"minimal_logging_ios.cc\",\n        ],\n        \"//tensorflow:macos\": [\n            \"minimal_logging_default.cc\",\n        ],\n        \"//conditions:default\": [\n            \"minimal_logging_default.cc\",\n        ],\n    }),\n    hdrs = [\"minimal_logging.h\"],\n    compatible_with = get_compatible_with_portable(),\n    copts = tflite_copts_warnings() + tflite_copts(),\n    linkopts = select({\n        \"//tensorflow:android\": [\"-llog\"],\n        \"//conditions:default\": [],\n    }),\n    visibility = internal_visibility_allowlist(),\n)\n\ncc_library(\n    name = \"type_to_tflitetype\",\n    hdrs = [\n        \"portable_type_to_tflitetype.h\",\n    ] + select({\n        \":tf_lite_static_memory\": [],\n        \"//conditions:default\": [\n            \"type_to_tflitetype.h\",\n        ],\n    }),\n    compatible_with = get_compatible_with_portable(),\n    deps = [\"//tensorflow/lite/c:common\"],\n)\n\ncc_test(\n    name = \"type_to_tflitetype_test\",\n    size = \"small\",\n    srcs = [\"type_to_tflitetype_test.cc\"],\n    deps = [\n        \":type_to_tflitetype\",\n        \"//tensorflow/lite/c:c_api_types\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"minimal_logging_test\",\n    size = \"small\",\n    srcs = [\"minimal_logging_test.cc\"],\n    deps = [\n        \":minimal_logging\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\ncc_library(\n    name = \"shared_library\",\n    hdrs = [\"shared_library.h\"],\n    compatible_with = get_compatible_with_portable(),\n    linkopts = if_not_windows([\"-ldl\"]),\n)\n\ncc_library(\n    name = \"macros\",\n    hdrs = [\"core/macros.h\"],\n    compatible_with = get_compatible_with_portable(),\n)\n\ncc_library(\n    name = \"stateful_error_reporter\",\n    hdrs = [\"stateful_error_reporter.h\"],\n    compatible_with = get_compatible_with_portable(),\n    deps = [\"//tensorflow/lite/core/api\"],\n)\n\n# Shared lib target for convenience, pulls in the core runtime and builtin ops.\n# Note: This target is not yet finalized, and the exact set of exported (C/C++)\n# APIs is subject to change. The output library name is platform dependent:\n#   - Linux/Android: `libtensorflowlite.so`\n#   - Mac: `libtensorflowlite.dylib`\n#   - Windows: `tensorflowlite.dll`\ntflite_cc_shared_object(\n    name = \"tensorflowlite\",\n    # Until we have more granular symbol export for the C++ API on Windows,\n    # export all symbols.\n    features = [\"windows_export_all_symbols\"],\n    linkopts = select({\n        \"//tensorflow:macos\": [\n            \"-Wl,-exported_symbols_list,$(location //tensorflow/lite:tflite_exported_symbols.lds)\",\n        ],\n        \"//tensorflow:windows\": [],\n        \"//conditions:default\": [\n            \"-Wl,-z,defs\",\n            \"-Wl,--version-script,$(location //tensorflow/lite:tflite_version_script.lds)\",\n        ],\n    }),\n    per_os_targets = True,\n    deps = [\n        \":framework\",\n        \":tflite_exported_symbols.lds\",\n        \":tflite_version_script.lds\",\n        \"//tensorflow/lite/kernels:builtin_ops_all_linked\",\n    ],\n)\n\ntflite_portable_test_suite()"