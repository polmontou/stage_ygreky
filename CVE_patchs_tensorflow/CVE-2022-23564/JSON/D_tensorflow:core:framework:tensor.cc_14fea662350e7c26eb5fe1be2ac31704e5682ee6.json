"diff --git a/tensorflow/core/framework/tensor.cc b/tensorflow/core/framework/tensor.cc\nindex 5e26bf05c03..8ae9fd00516 100644\n--- a/tensorflow/core/framework/tensor.cc\n+++ b/tensorflow/core/framework/tensor.cc\n@@ -537,6 +537,46 @@ TensorBuffer* FromProtoField(Allocator* a, const TensorProto& in, int64_t n) {\n   return buf;\n }\n \n+// Separate implementation for `ResourceHandle` to handle the case when the\n+// proto for the resource is invalid. See `resource_handle.h` constructor and\n+// static factory builder.\n+template <>\n+TensorBuffer* FromProtoField<ResourceHandle>(Allocator* a,\n+                                             const TensorProto& in, int64_t n) {\n+  CHECK_GT(n, 0);\n+  Buffer<ResourceHandle>* buf = new Buffer<ResourceHandle>(a, n);\n+  ResourceHandle* data = buf->template base<ResourceHandle>();\n+  if (data == nullptr) {\n+    buf->Unref();\n+    return nullptr;\n+  }\n+  const int64_t in_n = ProtoHelper<ResourceHandle>::NumElements(in);\n+  if (in_n <= 0) {\n+    std::fill_n(data, n, ResourceHandle());\n+  } else {\n+    // If tensor shape says we have n < in_n elements in the output tensor\n+    // then make sure to only decode the first n out of the in_n elements in the\n+    // in tensors. In all other cases, we decode all in_n elements of in and set\n+    // the remaining elements up to n to be the default ResourceHandle() value.\n+    const int64_t real_n = n < in_n ? n : in_n;\n+    for (int64_t i = 0; i < real_n; ++i) {\n+      Status s = ResourceHandle::BuildResourceHandle(in.resource_handle_val(i),\n+                                                     &data[i]);\n+      if (!s.ok()) {\n+        LOG(ERROR) << \"Could not decode resource handle from proto \\\"\"\n+                   << in.resource_handle_val(i).ShortDebugString()\n+                   << \"\\\", returned status: \" << s.ToString();\n+        buf->Unref();\n+        return nullptr;\n+      }\n+    }\n+    for (int64_t i = in_n; i < n; ++i) {\n+      data[i] = ResourceHandle();\n+    }\n+  }\n+  return buf;\n+}\n+\n template <>\n TensorBuffer* FromProtoField<Variant>(Allocator* a, const TensorProto& in,\n                                       int64_t n) {"