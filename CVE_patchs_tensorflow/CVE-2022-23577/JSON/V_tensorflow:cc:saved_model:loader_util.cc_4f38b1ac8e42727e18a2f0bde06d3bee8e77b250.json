"/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/cc/saved_model/loader_util.h\"\n\n#include <vector>\n\n#include \"tensorflow/cc/saved_model/constants.h\"\n#include \"tensorflow/core/lib/strings/strcat.h\"\n#include \"tensorflow/core/platform/errors.h\"\n#include \"tensorflow/core/platform/protobuf_internal.h\"\n\nnamespace tensorflow {\nnamespace internal {\n\n// A SavedModel may store the name of the initialization op to run in the\n// in the SignatureDef (v2) or a collection (v1). If an init_op collection\n// exists, then the collection must contain exactly one op.\nStatus GetInitOp(const string& export_dir, const MetaGraphDef& meta_graph_def,\n                 string* init_op_name) {\n  const auto& sig_def_map = meta_graph_def.signature_def();\n  const auto& init_op_sig_it =\n      meta_graph_def.signature_def().find(kSavedModelInitOpSignatureKey);\n  if (init_op_sig_it != sig_def_map.end()) {\n    *init_op_name = init_op_sig_it->second.outputs()\n                        .find(kSavedModelInitOpSignatureKey)\n                        ->second.name();\n    return Status::OK();\n  }\n\n  const auto& collection_def_map = meta_graph_def.collection_def();\n  string init_op_collection_key;\n  if (collection_def_map.find(kSavedModelMainOpKey) !=\n      collection_def_map.end()) {\n    init_op_collection_key = kSavedModelMainOpKey;\n  } else {\n    init_op_collection_key = kSavedModelLegacyInitOpKey;\n  }\n\n  const auto init_op_it = collection_def_map.find(init_op_collection_key);\n  if (init_op_it != collection_def_map.end()) {\n    if (init_op_it->second.node_list().value_size() != 1) {\n      return errors::FailedPrecondition(\n          strings::StrCat(\"Expected exactly one main op in : \", export_dir));\n    }\n    *init_op_name = init_op_it->second.node_list().value(0);\n  }\n  return Status::OK();\n}\n\nStatus GetAssetFileDefs(const MetaGraphDef& meta_graph_def,\n                        std::vector<AssetFileDef>* asset_file_defs) {\n  // With SavedModel v2, we write asset file def into metagraph instead of\n  // collection, so read from metagraph first.\n  if (meta_graph_def.asset_file_def_size() > 0) {\n    for (const auto& asset : meta_graph_def.asset_file_def()) {\n      asset_file_defs->push_back(asset);\n    }\n    return Status::OK();\n  }\n  // Fall back to read from collection to be backward compatible with v1.\n  const auto& collection_def_map = meta_graph_def.collection_def();\n  const auto assets_it = collection_def_map.find(kSavedModelAssetsKey);\n  if (assets_it == collection_def_map.end()) {\n    return Status::OK();\n  }\n  const auto& any_assets = assets_it->second.any_list().value();\n  for (const auto& any_asset : any_assets) {\n    AssetFileDef asset_file_def;\n    TF_RETURN_IF_ERROR(\n        ParseAny(any_asset, &asset_file_def, \"tensorflow.AssetFileDef\"));\n    asset_file_defs->push_back(asset_file_def);\n  }\n  return Status::OK();\n}\n\n}  // namespace internal\n}  // namespace tensorflow"