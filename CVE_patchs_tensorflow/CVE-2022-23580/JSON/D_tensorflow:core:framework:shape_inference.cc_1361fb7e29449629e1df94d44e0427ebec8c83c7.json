"diff --git a/tensorflow/core/framework/shape_inference.cc b/tensorflow/core/framework/shape_inference.cc\nindex 077837721ae..3316759aed5 100644\n--- a/tensorflow/core/framework/shape_inference.cc\n+++ b/tensorflow/core/framework/shape_inference.cc\n@@ -14,6 +14,8 @@ limitations under the License.\n ==============================================================================*/\n #include \"tensorflow/core/framework/shape_inference.h\"\n \n+#include <cstdint>\n+\n #include \"tensorflow/core/framework/bounds_check.h\"\n #include \"tensorflow/core/framework/full_type_util.h\"\n #include \"tensorflow/core/framework/node_def.pb.h\"\n@@ -789,6 +791,19 @@ Status InferenceContext::InternalMakeShapeFromTensor(\n       return ReturnUnknownShape(out);\n     }\n     const auto num_dims = Value(shape_dim);\n+    // TODO(mihaimaruseac): Should be `TensorShape::MaxDimensions()` as we are\n+    // not able to materialize shapes with more than this number of dimensions\n+    // but then shape inference would fail for operations such as\n+    // `tf.range`/`tf.ones`, etc. where the shape is not really materialized,\n+    // only used during the inference. Hence, just prevent doing a `reserve`\n+    // with a very large argument.\n+    const int64_t max_dimensions = 1 << 20;\n+    if (num_dims >= max_dimensions) {\n+      return errors::Internal(\n+          \"Cannot create a tensor with \", num_dims,\n+          \" dimensions, as these would be more than maximum of \",\n+          max_dimensions);\n+    }\n     std::vector<DimensionHandle> dims;\n     dims.reserve(num_dims);\n     for (int i = 0; i < num_dims; i++) dims.push_back(UnknownDim());"