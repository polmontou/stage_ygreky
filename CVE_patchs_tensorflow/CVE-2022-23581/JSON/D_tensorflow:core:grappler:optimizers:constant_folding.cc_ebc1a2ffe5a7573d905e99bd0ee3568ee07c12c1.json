"diff --git a/tensorflow/core/grappler/optimizers/constant_folding.cc b/tensorflow/core/grappler/optimizers/constant_folding.cc\nindex 3706d4096ec..9087ddb5994 100644\n--- a/tensorflow/core/grappler/optimizers/constant_folding.cc\n+++ b/tensorflow/core/grappler/optimizers/constant_folding.cc\n@@ -1684,15 +1684,17 @@ Status ConstantFolding::FoldGraph(\n   return Status::OK();\n }\n \n-bool ConstantFolding::IsSimplifiableReshape(\n+Status ConstantFolding::IsSimplifiableReshape(\n     const NodeDef& node, const GraphProperties& properties) const {\n   if (!IsReshape(node)) {\n-    return false;\n+    return errors::Internal(\"Node \", node.name(), \" is not a Reshape node\");\n   }\n   CHECK_LE(2, node.input_size());\n   const NodeDef* new_shape = node_map_->GetNode(node.input(1));\n   if (!IsReallyConstant(*new_shape)) {\n-    return false;\n+    return errors::Internal(\"Node \", node.name(), \" has shape \",\n+                            new_shape->DebugString(),\n+                            \" which is not a constant\");\n   }\n   TensorVector outputs;\n   auto outputs_cleanup = gtl::MakeCleanup([&outputs] {\n@@ -1703,22 +1705,25 @@ bool ConstantFolding::IsSimplifiableReshape(\n \n   Status s = EvaluateNode(*new_shape, TensorVector(), &outputs);\n   if (!s.ok()) {\n-    return false;\n+    return errors::Internal(\"Could not evaluate node \", node.name());\n   }\n   CHECK_EQ(1, outputs.size());\n \n   const std::vector<OpInfo::TensorProperties>& props =\n       properties.GetInputProperties(node.name());\n   if (props.empty()) {\n-    return false;\n+    return errors::Internal(\"Node \", node.name(), \" has no properties\");\n   }\n   const OpInfo::TensorProperties& prop = props[0];\n   if (prop.dtype() == DT_INVALID) {\n-    return false;\n+    return errors::Internal(\"Node \", node.name(), \" has property \",\n+                            prop.DebugString(), \" with invalid dtype\");\n   }\n   const PartialTensorShape shape(prop.shape());\n   if (!shape.IsFullyDefined()) {\n-    return false;\n+    return errors::Internal(\"Node \", node.name(), \" has property \",\n+                            prop.DebugString(), \" with shape \",\n+                            shape.DebugString(), \" which is not fully defined\");\n   }\n \n   PartialTensorShape new_dims;\n@@ -1738,7 +1743,12 @@ bool ConstantFolding::IsSimplifiableReshape(\n     TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));\n   }\n \n-  return shape.IsCompatibleWith(new_dims);\n+  if (!shape.IsCompatibleWith(new_dims)) {\n+    return errors::Internal(\"Expected shape \", shape.DebugString(),\n+                            \"to be compatible with \", new_dims.DebugString());\n+  }\n+\n+  return Status::OK();\n }\n \n #define IS_VALUE_CASE(DTYPE, VALUE)                   \\\n@@ -2925,7 +2935,7 @@ bool ConstantFolding::SimplifyReduction(GraphDef* optimized_graph,\n bool ConstantFolding::SimplifyReshape(const GraphProperties& properties,\n                                       bool use_shape_info, NodeDef* node) {\n   if (!use_shape_info || node->attr().count(\"T\") == 0 ||\n-      !IsSimplifiableReshape(*node, properties)) {\n+      !IsSimplifiableReshape(*node, properties).ok()) {\n     return false;\n   }\n   DataType output_type = node->attr().at(\"T\").type();"