"/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/resource_mgr.h\"\n#include \"tensorflow/core/framework/summary.pb.h\"\n#include \"tensorflow/core/framework/tensor.pb.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/protobuf.h\"\n\nnamespace tensorflow {\n\ntemplate <typename T>\nclass SummaryTensorOpV2 : public OpKernel {\n public:\n  explicit SummaryTensorOpV2(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* c) override {\n    const Tensor& tag = c->input(0);\n    OP_REQUIRES(c, TensorShapeUtils::IsScalar(tag.shape()),\n                errors::InvalidArgument(\"tag must be scalar\"));\n    const Tensor& tensor = c->input(1);\n    const Tensor& serialized_summary_metadata_tensor = c->input(2);\n    OP_REQUIRES(\n        c,\n        TensorShapeUtils::IsScalar(serialized_summary_metadata_tensor.shape()),\n        errors::InvalidArgument(\"serialized_summary_metadata must be scalar\"));\n\n    Summary s;\n    Summary::Value* v = s.add_value();\n    v->set_tag(string(tag.scalar<tstring>()()));  // NOLINT\n\n    if (tensor.dtype() == DT_STRING) {\n      // tensor_util.makeNdarray doesn't work for strings in tensor_content\n      tensor.AsProtoField(v->mutable_tensor());\n    } else {\n      tensor.AsProtoTensorContent(v->mutable_tensor());\n    }\n\n    ParseFromTString(serialized_summary_metadata_tensor.scalar<tstring>()(),\n                     v->mutable_metadata());\n\n    Tensor* summary_tensor = nullptr;\n    OP_REQUIRES_OK(c, c->allocate_output(0, TensorShape({}), &summary_tensor));\n    CHECK(SerializeToTString(s, &summary_tensor->scalar<tstring>()()));\n  }\n};\n\n#define REGISTER(T)                                                      \\\n  REGISTER_KERNEL_BUILDER(                                               \\\n      Name(\"TensorSummaryV2\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      SummaryTensorOpV2<T>);\n\nTF_CALL_ALL_TYPES(REGISTER)\n\n#undef REGISTER\n\n// NOTE(chizeng): We are phasing out the use of SummaryTensorOp in favor of\n// SummaryTensorOpV2. This is because SummaryTensorOpV2 allows the callers to\n// pass a tag (more consistent with other summaries) as well as serialized\n// summary metadata used by plugins (which lets TensorBoard determine which\n// events are relevant to which plugins).\ntemplate <typename T>\nclass SummaryTensorOp : public OpKernel {\n public:\n  explicit SummaryTensorOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* c) override {\n    const Tensor& tensor = c->input(0);\n\n    Summary s;\n    Summary::Value* v = s.add_value();\n    v->set_node_name(c->op_kernel().name());\n\n    if (tensor.dtype() == DT_STRING) {\n      // tensor_util.makeNdarray doesn't work for strings in tensor_content\n      tensor.AsProtoField(v->mutable_tensor());\n    } else {\n      tensor.AsProtoTensorContent(v->mutable_tensor());\n    }\n\n    Tensor* summary_tensor = nullptr;\n    OP_REQUIRES_OK(c, c->allocate_output(0, TensorShape({}), &summary_tensor));\n    CHECK(SerializeToTString(s, &summary_tensor->scalar<tstring>()()));\n  }\n};\n\n#define REGISTER(T)                                                    \\\n  REGISTER_KERNEL_BUILDER(                                             \\\n      Name(\"TensorSummary\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      SummaryTensorOp<T>);\n\nTF_CALL_ALL_TYPES(REGISTER)\n\n#undef REGISTER\n\n}  // namespace tensorflow"