"# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for convolution related functionality in tensorflow.ops.nn.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import gradient_checker\nfrom tensorflow.python.ops import nn_ops\nimport tensorflow.python.ops.nn_grad  # pylint: disable=unused-import\nfrom tensorflow.python.platform import test\n\n\nclass Conv3DBackpropFilterV2GradTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testGradient(self):\n    with self.cached_session():\n      for padding in [\"SAME\", \"VALID\"]:\n        for stride in [1, 2]:\n          np.random.seed(1)\n          in_shape = [2, 4, 3, 3, 2]\n          in_val = constant_op.constant(\n              2 * np.random.random_sample(in_shape) - 1, dtype=dtypes.float32)\n          filter_shape = [3, 3, 3, 2, 3]\n          strides = [1, stride, stride, stride, 1]\n          # Make a convolution op with the current settings, just to easily get\n          # the shape of the output.\n          conv_out = nn_ops.conv3d(in_val,\n                                   array_ops.zeros(filter_shape), strides,\n                                   padding)\n          out_backprop_shape = conv_out.get_shape().as_list()\n          out_backprop_val = constant_op.constant(\n              2 * np.random.random_sample(out_backprop_shape) - 1,\n              dtype=dtypes.float32)\n          output = nn_ops.conv3d_backprop_filter_v2(in_val, filter_shape,\n                                                    out_backprop_val, strides,\n                                                    padding)\n          err = gradient_checker.compute_gradient_error(\n              [in_val, out_backprop_val], [in_shape, out_backprop_shape],\n              output, filter_shape)\n          print(\"conv3d_backprop_filter gradient err = %g \" % err)\n          err_tolerance = 1e-3\n          self.assertLess(err, err_tolerance)\n\n\nif __name__ == \"__main__\":\n  test.main()"