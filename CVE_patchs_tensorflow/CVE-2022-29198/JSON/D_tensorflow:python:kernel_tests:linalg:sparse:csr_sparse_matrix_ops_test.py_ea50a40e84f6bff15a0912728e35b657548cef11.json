"diff --git a/tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py b/tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py\nindex 0e72a00ef1c..035791ce0a5 100644\n--- a/tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py\n+++ b/tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py\n@@ -168,6 +168,25 @@ class CSRSparseMatrixOpsTest(test.TestCase):\n     self.assertAllClose(a_values, a_st_rt_value.values)\n     self.assertAllEqual(a_dense_shape, a_st_rt_value.dense_shape)\n \n+  def testSparseTensorConversionInvalidInputShapes(self):\n+    values = constant_op.constant(\n+        0.554979503, shape=[5], dtype=dtypes.float32)\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 1\"):\n+      indices = constant_op.constant(0, shape=[5, 2], dtype=dtypes.int64)\n+      dense_shape = constant_op.constant(53, shape=[], dtype=dtypes.int64)\n+      csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(\n+          indices=indices, values=values, dense_shape=dense_shape)\n+      self.evaluate(csr)\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 2\"):\n+      indices = constant_op.constant(0, shape=[5], dtype=dtypes.int64)\n+      dense_shape = constant_op.constant(53, shape=[1], dtype=dtypes.int64)\n+      csr = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(\n+          indices=indices, values=values, dense_shape=dense_shape)\n+      self.evaluate(csr)\n+\n   # TODO(b/139491352): Add handle_data propagation to array_ops.identity.\n   @test_util.run_deprecated_v1\n   def testCSRSparseMatrixResourceVariable(self):"