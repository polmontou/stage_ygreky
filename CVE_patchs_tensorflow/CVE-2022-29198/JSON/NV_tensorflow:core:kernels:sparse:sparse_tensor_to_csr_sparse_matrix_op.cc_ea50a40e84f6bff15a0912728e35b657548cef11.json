"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#define EIGEN_USE_THREADS\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#define EIGEN_USE_GPU\n#endif\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/tensor_reference.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_types.h\"\n#include \"tensorflow/core/framework/variant_op_registry.h\"\n#include \"tensorflow/core/kernels/dense_update_functor.h\"\n#include \"tensorflow/core/kernels/fill_functor.h\"\n#include \"tensorflow/core/kernels/sparse/kernels.h\"\n#include \"tensorflow/core/kernels/sparse/sparse_matrix.h\"\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#include \"tensorflow/core/common_runtime/gpu/gpu_event_mgr.h\"\n#include \"tensorflow/core/util/cuda_sparse.h\"\n#include \"tensorflow/core/util/gpu_solvers.h\"\n#endif\n\n#if GOOGLE_CUDA\n#include \"tensorflow/stream_executor/cuda/cuda_activation.h\"\nusing ::perftools::gputools::cuda::ScopedActivateExecutorContext;\n#elif TENSORFLOW_USE_ROCM\n#include \"tensorflow/stream_executor/rocm/rocm_activation.h\"\nusing ::perftools::gputools::rocm::ScopedActivateExecutorContext;\n#endif\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\n// Op to convert SparseTensors to CSR SparseMatrices on the CPU.\n// Takes a SparseTensor of rank 2 or (if batched) 3 as the input. The\n// SparseTensor's indices must be present in the canonical, row-major ordering.\n//\n// Returns a (batched) CSR SparseMatrix with the same dense shape and non-zero\n// values.\ntemplate <typename T>\nclass SparseTensorToCSRSparseMatrixCPUOp : public OpKernel {\n public:\n  explicit SparseTensorToCSRSparseMatrixCPUOp(OpKernelConstruction* c)\n      : OpKernel(c) {}\n\n  void Compute(OpKernelContext* ctx) final {\n    const Tensor& indices = ctx->input(0);\n    const Tensor& values = ctx->input(1);\n    const Tensor& dense_shape = ctx->input(2);\n    const int rank = dense_shape.NumElements();\n    OP_REQUIRES(\n        ctx, TensorShapeUtils::IsVector(dense_shape.shape()),\n        errors::InvalidArgument(\"dense_shape must be rank 1 but got rank\",\n                                dense_shape.shape().dims()));\n    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(indices.shape()),\n                errors::InvalidArgument(\"indices must be rank 2 but got rank\",\n                                        indices.shape().dims()));\n    OP_REQUIRES(ctx, rank == 2 || rank == 3,\n                errors::InvalidArgument(\"SparseTensor must have rank 2 or 3; \",\n                                        \"but indices has rank: \", rank));\n    auto dense_shape_vec = dense_shape.vec<int64_t>();\n    const int64_t batch_size = (rank == 2) ? 1 : dense_shape_vec(0);\n    const int64_t num_rows = dense_shape_vec((rank == 2) ? 0 : 1);\n    const int64_t total_nnz = values.NumElements();\n\n    // Allocate output Tensors.\n    TensorShape batch_ptr_shape;\n    OP_REQUIRES_OK(\n        ctx, TensorShape::BuildTensorShape({batch_size + 1}, &batch_ptr_shape));\n    Tensor batch_ptr(cpu_allocator(), DT_INT32, batch_ptr_shape);\n    TensorShape csr_col_ind_shape;\n    OP_REQUIRES_OK(\n        ctx, TensorShape::BuildTensorShape({total_nnz}, &csr_col_ind_shape));\n    Tensor csr_col_ind(cpu_allocator(), DT_INT32, csr_col_ind_shape);\n    TensorShape csr_row_ind_shape;\n    OP_REQUIRES_OK(ctx, TensorShape::BuildTensorShape(\n                            {(num_rows + 1) * batch_size}, &csr_row_ind_shape));\n    Tensor csr_row_ptr(cpu_allocator(), DT_INT32, csr_row_ind_shape);\n\n    // Fill the row pointers with zeros.\n    functor::SetZeroFunctor<CPUDevice, int32> set_zero;\n    set_zero(ctx->eigen_device<CPUDevice>(), csr_row_ptr.flat<int32>());\n\n    // Convert from COO to CSR format.\n    functor::SparseTensorToCSRSparseMatrixCPUFunctor coo_to_csr;\n    OP_REQUIRES_OK(\n        ctx,\n        coo_to_csr(batch_size, num_rows, indices.template matrix<int64_t>(),\n                   batch_ptr.vec<int32>(), csr_row_ptr.vec<int32>(),\n                   csr_col_ind.vec<int32>()));\n\n    // Create the CSRSparseMatrix object from its component Tensors and prepare\n    // the Variant output Tensor.\n    CSRSparseMatrix output_csr_matrix;\n    OP_REQUIRES_OK(\n        ctx, CSRSparseMatrix::CreateCSRSparseMatrix(\n                 DataTypeToEnum<T>::value, dense_shape, batch_ptr, csr_row_ptr,\n                 csr_col_ind, values, &output_csr_matrix));\n    Tensor* output_csr_matrix_tensor;\n    AllocatorAttributes cpu_alloc;\n    cpu_alloc.set_on_host(true);\n    OP_REQUIRES_OK(\n        ctx, ctx->allocate_output(0, TensorShape({}), &output_csr_matrix_tensor,\n                                  cpu_alloc));\n    output_csr_matrix_tensor->scalar<Variant>()() =\n        std::move(output_csr_matrix);\n  }\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename Device, typename T>\nclass SparseTensorToCSRSparseMatrixGPUOp : public AsyncOpKernel {\n public:\n  explicit SparseTensorToCSRSparseMatrixGPUOp(OpKernelConstruction* c)\n      : AsyncOpKernel(c) {}\n\n  void ComputeAsync(OpKernelContext* c, DoneCallback done) final {\n    auto stream = c->op_device_context()->stream();\n    const Device& d = c->eigen_device<Device>();\n\n    const Tensor& indices_t = c->input(0);\n    const Tensor& values_t = c->input(1);\n    const Tensor& dense_shape_t = c->input(2);\n    const int rank = dense_shape_t.NumElements();\n    OP_REQUIRES_ASYNC(\n        c, rank == 2 || rank == 3,\n        errors::InvalidArgument(\"sparse tensor must have rank == 2 or 3; \",\n                                \"but indices has \", rank, \" columns\"),\n        done);\n    auto dense_shape = dense_shape_t.vec<int64_t>();\n    const int64_t batch_size = (rank == 2) ? 1 : dense_shape(0);\n    const int64_t rows = dense_shape((rank == 2) ? 0 : 1);\n    const int64_t cols = dense_shape((rank == 2) ? 1 : 2);\n\n    ScratchSpace<int32> nnz_per_batch_host(c, batch_size, /*on_host*/ true);\n\n    Tensor nnz_per_batch_device_t;\n    if (rank == 2) {\n      // Simple case.\n      nnz_per_batch_host.mutable_data()[0] = indices_t.dim_size(0);\n    } else {\n      OP_REQUIRES_OK_ASYNC(c,\n                           c->allocate_temp(DT_INT32, TensorShape({batch_size}),\n                                            &nnz_per_batch_device_t),\n                           done);\n      auto nnz_per_batch_device = nnz_per_batch_device_t.vec<int32>();\n\n      functor::CalculateNNZPerBatchMatrixFromIndices<Device>\n          calculate_nnz_from_indices;\n      auto indices = indices_t.matrix<int64_t>();\n      OP_REQUIRES_OK_ASYNC(\n          c, calculate_nnz_from_indices(c, indices, nnz_per_batch_device),\n          done);\n\n      perftools::gputools::DeviceMemoryBase nnz_per_batch_device_ptr(\n          static_cast<void*>(nnz_per_batch_device.data()));\n\n      OP_REQUIRES_ASYNC(\n          c,\n          stream\n              ->ThenMemcpy(nnz_per_batch_host.mutable_data() /*host_dst*/,\n                           nnz_per_batch_device_ptr /*gpu_src*/,\n                           batch_size * sizeof(int32) /*size*/)\n              .ok(),\n          errors::Internal(\"SparseTensorToSparseMatrixGPUOp: failed to copy \"\n                           \"nnz_per_batch from device\"),\n          done);\n    }\n\n    TensorReference nnz_per_batch_device_ref(nnz_per_batch_device_t);\n    auto convert_to_csr = [this, c, batch_size, nnz_per_batch_host,\n                           nnz_per_batch_device_ref, stream, &d, &values_t,\n                           &indices_t, &dense_shape_t, dense_shape, rows, cols,\n                           rank, done]() {\n      // The data has been copied out of the nnz_per_batch_device\n      // tensor by the time we get here; we can unreference it.\n      nnz_per_batch_device_ref.Unref();\n\n      auto nnz_per_batch = nnz_per_batch_host.tensor().vec<int32>();\n\n      // Ensure that within the callback, the proper GPU settings are\n      // configured.\n      ScopedActivateExecutorContext scoped_activation{stream->parent()};\n      Tensor batch_ptr_t(cpu_allocator(), DT_INT32,\n                         TensorShape({batch_size + 1}));\n\n      auto batch_ptr = batch_ptr_t.vec<int32>();\n      auto indices = indices_t.matrix<int64_t>();\n\n      batch_ptr(0) = 0;\n      for (int i = 0; i < batch_size; ++i) {\n        batch_ptr(i + 1) = batch_ptr(i) + nnz_per_batch(i);\n      }\n      int total_nnz = batch_ptr(batch_size);\n      OP_REQUIRES_ASYNC(\n          c, total_nnz == values_t.NumElements(),\n          errors::Internal(\"nnz returned by \"\n                           \"CalculateNNZPerBatchMatrixFromInd\"\n                           \"ices != len(values): \",\n                           total_nnz, \" vs. \", values_t.NumElements()),\n          done);\n\n      Tensor coo_col_ind_t;\n      Tensor csr_row_ptr_t;\n      Tensor csr_values_t = values_t;\n\n      Tensor coo_row_ind_t;\n      OP_REQUIRES_OK_ASYNC(\n          c,\n          c->allocate_temp(DT_INT32, TensorShape({total_nnz}), &coo_row_ind_t),\n          done);\n      OP_REQUIRES_OK_ASYNC(\n          c,\n          c->allocate_temp(DT_INT32, TensorShape({total_nnz}), &coo_col_ind_t),\n          done);\n      OP_REQUIRES_OK_ASYNC(\n          c,\n          c->allocate_temp(DT_INT32, TensorShape({batch_size * (rows + 1)}),\n                           &csr_row_ptr_t),\n          done);\n\n      auto coo_row_ind = coo_row_ind_t.vec<int32>();\n      auto coo_col_ind = coo_col_ind_t.vec<int32>();\n      auto csr_row_ptr = csr_row_ptr_t.vec<int32>();\n\n      // Convert SparseTensor rep to coo row ind, coo col ind.\n      if (total_nnz > 0) {\n        functor::SparseTensorToCOOSparseMatrix<Device> st_to_coo;\n        st_to_coo(d, dense_shape, indices, coo_row_ind, coo_col_ind);\n      }\n\n      // Set all csr row pointers to zero, so that when iterating over\n      // batches converting coo to csr, we do not have to perform an\n      // unaligned SetZero for any nnz == 0 minibatches.  coo2csr has\n      // a bug if you have empty coo rows.\n      // TODO(ebrevdo): File bug w/ nvidia so coo2csr can handle\n      // zero-element input coo rows.\n      functor::SetZeroFunctor<Device, int32> set_zero;\n      set_zero(d, csr_row_ptr_t.flat<int32>());\n\n      functor::COOSparseMatrixToCSRSparseMatrix<Device> coo_to_csr;\n      for (int i = 0; i < batch_size; ++i) {\n        int nnz_i = batch_ptr(i + 1) - batch_ptr(i);\n        if (nnz_i == 0) {\n          // This is an empty minibatch; no call to coo2csr: it's\n          // handled by the SetZero above.\n        } else {\n          // Convert coo to csr.\n          auto coo_row_ind_i =\n              TTypes<int32>::UnalignedVec(&coo_row_ind(batch_ptr(i)), nnz_i);\n          auto csr_row_ptr_i = TTypes<int32>::UnalignedVec(\n              &csr_row_ptr((rows + 1) * i), rows + 1);\n          OP_REQUIRES_OK_ASYNC(\n              c, coo_to_csr(c, rows, cols, coo_row_ind_i, csr_row_ptr_i), done);\n        }\n      }\n\n      CSRSparseMatrix matrix;\n      OP_REQUIRES_OK_ASYNC(\n          c,\n          CSRSparseMatrix::CreateCSRSparseMatrix(\n              values_t.dtype(), dense_shape_t, batch_ptr_t, csr_row_ptr_t,\n              coo_col_ind_t, csr_values_t, &matrix),\n          done);\n      Tensor* matrix_t;\n      AllocatorAttributes cpu_alloc;\n      cpu_alloc.set_on_host(true);\n      OP_REQUIRES_OK_ASYNC(\n          c, c->allocate_output(0, TensorShape({}), &matrix_t, cpu_alloc),\n          done);\n      matrix_t->scalar<Variant>()() = std::move(matrix);\n\n      done();\n    };\n\n    if (rank == 2) {\n      convert_to_csr();\n    } else {\n      // Launch the GPU kernel to count nnz entries, then call convert_to_csr.\n      c->device()->tensorflow_accelerator_device_info()->event_mgr->ThenExecute(\n          stream, convert_to_csr);\n    }\n  }\n};\n\nnamespace functor {\n\ntemplate <>\nStatus CalculateNNZPerBatchMatrixFromIndices<GPUDevice>::operator()(\n    OpKernelContext* c, TTypes<int64_t>::ConstMatrix indices,\n    TTypes<int32>::Vec nnz_per_batch);\nextern template struct CalculateNNZPerBatchMatrixFromIndices<GPUDevice>;\n\ntemplate <>\nstruct SparseTensorToCOOSparseMatrix<GPUDevice> {\n  void operator()(const GPUDevice& d,\n                  TTypes<int64_t>::ConstVec host_dense_shape,\n                  TTypes<int64_t>::ConstMatrix indices,\n                  TTypes<int>::Vec coo_row_ind, TTypes<int>::Vec coo_col_ind);\n};\nextern template struct SparseTensorToCOOSparseMatrix<GPUDevice>;\n\ntemplate <>\nstruct COOSparseMatrixToCSRSparseMatrix<GPUDevice> {\n  Status operator()(OpKernelContext* c, const int rows, const int cols,\n                    TTypes<int>::UnalignedVec coo_row_ind,\n                    TTypes<int>::UnalignedVec csr_row_ptr) {\n    GpuSparse cuda_sparse(c);\n    TF_RETURN_IF_ERROR(cuda_sparse.Initialize());\n    return cuda_sparse.Coo2csr(coo_row_ind.data(),\n                               /*nnz*/ coo_row_ind.size(),\n                               /*m == rows of A*/ rows, csr_row_ptr.data());\n  }\n};\nextern template struct COOSparseMatrixToCSRSparseMatrix<GPUDevice>;\n\n}  // namespace functor\n\n#define REGISTER_GPU(T)                                         \\\n  REGISTER_KERNEL_BUILDER(Name(\"SparseTensorToCSRSparseMatrix\") \\\n                              .Device(DEVICE_GPU)               \\\n                              .TypeConstraint<T>(\"T\")           \\\n                              .HostMemory(\"dense_shape\"),       \\\n                          SparseTensorToCSRSparseMatrixGPUOp<GPUDevice, T>);\n\nREGISTER_GPU(float)\nREGISTER_GPU(double)\nREGISTER_GPU(complex64)\nREGISTER_GPU(complex128)\n\n#undef REGISTER_GPU\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_CPU(T)                                         \\\n  REGISTER_KERNEL_BUILDER(Name(\"SparseTensorToCSRSparseMatrix\") \\\n                              .Device(DEVICE_CPU)               \\\n                              .TypeConstraint<T>(\"T\"),          \\\n                          SparseTensorToCSRSparseMatrixCPUOp<T>);\n\nREGISTER_CPU(float)\nREGISTER_CPU(double)\nREGISTER_CPU(complex64)\nREGISTER_CPU(complex128)\n\n#undef REGISTER_CPU\n\n}  // namespace tensorflow"