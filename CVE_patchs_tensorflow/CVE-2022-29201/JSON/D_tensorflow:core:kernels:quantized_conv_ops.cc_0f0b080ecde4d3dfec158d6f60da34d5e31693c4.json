"diff --git a/tensorflow/core/kernels/quantized_conv_ops.cc b/tensorflow/core/kernels/quantized_conv_ops.cc\nindex 39824ab2546..0519256b613 100644\n--- a/tensorflow/core/kernels/quantized_conv_ops.cc\n+++ b/tensorflow/core/kernels/quantized_conv_ops.cc\n@@ -18,8 +18,6 @@ limitations under the License.\n #include <algorithm>\n #include <vector>\n \n-#include \"tensorflow/core/platform/errors.h\"\n-\n #define EIGEN_USE_THREADS\n \n #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK\n@@ -32,6 +30,7 @@ limitations under the License.\n #include \"tensorflow/core/kernels/quantization_utils.h\"\n #include \"tensorflow/core/kernels/reference_gemm.h\"\n #include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/platform/errors.h\"\n #include \"tensorflow/core/util/padding.h\"\n \n namespace tensorflow {\n@@ -499,11 +498,26 @@ class QuantizedConv2DOp : public OpKernel {\n \n     // For 2D convolution, there should be 4 dimensions.\n     OP_REQUIRES(context, input.dims() == 4,\n-                errors::InvalidArgument(\"input must be 4-dimensional\",\n-                                        input.shape().DebugString()));\n+                errors::InvalidArgument(\"input must be rank 4 but is rank \",\n+                                        input.shape().dims()));\n     OP_REQUIRES(context, filter.dims() == 4,\n-                errors::InvalidArgument(\"filter must be 4-dimensional: \",\n-                                        filter.shape().DebugString()));\n+                errors::InvalidArgument(\"filter must be rank 4 but is rank \",\n+                                        filter.shape().dims()));\n+\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),\n+                errors::InvalidArgument(\"min_input must be rank 0 but is rank \",\n+                                        context->input(2).shape().dims()));\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(3).shape()),\n+                errors::InvalidArgument(\"max_input must be rank 0 but is rank \",\n+                                        context->input(3).shape().dims()));\n+    OP_REQUIRES(\n+        context, TensorShapeUtils::IsScalar(context->input(4).shape()),\n+        errors::InvalidArgument(\"min_filter must be rank 0 but is rank \",\n+                                context->input(4).shape().dims()));\n+    OP_REQUIRES(\n+        context, TensorShapeUtils::IsScalar(context->input(5).shape()),\n+        errors::InvalidArgument(\"max_filter must be rank 0 but is rank \",\n+                                context->input(5).shape().dims()));\n \n     const float min_input = context->input(2).flat<float>()(0);\n     const float max_input = context->input(3).flat<float>()(0);"