"diff --git a/tensorflow/core/kernels/quantized_conv_ops_test.cc b/tensorflow/core/kernels/quantized_conv_ops_test.cc\nindex 4226378bb64..dd0878a36df 100644\n--- a/tensorflow/core/kernels/quantized_conv_ops_test.cc\n+++ b/tensorflow/core/kernels/quantized_conv_ops_test.cc\n@@ -91,10 +91,10 @@ TEST_F(QuantizedConv2DTest, Small) {\n                             image_quantized.flat<quint8>());\n   AddInputFromArray<quint8>(filter_quantized.shape(),\n                             filter_quantized.flat<quint8>());\n-  AddInputFromArray<float>(TensorShape({1}), {image_min});\n-  AddInputFromArray<float>(TensorShape({1}), {image_max});\n-  AddInputFromArray<float>(TensorShape({1}), {filter_min});\n-  AddInputFromArray<float>(TensorShape({1}), {filter_max});\n+  AddInputFromArray<float>(TensorShape({}), {image_min});\n+  AddInputFromArray<float>(TensorShape({}), {image_max});\n+  AddInputFromArray<float>(TensorShape({}), {filter_min});\n+  AddInputFromArray<float>(TensorShape({}), {filter_max});\n   TF_ASSERT_OK(RunOpKernel());\n \n   // We're sliding the 3x3 filter across the 3x4 image, with accesses outside\n@@ -158,10 +158,10 @@ TEST_F(QuantizedConv2DTest, Small32Bit) {\n   AddInputFromArray<quint8>(\n       TensorShape({filter_size, filter_size, depth, filter_count}),\n       {10, 40, 70, 20, 50, 80, 30, 60, 90});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n \n   TF_ASSERT_OK(RunOpKernel());\n   const int expected_width = image_width;\n@@ -201,10 +201,10 @@ TEST_F(QuantizedConv2DTest, OddPadding) {\n   AddInputFromArray<quint8>(\n       TensorShape({filter_size, filter_size, depth, filter_count}),\n       {1, 2, 3, 4, 5, 6, 7, 8, 9});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n \n   TF_ASSERT_OK(RunOpKernel());\n   const int expected_width = image_width / stride;\n@@ -244,10 +244,10 @@ TEST_F(QuantizedConv2DTest, OddPaddingBatch) {\n   AddInputFromArray<quint8>(\n       TensorShape({filter_size, filter_size, depth, filter_count}),\n       {1, 2, 3, 4, 5, 6, 7, 8, 9});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n \n   TF_ASSERT_OK(RunOpKernel());\n   const int expected_width = image_width / stride;\n@@ -302,10 +302,10 @@ TEST_F(QuantizedConv2DTest, SmallWithNoZero) {\n                             image_quantized.flat<quint8>());\n   AddInputFromArray<quint8>(filter_quantized.shape(),\n                             filter_quantized.flat<quint8>());\n-  AddInputFromArray<float>(TensorShape({1}), {image_min});\n-  AddInputFromArray<float>(TensorShape({1}), {image_max});\n-  AddInputFromArray<float>(TensorShape({1}), {filter_min});\n-  AddInputFromArray<float>(TensorShape({1}), {filter_max});\n+  AddInputFromArray<float>(TensorShape({}), {image_min});\n+  AddInputFromArray<float>(TensorShape({}), {image_max});\n+  AddInputFromArray<float>(TensorShape({}), {filter_min});\n+  AddInputFromArray<float>(TensorShape({}), {filter_max});\n   TF_ASSERT_OK(RunOpKernel());\n   const int expected_width = image_width;\n   const int expected_height = image_height * filter_count;"