"diff --git a/tensorflow/python/ops/quantized_conv_ops_test.py b/tensorflow/python/ops/quantized_conv_ops_test.py\nindex 2d485d0ecb2..971abf339f7 100644\n--- a/tensorflow/python/ops/quantized_conv_ops_test.py\n+++ b/tensorflow/python/ops/quantized_conv_ops_test.py\n@@ -18,6 +18,8 @@ import numpy as np\n \n from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors\n+from tensorflow.python.ops import math_ops\n from tensorflow.python.ops import nn_ops\n from tensorflow.python.platform import test\n \n@@ -196,6 +198,71 @@ class Conv2DTest(test.TestCase):\n         padding=\"SAME\",\n         expected=expected_output)\n \n+  def _testBadInputSize(self,\n+                        tin=None,\n+                        tfilter=None,\n+                        min_input=None,\n+                        max_input=None,\n+                        min_filter=None,\n+                        max_filter=None,\n+                        error_regex=\"\"):\n+    strides = [1, 1, 1, 1]\n+    padding = \"SAME\"\n+    if tin is None:\n+      tin = math_ops.cast(\n+          constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)\n+\n+    if tfilter is None:\n+      tfilter = math_ops.cast(\n+          constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)\n+\n+    if min_input is None:\n+      min_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)\n+\n+    if max_input is None:\n+      max_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)\n+\n+    if min_filter is None:\n+      min_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)\n+\n+    if max_filter is None:\n+      max_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                error_regex):\n+      self.evaluate(\n+          nn_ops.quantized_conv2d(\n+              tin,\n+              tfilter,\n+              out_type=dtypes.qint32,\n+              strides=strides,\n+              padding=padding,\n+              min_input=min_input,\n+              max_input=max_input,\n+              min_filter=min_filter,\n+              max_filter=max_filter))\n+\n+  def testBadInputSizes(self):\n+    self._testBadInputSize(\n+        tin=math_ops.cast(\n+            constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),\n+        error_regex=\"must be rank 4\")\n+    self._testBadInputSize(\n+        tfilter=math_ops.cast(\n+            constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),\n+        error_regex=\"must be rank 4\")\n+    self._testBadInputSize(\n+        min_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),\n+        error_regex=\"must be rank 0\")\n+    self._testBadInputSize(\n+        max_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),\n+        error_regex=\"must be rank 0\")\n+    self._testBadInputSize(\n+        min_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),\n+        error_regex=\"must be rank 0\")\n+    self._testBadInputSize(\n+        max_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),\n+        error_regex=\"must be rank 0\")\n \n if __name__ == \"__main__\":\n   test.main()"