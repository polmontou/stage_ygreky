"diff --git a/tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py b/tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py\nindex a095aced262..5e682364837 100644\n--- a/tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py\n+++ b/tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py\n@@ -16,7 +16,9 @@\n \n import numpy as np\n \n+from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors\n from tensorflow.python.framework import ops\n from tensorflow.python.framework import tensor_util\n from tensorflow.python.framework import test_util\n@@ -516,6 +518,27 @@ class SpaceToBatchNDErrorHandlingTest(test.TestCase):\n             dtypes.float32, shape=(3, 2, 3, 2)), [2, 3], [[1, 1], [0, 0]])\n     self.assertEqual([3 * 2 * 3, 2, 1, 2], t.get_shape().as_list())\n \n+  @test_util.run_in_graph_and_eager_modes\n+  def testInvalidBlockShape(self):\n+    tf_in = constant_op.constant(\n+        -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)\n+    block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)\n+    paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"block_shape must be positive\"):\n+      array_ops.space_to_batch_nd(tf_in, block_shape, paddings)\n+\n+  @test_util.run_in_graph_and_eager_modes\n+  def testOutputSizeOutOfBounds(self):\n+    tf_in = constant_op.constant(\n+        -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)\n+    block_shape = constant_op.constant(\n+        1879048192, shape=[2], dtype=dtypes.int64)\n+    paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"Negative.* dimension size caused by overflow\"):\n+      array_ops.space_to_batch_nd(tf_in, block_shape, paddings)\n+\n \n class SpaceToBatchGradientTest(test.TestCase, PythonOpImpl):\n "