"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/compiler/tf2xla/xla_helpers.h\"\n#include \"tensorflow/compiler/tf2xla/xla_op_kernel.h\"\n#include \"tensorflow/compiler/tf2xla/xla_op_registry.h\"\n#include \"tensorflow/compiler/xla/client/xla_builder.h\"\n\nnamespace tensorflow {\nnamespace {\n\nvoid SpaceToBatch(XlaOpKernelContext* ctx, const xla::XlaOp& input,\n                  DataType input_dtype, const TensorShape& input_tensor_shape,\n                  absl::Span<const int64_t> block_shape,\n                  const xla::Literal& paddings) {\n  const int input_rank = input_tensor_shape.dims();\n  const absl::InlinedVector<int64_t, 4> input_shape =\n      input_tensor_shape.dim_sizes();\n  const int block_rank = block_shape.size();\n\n  OP_REQUIRES(\n      ctx, input_rank >= 1 + block_rank,\n      errors::InvalidArgument(\"input rank should be >= \", 1 + block_rank,\n                              \" instead of \", input_rank));\n  absl::Span<const int64_t> remainder_shape(input_shape);\n  remainder_shape.remove_prefix(1 + block_rank);\n\n  OP_REQUIRES(\n      ctx,\n      paddings.shape().rank() == 2 &&\n          block_rank == xla::ShapeUtil::GetDimension(paddings.shape(), 0) &&\n          2 == xla::ShapeUtil::GetDimension(paddings.shape(), 1),\n      errors::InvalidArgument(\"paddings should have shape [\", block_rank,\n                              \", 2] instead of \",\n                              xla::ShapeUtil::HumanString(paddings.shape())));\n\n  xla::XlaBuilder* b = ctx->builder();\n\n  // 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the\n  //  input according to `paddings` to produce `padded` of shape `padded_shape`.\n  xla::PaddingConfig padding_config;\n  std::vector<int64_t> padded_shape(input_shape.begin(), input_shape.end());\n  int64_t block_num_elems = 1LL;\n  padding_config.add_dimensions();  // Don't pad the batch dimension.\n  for (int i = 0; i < block_rank; ++i) {\n    auto* dim = padding_config.add_dimensions();\n    int64_t pad_start = paddings.Get<int64_t>({i, 0});\n    int64_t pad_end = paddings.Get<int64_t>({i, 1});\n    OP_REQUIRES(ctx, pad_start >= 0 && pad_end >= 0,\n                errors::InvalidArgument(\"Paddings must be non-negative\"));\n    dim->set_edge_padding_low(pad_start);\n    dim->set_edge_padding_high(pad_end);\n    padded_shape[1 + i] += pad_start + pad_end;\n    block_num_elems *= block_shape[i];\n  }\n  // Don't pad the remainder dimensions.\n  for (int i = 0; i < remainder_shape.size(); ++i) {\n    padding_config.add_dimensions();\n  }\n  OP_REQUIRES(ctx, block_num_elems > 0,\n              errors::InvalidArgument(\n                  \"The product of the block dimensions must be positive\"));\n\n  xla::XlaOp padded =\n      xla::Pad(input, XlaHelpers::Zero(b, input_dtype), padding_config);\n\n  // 2. Reshape `padded` to `reshaped_padded` of shape:\n  //\n  //      [batch] +\n  //      [padded_shape[1] / block_shape[0],\n  //        block_shape[0],\n  //       ...,\n  //       padded_shape[M] / block_shape[M-1],\n  //       block_shape[M-1]] +\n  //      remaining_shape\n  const int64_t batch_size = input_shape[0];\n  std::vector<int64_t> reshaped_padded_shape(input_rank + block_rank);\n  reshaped_padded_shape[0] = batch_size;\n  for (int i = 0; i < block_rank; ++i) {\n    OP_REQUIRES(ctx, padded_shape[1 + i] % block_shape[i] == 0,\n                errors::InvalidArgument(\"padded_shape[\", 1 + i,\n                                        \"]=\", padded_shape[1 + i],\n                                        \" is not divisible by block_shape[\", i,\n                                        \"]=\", block_shape[i]));\n\n    reshaped_padded_shape[1 + i * 2] = padded_shape[1 + i] / block_shape[i];\n    reshaped_padded_shape[1 + i * 2 + 1] = block_shape[i];\n  }\n  std::copy(remainder_shape.begin(), remainder_shape.end(),\n            reshaped_padded_shape.begin() + 1 + 2 * block_rank);\n\n  xla::XlaOp reshaped_padded = xla::Reshape(padded, reshaped_padded_shape);\n\n  // 3. Permute dimensions of `reshaped_padded` to produce\n  //    `permuted_reshaped_padded` of shape:\n  //\n  //      block_shape +\n  //      [batch] +\n  //      [padded_shape[1] / block_shape[0],\n  //       ...,\n  //       padded_shape[M] / block_shape[M-1]] +\n  //      remaining_shape\n  std::vector<int64_t> permutation(reshaped_padded_shape.size());\n  for (int i = 0; i < block_rank; ++i) {\n    permutation[i] = 1 + 2 * i + 1;\n    permutation[block_rank + 1 + i] = 1 + 2 * i;\n  }\n  permutation[block_rank] = 0;\n  std::iota(permutation.begin() + 1 + block_rank * 2, permutation.end(),\n            1 + block_rank * 2);\n  xla::XlaOp permuted_reshaped_padded =\n      xla::Transpose(reshaped_padded, permutation);\n\n  // 4. Reshape `permuted_reshaped_padded` to flatten `block_shape` into the\n  //    batch dimension, producing an output tensor of shape:\n  //\n  //      [batch * prod(block_shape)] +\n  //      [padded_shape[1] / block_shape[0],\n  //       ...,\n  //       padded_shape[M] / block_shape[M-1]] +\n  //      remaining_shape\n  // Determine the length of the prefix of block dims that can be combined\n  // into the batch dimension due to having no padding and block_shape=1.\n  std::vector<int64_t> output_shape(input_rank);\n  output_shape[0] = batch_size * block_num_elems;\n  for (int i = 0; i < block_rank; ++i) {\n    output_shape[1 + i] = padded_shape[1 + i] / block_shape[i];\n  }\n  std::copy(remainder_shape.begin(), remainder_shape.end(),\n            output_shape.begin() + 1 + block_rank);\n\n  xla::XlaOp output = xla::Reshape(permuted_reshaped_padded, output_shape);\n  ctx->SetOutput(0, output);\n}\n\nclass SpaceToBatchNDOp : public XlaOpKernel {\n public:\n  explicit SpaceToBatchNDOp(OpKernelConstruction* ctx) : XlaOpKernel(ctx) {}\n\n  void Compile(XlaOpKernelContext* ctx) override {\n    std::vector<int64_t> block_shape;\n    OP_REQUIRES_OK(ctx, ctx->ConstantInputAsIntVector(1, &block_shape));\n\n    xla::Literal paddings;\n    OP_REQUIRES_OK(ctx, ctx->ConstantInputAsInt64Literal(2, &paddings));\n\n    SpaceToBatch(ctx, ctx->Input(0), input_type(0), ctx->InputShape(0),\n                 block_shape, paddings);\n  }\n};\nREGISTER_XLA_OP(Name(\"SpaceToBatchND\")\n                    .CompileTimeConstantInput(\"paddings\")\n                    .CompileTimeConstantInput(\"block_shape\"),\n                SpaceToBatchNDOp);\n\nclass SpaceToBatchOp : public XlaOpKernel {\n public:\n  explicit SpaceToBatchOp(OpKernelConstruction* ctx) : XlaOpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"block_size\", &block_size_));\n    OP_REQUIRES(\n        ctx, block_size_ > 1,\n        errors::InvalidArgument(\"Block size should be > 1: \", block_size_));\n  }\n\n  void Compile(XlaOpKernelContext* ctx) override {\n    xla::Literal paddings;\n    OP_REQUIRES_OK(ctx, ctx->ConstantInputAsInt64Literal(1, &paddings));\n\n    SpaceToBatch(ctx, ctx->Input(0), input_type(0), ctx->InputShape(0),\n                 {block_size_, block_size_}, paddings);\n  }\n\n private:\n  int block_size_;\n};\nREGISTER_XLA_OP(Name(\"SpaceToBatch\").CompileTimeConstantInput(\"paddings\"),\n                SpaceToBatchOp);\n\n}  // namespace\n}  // namespace tensorflow"