"/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/kernels/sparse_tensor_dense_add_op.h\"\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_util.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/util/sparse/sparse_tensor.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n// NOTE: does not support GPU yet.\n\nnamespace {\n\ntemplate <typename Index>\nStatus ValidateInputs(const Tensor *a_indices, const Tensor *a_values,\n                      const Tensor *a_shape, const Tensor *b) {\n  if (!TensorShapeUtils::IsMatrix(a_indices->shape())) {\n    return errors::InvalidArgument(\n        \"Input a_indices should be a matrix but received shape: \",\n        a_indices->shape().DebugString());\n  }\n  if (!TensorShapeUtils::IsVector(a_values->shape()) ||\n      !TensorShapeUtils::IsVector(a_shape->shape())) {\n    return errors::InvalidArgument(\n        \"Inputs a_values and a_shape should be vectors \"\n        \"but received shapes: \",\n        a_values->shape().DebugString(), \" and \",\n        a_shape->shape().DebugString());\n  }\n  if (a_shape->NumElements() != b->dims()) {\n    return errors::InvalidArgument(\n        \"Two operands have different ranks; received: \", a_shape->NumElements(),\n        \" and \", b->dims());\n  }\n  const auto a_shape_flat = a_shape->flat<Index>();\n  for (int i = 0; i < b->dims(); ++i) {\n    if (a_shape_flat(i) != b->dim_size(i)) {\n      return errors::InvalidArgument(\n          \"Dimension \", i,\n          \" does not equal (no broadcasting is supported): sparse side \",\n          a_shape_flat(i), \" vs dense side \", b->dim_size(i));\n    }\n  }\n  return Status::OK();\n}\n\n}  // namespace\n\ntemplate <typename Device, typename T, typename Index>\nclass SparseTensorDenseAddOp : public OpKernel {\n public:\n  explicit SparseTensorDenseAddOp(OpKernelConstruction *ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext *ctx) override {\n    const Tensor *a_indices_t, *a_values_t, *a_shape_t, *b;\n    OP_REQUIRES_OK(ctx, ctx->input(\"a_indices\", &a_indices_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"a_values\", &a_values_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"a_shape\", &a_shape_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"b\", &b));\n    OP_REQUIRES_OK(\n        ctx, ValidateInputs<Index>(a_indices_t, a_values_t, a_shape_t, b));\n\n    Tensor *out_t;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, b->shape(), &out_t));\n\n    const int ndims = static_cast<int>(a_indices_t->dim_size(1));\n    const auto a_indices_mat = a_indices_t->flat_inner_dims<Index>();\n    const auto a_values_flat = a_values_t->flat<T>();\n\n    switch (ndims) {\n#define NDIMS_CASE(N)                                                     \\\n  case N: {                                                               \\\n    auto out_tensor = out_t->tensor<T, N>();                              \\\n    out_tensor.device(ctx->eigen_device<Device>()) = b->tensor<T, N>();   \\\n    const Index result =                                                  \\\n        functor::ScatterNdFunctor<Device, T, Index, N,                    \\\n                                  scatter_op::UpdateOp::ADD>()(           \\\n            ctx->eigen_device<Device>(), a_indices_mat, a_values_flat,    \\\n            out_tensor);                                                  \\\n    OP_REQUIRES(                                                          \\\n        ctx, result == -1,                                                \\\n        errors::InvalidArgument(                                          \\\n            \"Sparse tensor has some invalid index on dimension \", result, \\\n            \"; dense tensor shape: \", b->shape().DebugString()));         \\\n  } break;\n\n      NDIMS_CASE(1);\n      NDIMS_CASE(2);\n      NDIMS_CASE(3);\n      NDIMS_CASE(4);\n      NDIMS_CASE(5);\n      default:\n        OP_REQUIRES(\n            ctx, false,\n            errors::InvalidArgument(\"Only tensors with ranks between 1 and 5 \"\n                                    \"are currently supported.  Tensor rank: \",\n                                    ndims));\n#undef NDIMS_CASE\n    }\n  }\n};\n\nnamespace functor {\ntemplate <typename T, typename Index, int NDIMS>\nstruct ScatterNdFunctor<CPUDevice, T, Index, NDIMS, scatter_op::UpdateOp::ADD> {\n  Index operator()(const CPUDevice &d,\n                   typename TTypes<Index>::ConstMatrix indices,\n                   typename TTypes<T>::ConstFlat updates,\n                   typename TTypes<T, NDIMS>::Tensor out) {\n    Eigen::array<Eigen::DenseIndex, NDIMS> idx;\n    const int num_nnz = static_cast<int>(indices.dimension(0));\n    for (int i = 0; i < num_nnz; ++i) {\n      for (int d = 0; d < NDIMS; ++d) {\n        idx[d] = internal::SubtleMustCopy(indices(i, d));\n        if (!FastBoundsCheck(idx[d], out.dimension(d))) {\n          return d;  // on failure: d nonnegative\n        }\n      }\n      out(idx) += updates(i);\n    }\n    return -1;  // on success\n  }\n};\n}  // namespace functor\n\n#define REGISTER_KERNELS_CPU(TypeT, TypeIndex)                        \\\n  REGISTER_KERNEL_BUILDER(Name(\"SparseTensorDenseAdd\")                \\\n                              .Device(DEVICE_CPU)                     \\\n                              .TypeConstraint<TypeT>(\"T\")             \\\n                              .TypeConstraint<TypeIndex>(\"Tindices\"), \\\n                          SparseTensorDenseAddOp<CPUDevice, TypeT, TypeIndex>)\n\n#define REGISTER_KERNELS(T)         \\\n  REGISTER_KERNELS_CPU(T, int64_t); \\\n  REGISTER_KERNELS_CPU(T, int32)\n\nTF_CALL_NUMBER_TYPES(REGISTER_KERNELS);\n#undef REGISTER_KERNELS\n#undef REGISTER_KERNELS_CPU\n}  // namespace tensorflow"