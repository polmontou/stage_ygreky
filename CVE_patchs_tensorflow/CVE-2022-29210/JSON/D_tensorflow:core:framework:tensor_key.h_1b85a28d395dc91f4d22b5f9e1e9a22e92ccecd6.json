"diff --git a/tensorflow/core/framework/tensor_key.h b/tensorflow/core/framework/tensor_key.h\nindex 243205dc50f..3bde6fce621 100644\n--- a/tensorflow/core/framework/tensor_key.h\n+++ b/tensorflow/core/framework/tensor_key.h\n@@ -16,6 +16,7 @@ limitations under the License.\n #define TENSORFLOW_CORE_FRAMEWORK_TENSOR_KEY_H_\n \n #include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/types.h\"\n \n namespace tensorflow {\n \n@@ -32,8 +33,7 @@ class TensorKey : public Tensor {\n     }\n     if (DataTypeCanUseMemcpy(t1.dtype())) {\n       return t1.tensor_data() == t2.tensor_data();\n-    }\n-    if (t1.dtype() == DT_STRING) {\n+    } else if (t1.dtype() == DT_STRING) {\n       const auto s1 = t1.unaligned_flat<tstring>();\n       const auto s2 = t2.unaligned_flat<tstring>();\n       for (int64_t i = 0, n = t1.NumElements(); i < n; ++i) {\n@@ -42,6 +42,9 @@ class TensorKey : public Tensor {\n         }\n       }\n       return true;\n+    } else {\n+      DCHECK(false) << \"Unimplemented dtype \" << DataTypeString(t1.dtype())\n+                    << std::endl;\n     }\n     return false;\n   }\n@@ -53,14 +56,19 @@ class TensorKey : public Tensor {\n   // Needed for absl hash function.\n   template <typename H>\n   friend H AbslHashValue(H h, const TensorKey& k) {\n-    const uint8* d = static_cast<uint8*>(k.data());\n-    size_t s = k.AllocatedBytes();\n-    std::vector<uint8> vec;\n-    vec.reserve(s);\n-    for (int i = 0; i < s; i++) {\n-      vec.push_back(d[i]);\n+    if (DataTypeCanUseMemcpy(k.dtype())) {\n+      return H::combine(std::move(h), k.tensor_data());\n+    } else if (k.dtype() == DT_STRING) {\n+      const auto strs = k.unaligned_flat<tstring>();\n+      for (int64_t i = 0, n = k.NumElements(); i < n; ++i) {\n+        h = H::combine(std::move(h), strs(i));\n+      }\n+      return h;\n+    } else {\n+      DCHECK(false) << \"Unimplemented dtype \" << DataTypeString(k.dtype())\n+                    << std::endl;\n     }\n-    return H::combine(std::move(h), s);\n+    return h;\n   }\n };\n "