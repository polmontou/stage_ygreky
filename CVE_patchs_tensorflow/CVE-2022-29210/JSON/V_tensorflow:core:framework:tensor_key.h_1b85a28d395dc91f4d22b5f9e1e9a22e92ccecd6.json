"/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#ifndef TENSORFLOW_CORE_FRAMEWORK_TENSOR_KEY_H_\n#define TENSORFLOW_CORE_FRAMEWORK_TENSOR_KEY_H_\n\n#include \"tensorflow/core/framework/tensor.h\"\n\nnamespace tensorflow {\n\nclass TensorKey : public Tensor {\n public:\n  using Tensor::Tensor;\n\n  TensorKey(const Tensor& t) : Tensor(t) {}\n\n  // Equality operator. Needed for absl hashing.\n  friend bool operator==(const TensorKey& t1, const TensorKey& t2) {\n    if (t1.dtype() != t2.dtype() || t1.shape() != t2.shape()) {\n      return false;\n    }\n    if (DataTypeCanUseMemcpy(t1.dtype())) {\n      return t1.tensor_data() == t2.tensor_data();\n    }\n    if (t1.dtype() == DT_STRING) {\n      const auto s1 = t1.unaligned_flat<tstring>();\n      const auto s2 = t2.unaligned_flat<tstring>();\n      for (int64_t i = 0, n = t1.NumElements(); i < n; ++i) {\n        if (TF_PREDICT_FALSE(s1(i) != s2(i))) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  friend bool operator!=(const TensorKey& t1, const TensorKey& t2) {\n    return !(t1 == t2);\n  }\n\n  // Needed for absl hash function.\n  template <typename H>\n  friend H AbslHashValue(H h, const TensorKey& k) {\n    const uint8* d = static_cast<uint8*>(k.data());\n    size_t s = k.AllocatedBytes();\n    std::vector<uint8> vec;\n    vec.reserve(s);\n    for (int i = 0; i < s; i++) {\n      vec.push_back(d[i]);\n    }\n    return H::combine(std::move(h), s);\n  }\n};\n\n}  // namespace tensorflow\n\n#endif"