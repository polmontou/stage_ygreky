"diff --git a/tensorflow/python/tools/saved_model_cli.py b/tensorflow/python/tools/saved_model_cli.py\nindex 9c37cc40c50..f8d7bbb1eec 100644\n--- a/tensorflow/python/tools/saved_model_cli.py\n+++ b/tensorflow/python/tools/saved_model_cli.py\n@@ -20,6 +20,7 @@ https://www.tensorflow.org/guide/saved_model#cli_to_inspect_and_execute_savedmod\n \"\"\"\n \n import argparse\n+import ast\n import os\n import re\n import sys\n@@ -521,7 +522,7 @@ def preprocess_inputs_arg_string(inputs_str):\n   return input_dict\n \n \n-def preprocess_input_exprs_arg_string(input_exprs_str):\n+def preprocess_input_exprs_arg_string(input_exprs_str, safe=True):\n   \"\"\"Parses input arg into dictionary that maps input key to python expression.\n \n   Parses input string in the format of 'input_key=<python expression>' into a\n@@ -529,8 +530,10 @@ def preprocess_input_exprs_arg_string(input_exprs_str):\n \n   Args:\n     input_exprs_str: A string that specifies python expression for input keys.\n-    Each input is separated by semicolon. For each input key:\n+      Each input is separated by semicolon. For each input key:\n         'input_key=<python expression>'\n+    safe: Whether to evaluate the python expression as literals or allow\n+      arbitrary calls (e.g. numpy usage).\n \n   Returns:\n     A dictionary that maps input keys to their values.\n@@ -545,8 +548,15 @@ def preprocess_input_exprs_arg_string(input_exprs_str):\n       raise RuntimeError('--input_exprs \"%s\" format is incorrect. Please follow'\n                          '\"<input_key>=<python expression>\"' % input_exprs_str)\n     input_key, expr = input_raw.split('=', 1)\n-    # ast.literal_eval does not work with numpy expressions\n-    input_dict[input_key] = eval(expr)  # pylint: disable=eval-used\n+    if safe:\n+      try:\n+        input_dict[input_key] = ast.literal_eval(expr)\n+      except:\n+        raise RuntimeError(\n+            f'Expression \"{expr}\" is not a valid python literal.')\n+    else:\n+      # ast.literal_eval does not work with numpy expressions\n+      input_dict[input_key] = eval(expr)  # pylint: disable=eval-used\n   return input_dict\n \n \n@@ -659,7 +669,7 @@ def load_inputs_from_input_arg_string(inputs_str, input_exprs_str,\n   tensor_key_feed_dict = {}\n \n   inputs = preprocess_inputs_arg_string(inputs_str)\n-  input_exprs = preprocess_input_exprs_arg_string(input_exprs_str)\n+  input_exprs = preprocess_input_exprs_arg_string(input_exprs_str, safe=False)\n   input_examples = preprocess_input_examples_arg_string(input_examples_str)\n \n   for input_tensor_key, (filename, variable_name) in inputs.items():\n@@ -923,8 +933,10 @@ def add_run_subparser(subparsers):\n   parser_run.add_argument('--inputs', type=str, default='', help=msg)\n   msg = ('Specifying inputs by python expressions, in the format of'\n          ' \"<input_key>=\\'<python expression>\\'\", separated by \\';\\'. '\n-         'numpy module is available as \\'np\\'. '\n-         'Will override duplicate input keys from --inputs option.')\n+         'numpy module is available as \\'np\\'. Please note that the expression '\n+         'will be evaluated as-is, and is susceptible to code injection. '\n+         'When this is set, the value will override duplicate input keys from '\n+         '--inputs option.')\n   parser_run.add_argument('--input_exprs', type=str, default='', help=msg)\n   msg = (\n       'Specifying tf.Example inputs as list of dictionaries. For example: '"