"# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Command-line interface to inspect and execute a graph in a SavedModel.\n\nFor detailed usages and examples, please refer to:\nhttps://www.tensorflow.org/guide/saved_model#cli_to_inspect_and_execute_savedmodel\n\n\"\"\"\n\nimport argparse\nimport ast\nimport os\nimport re\nimport sys\n\nfrom absl import app  # pylint: disable=unused-import\nimport numpy as np\nimport six\n\nfrom tensorflow.core.example import example_pb2\nfrom tensorflow.core.framework import types_pb2\nfrom tensorflow.core.protobuf import config_pb2\nfrom tensorflow.python.client import session\nfrom tensorflow.python.debug.wrappers import local_cli_wrapper\nfrom tensorflow.python.eager import def_function\nfrom tensorflow.python.eager import function as defun\nfrom tensorflow.python.framework import meta_graph as meta_graph_lib\nfrom tensorflow.python.framework import ops as ops_lib\nfrom tensorflow.python.framework import tensor_spec\nfrom tensorflow.python.lib.io import file_io\nfrom tensorflow.python.platform import tf_logging as logging\nfrom tensorflow.python.saved_model import load\nfrom tensorflow.python.saved_model import loader\nfrom tensorflow.python.saved_model import save\nfrom tensorflow.python.saved_model import signature_constants\nfrom tensorflow.python.tools import saved_model_aot_compile\nfrom tensorflow.python.tools import saved_model_utils\nfrom tensorflow.python.tpu import tpu\nfrom tensorflow.python.util.compat import collections_abc\n\n\n_XLA_DEBUG_OPTIONS_URL = (\n    'https://github.com/tensorflow/tensorflow/blob/master/'\n    'tensorflow/compiler/xla/debug_options_flags.cc')\n\n\n# Set of ops to denylist.\n_OP_DENYLIST = set(['WriteFile', 'ReadFile', 'PrintV2'])\n\n\ndef _show_tag_sets(saved_model_dir):\n  \"\"\"Prints the tag-sets stored in SavedModel directory.\n\n  Prints all the tag-sets for MetaGraphs stored in SavedModel directory.\n\n  Args:\n    saved_model_dir: Directory containing the SavedModel to inspect.\n  \"\"\"\n  tag_sets = saved_model_utils.get_saved_model_tag_sets(saved_model_dir)\n  print('The given SavedModel contains the following tag-sets:')\n  for tag_set in sorted(tag_sets):\n    print('%r' % ', '.join(sorted(tag_set)))\n\n\ndef _show_signature_def_map_keys(saved_model_dir, tag_set):\n  \"\"\"Prints the keys for each SignatureDef in the SignatureDef map.\n\n  Prints the list of SignatureDef keys from the SignatureDef map specified by\n  the given tag-set and SavedModel directory.\n\n  Args:\n    saved_model_dir: Directory containing the SavedModel to inspect.\n    tag_set: Group of tag(s) of the MetaGraphDef to get SignatureDef map from,\n        in string format, separated by ','. For tag-set contains multiple tags,\n        all tags must be passed in.\n  \"\"\"\n  signature_def_map = get_signature_def_map(saved_model_dir, tag_set)\n  print('The given SavedModel MetaGraphDef contains SignatureDefs with the '\n        'following keys:')\n  for signature_def_key in sorted(signature_def_map.keys()):\n    print('SignatureDef key: \\\"%s\\\"' % signature_def_key)\n\n\ndef _get_inputs_tensor_info_from_meta_graph_def(meta_graph_def,\n                                                signature_def_key):\n  \"\"\"Gets TensorInfo for all inputs of the SignatureDef.\n\n  Returns a dictionary that maps each input key to its TensorInfo for the given\n  signature_def_key in the meta_graph_def\n\n  Args:\n    meta_graph_def: MetaGraphDef protocol buffer with the SignatureDef map to\n        look up SignatureDef key.\n    signature_def_key: A SignatureDef key string.\n\n  Returns:\n    A dictionary that maps input tensor keys to TensorInfos.\n\n  Raises:\n    ValueError if `signature_def_key` is not found in the MetaGraphDef.\n  \"\"\"\n  if signature_def_key not in meta_graph_def.signature_def:\n    raise ValueError(\n        f'Could not find signature \"{signature_def_key}\". Please choose from: '\n        f'{\", \".join(meta_graph_def.signature_def.keys())}')\n  return meta_graph_def.signature_def[signature_def_key].inputs\n\n\ndef _get_outputs_tensor_info_from_meta_graph_def(meta_graph_def,\n                                                 signature_def_key):\n  \"\"\"Gets TensorInfos for all outputs of the SignatureDef.\n\n  Returns a dictionary that maps each output key to its TensorInfo for the given\n  signature_def_key in the meta_graph_def.\n\n  Args:\n    meta_graph_def: MetaGraphDef protocol buffer with the SignatureDefmap to\n    look up signature_def_key.\n    signature_def_key: A SignatureDef key string.\n\n  Returns:\n    A dictionary that maps output tensor keys to TensorInfos.\n  \"\"\"\n  return meta_graph_def.signature_def[signature_def_key].outputs\n\n\ndef _show_inputs_outputs(saved_model_dir, tag_set, signature_def_key, indent=0):\n  \"\"\"Prints input and output TensorInfos.\n\n  Prints the details of input and output TensorInfos for the SignatureDef mapped\n  by the given signature_def_key.\n\n  Args:\n    saved_model_dir: Directory containing the SavedModel to inspect.\n    tag_set: Group of tag(s) of the MetaGraphDef, in string format, separated by\n        ','. For tag-set contains multiple tags, all tags must be passed in.\n    signature_def_key: A SignatureDef key string.\n    indent: How far (in increments of 2 spaces) to indent each line of output.\n  \"\"\"\n  meta_graph_def = saved_model_utils.get_meta_graph_def(saved_model_dir,\n                                                        tag_set)\n  inputs_tensor_info = _get_inputs_tensor_info_from_meta_graph_def(\n      meta_graph_def, signature_def_key)\n  outputs_tensor_info = _get_outputs_tensor_info_from_meta_graph_def(\n      meta_graph_def, signature_def_key)\n\n  indent_str = '  ' * indent\n  def in_print(s):\n    print(indent_str + s)\n\n  in_print('The given SavedModel SignatureDef contains the following input(s):')\n  for input_key, input_tensor in sorted(inputs_tensor_info.items()):\n    in_print('  inputs[\\'%s\\'] tensor_info:' % input_key)\n    _print_tensor_info(input_tensor, indent+1)\n\n  in_print('The given SavedModel SignatureDef contains the following '\n           'output(s):')\n  for output_key, output_tensor in sorted(outputs_tensor_info.items()):\n    in_print('  outputs[\\'%s\\'] tensor_info:' % output_key)\n    _print_tensor_info(output_tensor, indent+1)\n\n  in_print('Method name is: %s' %\n           meta_graph_def.signature_def[signature_def_key].method_name)\n\n\ndef _show_defined_functions(saved_model_dir):\n  \"\"\"Prints the callable concrete and polymorphic functions of the Saved Model.\n\n  Args:\n    saved_model_dir: Directory containing the SavedModel to inspect.\n  \"\"\"\n  meta_graphs = saved_model_utils.read_saved_model(saved_model_dir).meta_graphs\n  has_object_graph_def = False\n\n  for meta_graph_def in meta_graphs:\n    has_object_graph_def |= meta_graph_def.HasField('object_graph_def')\n  if not has_object_graph_def:\n    return\n  with ops_lib.Graph().as_default():\n    trackable_object = load.load(saved_model_dir)\n\n  print('\\nConcrete Functions:', end='')\n  children = list(\n      save._AugmentedGraphView(trackable_object)  # pylint: disable=protected-access\n      .list_children(trackable_object))\n  children = sorted(children, key=lambda x: x.name)\n  for name, child in children:\n    concrete_functions = []\n    if isinstance(child, defun.ConcreteFunction):\n      concrete_functions.append(child)\n    elif isinstance(child, def_function.Function):\n      concrete_functions.extend(\n          child._list_all_concrete_functions_for_serialization())  # pylint: disable=protected-access\n    else:\n      continue\n    print('\\n  Function Name: \\'%s\\'' % name)\n    concrete_functions = sorted(concrete_functions, key=lambda x: x.name)\n    for index, concrete_function in enumerate(concrete_functions, 1):\n      args, kwargs = None, None\n      if concrete_function.structured_input_signature:\n        args, kwargs = concrete_function.structured_input_signature\n      elif concrete_function._arg_keywords:  # pylint: disable=protected-access\n        # For pure ConcreteFunctions we might have nothing better than\n        # _arg_keywords.\n        args = concrete_function._arg_keywords  # pylint: disable=protected-access\n      if args:\n        print('    Option #%d' % index)\n        print('      Callable with:')\n        _print_args(args, indent=4)\n      if kwargs:\n        _print_args(kwargs, 'Named Argument', indent=4)\n\n\ndef _print_args(arguments, argument_type='Argument', indent=0):\n  \"\"\"Formats and prints the argument of the concrete functions defined in the model.\n\n  Args:\n    arguments: Arguments to format print.\n    argument_type: Type of arguments.\n    indent: How far (in increments of 2 spaces) to indent each line of\n     output.\n  \"\"\"\n  indent_str = '  ' * indent\n\n  def _maybe_add_quotes(value):\n    is_quotes = '\\'' * isinstance(value, str)\n    return is_quotes + str(value) + is_quotes\n\n  def in_print(s, end='\\n'):\n    print(indent_str + s, end=end)\n\n  for index, element in enumerate(arguments, 1):\n    if indent == 4:\n      in_print('%s #%d' % (argument_type, index))\n    if isinstance(element, six.string_types):\n      in_print('  %s' % element)\n    elif isinstance(element, tensor_spec.TensorSpec):\n      print((indent + 1) * '  ' + '%s: %s' % (element.name, repr(element)))\n    elif (isinstance(element, collections_abc.Iterable) and\n          not isinstance(element, dict)):\n      in_print('  DType: %s' % type(element).__name__)\n      in_print('  Value: [', end='')\n      for value in element:\n        print('%s' % _maybe_add_quotes(value), end=', ')\n      print('\\b\\b]')\n    elif isinstance(element, dict):\n      in_print('  DType: %s' % type(element).__name__)\n      in_print('  Value: {', end='')\n      for (key, value) in element.items():\n        print('\\'%s\\': %s' % (str(key), _maybe_add_quotes(value)), end=', ')\n      print('\\b\\b}')\n    else:\n      in_print('  DType: %s' % type(element).__name__)\n      in_print('  Value: %s' % str(element))\n\n\ndef _print_tensor_info(tensor_info, indent=0):\n  \"\"\"Prints details of the given tensor_info.\n\n  Args:\n    tensor_info: TensorInfo object to be printed.\n    indent: How far (in increments of 2 spaces) to indent each line output\n  \"\"\"\n  indent_str = '  ' * indent\n  def in_print(s):\n    print(indent_str + s)\n\n  in_print('    dtype: ' +\n           {value: key\n            for (key, value) in types_pb2.DataType.items()}[tensor_info.dtype])\n  # Display shape as tuple.\n  if tensor_info.tensor_shape.unknown_rank:\n    shape = 'unknown_rank'\n  else:\n    dims = [str(dim.size) for dim in tensor_info.tensor_shape.dim]\n    shape = ', '.join(dims)\n    shape = '(' + shape + ')'\n  in_print('    shape: ' + shape)\n  in_print('    name: ' + tensor_info.name)\n\n\ndef _show_all(saved_model_dir):\n  \"\"\"Prints tag-set, SignatureDef and Inputs/Outputs information in SavedModel.\n\n  Prints all tag-set, SignatureDef and Inputs/Outputs information stored in\n  SavedModel directory.\n\n  Args:\n    saved_model_dir: Directory containing the SavedModel to inspect.\n  \"\"\"\n  tag_sets = saved_model_utils.get_saved_model_tag_sets(saved_model_dir)\n  for tag_set in sorted(tag_sets):\n    print(\"\\nMetaGraphDef with tag-set: '%s' \"\n          \"contains the following SignatureDefs:\" % ', '.join(tag_set))\n\n    tag_set = ','.join(tag_set)\n    signature_def_map = get_signature_def_map(saved_model_dir, tag_set)\n    for signature_def_key in sorted(signature_def_map.keys()):\n      print('\\nsignature_def[\\'' + signature_def_key + '\\']:')\n      _show_inputs_outputs(saved_model_dir, tag_set, signature_def_key,\n                           indent=1)\n  _show_defined_functions(saved_model_dir)\n\n\ndef get_meta_graph_def(saved_model_dir, tag_set):\n  \"\"\"DEPRECATED: Use saved_model_utils.get_meta_graph_def instead.\n\n  Gets MetaGraphDef from SavedModel. Returns the MetaGraphDef for the given\n  tag-set and SavedModel directory.\n\n  Args:\n    saved_model_dir: Directory containing the SavedModel to inspect or execute.\n    tag_set: Group of tag(s) of the MetaGraphDef to load, in string format,\n        separated by ','. For tag-set contains multiple tags, all tags must be\n        passed in.\n\n  Raises:\n    RuntimeError: An error when the given tag-set does not exist in the\n        SavedModel.\n\n  Returns:\n    A MetaGraphDef corresponding to the tag-set.\n  \"\"\"\n  return saved_model_utils.get_meta_graph_def(saved_model_dir, tag_set)\n\n\ndef get_signature_def_map(saved_model_dir, tag_set):\n  \"\"\"Gets SignatureDef map from a MetaGraphDef in a SavedModel.\n\n  Returns the SignatureDef map for the given tag-set in the SavedModel\n  directory.\n\n  Args:\n    saved_model_dir: Directory containing the SavedModel to inspect or execute.\n    tag_set: Group of tag(s) of the MetaGraphDef with the SignatureDef map, in\n        string format, separated by ','. For tag-set contains multiple tags, all\n        tags must be passed in.\n\n  Returns:\n    A SignatureDef map that maps from string keys to SignatureDefs.\n  \"\"\"\n  meta_graph = saved_model_utils.get_meta_graph_def(saved_model_dir, tag_set)\n  return meta_graph.signature_def\n\n\ndef scan_meta_graph_def(meta_graph_def):\n  \"\"\"Scans meta_graph_def and reports if there are ops on denylist.\n\n  Print ops if they are on black list, or print success if no denylisted ops\n  found.\n\n  Args:\n    meta_graph_def: MetaGraphDef protocol buffer.\n  \"\"\"\n  all_ops_set = set(\n      meta_graph_lib.ops_used_by_graph_def(meta_graph_def.graph_def))\n  denylisted_ops = _OP_DENYLIST & all_ops_set\n  if denylisted_ops:\n    # TODO(yifeif): print more warnings\n    print(\n        'MetaGraph with tag set %s contains the following denylisted ops:' %\n        meta_graph_def.meta_info_def.tags, denylisted_ops)\n  else:\n    print('MetaGraph with tag set %s does not contain denylisted ops.' %\n          meta_graph_def.meta_info_def.tags)\n\n\ndef run_saved_model_with_feed_dict(saved_model_dir,\n                                   tag_set,\n                                   signature_def_key,\n                                   input_tensor_key_feed_dict,\n                                   outdir,\n                                   overwrite_flag,\n                                   worker=None,\n                                   init_tpu=False,\n                                   use_tfrt=False,\n                                   tf_debug=False):\n  \"\"\"Runs SavedModel and fetch all outputs.\n\n  Runs the input dictionary through the MetaGraphDef within a SavedModel\n  specified by the given tag_set and SignatureDef. Also save the outputs to file\n  if outdir is not None.\n\n  Args:\n    saved_model_dir: Directory containing the SavedModel to execute.\n    tag_set: Group of tag(s) of the MetaGraphDef with the SignatureDef map, in\n        string format, separated by ','. For tag-set contains multiple tags, all\n        tags must be passed in.\n    signature_def_key: A SignatureDef key string.\n    input_tensor_key_feed_dict: A dictionary maps input keys to numpy ndarrays.\n    outdir: A directory to save the outputs to. If the directory doesn't exist,\n        it will be created.\n    overwrite_flag: A boolean flag to allow overwrite output file if file with\n        the same name exists.\n    worker: If provided, the session will be run on the worker.  Valid worker\n        specification is a bns or gRPC path.\n    init_tpu: If true, the TPU system will be initialized after the session\n        is created.\n    use_tfrt: If true, TFRT session will be used.\n    tf_debug: A boolean flag to use TensorFlow Debugger (TFDBG) to observe the\n        intermediate Tensor values and runtime GraphDefs while running the\n        SavedModel.\n\n  Raises:\n    ValueError: When any of the input tensor keys is not valid.\n    RuntimeError: An error when output file already exists and overwrite is not\n    enabled.\n  \"\"\"\n  # Get a list of output tensor names.\n  meta_graph_def = saved_model_utils.get_meta_graph_def(saved_model_dir,\n                                                        tag_set)\n\n  # Re-create feed_dict based on input tensor name instead of key as session.run\n  # uses tensor name.\n  inputs_tensor_info = _get_inputs_tensor_info_from_meta_graph_def(\n      meta_graph_def, signature_def_key)\n\n  # Check if input tensor keys are valid.\n  for input_key_name in input_tensor_key_feed_dict.keys():\n    if input_key_name not in inputs_tensor_info:\n      raise ValueError(\n          '\"%s\" is not a valid input key. Please choose from %s, or use '\n          '--show option.' %\n          (input_key_name, '\"' + '\", \"'.join(inputs_tensor_info.keys()) + '\"'))\n\n  inputs_feed_dict = {\n      inputs_tensor_info[key].name: tensor\n      for key, tensor in input_tensor_key_feed_dict.items()\n  }\n  # Get outputs\n  outputs_tensor_info = _get_outputs_tensor_info_from_meta_graph_def(\n      meta_graph_def, signature_def_key)\n  # Sort to preserve order because we need to go from value to key later.\n  output_tensor_keys_sorted = sorted(outputs_tensor_info.keys())\n  output_tensor_names_sorted = [\n      outputs_tensor_info[tensor_key].name\n      for tensor_key in output_tensor_keys_sorted\n  ]\n\n  config = None\n  if use_tfrt:\n    logging.info('Using TFRT session.')\n    config = config_pb2.ConfigProto(\n        experimental=config_pb2.ConfigProto.Experimental(use_tfrt=True))\n  with session.Session(worker, graph=ops_lib.Graph(), config=config) as sess:\n    if init_tpu:\n      print('Initializing TPU System ...')\n      # This is needed for freshly started worker, or if the job\n      # restarts after a preemption.\n      sess.run(tpu.initialize_system())\n\n    loader.load(sess, tag_set.split(','), saved_model_dir)\n\n    if tf_debug:\n      sess = local_cli_wrapper.LocalCLIDebugWrapperSession(sess)\n\n    outputs = sess.run(output_tensor_names_sorted, feed_dict=inputs_feed_dict)\n\n    for i, output in enumerate(outputs):\n      output_tensor_key = output_tensor_keys_sorted[i]\n      print('Result for output key %s:\\n%s' % (output_tensor_key, output))\n\n      # Only save if outdir is specified.\n      if outdir:\n        # Create directory if outdir does not exist\n        if not os.path.isdir(outdir):\n          os.makedirs(outdir)\n        output_full_path = os.path.join(outdir, output_tensor_key + '.npy')\n\n        # If overwrite not enabled and file already exist, error out\n        if not overwrite_flag and os.path.exists(output_full_path):\n          raise RuntimeError(\n              'Output file %s already exists. Add \\\"--overwrite\\\" to overwrite'\n              ' the existing output files.' % output_full_path)\n\n        np.save(output_full_path, output)\n        print('Output %s is saved to %s' % (output_tensor_key,\n                                            output_full_path))\n\n\ndef preprocess_inputs_arg_string(inputs_str):\n  \"\"\"Parses input arg into dictionary that maps input to file/variable tuple.\n\n  Parses input string in the format of, for example,\n  \"input1=filename1[variable_name1],input2=filename2\" into a\n  dictionary looks like\n  {'input_key1': (filename1, variable_name1),\n   'input_key2': (file2, None)}\n  , which maps input keys to a tuple of file name and variable name(None if\n  empty).\n\n  Args:\n    inputs_str: A string that specified where to load inputs. Inputs are\n    separated by semicolons.\n        * For each input key:\n            '<input_key>=<filename>' or\n            '<input_key>=<filename>[<variable_name>]'\n        * The optional 'variable_name' key will be set to None if not specified.\n\n  Returns:\n    A dictionary that maps input keys to a tuple of file name and variable name.\n\n  Raises:\n    RuntimeError: An error when the given input string is in a bad format.\n  \"\"\"\n  input_dict = {}\n  inputs_raw = inputs_str.split(';')\n  for input_raw in filter(bool, inputs_raw):  # skip empty strings\n    # Format of input=filename[variable_name]'\n    match = re.match(r'([^=]+)=([^\\[\\]]+)\\[([^\\[\\]]+)\\]$', input_raw)\n\n    if match:\n      input_dict[match.group(1)] = match.group(2), match.group(3)\n    else:\n      # Format of input=filename'\n      match = re.match(r'([^=]+)=([^\\[\\]]+)$', input_raw)\n      if match:\n        input_dict[match.group(1)] = match.group(2), None\n      else:\n        raise RuntimeError(\n            '--inputs \"%s\" format is incorrect. Please follow'\n            '\"<input_key>=<filename>\", or'\n            '\"<input_key>=<filename>[<variable_name>]\"' % input_raw)\n\n  return input_dict\n\n\ndef preprocess_input_exprs_arg_string(input_exprs_str, safe=True):\n  \"\"\"Parses input arg into dictionary that maps input key to python expression.\n\n  Parses input string in the format of 'input_key=<python expression>' into a\n  dictionary that maps each input_key to its python expression.\n\n  Args:\n    input_exprs_str: A string that specifies python expression for input keys.\n      Each input is separated by semicolon. For each input key:\n        'input_key=<python expression>'\n    safe: Whether to evaluate the python expression as literals or allow\n      arbitrary calls (e.g. numpy usage).\n\n  Returns:\n    A dictionary that maps input keys to their values.\n\n  Raises:\n    RuntimeError: An error when the given input string is in a bad format.\n  \"\"\"\n  input_dict = {}\n\n  for input_raw in filter(bool, input_exprs_str.split(';')):\n    if '=' not in input_exprs_str:\n      raise RuntimeError('--input_exprs \"%s\" format is incorrect. Please follow'\n                         '\"<input_key>=<python expression>\"' % input_exprs_str)\n    input_key, expr = input_raw.split('=', 1)\n    if safe:\n      try:\n        input_dict[input_key] = ast.literal_eval(expr)\n      except:\n        raise RuntimeError(\n            f'Expression \"{expr}\" is not a valid python literal.')\n    else:\n      # ast.literal_eval does not work with numpy expressions\n      input_dict[input_key] = eval(expr)  # pylint: disable=eval-used\n  return input_dict\n\n\ndef preprocess_input_examples_arg_string(input_examples_str):\n  \"\"\"Parses input into dict that maps input keys to lists of tf.Example.\n\n  Parses input string in the format of 'input_key1=[{feature_name:\n  feature_list}];input_key2=[{feature_name:feature_list}];' into a dictionary\n  that maps each input_key to its list of serialized tf.Example.\n\n  Args:\n    input_examples_str: A string that specifies a list of dictionaries of\n    feature_names and their feature_lists for each input.\n    Each input is separated by semicolon. For each input key:\n      'input=[{feature_name1: feature_list1, feature_name2:feature_list2}]'\n      items in feature_list can be the type of float, int, long or str.\n\n  Returns:\n    A dictionary that maps input keys to lists of serialized tf.Example.\n\n  Raises:\n    ValueError: An error when the given tf.Example is not a list.\n  \"\"\"\n  input_dict = preprocess_input_exprs_arg_string(input_examples_str)\n  for input_key, example_list in input_dict.items():\n    if not isinstance(example_list, list):\n      raise ValueError(\n          'tf.Example input must be a list of dictionaries, but \"%s\" is %s' %\n          (example_list, type(example_list)))\n    input_dict[input_key] = [\n        _create_example_string(example) for example in example_list\n    ]\n  return input_dict\n\n\ndef _create_example_string(example_dict):\n  \"\"\"Create a serialized tf.example from feature dictionary.\"\"\"\n  example = example_pb2.Example()\n  for feature_name, feature_list in example_dict.items():\n    if not isinstance(feature_list, list):\n      raise ValueError('feature value must be a list, but %s: \"%s\" is %s' %\n                       (feature_name, feature_list, type(feature_list)))\n    if isinstance(feature_list[0], float):\n      example.features.feature[feature_name].float_list.value.extend(\n          feature_list)\n    elif isinstance(feature_list[0], str):\n      example.features.feature[feature_name].bytes_list.value.extend(\n          [f.encode('utf8') for f in feature_list])\n    elif isinstance(feature_list[0], bytes):\n      example.features.feature[feature_name].bytes_list.value.extend(\n          feature_list)\n    elif isinstance(feature_list[0], six.integer_types):\n      example.features.feature[feature_name].int64_list.value.extend(\n          feature_list)\n    else:\n      raise ValueError(\n          'Type %s for value %s is not supported for tf.train.Feature.' %\n          (type(feature_list[0]), feature_list[0]))\n  return example.SerializeToString()\n\n\ndef load_inputs_from_input_arg_string(inputs_str, input_exprs_str,\n                                      input_examples_str):\n  \"\"\"Parses input arg strings and create inputs feed_dict.\n\n  Parses '--inputs' string for inputs to be loaded from file, and parses\n  '--input_exprs' string for inputs to be evaluated from python expression.\n  '--input_examples' string for inputs to be created from tf.example feature\n  dictionary list.\n\n  Args:\n    inputs_str: A string that specified where to load inputs. Each input is\n        separated by semicolon.\n        * For each input key:\n            '<input_key>=<filename>' or\n            '<input_key>=<filename>[<variable_name>]'\n        * The optional 'variable_name' key will be set to None if not specified.\n        * File specified by 'filename' will be loaded using numpy.load. Inputs\n            can be loaded from only .npy, .npz or pickle files.\n        * The \"[variable_name]\" key is optional depending on the input file type\n            as descripted in more details below.\n        When loading from a npy file, which always contains a numpy ndarray, the\n        content will be directly assigned to the specified input tensor. If a\n        variable_name is specified, it will be ignored and a warning will be\n        issued.\n        When loading from a npz zip file, user can specify which variable within\n        the zip file to load for the input tensor inside the square brackets. If\n        nothing is specified, this function will check that only one file is\n        included in the zip and load it for the specified input tensor.\n        When loading from a pickle file, if no variable_name is specified in the\n        square brackets, whatever that is inside the pickle file will be passed\n        to the specified input tensor, else SavedModel CLI will assume a\n        dictionary is stored in the pickle file and the value corresponding to\n        the variable_name will be used.\n    input_exprs_str: A string that specifies python expressions for inputs.\n        * In the format of: '<input_key>=<python expression>'.\n        * numpy module is available as np.\n    input_examples_str: A string that specifies tf.Example with dictionary.\n        * In the format of: '<input_key>=<[{feature:value list}]>'\n\n  Returns:\n    A dictionary that maps input tensor keys to numpy ndarrays.\n\n  Raises:\n    RuntimeError: An error when a key is specified, but the input file contains\n        multiple numpy ndarrays, none of which matches the given key.\n    RuntimeError: An error when no key is specified, but the input file contains\n        more than one numpy ndarrays.\n  \"\"\"\n  tensor_key_feed_dict = {}\n\n  inputs = preprocess_inputs_arg_string(inputs_str)\n  input_exprs = preprocess_input_exprs_arg_string(input_exprs_str, safe=False)\n  input_examples = preprocess_input_examples_arg_string(input_examples_str)\n\n  for input_tensor_key, (filename, variable_name) in inputs.items():\n    data = np.load(file_io.FileIO(filename, mode='rb'), allow_pickle=True)  # pylint: disable=unexpected-keyword-arg\n\n    # When a variable_name key is specified for the input file\n    if variable_name:\n      # if file contains a single ndarray, ignore the input name\n      if isinstance(data, np.ndarray):\n        logging.warn(\n            'Input file %s contains a single ndarray. Name key \\\"%s\\\" ignored.'\n            % (filename, variable_name))\n        tensor_key_feed_dict[input_tensor_key] = data\n      else:\n        if variable_name in data:\n          tensor_key_feed_dict[input_tensor_key] = data[variable_name]\n        else:\n          raise RuntimeError(\n              'Input file %s does not contain variable with name \\\"%s\\\".' %\n              (filename, variable_name))\n    # When no key is specified for the input file.\n    else:\n      # Check if npz file only contains a single numpy ndarray.\n      if isinstance(data, np.lib.npyio.NpzFile):\n        variable_name_list = data.files\n        if len(variable_name_list) != 1:\n          raise RuntimeError(\n              'Input file %s contains more than one ndarrays. Please specify '\n              'the name of ndarray to use.' % filename)\n        tensor_key_feed_dict[input_tensor_key] = data[variable_name_list[0]]\n      else:\n        tensor_key_feed_dict[input_tensor_key] = data\n\n  # When input is a python expression:\n  for input_tensor_key, py_expr_evaluated in input_exprs.items():\n    if input_tensor_key in tensor_key_feed_dict:\n      logging.warn(\n          'input_key %s has been specified with both --inputs and --input_exprs'\n          ' options. Value in --input_exprs will be used.' % input_tensor_key)\n    tensor_key_feed_dict[input_tensor_key] = py_expr_evaluated\n\n  # When input is a tf.Example:\n  for input_tensor_key, example in input_examples.items():\n    if input_tensor_key in tensor_key_feed_dict:\n      logging.warn(\n          'input_key %s has been specified in multiple options. Value in '\n          '--input_examples will be used.' % input_tensor_key)\n    tensor_key_feed_dict[input_tensor_key] = example\n  return tensor_key_feed_dict\n\n\ndef show(args):\n  \"\"\"Function triggered by show command.\n\n  Args:\n    args: A namespace parsed from command line.\n  \"\"\"\n  # If all tag is specified, display all information.\n  if args.all:\n    _show_all(args.dir)\n  else:\n    # If no tag is specified, display all tag_set, if no signature_def key is\n    # specified, display all SignatureDef keys, else show input output tensor\n    # information corresponding to the given SignatureDef key\n    if args.tag_set is None:\n      _show_tag_sets(args.dir)\n    else:\n      if args.signature_def is None:\n        _show_signature_def_map_keys(args.dir, args.tag_set)\n      else:\n        _show_inputs_outputs(args.dir, args.tag_set, args.signature_def)\n\n\ndef run(args):\n  \"\"\"Function triggered by run command.\n\n  Args:\n    args: A namespace parsed from command line.\n\n  Raises:\n    AttributeError: An error when neither --inputs nor --input_exprs is passed\n    to run command.\n  \"\"\"\n  if not args.inputs and not args.input_exprs and not args.input_examples:\n    raise AttributeError(\n        'At least one of --inputs, --input_exprs or --input_examples must be '\n        'required')\n  tensor_key_feed_dict = load_inputs_from_input_arg_string(\n      args.inputs, args.input_exprs, args.input_examples)\n  run_saved_model_with_feed_dict(\n      args.dir,\n      args.tag_set,\n      args.signature_def,\n      tensor_key_feed_dict,\n      args.outdir,\n      args.overwrite,\n      worker=args.worker,\n      init_tpu=args.init_tpu,\n      use_tfrt=args.use_tfrt,\n      tf_debug=args.tf_debug)\n\n\ndef scan(args):\n  \"\"\"Function triggered by scan command.\n\n  Args:\n    args: A namespace parsed from command line.\n  \"\"\"\n  if args.tag_set:\n    scan_meta_graph_def(\n        saved_model_utils.get_meta_graph_def(args.dir, args.tag_set))\n  else:\n    saved_model = saved_model_utils.read_saved_model(args.dir)\n    for meta_graph_def in saved_model.meta_graphs:\n      scan_meta_graph_def(meta_graph_def)\n\n\ndef convert_with_tensorrt(args):\n  \"\"\"Function triggered by 'convert tensorrt' command.\n\n  Args:\n    args: A namespace parsed from command line.\n  \"\"\"\n  # Import here instead of at top, because this will crash if TensorRT is\n  # not installed\n  from tensorflow.python.compiler.tensorrt import trt_convert as trt  # pylint: disable=g-import-not-at-top\n\n  if not args.convert_tf1_model:\n    params = trt.DEFAULT_TRT_CONVERSION_PARAMS._replace(\n        max_workspace_size_bytes=args.max_workspace_size_bytes,\n        precision_mode=args.precision_mode,\n        minimum_segment_size=args.minimum_segment_size)\n    converter = trt.TrtGraphConverterV2(\n        input_saved_model_dir=args.dir,\n        input_saved_model_tags=args.tag_set.split(','),\n        **params._asdict())\n    try:\n      converter.convert()\n    except Exception as e:\n      raise RuntimeError(\n          '{}. Try passing \"--convert_tf1_model=True\".'.format(e))\n    converter.save(output_saved_model_dir=args.output_dir)\n  else:\n    trt.create_inference_graph(\n        None,\n        None,\n        max_batch_size=1,\n        max_workspace_size_bytes=args.max_workspace_size_bytes,\n        precision_mode=args.precision_mode,\n        minimum_segment_size=args.minimum_segment_size,\n        is_dynamic_op=True,\n        input_saved_model_dir=args.dir,\n        input_saved_model_tags=args.tag_set.split(','),\n        output_saved_model_dir=args.output_dir)\n\n\ndef freeze_model(args):\n  \"\"\"Function triggered by freeze_model command.\n\n  Args:\n    args: A namespace parsed from command line.\n  \"\"\"\n  checkpoint_path = (\n      args.checkpoint_path\n      or os.path.join(args.dir, 'variables/variables'))\n  if not args.variables_to_feed:\n    variables_to_feed = []\n  elif args.variables_to_feed.lower() == 'all':\n    variables_to_feed = None  # We will identify them after.\n  else:\n    variables_to_feed = args.variables_to_feed.split(',')\n\n  saved_model_aot_compile.freeze_model(\n      checkpoint_path=checkpoint_path,\n      meta_graph_def=saved_model_utils.get_meta_graph_def(\n          args.dir, args.tag_set),\n      signature_def_key=args.signature_def_key,\n      variables_to_feed=variables_to_feed,\n      output_prefix=args.output_prefix)\n\n\ndef aot_compile_cpu(args):\n  \"\"\"Function triggered by aot_compile_cpu command.\n\n  Args:\n    args: A namespace parsed from command line.\n  \"\"\"\n  checkpoint_path = (\n      args.checkpoint_path\n      or os.path.join(args.dir, 'variables/variables'))\n  if not args.variables_to_feed:\n    variables_to_feed = []\n  elif args.variables_to_feed.lower() == 'all':\n    variables_to_feed = None  # We will identify them after.\n  else:\n    variables_to_feed = args.variables_to_feed.split(',')\n\n  saved_model_aot_compile.aot_compile_cpu_meta_graph_def(\n      checkpoint_path=checkpoint_path,\n      meta_graph_def=saved_model_utils.get_meta_graph_def(\n          args.dir, args.tag_set),\n      signature_def_key=args.signature_def_key,\n      variables_to_feed=variables_to_feed,\n      output_prefix=args.output_prefix,\n      target_triple=args.target_triple,\n      target_cpu=args.target_cpu,\n      cpp_class=args.cpp_class,\n      multithreading=args.multithreading.lower() not in ('f', 'false', '0'))\n\n\ndef add_show_subparser(subparsers):\n  \"\"\"Add parser for `show`.\"\"\"\n  show_msg = (\n      'Usage examples:\\n'\n      'To show all tag-sets in a SavedModel:\\n'\n      '$saved_model_cli show --dir /tmp/saved_model\\n\\n'\n      'To show all available SignatureDef keys in a '\n      'MetaGraphDef specified by its tag-set:\\n'\n      '$saved_model_cli show --dir /tmp/saved_model --tag_set serve\\n\\n'\n      'For a MetaGraphDef with multiple tags in the tag-set, all tags must be '\n      'passed in, separated by \\';\\':\\n'\n      '$saved_model_cli show --dir /tmp/saved_model --tag_set serve,gpu\\n\\n'\n      'To show all inputs and outputs TensorInfo for a specific'\n      ' SignatureDef specified by the SignatureDef key in a'\n      ' MetaGraph.\\n'\n      '$saved_model_cli show --dir /tmp/saved_model --tag_set serve'\n      ' --signature_def serving_default\\n\\n'\n      'To show all available information in the SavedModel:\\n'\n      '$saved_model_cli show --dir /tmp/saved_model --all')\n  parser_show = subparsers.add_parser(\n      'show',\n      description=show_msg,\n      formatter_class=argparse.RawTextHelpFormatter)\n  parser_show.add_argument(\n      '--dir',\n      type=str,\n      required=True,\n      help='directory containing the SavedModel to inspect')\n  parser_show.add_argument(\n      '--all',\n      action='store_true',\n      help='if set, will output all information in given SavedModel')\n  parser_show.add_argument(\n      '--tag_set',\n      type=str,\n      default=None,\n      help='tag-set of graph in SavedModel to show, separated by \\',\\'')\n  parser_show.add_argument(\n      '--signature_def',\n      type=str,\n      default=None,\n      metavar='SIGNATURE_DEF_KEY',\n      help='key of SignatureDef to display input(s) and output(s) for')\n  parser_show.set_defaults(func=show)\n\n\ndef add_run_subparser(subparsers):\n  \"\"\"Add parser for `run`.\"\"\"\n  run_msg = ('Usage example:\\n'\n             'To run input tensors from files through a MetaGraphDef and save'\n             ' the output tensors to files:\\n'\n             '$saved_model_cli show --dir /tmp/saved_model --tag_set serve \\\\\\n'\n             '   --signature_def serving_default \\\\\\n'\n             '   --inputs input1_key=/tmp/124.npz[x],input2_key=/tmp/123.npy '\n             '\\\\\\n'\n             '   --input_exprs \\'input3_key=np.ones(2)\\' \\\\\\n'\n             '   --input_examples '\n             '\\'input4_key=[{\"id\":[26],\"weights\":[0.5, 0.5]}]\\' \\\\\\n'\n             '   --outdir=/out\\n\\n'\n             'For more information about input file format, please see:\\n'\n             'https://www.tensorflow.org/guide/saved_model_cli\\n')\n  parser_run = subparsers.add_parser(\n      'run', description=run_msg, formatter_class=argparse.RawTextHelpFormatter)\n  parser_run.add_argument(\n      '--dir',\n      type=str,\n      required=True,\n      help='directory containing the SavedModel to execute')\n  parser_run.add_argument(\n      '--tag_set',\n      type=str,\n      required=True,\n      help='tag-set of graph in SavedModel to load, separated by \\',\\'')\n  parser_run.add_argument(\n      '--signature_def',\n      type=str,\n      required=True,\n      metavar='SIGNATURE_DEF_KEY',\n      help='key of SignatureDef to run')\n  msg = ('Loading inputs from files, in the format of \\'<input_key>=<filename>,'\n         ' or \\'<input_key>=<filename>[<variable_name>]\\', separated by \\';\\'.'\n         ' The file format can only be from .npy, .npz or pickle.')\n  parser_run.add_argument('--inputs', type=str, default='', help=msg)\n  msg = ('Specifying inputs by python expressions, in the format of'\n         ' \"<input_key>=\\'<python expression>\\'\", separated by \\';\\'. '\n         'numpy module is available as \\'np\\'. Please note that the expression '\n         'will be evaluated as-is, and is susceptible to code injection. '\n         'When this is set, the value will override duplicate input keys from '\n         '--inputs option.')\n  parser_run.add_argument('--input_exprs', type=str, default='', help=msg)\n  msg = (\n      'Specifying tf.Example inputs as list of dictionaries. For example: '\n      '<input_key>=[{feature0:value_list,feature1:value_list}]. Use \";\" to '\n      'separate input keys. Will override duplicate input keys from --inputs '\n      'and --input_exprs option.')\n  parser_run.add_argument('--input_examples', type=str, default='', help=msg)\n  parser_run.add_argument(\n      '--outdir',\n      type=str,\n      default=None,\n      help='if specified, output tensor(s) will be saved to given directory')\n  parser_run.add_argument(\n      '--overwrite',\n      action='store_true',\n      help='if set, output file will be overwritten if it already exists.')\n  parser_run.add_argument(\n      '--tf_debug',\n      action='store_true',\n      help='if set, will use TensorFlow Debugger (tfdbg) to watch the '\n           'intermediate Tensors and runtime GraphDefs while running the '\n           'SavedModel.')\n  parser_run.add_argument(\n      '--worker',\n      type=str,\n      default=None,\n      help='if specified, a Session will be run on the worker. '\n           'Valid worker specification is a bns or gRPC path.')\n  parser_run.add_argument(\n      '--init_tpu',\n      action='store_true',\n      default=None,\n      help='if specified, tpu.initialize_system will be called on the Session. '\n           'This option should be only used if the worker is a TPU job.')\n  parser_run.add_argument(\n      '--use_tfrt',\n      action='store_true',\n      default=None,\n      help='if specified, TFRT session will be used, instead of TF1 session.')\n  parser_run.set_defaults(func=run)\n\n\ndef add_scan_subparser(subparsers):\n  \"\"\"Add parser for `scan`.\"\"\"\n  scan_msg = ('Usage example:\\n'\n              'To scan for denylisted ops in SavedModel:\\n'\n              '$saved_model_cli scan --dir /tmp/saved_model\\n'\n              'To scan a specific MetaGraph, pass in --tag_set\\n')\n  parser_scan = subparsers.add_parser(\n      'scan',\n      description=scan_msg,\n      formatter_class=argparse.RawTextHelpFormatter)\n  parser_scan.add_argument(\n      '--dir',\n      type=str,\n      required=True,\n      help='directory containing the SavedModel to execute')\n  parser_scan.add_argument(\n      '--tag_set',\n      type=str,\n      help='tag-set of graph in SavedModel to scan, separated by \\',\\'')\n  parser_scan.set_defaults(func=scan)\n\n\ndef add_convert_subparser(subparsers):\n  \"\"\"Add parser for `convert`.\"\"\"\n  convert_msg = ('Usage example:\\n'\n                 'To convert the SavedModel to one that have TensorRT ops:\\n'\n                 '$saved_model_cli convert \\\\\\n'\n                 '   --dir /tmp/saved_model \\\\\\n'\n                 '   --tag_set serve \\\\\\n'\n                 '   --output_dir /tmp/saved_model_trt \\\\\\n'\n                 '   tensorrt \\n')\n  parser_convert = subparsers.add_parser(\n      'convert',\n      description=convert_msg,\n      formatter_class=argparse.RawTextHelpFormatter)\n  parser_convert.add_argument(\n      '--dir',\n      type=str,\n      required=True,\n      help='directory containing the SavedModel to convert')\n  parser_convert.add_argument(\n      '--output_dir',\n      type=str,\n      required=True,\n      help='output directory for the converted SavedModel')\n  parser_convert.add_argument(\n      '--tag_set',\n      type=str,\n      required=True,\n      help='tag-set of graph in SavedModel to convert, separated by \\',\\'')\n  convert_subparsers = parser_convert.add_subparsers(\n      title='conversion methods',\n      description='valid conversion methods',\n      help='the conversion to run with the SavedModel')\n  parser_convert_with_tensorrt = convert_subparsers.add_parser(\n      'tensorrt',\n      description='Convert the SavedModel with Tensorflow-TensorRT integration',\n      formatter_class=argparse.RawTextHelpFormatter)\n  parser_convert_with_tensorrt.add_argument(\n      '--max_workspace_size_bytes',\n      type=int,\n      default=2 << 20,\n      help=('the maximum GPU temporary memory which the TRT engine can use at '\n            'execution time'))\n  parser_convert_with_tensorrt.add_argument(\n      '--precision_mode',\n      type=str,\n      default='FP32',\n      help='one of FP32, FP16 and INT8')\n  parser_convert_with_tensorrt.add_argument(\n      '--minimum_segment_size',\n      type=int,\n      default=3,\n      help=('the minimum number of nodes required for a subgraph to be replaced'\n            'in a TensorRT node'))\n  parser_convert_with_tensorrt.add_argument(\n      '--convert_tf1_model',\n      type=bool,\n      default=False,\n      help='support TRT conversion for TF1 models')\n  parser_convert_with_tensorrt.set_defaults(func=convert_with_tensorrt)\n\n\ndef _parse_common_freeze_and_aot(parser_compile):\n  \"\"\"Parse arguments shared by freeze model and aot_compile.\"\"\"\n  parser_compile.add_argument(\n      '--dir',\n      type=str,\n      required=True,\n      help='directory containing the SavedModel to convert')\n  parser_compile.add_argument(\n      '--output_prefix',\n      type=str,\n      required=True,\n      help=('output directory + filename prefix for the resulting header(s) '\n            'and object file(s)'))\n  parser_compile.add_argument(\n      '--tag_set',\n      type=str,\n      required=True,\n      help='tag-set of graph in SavedModel to convert, separated by \\',\\'')\n  parser_compile.add_argument(\n      '--signature_def_key',\n      type=str,\n      default=signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY,\n      help=('signature_def key to use.  '\n            'default: DEFAULT_SERVING_SIGNATURE_DEF_KEY'))\n  parser_compile.add_argument(\n      '--checkpoint_path',\n      type=str,\n      default=None,\n      help='Custom checkpoint to use (default: use the SavedModel variables)')\n  parser_compile.add_argument(\n      '--variables_to_feed',\n      type=str,\n      default='',\n      help=('The names of variables that will be fed into the network.  '\n            'Options are: empty (default; all variables are frozen, none may '\n            'be fed), \\'all\\' (all variables may be fed), or a '\n            'comma-delimited list of names of variables that may be fed.  In '\n            'the last case, the non-fed variables will be frozen in the graph.'\n            '**NOTE** Any variables passed to `variables_to_feed` *must be set '\n            'by the user*.  These variables will NOT be frozen and their '\n            'values will be uninitialized in the compiled object '\n            '(this applies to all input arguments from the signature as '\n            'well).'))\n\n\ndef add_freeze_model_subparser(subparsers):\n  \"\"\"Add parser for `freeze_model`.\"\"\"\n  compile_msg = '\\n'.join(\n      ['Usage example:',\n       'To freeze a SavedModel in preparation for tfcompile:',\n       '$saved_model_cli freeze_model \\\\',\n       '   --dir /tmp/saved_model \\\\',\n       '   --tag_set serve \\\\',\n       '   --output_prefix /tmp/saved_model_xla_aot',\n      ])\n\n  parser_compile = subparsers.add_parser(\n      'freeze_model',\n      description=compile_msg,\n      formatter_class=argparse.RawTextHelpFormatter)\n  _parse_common_freeze_and_aot(parser_compile)\n  parser_compile.set_defaults(func=freeze_model)\n\n\ndef add_aot_compile_cpu_subparser(subparsers):\n  \"\"\"Add parser for `aot_compile_cpu`.\"\"\"\n  compile_msg = '\\n'.join(\n      ['Usage example:',\n       'To compile a SavedModel signature via (CPU) XLA AOT:',\n       '$saved_model_cli aot_compile_cpu \\\\',\n       '   --dir /tmp/saved_model \\\\',\n       '   --tag_set serve \\\\',\n       '   --output_dir /tmp/saved_model_xla_aot',\n       '', '',\n       'Note: Additional XLA compilation options are available by setting the ',\n       'XLA_FLAGS environment variable.  See the XLA debug options flags for ',\n       'all the options: ',\n       '  {}'.format(_XLA_DEBUG_OPTIONS_URL),\n       '',\n       'For example, to disable XLA fast math when compiling:',\n       '',\n       'XLA_FLAGS=\"--xla_cpu_enable_fast_math=false\" $saved_model_cli '\n       'aot_compile_cpu ...',\n       '',\n       'Some possibly useful flags:',\n       '  --xla_cpu_enable_fast_math=false',\n       '  --xla_force_host_platform_device_count=<num threads>',\n       '    (useful in conjunction with disabling multi threading)'\n      ])\n\n  parser_compile = subparsers.add_parser(\n      'aot_compile_cpu',\n      description=compile_msg,\n      formatter_class=argparse.RawTextHelpFormatter)\n  _parse_common_freeze_and_aot(parser_compile)\n  parser_compile.add_argument(\n      '--target_triple',\n      type=str,\n      default='x86_64-pc-linux',\n      help=('Target triple for LLVM during AOT compilation.  Examples: '\n            'x86_64-none-darwin, x86_64-apple-ios, arm64-none-ios, '\n            'armv7-none-android.  More examples are available in tfcompile.bzl '\n            'in the tensorflow codebase.'))\n  parser_compile.add_argument(\n      '--target_cpu',\n      type=str,\n      default='',\n      help=('Target cpu name for LLVM during AOT compilation.  Examples: '\n            'x86_64, skylake, haswell, westmere, <empty> (unknown).  For '\n            'a complete list of options, run (for x86 targets): '\n            '`llc -march=x86 -mcpu=help`'))\n  parser_compile.add_argument(\n      '--cpp_class',\n      type=str,\n      required=True,\n      help=('The name of the generated C++ class, wrapping the generated '\n            'function.  The syntax of this flag is '\n            '[[<optional_namespace>::],...]<class_name>.  This mirrors the '\n            'C++ syntax for referring to a class, where multiple namespaces '\n            'may precede the class name, separated by double-colons.  '\n            'The class will be generated in the given namespace(s), or if no '\n            'namespaces are given, within the global namespace.'))\n  parser_compile.add_argument(\n      '--multithreading',\n      type=str,\n      default='False',\n      help=('Enable multithreading in the compiled computation.  '\n            'Note that if using this option, the resulting object files '\n            'may have external dependencies on multithreading libraries '\n            'like nsync.'))\n\n  parser_compile.set_defaults(func=aot_compile_cpu)\n\n\ndef create_parser():\n  \"\"\"Creates a parser that parse the command line arguments.\n\n  Returns:\n    A namespace parsed from command line arguments.\n  \"\"\"\n  parser = argparse.ArgumentParser(\n      description='saved_model_cli: Command-line interface for SavedModel')\n  parser.add_argument('-v', '--version', action='version', version='0.1.0')\n\n  subparsers = parser.add_subparsers(\n      title='commands', description='valid commands', help='additional help')\n\n  # show command\n  add_show_subparser(subparsers)\n\n  # run command\n  add_run_subparser(subparsers)\n\n  # scan command\n  add_scan_subparser(subparsers)\n\n  # tensorrt convert command\n  add_convert_subparser(subparsers)\n\n  # aot_compile_cpu command\n  add_aot_compile_cpu_subparser(subparsers)\n\n  # freeze_model command\n  add_freeze_model_subparser(subparsers)\n  return parser\n\n\ndef main():\n  logging.set_verbosity(logging.INFO)\n  parser = create_parser()\n  args = parser.parse_args()\n  if not hasattr(args, 'func'):\n    parser.error('too few arguments')\n  args.func(args)\n\n\nif __name__ == '__main__':\n  sys.exit(main())"