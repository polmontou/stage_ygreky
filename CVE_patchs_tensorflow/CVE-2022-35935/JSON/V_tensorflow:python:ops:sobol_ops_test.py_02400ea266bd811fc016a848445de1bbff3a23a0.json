"# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests Sobol sequence generator.\"\"\"\nimport numpy as np\n\nfrom tensorflow.python.eager import def_function\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import tensor_spec\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.platform import googletest\n\n\nclass SobolSampleOpTest(test_util.TensorFlowTestCase):\n\n  def test_basic(self):\n    for dtype in [np.float64, np.float32]:\n      expected = np.array([[.5, .5], [.75, .25], [.25, .75], [.375, .375]])\n      sample = self.evaluate(math_ops.sobol_sample(2, 4, dtype=dtype))\n      self.assertAllClose(expected, sample, 0.001)\n\n  def test_more_known_values(self):\n    for dtype in [np.float64, np.float32]:\n      sample = math_ops.sobol_sample(5, 31, dtype=dtype)\n      expected = [[0.50, 0.50, 0.50, 0.50, 0.50],\n                  [0.75, 0.25, 0.25, 0.25, 0.75],\n                  [0.25, 0.75, 0.75, 0.75, 0.25],\n                  [0.375, 0.375, 0.625, 0.875, 0.375],\n                  [0.875, 0.875, 0.125, 0.375, 0.875],\n                  [0.625, 0.125, 0.875, 0.625, 0.625],\n                  [0.125, 0.625, 0.375, 0.125, 0.125],\n                  [0.1875, 0.3125, 0.9375, 0.4375, 0.5625],\n                  [0.6875, 0.8125, 0.4375, 0.9375, 0.0625],\n                  [0.9375, 0.0625, 0.6875, 0.1875, 0.3125],\n                  [0.4375, 0.5625, 0.1875, 0.6875, 0.8125],\n                  [0.3125, 0.1875, 0.3125, 0.5625, 0.9375],\n                  [0.8125, 0.6875, 0.8125, 0.0625, 0.4375],\n                  [0.5625, 0.4375, 0.0625, 0.8125, 0.1875],\n                  [0.0625, 0.9375, 0.5625, 0.3125, 0.6875],\n                  [0.09375, 0.46875, 0.46875, 0.65625, 0.28125],\n                  [0.59375, 0.96875, 0.96875, 0.15625, 0.78125],\n                  [0.84375, 0.21875, 0.21875, 0.90625, 0.53125],\n                  [0.34375, 0.71875, 0.71875, 0.40625, 0.03125],\n                  [0.46875, 0.09375, 0.84375, 0.28125, 0.15625],\n                  [0.96875, 0.59375, 0.34375, 0.78125, 0.65625],\n                  [0.71875, 0.34375, 0.59375, 0.03125, 0.90625],\n                  [0.21875, 0.84375, 0.09375, 0.53125, 0.40625],\n                  [0.15625, 0.15625, 0.53125, 0.84375, 0.84375],\n                  [0.65625, 0.65625, 0.03125, 0.34375, 0.34375],\n                  [0.90625, 0.40625, 0.78125, 0.59375, 0.09375],\n                  [0.40625, 0.90625, 0.28125, 0.09375, 0.59375],\n                  [0.28125, 0.28125, 0.15625, 0.21875, 0.71875],\n                  [0.78125, 0.78125, 0.65625, 0.71875, 0.21875],\n                  [0.53125, 0.03125, 0.40625, 0.46875, 0.46875],\n                  [0.03125, 0.53125, 0.90625, 0.96875, 0.96875]]\n      self.assertAllClose(expected, self.evaluate(sample), .001)\n\n  def test_skip(self):\n    dim = 10\n    n = 50\n    skip = 17\n    for dtype in [np.float64, np.float32]:\n      sample_noskip = math_ops.sobol_sample(dim, n + skip, dtype=dtype)\n      sample_skip = math_ops.sobol_sample(dim, n, skip, dtype=dtype)\n\n      self.assertAllClose(\n          self.evaluate(sample_noskip)[skip:, :], self.evaluate(sample_skip))\n\n  def test_static_shape(self):\n    s = math_ops.sobol_sample(10, 100, dtype=np.float32)\n    self.assertAllEqual([100, 10], s.shape.as_list())\n\n  def test_static_shape_using_placeholder_for_dim(self):\n\n    @def_function.function(\n        input_signature=[tensor_spec.TensorSpec(shape=[], dtype=dtypes.int32)])\n    def f(dim):\n      s = math_ops.sobol_sample(dim, 100, dtype=dtypes.float32)\n      assert s.shape.as_list() == [100, None]\n      return s\n\n    self.assertAllEqual([100, 10], self.evaluate(f(10)).shape)\n\n  def test_static_shape_using_placeholder_for_num_results(self):\n\n    @def_function.function(\n        input_signature=[tensor_spec.TensorSpec(shape=[], dtype=dtypes.int32)])\n    def f(num_results):\n      s = math_ops.sobol_sample(10, num_results, dtype=dtypes.float32)\n      assert s.shape.as_list() == [None, 10]\n      return s\n\n    self.assertAllEqual([100, 10], self.evaluate(f(100)).shape)\n\n  def test_static_shape_using_only_placeholders(self):\n\n    @def_function.function(\n        input_signature=[tensor_spec.TensorSpec(shape=[], dtype=dtypes.int32)] *\n        2)\n    def f(dim, num_results):\n      s = math_ops.sobol_sample(dim, num_results, dtype=dtypes.float32)\n      assert s.shape.as_list() == [None, None]\n      return s\n\n    self.assertAllEqual([100, 10], self.evaluate(f(10, 100)).shape)\n\n  def test_dynamic_shape(self):\n    s = math_ops.sobol_sample(10, 100, dtype=dtypes.float32)\n    self.assertAllEqual([100, 10], self.evaluate(s).shape)\n\n  def test_default_dtype(self):\n    # Create an op without specifying the dtype. Dtype should be float32 in\n    # this case.\n    s = math_ops.sobol_sample(10, 100)\n    self.assertEqual(dtypes.float32, s.dtype)\n\nif __name__ == '__main__':\n  googletest.main()"