"diff --git a/tensorflow/lite/kernels/gather_nd.cc b/tensorflow/lite/kernels/gather_nd.cc\nindex 9796028f859..dbe1ddb9ed3 100644\n--- a/tensorflow/lite/kernels/gather_nd.cc\n+++ b/tensorflow/lite/kernels/gather_nd.cc\n@@ -14,6 +14,7 @@ limitations under the License.\n ==============================================================================*/\n #include <stdint.h>\n \n+#include \"tensorflow/lite/c/c_api_types.h\"\n #include \"tensorflow/lite/c/common.h\"\n #include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n #include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n@@ -102,13 +103,16 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n }\n \n template <typename ParamsT, typename IndicesT>\n-TfLiteStatus GatherNd(const TfLiteTensor* params, const TfLiteTensor* indices,\n-                      TfLiteTensor* output) {\n-  reference_ops::GatherNd(\n+TfLiteStatus GatherNd(TfLiteContext* context, const TfLiteTensor* params,\n+                      const TfLiteTensor* indices, TfLiteTensor* output) {\n+  const TfLiteStatus status = reference_ops::GatherNd(\n       GetTensorShape(params), GetTensorData<ParamsT>(params),\n       GetTensorShape(indices), GetTensorData<IndicesT>(indices),\n       GetTensorShape(output), GetTensorData<ParamsT>(output));\n-  return kTfLiteOk;\n+  if (status != kTfLiteOk) {\n+    TF_LITE_KERNEL_LOG(context, \"gather_nd index out of bounds\");\n+  }\n+  return status;\n }\n \n template <typename IndicesT>\n@@ -136,17 +140,17 @@ TfLiteStatus EvalGatherNd(TfLiteContext* context, const TfLiteTensor* params,\n \n   switch (params->type) {\n     case kTfLiteFloat32:\n-      return GatherNd<float, IndicesT>(params, indices, output);\n+      return GatherNd<float, IndicesT>(context, params, indices, output);\n     case kTfLiteUInt8:\n-      return GatherNd<uint8_t, IndicesT>(params, indices, output);\n+      return GatherNd<uint8_t, IndicesT>(context, params, indices, output);\n     case kTfLiteInt8:\n-      return GatherNd<int8_t, IndicesT>(params, indices, output);\n+      return GatherNd<int8_t, IndicesT>(context, params, indices, output);\n     case kTfLiteInt16:\n-      return GatherNd<int16_t, IndicesT>(params, indices, output);\n+      return GatherNd<int16_t, IndicesT>(context, params, indices, output);\n     case kTfLiteInt32:\n-      return GatherNd<int32_t, IndicesT>(params, indices, output);\n+      return GatherNd<int32_t, IndicesT>(context, params, indices, output);\n     case kTfLiteInt64:\n-      return GatherNd<int64_t, IndicesT>(params, indices, output);\n+      return GatherNd<int64_t, IndicesT>(context, params, indices, output);\n     case kTfLiteString:\n       return GatherNdString<IndicesT>(params, indices, output);\n     default:"