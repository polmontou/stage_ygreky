"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace gather_nd {\nconstexpr int kParams = 0;\nconstexpr int kIndices = 1;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* params;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kParams, &params));\n  const TfLiteTensor* indices;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kIndices, &indices));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  switch (params->type) {\n    case kTfLiteFloat32:\n    case kTfLiteUInt8:\n    case kTfLiteInt8:\n    case kTfLiteInt16:\n    case kTfLiteInt64:\n    case kTfLiteInt32:\n    case kTfLiteString:\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context,\n                         \"Params of type '%s' are not supported by gather_nd.\",\n                         TfLiteTypeGetName(params->type));\n      return kTfLiteError;\n  }\n  switch (indices->type) {\n    case kTfLiteInt64:\n    case kTfLiteInt32:\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context,\n                         \"Indices of type '%s' are not supported by gather_nd.\",\n                         TfLiteTypeGetName(indices->type));\n      return kTfLiteError;\n  }\n\n  const int params_rank = NumDimensions(params);\n  const int indices_rank = NumDimensions(indices);\n  const int indices_nd = SizeOfDimension(indices, indices_rank - 1);\n  if (params_rank < 1) {\n    TF_LITE_KERNEL_LOG(context, \"Params must be at least a vector.\");\n    return kTfLiteError;\n  }\n  if (indices_rank < 1) {\n    TF_LITE_KERNEL_LOG(context, \"Indices must be at least a vector.\");\n    return kTfLiteError;\n  }\n  if (indices_nd > params_rank) {\n    TF_LITE_KERNEL_LOG(\n        context, \"Index innermost dimension length must be <= params rank.\");\n    return kTfLiteError;\n  }\n\n  // Assign to output the input type.\n  output->type = params->type;\n\n  // The result shape is\n  // indices.shape[:-1] + params.shape[indices.shape[-1]:]\n  const int output_rank = indices_rank + params_rank - indices_nd - 1;\n  TfLiteIntArray* output_shape = TfLiteIntArrayCreate(output_rank);\n  int output_index = 0;\n  for (int i = 0; i < indices_rank - 1; ++i) {\n    output_shape->data[output_index++] = indices->dims->data[i];\n  }\n  for (int i = indices_nd; i < params_rank; ++i) {\n    output_shape->data[output_index++] = params->dims->data[i];\n  }\n  return context->ResizeTensor(context, output, output_shape);\n}\n\ntemplate <typename ParamsT, typename IndicesT>\nTfLiteStatus GatherNd(const TfLiteTensor* params, const TfLiteTensor* indices,\n                      TfLiteTensor* output) {\n  reference_ops::GatherNd(\n      GetTensorShape(params), GetTensorData<ParamsT>(params),\n      GetTensorShape(indices), GetTensorData<IndicesT>(indices),\n      GetTensorShape(output), GetTensorData<ParamsT>(output));\n  return kTfLiteOk;\n}\n\ntemplate <typename IndicesT>\nTfLiteStatus GatherNdString(const TfLiteTensor* params,\n                            const TfLiteTensor* indices, TfLiteTensor* output) {\n  reference_ops::GatherNdString(\n      GetTensorShape(params), params, GetTensorShape(indices),\n      GetTensorData<IndicesT>(indices), GetTensorShape(output), output);\n  return kTfLiteOk;\n}\n\ntemplate <typename IndicesT>\nTfLiteStatus EvalGatherNd(TfLiteContext* context, const TfLiteTensor* params,\n                          const TfLiteTensor* indices, TfLiteTensor* output) {\n  bool indices_has_only_positive_elements = true;\n  const auto* indices_values = GetTensorData<IndicesT>(indices);\n  const size_t num_indices = indices->bytes / sizeof(IndicesT);\n  for (size_t i = 0; i < num_indices; i++) {\n    if (indices_values[i] < 0) {\n      indices_has_only_positive_elements = false;\n      break;\n    }\n  }\n  TF_LITE_ENSURE(context, indices_has_only_positive_elements);\n\n  switch (params->type) {\n    case kTfLiteFloat32:\n      return GatherNd<float, IndicesT>(params, indices, output);\n    case kTfLiteUInt8:\n      return GatherNd<uint8_t, IndicesT>(params, indices, output);\n    case kTfLiteInt8:\n      return GatherNd<int8_t, IndicesT>(params, indices, output);\n    case kTfLiteInt16:\n      return GatherNd<int16_t, IndicesT>(params, indices, output);\n    case kTfLiteInt32:\n      return GatherNd<int32_t, IndicesT>(params, indices, output);\n    case kTfLiteInt64:\n      return GatherNd<int64_t, IndicesT>(params, indices, output);\n    case kTfLiteString:\n      return GatherNdString<IndicesT>(params, indices, output);\n    default:\n      TF_LITE_KERNEL_LOG(context,\n                         \"Params type '%s' are not supported by gather_nd.\",\n                         TfLiteTypeGetName(params->type));\n      return kTfLiteError;\n  }\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* params;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kParams, &params));\n  const TfLiteTensor* indices;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kIndices, &indices));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  // Prevent division by 0 in the helper.\n  // In TF, GatherND supports empty `params` only when `indices` is also empty.\n  TF_LITE_ENSURE(context,\n                 (NumElements(params) == 0 && NumElements(indices) == 0) ||\n                     NumElements(params) > 0);\n\n  switch (indices->type) {\n    case kTfLiteInt32:\n      return EvalGatherNd<int32_t>(context, params, indices, output);\n    case kTfLiteInt64:\n      return EvalGatherNd<int64_t>(context, params, indices, output);\n    default:\n      TF_LITE_KERNEL_LOG(context,\n                         \"Indices of type '%s' are not supported by gather_nd.\",\n                         TfLiteTypeGetName(indices->type));\n      return kTfLiteError;\n  }\n}\n}  // namespace gather_nd\n\nTfLiteRegistration* Register_GATHER_ND() {\n  static TfLiteRegistration r = {/*init*/ nullptr, /*free*/ nullptr,\n                                 gather_nd::Prepare, gather_nd::Eval};\n  return &r;\n}\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite"