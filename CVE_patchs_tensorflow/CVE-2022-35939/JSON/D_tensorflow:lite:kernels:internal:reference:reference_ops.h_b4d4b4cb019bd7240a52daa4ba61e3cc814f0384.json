"diff --git a/tensorflow/lite/kernels/internal/reference/reference_ops.h b/tensorflow/lite/kernels/internal/reference/reference_ops.h\nindex 52d3814a054..0a7b202f28a 100644\n--- a/tensorflow/lite/kernels/internal/reference/reference_ops.h\n+++ b/tensorflow/lite/kernels/internal/reference/reference_ops.h\n@@ -656,11 +656,12 @@ inline TfLiteStatus GatherNdString(const RuntimeShape& params_shape,\n #endif\n \n template <typename IndicesT, typename UpdatesT>\n-inline void ScatterNd(const RuntimeShape& indices_shape,\n-                      const IndicesT* indices_data,\n-                      const RuntimeShape& updates_shape,\n-                      const UpdatesT* updates_data,\n-                      const RuntimeShape& output_shape, UpdatesT* output_data) {\n+inline TfLiteStatus ScatterNd(const RuntimeShape& indices_shape,\n+                              const IndicesT* indices_data,\n+                              const RuntimeShape& updates_shape,\n+                              const UpdatesT* updates_data,\n+                              const RuntimeShape& output_shape,\n+                              UpdatesT* output_data) {\n   ruy::profiler::ScopeLabel label(\"ScatterNd\");\n \n   int n_slices = 1;\n@@ -683,18 +684,24 @@ inline void ScatterNd(const RuntimeShape& indices_shape,\n     remain_flat_size = dims_to_count[i];\n   }\n \n+  if (n_slices * slice_size > updates_shape.FlatSize()) {\n+    return kTfLiteError;\n+  }\n   memset(output_data, 0, sizeof(UpdatesT) * output_flat_size);\n   for (int i = 0; i < n_slices; ++i) {\n     int to_pos = 0;\n     for (int j = 0; j < indices_nd; ++j) {\n       IndicesT idx = indices_data[i * indices_nd + j];\n-      TFLITE_DCHECK(0 <= idx && idx < output_shape.Dims(j));\n       to_pos += idx * dims_to_count[j];\n     }\n+    if (to_pos < 0 || to_pos + slice_size > output_flat_size) {\n+      return kTfLiteError;\n+    }\n     for (int j = 0; j < slice_size; j++) {\n       output_data[to_pos + j] += updates_data[i * slice_size + j];\n     }\n   }\n+  return kTfLiteOk;\n }\n \n template <typename T>"