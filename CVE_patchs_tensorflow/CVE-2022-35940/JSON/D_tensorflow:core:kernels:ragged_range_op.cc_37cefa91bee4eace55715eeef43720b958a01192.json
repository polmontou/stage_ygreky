"diff --git a/tensorflow/core/kernels/ragged_range_op.cc b/tensorflow/core/kernels/ragged_range_op.cc\nindex 066e5d638bb..469ef06b4b3 100644\n--- a/tensorflow/core/kernels/ragged_range_op.cc\n+++ b/tensorflow/core/kernels/ragged_range_op.cc\n@@ -12,6 +12,7 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================*/\n+#include <cstdint>\n #include <limits>\n #include <memory>\n #include <string>\n@@ -78,8 +79,25 @@ class RaggedRangeOp : public OpKernel {\n       T limit = broadcast_limits ? limits(0) : limits(row);\n       T delta = broadcast_deltas ? deltas(0) : deltas(row);\n       OP_REQUIRES(context, delta != 0, InvalidArgument(\"Requires delta != 0\"));\n-      rt_nested_splits(row + 1) =\n-          rt_nested_splits(row) + RangeSize(start, limit, delta);\n+      int64_t size;  // The number of elements in the specified range.\n+      if (((delta > 0) && (limit < start)) ||\n+          ((delta < 0) && (limit > start))) {\n+        size = 0;\n+      } else if (std::is_integral<T>::value) {\n+        // The following is copied from tensorflow::RangeOp::Compute().\n+        size = Eigen::divup(Eigen::numext::abs(limit - start),\n+                            Eigen::numext::abs(delta));\n+      } else {\n+        // The following is copied from tensorflow::RangeOp::Compute().\n+        auto size_auto =\n+            Eigen::numext::ceil(Eigen::numext::abs((limit - start) / delta));\n+        OP_REQUIRES(\n+            context, size_auto <= std::numeric_limits<int64_t>::max(),\n+            errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",\n+                                    std::numeric_limits<int64_t>::max()));\n+        size = static_cast<int64_t>(size_auto);\n+      }\n+      rt_nested_splits(row + 1) = rt_nested_splits(row) + size;\n     }\n     SPLITS_TYPE nvals = rt_nested_splits(nrows);\n \n@@ -99,19 +117,6 @@ class RaggedRangeOp : public OpKernel {\n       }\n     }\n   }\n-\n- private:\n-  // Returns the number of elements in the specified range.\n-  SPLITS_TYPE RangeSize(T start, T limit, T delta) {\n-    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n-      return 0;\n-    }\n-    // The following is copied from tensorflow::RangeOp::Compute().\n-    return (std::is_integral<T>::value\n-                ? ((std::abs(limit - start) + std::abs(delta) - 1) /\n-                   std::abs(delta))\n-                : std::ceil(std::abs((limit - start) / delta)));\n-  }\n };\n \n #define REGISTER_CPU_KERNEL(TYPE)                                  \\"