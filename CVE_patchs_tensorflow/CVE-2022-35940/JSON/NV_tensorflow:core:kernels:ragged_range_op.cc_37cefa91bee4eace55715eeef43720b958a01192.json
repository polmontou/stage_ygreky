"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <cstdint>\n#include <limits>\n#include <memory>\n#include <string>\n#include <vector>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n\nnamespace tensorflow {\n\nusing errors::InvalidArgument;\n\ntemplate <typename T, typename SPLITS_TYPE>\nclass RaggedRangeOp : public OpKernel {\n public:\n  using OpKernel::OpKernel;\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& starts_in = context->input(0);\n    const Tensor& limits_in = context->input(1);\n    const Tensor& deltas_in = context->input(2);\n\n    // Check input tensor shapes.\n    OP_REQUIRES(context, starts_in.shape().dims() <= 1,\n                InvalidArgument(\"starts must be a scalar or vector\"));\n    OP_REQUIRES(context, limits_in.shape().dims() <= 1,\n                InvalidArgument(\"limits must be a scalar or vector\"));\n    OP_REQUIRES(context, deltas_in.shape().dims() <= 1,\n                InvalidArgument(\"deltas must be a scalar or vector\"));\n\n    // Determine which tensors we need to broadcast.\n    bool broadcast_starts = starts_in.shape().dims() == 0;\n    bool broadcast_limits = limits_in.shape().dims() == 0;\n    bool broadcast_deltas = deltas_in.shape().dims() == 0;\n\n    // nrows (number of output rows) is the size of the non-broadcast inputs,\n    // or 1 if all inputs are scalars.\n    std::vector<int> in_sizes;\n    if (!broadcast_starts) in_sizes.push_back(starts_in.shape().dim_size(0));\n    if (!broadcast_limits) in_sizes.push_back(limits_in.shape().dim_size(0));\n    if (!broadcast_deltas) in_sizes.push_back(deltas_in.shape().dim_size(0));\n    for (int i = 1; i < in_sizes.size(); ++i) {\n      OP_REQUIRES(context, in_sizes[i] == in_sizes[i - 1],\n                  InvalidArgument(\"starts, limits, and deltas must have the \"\n                                  \"same shape\"));\n    }\n    SPLITS_TYPE nrows = in_sizes.empty() ? 1 : in_sizes[0];\n\n    const auto& starts = starts_in.flat<T>();\n    const auto& limits = limits_in.flat<T>();\n    const auto& deltas = deltas_in.flat<T>();\n\n    // Construct the rt_nested_splits tensor.\n    Tensor* rt_nested_splits_out = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, TensorShape({nrows + 1}),\n                                            &rt_nested_splits_out));\n    auto rt_nested_splits = rt_nested_splits_out->flat<SPLITS_TYPE>();\n    rt_nested_splits(0) = 0;\n    for (int row = 0; row < nrows; ++row) {\n      T start = broadcast_starts ? starts(0) : starts(row);\n      T limit = broadcast_limits ? limits(0) : limits(row);\n      T delta = broadcast_deltas ? deltas(0) : deltas(row);\n      OP_REQUIRES(context, delta != 0, InvalidArgument(\"Requires delta != 0\"));\n      int64_t size;  // The number of elements in the specified range.\n      if (((delta > 0) && (limit < start)) ||\n          ((delta < 0) && (limit > start))) {\n        size = 0;\n      } else if (std::is_integral<T>::value) {\n        // The following is copied from tensorflow::RangeOp::Compute().\n        size = Eigen::divup(Eigen::numext::abs(limit - start),\n                            Eigen::numext::abs(delta));\n      } else {\n        // The following is copied from tensorflow::RangeOp::Compute().\n        auto size_auto =\n            Eigen::numext::ceil(Eigen::numext::abs((limit - start) / delta));\n        OP_REQUIRES(\n            context, size_auto <= std::numeric_limits<int64_t>::max(),\n            errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",\n                                    std::numeric_limits<int64_t>::max()));\n        size = static_cast<int64_t>(size_auto);\n      }\n      rt_nested_splits(row + 1) = rt_nested_splits(row) + size;\n    }\n    SPLITS_TYPE nvals = rt_nested_splits(nrows);\n\n    // Construct the rt_dense_values tensor.\n    Tensor* rt_dense_values_out = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(1, TensorShape({nvals}),\n                                                     &rt_dense_values_out));\n    auto rt_dense_values = rt_dense_values_out->flat<T>();\n    int value_index = 0;\n    for (int row = 0; row < nrows; ++row) {\n      SPLITS_TYPE row_size = rt_nested_splits(row + 1) - rt_nested_splits(row);\n      T value = broadcast_starts ? starts(0) : starts(row);\n      T delta = broadcast_deltas ? deltas(0) : deltas(row);\n      for (SPLITS_TYPE i = 0; i < row_size; ++i) {\n        rt_dense_values(value_index++) = T(value);\n        value += delta;\n      }\n    }\n  }\n};\n\n#define REGISTER_CPU_KERNEL(TYPE)                                  \\\n  REGISTER_KERNEL_BUILDER(Name(\"RaggedRange\")                      \\\n                              .Device(DEVICE_CPU)                  \\\n                              .TypeConstraint<TYPE>(\"T\")           \\\n                              .TypeConstraint<int32>(\"Tsplits\"),   \\\n                          RaggedRangeOp<TYPE, int32>);             \\\n  REGISTER_KERNEL_BUILDER(Name(\"RaggedRange\")                      \\\n                              .Device(DEVICE_CPU)                  \\\n                              .TypeConstraint<TYPE>(\"T\")           \\\n                              .TypeConstraint<int64_t>(\"Tsplits\"), \\\n                          RaggedRangeOp<TYPE, int64>);\nTF_CALL_float(REGISTER_CPU_KERNEL);\nTF_CALL_double(REGISTER_CPU_KERNEL);\nTF_CALL_int32(REGISTER_CPU_KERNEL);\nTF_CALL_int64(REGISTER_CPU_KERNEL);\n#undef REGISTER_CPU_KERNEL\n\n}  // namespace tensorflow"