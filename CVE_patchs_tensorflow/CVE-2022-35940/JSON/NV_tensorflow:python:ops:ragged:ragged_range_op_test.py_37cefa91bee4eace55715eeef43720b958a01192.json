"# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for ragged_range op.\"\"\"\n\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops.ragged import ragged_math_ops\nfrom tensorflow.python.platform import googletest\n\n\n@test_util.run_all_in_graph_and_eager_modes\nclass RaggedRangeOpTest(test_util.TensorFlowTestCase):\n\n  def testDocStringExamples(self):\n    \"\"\"Examples from ragged_range.__doc__.\"\"\"\n    rt1 = ragged_math_ops.range([3, 5, 2])\n    self.assertAllEqual(rt1, [[0, 1, 2], [0, 1, 2, 3, 4], [0, 1]])\n\n    rt2 = ragged_math_ops.range([0, 5, 8], [3, 3, 12])\n    self.assertAllEqual(rt2, [[0, 1, 2], [], [8, 9, 10, 11]])\n\n    rt3 = ragged_math_ops.range([0, 5, 8], [3, 3, 12], 2)\n    self.assertAllEqual(rt3, [[0, 2], [], [8, 10]])\n\n  def testBasicRanges(self):\n    # Specify limits only.\n    self.assertAllEqual(\n        ragged_math_ops.range([0, 3, 5]),\n        [list(range(0)), list(range(3)),\n         list(range(5))])\n\n    # Specify starts and limits.\n    self.assertAllEqual(\n        ragged_math_ops.range([0, 3, 5], [2, 3, 10]),\n        [list(range(0, 2)),\n         list(range(3, 3)),\n         list(range(5, 10))])\n\n    # Specify starts, limits, and deltas.\n    self.assertAllEqual(\n        ragged_math_ops.range([0, 3, 5], [4, 4, 15], [2, 3, 4]),\n        [list(range(0, 4, 2)),\n         list(range(3, 4, 3)),\n         list(range(5, 15, 4))])\n\n  def testFloatRanges(self):\n    expected = [[0.0, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2, 3.6], [3.0],\n                [5.0, 7.2, 9.4, 11.6, 13.8]]\n    actual = ragged_math_ops.range([0.0, 3.0, 5.0], [3.9, 4.0, 15.0],\n                                   [0.4, 1.5, 2.2])\n    self.assertAllClose(actual, expected)\n\n  def testNegativeDeltas(self):\n    self.assertAllEqual(\n        ragged_math_ops.range([0, 3, 5], limits=0, deltas=-1),\n        [list(range(0, 0, -1)),\n         list(range(3, 0, -1)),\n         list(range(5, 0, -1))])\n\n    self.assertAllEqual(\n        ragged_math_ops.range([0, -3, 5], limits=0, deltas=[-1, 1, -2]),\n        [list(range(0, 0, -1)),\n         list(range(-3, 0, 1)),\n         list(range(5, 0, -2))])\n\n  def testBroadcast(self):\n    # Specify starts and limits, broadcast deltas.\n    self.assertAllEqual(\n        ragged_math_ops.range([0, 3, 5], [4, 4, 15], 3),\n        [list(range(0, 4, 3)),\n         list(range(3, 4, 3)),\n         list(range(5, 15, 3))])\n\n    # Broadcast all arguments.\n    self.assertAllEqual(ragged_math_ops.range(0, 5, 1), [list(range(0, 5, 1))])\n\n  def testEmptyRanges(self):\n    rt1 = ragged_math_ops.range([0, 5, 3], [0, 3, 5])\n    rt2 = ragged_math_ops.range([0, 5, 5], [0, 3, 5], -1)\n    self.assertAllEqual(rt1, [[], [], [3, 4]])\n    self.assertAllEqual(rt2, [[], [5, 4], []])\n\n  def testShapeFnErrors(self):\n    self.assertRaises((ValueError, errors.InvalidArgumentError),\n                      ragged_math_ops.range, [[0]], 5)\n    self.assertRaises((ValueError, errors.InvalidArgumentError),\n                      ragged_math_ops.range, 0, [[5]])\n    self.assertRaises((ValueError, errors.InvalidArgumentError),\n                      ragged_math_ops.range, 0, 5, [[0]])\n    self.assertRaises((ValueError, errors.InvalidArgumentError),\n                      ragged_math_ops.range, [0], [1, 2])\n\n  def testKernelErrors(self):\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                r'Requires delta != 0'):\n      self.evaluate(ragged_math_ops.range(0, 0, 0))\n\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                r'Requires \\(\\(limit - start\\) / delta\\) <='):\n      self.evaluate(ragged_math_ops.range(0.1, 1e10, 1e-10))\n\n  def testShape(self):\n    self.assertAllEqual(\n        ragged_math_ops.range(0, 0, 1).shape.as_list(), [1, None])\n    self.assertAllEqual(\n        ragged_math_ops.range([1, 2, 3]).shape.as_list(), [3, None])\n    self.assertAllEqual(\n        ragged_math_ops.range([1, 2, 3], [4, 5, 6]).shape.as_list(), [3, None])\n\n\nif __name__ == '__main__':\n  googletest.main()"