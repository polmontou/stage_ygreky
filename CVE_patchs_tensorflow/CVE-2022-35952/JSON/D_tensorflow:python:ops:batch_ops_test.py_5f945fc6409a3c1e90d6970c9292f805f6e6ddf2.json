"diff --git a/tensorflow/python/ops/batch_ops_test.py b/tensorflow/python/ops/batch_ops_test.py\nindex 7ef5e06fb67..8fae09a7911 100644\n--- a/tensorflow/python/ops/batch_ops_test.py\n+++ b/tensorflow/python/ops/batch_ops_test.py\n@@ -20,7 +20,9 @@ import numpy as np\n \n from tensorflow.core.protobuf import config_pb2\n from tensorflow.python.eager import context\n+from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors\n from tensorflow.python.framework import function\n from tensorflow.python.framework import ops\n from tensorflow.python.framework import test_util\n@@ -30,6 +32,7 @@ from tensorflow.python.ops import batch_ops\n from tensorflow.python.ops import gen_batch_ops\n from tensorflow.python.ops import gen_functional_ops\n from tensorflow.python.ops import math_ops\n+from tensorflow.python.ops import random_ops\n from tensorflow.python.ops import resource_variable_ops\n from tensorflow.python.ops import script_ops\n from tensorflow.python.ops import variables\n@@ -557,6 +560,56 @@ class BatchOpsTest(test.TestCase):\n       # The thread's call should hit the timeout, and thus get 0 results.\n       self.assertEqual(len(thread_results), 0)\n \n+  def testUnbatchGradInvalidId(self):\n+    with self.assertRaises(errors.InvalidArgumentError):\n+      self.evaluate(\n+          gen_batch_ops.unbatch_grad(\n+              original_input=constant_op.constant([1]),\n+              batch_index=constant_op.constant([\n+                  [0, 0, 0],\n+              ], dtype=dtypes.int64),\n+              grad=constant_op.constant([\n+                  1,\n+              ]),\n+              id=constant_op.constant([\n+                  1,\n+                  1,\n+              ], dtype=dtypes.int64)))\n+\n+  def testUnbatchGradInvalidBatchId(self):\n+    with self.assertRaises(errors.InvalidArgumentError):\n+      self.evaluate(\n+          gen_batch_ops.unbatch_grad(\n+              original_input=constant_op.constant([1]),\n+              batch_index=constant_op.constant([\n+                  [0, 0],\n+              ], dtype=dtypes.int64),\n+              grad=constant_op.constant([\n+                  1,\n+              ]),\n+              id=constant_op.constant([\n+                  1,\n+              ], dtype=dtypes.int64)))\n+\n+  def testUnbatchGradInvalidArgs(self):\n+    original_input = random_ops.random_uniform(\n+        shape=(3, 1), dtype=dtypes.float64, maxval=None)\n+    batch_index = random_ops.random_uniform(\n+        shape=(3, 1), dtype=dtypes.int64, maxval=65536)\n+    grad = random_ops.random_uniform(\n+        shape=(3, 1), dtype=dtypes.float64, maxval=None)\n+    batch_id = random_ops.random_uniform(\n+        shape=(3, 1), dtype=dtypes.int64, maxval=65536)\n+    with self.assertRaises(errors.InvalidArgumentError):\n+      self.evaluate(\n+          gen_batch_ops.unbatch_grad(\n+              original_input=original_input,\n+              batch_index=batch_index,\n+              grad=grad,\n+              id=batch_id,\n+              container=\"\",\n+              shared_name=\"\",\n+              name=\"\"))\n \n if __name__ == \"__main__\":\n   test.main()"