"diff --git a/tensorflow/compiler/tf2xla/xla_op_kernel.cc b/tensorflow/compiler/tf2xla/xla_op_kernel.cc\nindex 3d70377d206..4d30d25aa07 100644\n--- a/tensorflow/compiler/tf2xla/xla_op_kernel.cc\n+++ b/tensorflow/compiler/tf2xla/xla_op_kernel.cc\n@@ -30,6 +30,7 @@ limitations under the License.\n #include \"tensorflow/compiler/xla/status_macros.h\"\n #include \"tensorflow/core/common_runtime/dma_helper.h\"\n #include \"tensorflow/core/platform/errors.h\"\n+#include \"tensorflow/core/util/overflow.h\"\n \n namespace tensorflow {\n \n@@ -443,6 +444,16 @@ Status XlaOpKernelContext::ConstantInputAsShape(int index, TensorShape* shape,\n   TF_RETURN_IF_ERROR(ConstantInput(index, &literal, mode));\n   std::vector<int64_t> dims;\n   TF_RETURN_IF_ERROR(LiteralToInt64Vector(literal, &dims));\n+\n+  int64_t num_elements = 1;\n+  for (auto i = dims.begin(); i != dims.end(); ++i) {\n+    num_elements = MultiplyWithoutOverflow(num_elements, *i);\n+    if (num_elements < 0)\n+      return errors::InvalidArgument(\n+          \"The total elements specified by orig_input_shape is too large.\",\n+          \"Encountered overflow after multiplying\", *i,\n+          \", result: \", num_elements);\n+  }\n   *shape = TensorShape(dims);\n   return OkStatus();\n }"