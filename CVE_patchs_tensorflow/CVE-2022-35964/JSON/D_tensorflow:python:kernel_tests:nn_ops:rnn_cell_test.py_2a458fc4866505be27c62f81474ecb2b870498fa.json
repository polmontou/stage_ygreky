"diff --git a/tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py b/tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py\nindex 5a15d7a80e6..c82513ac29d 100644\n--- a/tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py\n+++ b/tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py\n@@ -1354,6 +1354,58 @@ class LSTMTest(test.TestCase):\n               cell_clip=cell_clip,\n               use_peephole=use_peephole))\n \n+  @test_util.run_in_graph_and_eager_modes\n+  def testLSTMBlockCellGradErrorHandling(self):\n+    use_peephole = False\n+    seq_len_max = constant_op.constant(1, shape=[], dtype=dtypes.int64)\n+    x = constant_op.constant(0.504355371, shape=[1, 1, 1], dtype=dtypes.float32)\n+    cs_prev = constant_op.constant(\n+        0.504355371, shape=[1, 1, 1], dtype=dtypes.float32)\n+    h_prev = constant_op.constant(\n+        0.504355371, shape=[1, 1], dtype=dtypes.float32)\n+    w = constant_op.constant(0.504355371, shape=[1, 1], dtype=dtypes.float32)\n+    wci = constant_op.constant(0.504355371, shape=[1], dtype=dtypes.float32)\n+    wcf = constant_op.constant(0.504355371, shape=[1], dtype=dtypes.float32)\n+    wco = constant_op.constant(0.504355371, shape=[1], dtype=dtypes.float32)\n+    b = constant_op.constant(0.504355371, shape=[1], dtype=dtypes.float32)\n+    i = constant_op.constant(0.504355371, shape=[1, 1, 1], dtype=dtypes.float32)\n+    cs = constant_op.constant(\n+        0.504355371, shape=[1, 1, 1], dtype=dtypes.float32)\n+    f = constant_op.constant(0.504355371, shape=[1, 1, 1], dtype=dtypes.float32)\n+    o = constant_op.constant(0.504355371, shape=[1, 1, 1], dtype=dtypes.float32)\n+    ci = constant_op.constant(\n+        0.504355371, shape=[1, 1, 1], dtype=dtypes.float32)\n+    co = constant_op.constant(\n+        0.504355371, shape=[1, 1, 1], dtype=dtypes.float32)\n+    h = constant_op.constant(0.504355371, shape=[1, 1, 1], dtype=dtypes.float32)\n+    cs_grad = constant_op.constant(\n+        0.504355371, shape=[1, 1, 1], dtype=dtypes.float32)\n+    h_grad = constant_op.constant(\n+        0.504355371, shape=[1, 1, 1], dtype=dtypes.float32)\n+    with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),\n+                                \"must be rank\"):\n+      self.evaluate(\n+          gen_rnn_ops.block_lstm_grad_v2(\n+              seq_len_max=seq_len_max,\n+              x=x,\n+              cs_prev=cs_prev,\n+              h_prev=h_prev,\n+              w=w,\n+              wci=wci,\n+              wcf=wcf,\n+              wco=wco,\n+              b=b,\n+              i=i,\n+              cs=cs,\n+              f=f,\n+              o=o,\n+              ci=ci,\n+              co=co,\n+              h=h,\n+              cs_grad=cs_grad,\n+              h_grad=h_grad,\n+              use_peephole=use_peephole))\n+\n \n class BidirectionalRNNTest(test.TestCase):\n "