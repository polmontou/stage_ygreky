"diff --git a/tensorflow/core/kernels/quantized_add_op.cc b/tensorflow/core/kernels/quantized_add_op.cc\nindex 1f9897b9b61..5cf7ed14560 100644\n--- a/tensorflow/core/kernels/quantized_add_op.cc\n+++ b/tensorflow/core/kernels/quantized_add_op.cc\n@@ -25,6 +25,7 @@ limitations under the License.\n \n #include \"tensorflow/core/framework/op_kernel.h\"\n #include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n #include \"tensorflow/core/kernels/meta_support.h\"\n #include \"tensorflow/core/kernels/quantization_utils.h\"\n #include \"tensorflow/core/lib/core/errors.h\"\n@@ -457,10 +458,28 @@ class QuantizedAddOp : public OpKernel {\n   void Compute(OpKernelContext* context) override {\n     const Tensor& x = context->input(0);\n     const Tensor& y = context->input(1);\n-    const float min_x = context->input(2).flat<float>()(0);\n-    const float max_x = context->input(3).flat<float>()(0);\n-    const float min_y = context->input(4).flat<float>()(0);\n-    const float max_y = context->input(5).flat<float>()(0);\n+    const Tensor& min_x_tensor = context->input(2);\n+    const Tensor& max_x_tensor = context->input(3);\n+    const Tensor& min_y_tensor = context->input(4);\n+    const Tensor& max_y_tensor = context->input(5);\n+\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(min_x_tensor.shape()),\n+                errors::InvalidArgument(\"`min_x` must be rank 0 but is rank \",\n+                                        min_x_tensor.dims()));\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(max_x_tensor.shape()),\n+                errors::InvalidArgument(\"`max_x` must be rank 0 but is rank \",\n+                                        max_x_tensor.dims()));\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(min_y_tensor.shape()),\n+                errors::InvalidArgument(\"`min_y` must be rank 0 but is rank \",\n+                                        min_y_tensor.dims()));\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(max_y_tensor.shape()),\n+                errors::InvalidArgument(\"`max_y` must be rank 0 but is rank \",\n+                                        max_y_tensor.dims()));\n+\n+    const float min_x = min_x_tensor.scalar<float>()();\n+    const float max_x = max_x_tensor.scalar<float>()();\n+    const float min_y = min_y_tensor.scalar<float>()();\n+    const float max_y = max_y_tensor.scalar<float>()();\n \n     BCast bcast(BCast::FromShape(x.shape()), BCast::FromShape(y.shape()));\n     if (!bcast.IsValid()) {"