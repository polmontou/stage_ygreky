"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// Implements a quantized version of the Relu6 operation.\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/kernels/meta_support.h\"\n#include \"tensorflow/core/kernels/quantization_utils.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n\nnamespace tensorflow {\n\ntemplate <typename T>\nclass QuantizedReluOp : public OpKernel {\n public:\n  explicit QuantizedReluOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& min_input_tensor = context->input(1);\n    const Tensor& max_input_tensor = context->input(2);\n\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsScalar(min_input_tensor.shape()),\n        errors::InvalidArgument(\"`min_input` must be rank 0 but is rank \",\n                                min_input_tensor.dims()));\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsScalar(max_input_tensor.shape()),\n        errors::InvalidArgument(\"`max_input` must be rank 0 but is rank \",\n                                max_input_tensor.dims()));\n\n    const float min_input = min_input_tensor.scalar<float>()();\n    const float max_input = max_input_tensor.scalar<float>()();\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, input.shape(), &output));\n    const T min_as_quantized = FloatToQuantized<T>(0.0f, min_input, max_input);\n\n    if (meta::IsSupportedAndEnabled() && std::is_same<T, quint8>()) {\n      auto input_ui8_array = input.flat<quint8>();\n      meta::Clamp(context, input_ui8_array.data(), input_ui8_array.size(),\n                  min_as_quantized, 255, output->flat<quint8>().data());\n    } else {\n      output->flat<T>().device(context->eigen_cpu_device()) =\n          input.flat<T>().cwiseMax(min_as_quantized).template cast<T>();\n    }\n\n    Tensor* output_min = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(1, {}, &output_min));\n    output_min->flat<float>()(0) = min_input;\n    Tensor* output_max = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(2, {}, &output_max));\n    output_max->flat<float>()(0) = max_input;\n  }\n};\n\ntemplate <typename T>\nclass QuantizedRelu6Op : public OpKernel {\n public:\n  explicit QuantizedRelu6Op(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& min_input_tensor = context->input(1);\n    const Tensor& max_input_tensor = context->input(2);\n\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsScalar(min_input_tensor.shape()),\n        errors::InvalidArgument(\"`min_input` must be rank 0 but is rank \",\n                                min_input_tensor.dims()));\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsScalar(max_input_tensor.shape()),\n        errors::InvalidArgument(\"`max_input` must be rank 0 but is rank \",\n                                max_input_tensor.dims()));\n\n    const float min_input = min_input_tensor.scalar<float>()();\n    const float max_input = max_input_tensor.scalar<float>()();\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, input.shape(), &output));\n    const T min_as_quantized = FloatToQuantized<T>(0.0f, min_input, max_input);\n    const T max_as_quantized = FloatToQuantized<T>(6.0f, min_input, max_input);\n\n    if (meta::IsSupportedAndEnabled() && std::is_same<T, quint8>()) {\n      auto input_ui8_array = input.flat<quint8>();\n      meta::Clamp(context, input_ui8_array.data(), input_ui8_array.size(),\n                  min_as_quantized, max_as_quantized,\n                  output->flat<quint8>().data());\n    } else {\n      output->flat<T>().device(context->eigen_cpu_device()) =\n          input.flat<T>()\n              .cwiseMax(min_as_quantized)\n              .cwiseMin(max_as_quantized)\n              .template cast<T>();\n    }\n\n    Tensor* output_min = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(1, {}, &output_min));\n    output_min->flat<float>()(0) = min_input;\n    Tensor* output_max = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(2, {}, &output_max));\n    output_max->flat<float>()(0) = max_input;\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"QuantizedRelu\")\n                            .Device(DEVICE_CPU)\n                            .TypeConstraint<qint32>(\"Tinput\")\n                            .TypeConstraint<qint32>(\"out_type\"),\n                        QuantizedReluOp<qint32>);\nREGISTER_KERNEL_BUILDER(Name(\"QuantizedRelu\")\n                            .Device(DEVICE_CPU)\n                            .TypeConstraint<quint8>(\"Tinput\")\n                            .TypeConstraint<quint8>(\"out_type\"),\n                        QuantizedReluOp<quint8>);\n\nREGISTER_KERNEL_BUILDER(Name(\"QuantizedRelu6\")\n                            .Device(DEVICE_CPU)\n                            .TypeConstraint<qint32>(\"Tinput\")\n                            .TypeConstraint<qint32>(\"out_type\"),\n                        QuantizedRelu6Op<qint32>);\nREGISTER_KERNEL_BUILDER(Name(\"QuantizedRelu6\")\n                            .Device(DEVICE_CPU)\n                            .TypeConstraint<quint8>(\"Tinput\")\n                            .TypeConstraint<quint8>(\"out_type\"),\n                        QuantizedRelu6Op<quint8>);\n}  // namespace tensorflow"