"diff --git a/tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py b/tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py\nindex 0527215618f..2392944fc41 100644\n--- a/tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py\n+++ b/tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py\n@@ -32,6 +32,7 @@ from tensorflow.python.framework import test_util\n from tensorflow.python.layers import convolutional\n from tensorflow.python.ops import array_ops\n from tensorflow.python.ops import control_flow_ops\n+from tensorflow.python.ops import gen_nn_ops\n from tensorflow.python.ops import gradient_checker\n from tensorflow.python.ops import gradients_impl\n from tensorflow.python.ops import math_ops\n@@ -1319,7 +1320,7 @@ class Conv2DTest(test.TestCase):\n     x2 = self._CreateNumpyTensor(filter_sizes)\n     default_dilations = (dilations[0] == 1 and dilations[1] == 1)\n     if default_dilations or use_gpu:\n-      with self.cached_session(use_gpu=use_gpu) as sess:\n+      with self.cached_session(use_gpu=use_gpu):\n         if data_format == \"NCHW\":\n           input_sizes = test_util.NHWCToNCHW(input_sizes)\n         t1 = constant_op.constant(x1, shape=input_sizes)\n@@ -1365,7 +1366,7 @@ class Conv2DTest(test.TestCase):\n     x2 = self._CreateNumpyTensor(filter_sizes)\n     default_dilations = (dilations[0] == 1 and dilations[1] == 1)\n     if default_dilations or use_gpu:\n-      with self.cached_session(use_gpu=use_gpu) as sess:\n+      with self.cached_session(use_gpu=use_gpu):\n         if data_format == \"NCHW\":\n           input_sizes = test_util.NHWCToNCHW(input_sizes)\n         t1 = constant_op.constant(x1, shape=input_sizes)\n@@ -2628,6 +2629,27 @@ class Conv2DTest(test.TestCase):\n               strides=[1, 1, 1, 1],\n               padding=[[0, 0], [-1, 0], [0, 0], [0, 0]]))\n \n+  def testConv2DBackpropInputInvalidOutBackpropRaiseError(self):\n+    with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):\n+      with self.cached_session():\n+        input_sizes = constant_op.constant([65534, 65534],\n+                                           shape=[2],\n+                                           dtype=dtypes.int32)\n+        filters = constant_op.constant(\n+            0.159749106, shape=[3, 3, 2, 2], dtype=dtypes.float32)\n+        out_backprop = constant_op.constant(0, shape=[], dtype=dtypes.float32)\n+        t = gen_nn_ops.conv2d_backprop_input(\n+            input_sizes=input_sizes,\n+            filter=filters,\n+            out_backprop=out_backprop,\n+            strides=[1, 1, 1, 1],\n+            padding=\"SAME\",\n+            use_cudnn_on_gpu=True,\n+            explicit_paddings=[],\n+            data_format=\"NHWC\",\n+            dilations=[1, 1, 1, 1])\n+        self.evaluate(t)\n+\n \n @test_util.run_all_without_tensor_float_32(\"Avoid TF32 conv on GPU\")\n class DepthwiseConv2DTest(test.TestCase):\n@@ -2655,7 +2677,7 @@ class DepthwiseConv2DTest(test.TestCase):\n     # numbers from 1.\n     x1 = [f * 1.0 for f in range(1, total_size_1 + 1)]\n     x2 = [f * 1.0 for f in range(1, total_size_2 + 1)]\n-    with self.cached_session() as sess:\n+    with self.cached_session():\n       t1 = constant_op.constant(x1, shape=tensor_in_sizes)\n       t1.set_shape(tensor_in_sizes)\n       t2 = constant_op.constant(x2, shape=filter_in_sizes)\n@@ -2926,7 +2948,7 @@ class DeepConv2DTest(test.TestCase):\n     x1 = np.random.rand(*tensor_in_sizes).astype(np.float32)\n     x2 = np.random.rand(*filter_in_sizes).astype(np.float32)\n \n-    with self.cached_session(use_gpu=False) as sess:\n+    with self.cached_session(use_gpu=False):\n       t1 = constant_op.constant(x1, shape=tensor_in_sizes)\n       t2 = constant_op.constant(x2, shape=filter_in_sizes)\n       strides = [1] + conv_strides + [1]"