"/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#define EIGEN_USE_THREADS\n\n#if (defined(GOOGLE_CUDA) && GOOGLE_CUDA) || \\\n    (defined(TENSORFLOW_USE_ROCM) && TENSORFLOW_USE_ROCM)\n#define EIGEN_USE_GPU\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#include \"tensorflow/core/kernels/fake_quant_ops_functor.h\"\n// Above is the related header but clang tidy doesn't recognize it.\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/monitoring/gauge.h\"\n#include \"tensorflow/core/platform/protobuf.h\"\n#include \"tensorflow/core/util/determinism.h\"\n\nusing tensorflow::BinaryElementWiseOp;\nusing tensorflow::DEVICE_CPU;\n#if (defined(GOOGLE_CUDA) && GOOGLE_CUDA) || \\\n    (defined(TENSORFLOW_USE_ROCM) && TENSORFLOW_USE_ROCM)\nusing tensorflow::DEVICE_GPU;\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nusing tensorflow::OpKernel;\nusing tensorflow::OpKernelConstruction;\nusing tensorflow::OpKernelContext;\nusing tensorflow::Tensor;\nusing tensorflow::TensorShape;\nusing tensorflow::TTypes;  // NOLINT This is needed in CUDA mode, do not remove.\nusing tensorflow::UnaryElementWiseOp;\nusing tensorflow::errors::InvalidArgument;\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\nauto* using_fake_quant = monitoring::Gauge<bool, 0>::New(\n    \"/tensorflow/api/op/using_fake_quantization\",\n    \"True if a fake_quant op is created.\");\n\n#define SET_USING_FAKE_QUANT() using_fake_quant->GetCell()->Set(true)\n\nnamespace {\nbool IsNumBitsValid(int num_bits) { return num_bits >= 2 && num_bits <= 16; }\n}  // namespace\n\n// -----------------------------------------------------------------------------\n// Implementation of FakeQuantWithMinMaxArgsOp, see its documentation in\n// core/ops/array_ops.cc.\ntemplate <typename Device>\nclass FakeQuantWithMinMaxArgsOp\n    : public UnaryElementWiseOp<float, FakeQuantWithMinMaxArgsOp<Device>> {\n public:\n  typedef UnaryElementWiseOp<float, FakeQuantWithMinMaxArgsOp<Device>> Base;\n  explicit FakeQuantWithMinMaxArgsOp(OpKernelConstruction* context)\n      : Base::UnaryElementWiseOp(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"min\", &min_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"max\", &max_));\n    OP_REQUIRES(context, min_ < max_,\n                InvalidArgument(\"min has to be smaller than max, was: \", min_,\n                                \" >= \", max_));\n    int num_bits;\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_bits\", &num_bits));\n    OP_REQUIRES(\n        context, IsNumBitsValid(num_bits),\n        InvalidArgument(\"num_bits must be between 2 and 16, inclusive\"));\n    bool narrow_range;\n    OP_REQUIRES_OK(context, context->GetAttr(\"narrow_range\", &narrow_range));\n    quant_min_ = narrow_range ? 1 : 0;\n    quant_max_ = (1 << num_bits) - 1;\n    SET_USING_FAKE_QUANT();\n  }\n\n  void Operate(OpKernelContext* context, const Tensor& input, Tensor* output) {\n    FakeQuantWithMinMaxArgsFunctor<Device> functor;\n    functor(context->eigen_device<Device>(), input.flat<float>(), min_, max_,\n            quant_min_, quant_max_, output->flat<float>());\n  }\n\n private:\n  float min_;\n  float max_;\n  int quant_min_;\n  int quant_max_;\n};\n\n// Implementation of FakeQuantWithMinMaxArgsGradientOp, see its documentation in\n// core/ops/array_ops.cc.\ntemplate <typename Device>\nclass FakeQuantWithMinMaxArgsGradientOp\n    : public BinaryElementWiseOp<float,\n                                 FakeQuantWithMinMaxArgsGradientOp<Device>> {\n public:\n  typedef BinaryElementWiseOp<float, FakeQuantWithMinMaxArgsGradientOp<Device>>\n      Base;\n  explicit FakeQuantWithMinMaxArgsGradientOp(OpKernelConstruction* context)\n      : Base::BinaryElementWiseOp(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"min\", &min_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"max\", &max_));\n    OP_REQUIRES(context, min_ < max_,\n                InvalidArgument(\"min has to be smaller than max, was: \", min_,\n                                \" >= \", max_));\n    int num_bits;\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_bits\", &num_bits));\n    OP_REQUIRES(\n        context, IsNumBitsValid(num_bits),\n        InvalidArgument(\"num_bits must be between 2 and 16, inclusive\"));\n    bool narrow_range;\n    OP_REQUIRES_OK(context, context->GetAttr(\"narrow_range\", &narrow_range));\n    quant_min_ = narrow_range ? 1 : 0;\n    quant_max_ = (1 << num_bits) - 1;\n  }\n\n  template <int NDIMS>\n  void Operate(OpKernelContext* context, const Tensor& gradient,\n               const Tensor& input, Tensor* output) {\n    OperateNoTemplate(context, gradient, input, output);\n  }\n\n  void OperateNoTemplate(OpKernelContext* context, const Tensor& gradient,\n                         const Tensor& input, Tensor* output) {\n    OP_REQUIRES(context, input.IsSameSize(gradient),\n                InvalidArgument(\"gradient and input must be the same size\"));\n    FakeQuantWithMinMaxArgsGradientFunctor<Device> functor;\n    functor(context->eigen_device<Device>(), gradient.flat<float>(),\n            input.flat<float>(), min_, max_, quant_min_, quant_max_,\n            output->flat<float>());\n  }\n\n private:\n  float min_;\n  float max_;\n  int quant_min_;\n  int quant_max_;\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"FakeQuantWithMinMaxArgs\").Device(DEVICE_CPU),\n                        FakeQuantWithMinMaxArgsOp<CPUDevice>);\nREGISTER_KERNEL_BUILDER(\n    Name(\"FakeQuantWithMinMaxArgsGradient\").Device(DEVICE_CPU),\n    FakeQuantWithMinMaxArgsGradientOp<CPUDevice>);\n\n#if (defined(GOOGLE_CUDA) && GOOGLE_CUDA) || \\\n    (defined(TENSORFLOW_USE_ROCM) && TENSORFLOW_USE_ROCM)\ntypedef Eigen::GpuDevice GPUDevice;\n\n// Forward declarations for functor specializations for GPU.\ntemplate <>\nvoid FakeQuantWithMinMaxArgsFunctor<GPUDevice>::operator()(\n    const GPUDevice& d, typename TTypes<float>::ConstFlat inputs,\n    const float min, const float max, const int quant_min, const int quant_max,\n    typename TTypes<float>::Flat outputs);\nextern template struct FakeQuantWithMinMaxArgsFunctor<GPUDevice>;\nREGISTER_KERNEL_BUILDER(Name(\"FakeQuantWithMinMaxArgs\").Device(DEVICE_GPU),\n                        FakeQuantWithMinMaxArgsOp<GPUDevice>);\n\ntemplate <>\nvoid FakeQuantWithMinMaxArgsGradientFunctor<GPUDevice>::operator()(\n    const GPUDevice& d, typename TTypes<float>::ConstFlat gradients,\n    typename TTypes<float>::ConstFlat inputs, const float min, const float max,\n    const int quant_min, const int quant_max,\n    typename TTypes<float>::Flat backprops);\nREGISTER_KERNEL_BUILDER(\n    Name(\"FakeQuantWithMinMaxArgsGradient\").Device(DEVICE_GPU),\n    FakeQuantWithMinMaxArgsGradientOp<GPUDevice>);\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n// -----------------------------------------------------------------------------\n// Implementation of FakeQuantWithMinMaxVarsOp, see its documentation in\n// core/ops/array_ops.cc.\ntemplate <typename Device>\nclass FakeQuantWithMinMaxVarsOp : public OpKernel {\n public:\n  explicit FakeQuantWithMinMaxVarsOp(OpKernelConstruction* context)\n      : OpKernel::OpKernel(context) {\n    int num_bits;\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_bits\", &num_bits));\n    OP_REQUIRES(\n        context, IsNumBitsValid(num_bits),\n        InvalidArgument(\"num_bits must be between 2 and 16, inclusive\"));\n    bool narrow_range;\n    OP_REQUIRES_OK(context, context->GetAttr(\"narrow_range\", &narrow_range));\n    quant_min_ = narrow_range ? 1 : 0;\n    quant_max_ = (1 << num_bits) - 1;\n    SET_USING_FAKE_QUANT();\n  }\n\n  void Compute(OpKernelContext* context) override {\n    CHECK_EQ(3, context->num_inputs());\n    const Tensor& input = context->input(0);\n    const Tensor& min = context->input(1);\n    const Tensor& max = context->input(2);\n\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsScalar(min.shape()),\n        InvalidArgument(\"`min` must be rank 0 but is rank \", min.dims()));\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsScalar(max.shape()),\n        InvalidArgument(\"`max` must be rank 0 but is rank \", max.dims()));\n\n    Tensor* output;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, input.shape(), &output));\n\n    FakeQuantWithMinMaxVarsFunctor<Device> functor;\n    functor(context->eigen_device<Device>(), input.flat<float>(),\n            min.scalar<float>(), max.scalar<float>(), quant_min_, quant_max_,\n            output->flat<float>());\n  }\n\n private:\n  int quant_min_;\n  int quant_max_;\n};\n\n// Implementation of FakeQuantWithMinMaxVarsGradientOp, see its documentation in\n// core/ops/array_ops.cc.\ntemplate <typename Device>\nclass FakeQuantWithMinMaxVarsGradientOp : public OpKernel {\n public:\n  explicit FakeQuantWithMinMaxVarsGradientOp(OpKernelConstruction* context)\n      : OpKernel::OpKernel(context) {\n    int num_bits;\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_bits\", &num_bits));\n    OP_REQUIRES(\n        context, IsNumBitsValid(num_bits),\n        InvalidArgument(\"num_bits must be between 2 and 16, inclusive\"));\n    bool narrow_range;\n    OP_REQUIRES_OK(context, context->GetAttr(\"narrow_range\", &narrow_range));\n    quant_min_ = narrow_range ? 1 : 0;\n    quant_max_ = (1 << num_bits) - 1;\n    if (std::is_same<Device, Eigen::GpuDevice>::value) {\n      OP_REQUIRES(\n          context, !OpDeterminismRequired(),\n          errors::Unimplemented(\n              \"Determinism is not yet supported in GPU implementation of \"\n              \"FakeQuantWithMinMaxVarsGradient.\"));\n    }\n  }\n\n  void Compute(OpKernelContext* context) override {\n    CHECK_EQ(4, context->num_inputs());\n    const Tensor& gradient = context->input(0);\n    const Tensor& input = context->input(1);\n    OP_REQUIRES(context, input.IsSameSize(gradient),\n                InvalidArgument(\"gradient and input must be the same size\"));\n    const Tensor& min = context->input(2);\n    const Tensor& max = context->input(3);\n\n    Tensor* grad_wrt_input;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, input.shape(), &grad_wrt_input));\n\n    TensorShape scalar_shape;\n    Tensor* grad_wrt_min;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(1, scalar_shape, &grad_wrt_min));\n\n    Tensor* grad_wrt_max;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(2, scalar_shape, &grad_wrt_max));\n\n    FakeQuantWithMinMaxVarsGradientFunctor<Device> functor;\n    functor(context->eigen_device<Device>(), gradient.flat<float>(),\n            input.flat<float>(), min.scalar<float>(), max.scalar<float>(),\n            quant_min_, quant_max_, grad_wrt_input->flat<float>(),\n            grad_wrt_min->scalar<float>(), grad_wrt_max->scalar<float>());\n  }\n\n private:\n  int quant_min_;\n  int quant_max_;\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"FakeQuantWithMinMaxVars\").Device(DEVICE_CPU),\n                        FakeQuantWithMinMaxVarsOp<CPUDevice>);\nREGISTER_KERNEL_BUILDER(\n    Name(\"FakeQuantWithMinMaxVarsGradient\").Device(DEVICE_CPU),\n    FakeQuantWithMinMaxVarsGradientOp<CPUDevice>);\n\n#if (defined(GOOGLE_CUDA) && GOOGLE_CUDA) || \\\n    (defined(TENSORFLOW_USE_ROCM) && TENSORFLOW_USE_ROCM)\ntemplate <>\nvoid FakeQuantWithMinMaxVarsFunctor<GPUDevice>::operator()(\n    const GPUDevice& d, typename TTypes<float>::ConstFlat inputs,\n    typename TTypes<float>::ConstScalar min,\n    typename TTypes<float>::ConstScalar max, const int quant_min,\n    const int quant_max, typename TTypes<float>::Flat output);\nextern template struct FakeQuantWithMinMaxVarsFunctor<GPUDevice>;\nREGISTER_KERNEL_BUILDER(Name(\"FakeQuantWithMinMaxVars\")\n                            .Device(DEVICE_GPU)\n                            .HostMemory(\"min\")\n                            .HostMemory(\"max\"),\n                        FakeQuantWithMinMaxVarsOp<GPUDevice>);\n\ntemplate <>\nvoid FakeQuantWithMinMaxVarsGradientFunctor<GPUDevice>::operator()(\n    const GPUDevice& d, typename TTypes<float>::ConstFlat gradients,\n    typename TTypes<float>::ConstFlat inputs,\n    typename TTypes<float>::ConstScalar min,\n    typename TTypes<float>::ConstScalar max, const int quant_min,\n    const int quant_max, typename TTypes<float>::Flat backprops_wrt_input,\n    typename TTypes<float>::Scalar backprop_wrt_min,\n    typename TTypes<float>::Scalar backprop_wrt_max);\nextern template struct FakeQuantWithMinMaxVarsGradientFunctor<GPUDevice>;\nREGISTER_KERNEL_BUILDER(Name(\"FakeQuantWithMinMaxVarsGradient\")\n                            .Device(DEVICE_GPU)\n                            .HostMemory(\"min\")\n                            .HostMemory(\"max\"),\n                        FakeQuantWithMinMaxVarsGradientOp<GPUDevice>);\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n// -----------------------------------------------------------------------------\n// Implementation of FakeQuantWithMinMaxVarsPerChannelOp, see its documentation\n// in core/ops/array_ops.cc.\ntemplate <typename Device>\nclass FakeQuantWithMinMaxVarsPerChannelOp : public OpKernel {\n public:\n  explicit FakeQuantWithMinMaxVarsPerChannelOp(OpKernelConstruction* context)\n      : OpKernel::OpKernel(context) {\n    int num_bits;\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_bits\", &num_bits));\n    OP_REQUIRES(\n        context, IsNumBitsValid(num_bits),\n        InvalidArgument(\"num_bits must be between 2 and 16, inclusive\"));\n    bool narrow_range;\n    OP_REQUIRES_OK(context, context->GetAttr(\"narrow_range\", &narrow_range));\n    quant_min_ = narrow_range ? 1 : 0;\n    quant_max_ = (1 << num_bits) - 1;\n    SET_USING_FAKE_QUANT();\n  }\n\n  void Compute(OpKernelContext* context) override {\n    CHECK_EQ(3, context->num_inputs());\n    const Tensor& input = context->input(0);\n    const int depth = input.dim_size(input.dims() - 1);  // last dimension size.\n    const Tensor& min = context->input(1);\n    const Tensor& max = context->input(2);\n\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsVector(min.shape()),\n        InvalidArgument(\"`min` must be rank 1 but is rank \", min.dims()));\n    OP_REQUIRES(context, min.dim_size(0) == depth,\n                InvalidArgument(\"min has incorrect size, expected \", depth,\n                                \" was \", min.dim_size(0)));\n    OP_REQUIRES(\n        context, TensorShapeUtils::IsVector(max.shape()),\n        InvalidArgument(\"`max` must be rank 1 but is rank \", max.dims()));\n    OP_REQUIRES(context, max.dim_size(0) == depth,\n                InvalidArgument(\"max has incorrect size, expected \", depth,\n                                \" was \", max.dim_size(0)));\n\n    Tensor* output;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, input.shape(), &output));\n\n    FakeQuantWithMinMaxVarsPerChannelFunctor<Device> functor;\n    functor(context->eigen_device<Device>(), input.flat_inner_dims<float, 2>(),\n            min.vec<float>(), max.vec<float>(), quant_min_, quant_max_,\n            output->flat_inner_dims<float, 2>());\n  }\n\n private:\n  int quant_min_;\n  int quant_max_;\n};\n\n// Implementation of FakeQuantWithMinMaxVarsPerChannelGradientOp, see its\n// documentation in core/ops/array_ops.cc.\ntemplate <typename Device>\nclass FakeQuantWithMinMaxVarsPerChannelGradientOp : public OpKernel {\n public:\n  explicit FakeQuantWithMinMaxVarsPerChannelGradientOp(\n      OpKernelConstruction* context)\n      : OpKernel::OpKernel(context) {\n    int num_bits;\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_bits\", &num_bits));\n    OP_REQUIRES(\n        context, IsNumBitsValid(num_bits),\n        InvalidArgument(\"num_bits must be between 2 and 16, inclusive\"));\n    bool narrow_range;\n    OP_REQUIRES_OK(context, context->GetAttr(\"narrow_range\", &narrow_range));\n    quant_min_ = narrow_range ? 1 : 0;\n    quant_max_ = (1 << num_bits) - 1;\n    if (std::is_same<Device, Eigen::GpuDevice>::value) {\n      OP_REQUIRES(\n          context, !OpDeterminismRequired(),\n          errors::Unimplemented(\n              \"Determinism is not yet supported in GPU implementation of \"\n              \"FakeQuantWithMinMaxVarsPerChannelGradient.\"));\n    }\n  }\n\n  void Compute(OpKernelContext* context) override {\n    CHECK_EQ(4, context->num_inputs());\n    const Tensor& gradient = context->input(0);\n    const Tensor& input = context->input(1);\n    OP_REQUIRES(context, input.IsSameSize(gradient),\n                InvalidArgument(\"gradient and input must be the same size\"));\n    const int depth = input.dim_size(input.dims() - 1);  // last dimension size.\n    const Tensor& min = context->input(2);\n    OP_REQUIRES(context, min.dim_size(0) == depth,\n                InvalidArgument(\"min has incorrect size, expected \", depth,\n                                \" was \", min.dim_size(0)));\n    const Tensor& max = context->input(3);\n    OP_REQUIRES(context, max.dim_size(0) == depth,\n                InvalidArgument(\"max has incorrect size, expected \", depth,\n                                \" was \", max.dim_size(0)));\n\n    Tensor* grad_wrt_input;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, input.shape(), &grad_wrt_input));\n\n    TensorShape min_max_shape({input.dim_size(input.dims() - 1)});\n    Tensor* grad_wrt_min;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(1, min_max_shape, &grad_wrt_min));\n\n    Tensor* grad_wrt_max;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(2, min_max_shape, &grad_wrt_max));\n\n    FakeQuantWithMinMaxVarsPerChannelGradientFunctor<Device> functor;\n    functor(\n        context->eigen_device<Device>(), gradient.flat_inner_dims<float, 2>(),\n        input.flat_inner_dims<float, 2>(), min.vec<float>(), max.vec<float>(),\n        quant_min_, quant_max_, grad_wrt_input->flat_inner_dims<float, 2>(),\n        grad_wrt_min->vec<float>(), grad_wrt_max->vec<float>());\n  }\n\n private:\n  int quant_min_;\n  int quant_max_;\n};\n\nREGISTER_KERNEL_BUILDER(\n    Name(\"FakeQuantWithMinMaxVarsPerChannel\").Device(DEVICE_CPU),\n    FakeQuantWithMinMaxVarsPerChannelOp<CPUDevice>);\nREGISTER_KERNEL_BUILDER(\n    Name(\"FakeQuantWithMinMaxVarsPerChannelGradient\").Device(DEVICE_CPU),\n    FakeQuantWithMinMaxVarsPerChannelGradientOp<CPUDevice>);\n\n#if (defined(GOOGLE_CUDA) && GOOGLE_CUDA) || \\\n    (defined(TENSORFLOW_USE_ROCM) && TENSORFLOW_USE_ROCM)\ntemplate <>\nvoid FakeQuantWithMinMaxVarsPerChannelFunctor<GPUDevice>::operator()(\n    const GPUDevice& d, typename TTypes<float>::ConstMatrix inputs,\n    typename TTypes<float>::ConstFlat min,\n    typename TTypes<float>::ConstFlat max, const int quant_min,\n    const int quant_max, typename TTypes<float>::Matrix outputs);\nextern template struct FakeQuantWithMinMaxVarsPerChannelFunctor<GPUDevice>;\n\nREGISTER_KERNEL_BUILDER(Name(\"FakeQuantWithMinMaxVarsPerChannel\")\n                            .Device(DEVICE_GPU)\n                            .HostMemory(\"min\")\n                            .HostMemory(\"max\"),\n                        FakeQuantWithMinMaxVarsPerChannelOp<GPUDevice>);\n\ntemplate <>\nvoid FakeQuantWithMinMaxVarsPerChannelGradientFunctor<GPUDevice>::operator()(\n    const GPUDevice& d, typename TTypes<float>::ConstMatrix gradients,\n    typename TTypes<float>::ConstMatrix inputs,\n    typename TTypes<float>::ConstVec min, typename TTypes<float>::ConstVec max,\n    const int quant_min, const int quant_max,\n    typename TTypes<float>::Matrix backprops_wrt_input,\n    typename TTypes<float>::Vec backprop_wrt_min,\n    typename TTypes<float>::Vec backprop_wrt_max);\nextern template struct FakeQuantWithMinMaxVarsPerChannelGradientFunctor<\n    GPUDevice>;\n\nREGISTER_KERNEL_BUILDER(Name(\"FakeQuantWithMinMaxVarsPerChannelGradient\")\n                            .Device(DEVICE_GPU)\n                            .HostMemory(\"min\")\n                            .HostMemory(\"max\"),\n                        FakeQuantWithMinMaxVarsPerChannelGradientOp<GPUDevice>);\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n}  // namespace tensorflow"