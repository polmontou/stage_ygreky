"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/framework/allocator.h\"\n#include \"tensorflow/core/framework/fake_input.h\"\n#include \"tensorflow/core/framework/node_def_builder.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_testutil.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/framework/types.pb.h\"\n#include \"tensorflow/core/kernels/ops_testutil.h\"\n#include \"tensorflow/core/kernels/ops_util.h\"\n#include \"tensorflow/core/lib/core/status_test_util.h\"\n#include \"tensorflow/core/platform/test.h\"\n\nnamespace tensorflow {\n\nclass RequantizeTest : public OpsTestBase {\n protected:\n  void ConfigureRequantize() {\n    TF_ASSERT_OK(NodeDefBuilder(\"requantize\", \"Requantize\")\n                     .Input(FakeInput(DT_QINT32))\n                     .Input(FakeInput(DT_FLOAT))\n                     .Input(FakeInput(DT_FLOAT))\n                     .Input(FakeInput(DT_FLOAT))\n                     .Input(FakeInput(DT_FLOAT))\n                     .Attr(\"Tinput\", DataTypeToEnum<qint32>::v())\n                     .Attr(\"out_type\", DataTypeToEnum<quint8>::v())\n                     .Finalize(node_def()));\n    TF_ASSERT_OK(InitOp());\n  }\n};\n\n// Runs a manually generated array through the operator, and makes sure that the\n// results match the expected hand-calculated values.\nTEST_F(RequantizeTest, HandCraftedRequantize) {\n  ConfigureRequantize();\n  const int value_count = 3;\n\n  // Requantize to -1 to 1.\n  AddInputFromArray<qint32>(TensorShape({value_count}),\n                            {-(1 << 23), 0, (1 << 23)});\n  AddInputFromArray<float>(TensorShape({1}), {-256.0f});\n  AddInputFromArray<float>(TensorShape({1}), {256.0f});\n  AddInputFromArray<float>(TensorShape({1}), {-1.0f});\n  AddInputFromArray<float>(TensorShape({1}), {1.0f});\n  TF_ASSERT_OK(RunOpKernel());\n  Tensor expected(allocator(), DT_QUINT8, TensorShape({value_count}));\n  test::FillValues<quint8>(&expected, {0, 128, 255});\n  test::ExpectTensorEqual<quint8>(expected, *GetOutput(0));\n  test::ExpectTensorEqual<float>(test::AsScalar<float>(-1.0f), *GetOutput(1));\n  test::ExpectTensorEqual<float>(test::AsScalar<float>(1.0f), *GetOutput(2));\n}\n\nTEST_F(RequantizeTest, InvalidOutputMin) {\n  ConfigureRequantize();\n  const int value_count = 3;\n\n  AddInputFromArray<qint32>(TensorShape({value_count}),\n                            {-(1 << 23), 0, (1 << 23)});\n  AddInputFromArray<float>(TensorShape({1}), {-256.0f});\n  AddInputFromArray<float>(TensorShape({1}), {256.0f});\n  AddInputFromArray<float>(TensorShape({1}), {0.01f});\n  AddInputFromArray<float>(TensorShape({1}), {1.0f});\n  EXPECT_EQ(\"requested_output_min must be <= 0, but got 0.01\",\n            RunOpKernel().error_message());\n}\n\nTEST_F(RequantizeTest, InvalidOutputMax) {\n  ConfigureRequantize();\n  const int value_count = 3;\n\n  AddInputFromArray<qint32>(TensorShape({value_count}),\n                            {-(1 << 23), 0, (1 << 23)});\n  AddInputFromArray<float>(TensorShape({1}), {-256.0f});\n  AddInputFromArray<float>(TensorShape({1}), {256.0f});\n  AddInputFromArray<float>(TensorShape({1}), {-10.0f});\n  AddInputFromArray<float>(TensorShape({1}), {-11.0f});\n  EXPECT_EQ(\n      \"requested_output_max must be >= requested_output_min, but got -11 and \"\n      \"-10\",\n      RunOpKernel().error_message());\n}\n\n}  // end namespace tensorflow"