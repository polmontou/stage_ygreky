"diff --git a/tensorflow/core/kernels/quantized_matmul_op.cc b/tensorflow/core/kernels/quantized_matmul_op.cc\nindex 9d3b5279e4b..ae65dc3b5e3 100644\n--- a/tensorflow/core/kernels/quantized_matmul_op.cc\n+++ b/tensorflow/core/kernels/quantized_matmul_op.cc\n@@ -20,11 +20,14 @@ limitations under the License.\n #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK\n #include \"public/gemmlowp.h\"\n #include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/op_requires.h\"\n #include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n #include \"tensorflow/core/kernels/meta_support.h\"\n #include \"tensorflow/core/kernels/quantization_utils.h\"\n #include \"tensorflow/core/kernels/reference_gemm.h\"\n #include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/platform/errors.h\"\n \n namespace tensorflow {\n \n@@ -75,9 +78,21 @@ class QuantizedMatMulOp : public OpKernel {\n   void Compute(OpKernelContext* context) override {\n     const Tensor& a = context->input(0);\n     const Tensor& b = context->input(1);\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),\n+                errors::InvalidArgument(\"min_a must be a scalar, but got shape\",\n+                                        context->input(2).shape()));\n     const float min_a = context->input(2).flat<float>()(0);\n+    OP_REQUIRES(context, context->input(3).NumElements() == 1,\n+                errors::InvalidArgument(\"max_a must be a scalar, but got shape\",\n+                                        context->input(3).shape()));\n     const float max_a = context->input(3).flat<float>()(0);\n+    OP_REQUIRES(context, context->input(4).NumElements() == 1,\n+                errors::InvalidArgument(\"min_b must be a scalar, but got shape\",\n+                                        context->input(4).shape()));\n     const float min_b = context->input(4).flat<float>()(0);\n+    OP_REQUIRES(context, context->input(5).NumElements() == 1,\n+                errors::InvalidArgument(\"max_b must be a scalar, but got shape\",\n+                                        context->input(5).shape()));\n     const float max_b = context->input(5).flat<float>()(0);\n \n     // Make sure that we have valid quantization ranges for the input buffers."