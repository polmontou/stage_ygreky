"diff --git a/tensorflow/core/kernels/quantized_matmul_op_test.cc b/tensorflow/core/kernels/quantized_matmul_op_test.cc\nindex c9f05dbc10b..f562a2ebcb7 100644\n--- a/tensorflow/core/kernels/quantized_matmul_op_test.cc\n+++ b/tensorflow/core/kernels/quantized_matmul_op_test.cc\n@@ -62,10 +62,10 @@ TEST_F(QuantizedMatMulTest, Small_NoParams) {\n   // | 15 | 16 | 17 | 18 |\n   AddInputFromArray<quint8>(TensorShape({3, 4}),\n                             {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n \n   TF_ASSERT_OK(RunOpKernel());\n   // Here are the results we expect, from hand calculations:\n@@ -118,10 +118,10 @@ TEST_F(QuantizedMatMulTest, VerySmall_WithParams) {\n   // The B matrix is:\n   // |   1 |\n   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {-12.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {243.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {1.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {256.0f});\n+  AddInputFromArray<float>(TensorShape({}), {-12.0f});\n+  AddInputFromArray<float>(TensorShape({}), {243.0f});\n+  AddInputFromArray<float>(TensorShape({}), {1.0f});\n+  AddInputFromArray<float>(TensorShape({}), {256.0f});\n   TF_ASSERT_OK(RunOpKernel());\n   // We're requesting C = A.transposed() * B,\n   // so we expect to get these results:\n@@ -162,12 +162,50 @@ TEST_F(QuantizedMatMulTest, VerySmall_BadRange) {\n   // The B matrix is:\n   // |   1 |\n   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {-12.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {243.0f});\n+  AddInputFromArray<float>(TensorShape({}), {-12.0f});\n+  AddInputFromArray<float>(TensorShape({}), {243.0f});\n   // Here we set the range so that the min and max are equal, so we expect to\n   // see an error when we run.\n-  AddInputFromArray<float>(TensorShape({1}), {1.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {1.0f});\n+  AddInputFromArray<float>(TensorShape({}), {1.0f});\n+  AddInputFromArray<float>(TensorShape({}), {1.0f});\n+  EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());\n+}\n+\n+// This test multiplies two 1x1 8bit matrices, but sets invalid quantized min\n+// and max values, so we expect to get an error\n+TEST_F(QuantizedMatMulTest, VerySmall_BadMinMax) {\n+  // These parameters reflect a typical production usage of eight-bit matmuls\n+  // in an Inception-style network.\n+  const bool transpose_a = true;\n+  const int a_rows = 1;\n+  const int a_cols = 1;\n+  const int b_rows = 1;\n+  const int b_cols = 1;\n+  const bool transpose_b = false;\n+  TF_ASSERT_OK(NodeDefBuilder(\"quantized_mat_mul_op\", \"QuantizedMatMul\")\n+                   .Input(FakeInput(DT_QUINT8))\n+                   .Input(FakeInput(DT_QUINT8))\n+                   .Input(FakeInput(DT_FLOAT))\n+                   .Input(FakeInput(DT_FLOAT))\n+                   .Input(FakeInput(DT_FLOAT))\n+                   .Input(FakeInput(DT_FLOAT))\n+                   .Attr(\"Toutput\", DataTypeToEnum<qint32>::v())\n+                   .Attr(\"transpose_a\", transpose_a)\n+                   .Attr(\"transpose_b\", transpose_b)\n+                   .Finalize(node_def()));\n+  TF_ASSERT_OK(InitOp());\n+  // The A matrix is:\n+  // |  -1 |\n+  AddInputFromArray<quint8>(TensorShape({a_rows, a_cols}), {11});\n+  // The B matrix is:\n+  // |   1 |\n+  AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});\n+  // Here we set the error of a non scalar min_a value, so we expect to see an\n+  // error when we run.\n+  AddInputFromArray<float>(TensorShape({1}), {2});\n+  AddInputFromArray<float>(TensorShape({}), {243.0f});\n+  AddInputFromArray<float>(TensorShape({}), {1.0f});\n+  AddInputFromArray<float>(TensorShape({}), {256.0f});\n   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());\n }\n \n@@ -233,10 +271,10 @@ TEST_F(QuantizedMatMulTest, Small_WithParams) {\n                                                                3,\n                                                                6,\n                                                            });\n-  AddInputFromArray<float>(TensorShape({1}), {-12.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {243.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {-12.0f});\n+  AddInputFromArray<float>(TensorShape({}), {243.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n   TF_ASSERT_OK(RunOpKernel());\n   // We're requesting C = A.transposed() * B,\n   // so we expect to get these results:\n@@ -326,10 +364,10 @@ TEST_F(QuantizedMatMulTest, Medium_WithParams) {\n \n   AddInputFromArray<quint8>(a_quantized.shape(), a_quantized.flat<quint8>());\n   AddInputFromArray<quint8>(b_quantized.shape(), b_quantized.flat<quint8>());\n-  AddInputFromArray<float>(TensorShape({1}), {a_min});\n-  AddInputFromArray<float>(TensorShape({1}), {a_max});\n-  AddInputFromArray<float>(TensorShape({1}), {b_min});\n-  AddInputFromArray<float>(TensorShape({1}), {b_max});\n+  AddInputFromArray<float>(TensorShape({}), {a_min});\n+  AddInputFromArray<float>(TensorShape({}), {a_max});\n+  AddInputFromArray<float>(TensorShape({}), {b_min});\n+  AddInputFromArray<float>(TensorShape({}), {b_max});\n   TF_ASSERT_OK(RunOpKernel());\n \n   Tensor expected_float(DT_FLOAT, {a_cols, b_cols});"