"diff --git a/tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py b/tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py\nindex 5acacdbb746..1594844ab49 100644\n--- a/tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py\n+++ b/tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py\n@@ -124,7 +124,7 @@ class FractionalMaxPoolTest(test.TestCase):\n     Returns:\n       None\n     \"\"\"\n-    with self.cached_session() as sess:\n+    with self.cached_session():\n       p, r, c = nn_ops.fractional_max_pool_v2(\n           input_tensor,\n           pooling_ratio,\n@@ -155,7 +155,7 @@ class FractionalMaxPoolTest(test.TestCase):\n           overlapping))\n       rand_mat = self._PRNG.randint(10, size=tensor_shape)\n       pooling_ratio = [1, math.sqrt(2), math.sqrt(2), 1]\n-      with self.cached_session() as sess:\n+      with self.cached_session():\n         p, r, c = nn_ops.fractional_max_pool_v2(\n             rand_mat,\n             pooling_ratio,\n@@ -630,6 +630,29 @@ class FractionalMaxPoolGradTest(test.TestCase):\n       self.assertAllClose(expected_input_backprop_overlapping,\n                           input_backprop_overlapping)\n \n+  def testInvalidSeqRaiseErrorForFractionalMaxPoolGrad(self):\n+    with self.assertRaises(errors.InvalidArgumentError):\n+      with self.cached_session() as _:\n+        overlapping = True\n+        orig_input = constant_op.constant(\n+            .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)\n+        orig_output = constant_op.constant(\n+            .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)\n+        out_backprop = constant_op.constant(\n+            .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)\n+        row_pooling_sequence = constant_op.constant(\n+            0, shape=[5], dtype=dtypes.int64)\n+        col_pooling_sequence = constant_op.constant(\n+            0, shape=[5], dtype=dtypes.int64)\n+        t = gen_nn_ops.FractionalMaxPoolGrad(\n+            orig_input=orig_input,\n+            orig_output=orig_output,\n+            out_backprop=out_backprop,\n+            row_pooling_sequence=row_pooling_sequence,\n+            col_pooling_sequence=col_pooling_sequence,\n+            overlapping=overlapping)\n+        self.evaluate(t)\n+\n \n if __name__ == \"__main__\":\n   test.main()"