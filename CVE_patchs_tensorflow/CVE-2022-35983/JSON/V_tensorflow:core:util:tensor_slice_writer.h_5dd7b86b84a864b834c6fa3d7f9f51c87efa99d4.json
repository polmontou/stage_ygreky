"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// The utility to write checkpoints for google brain tensor ops and v3\n// checkpoints for dist_belief.\n\n#ifndef TENSORFLOW_CORE_UTIL_TENSOR_SLICE_WRITER_H_\n#define TENSORFLOW_CORE_UTIL_TENSOR_SLICE_WRITER_H_\n\n#include <unordered_map>\n\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_slice.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/lib/core/stringpiece.h\"\n#include \"tensorflow/core/lib/gtl/map_util.h\"\n#include \"tensorflow/core/lib/strings/stringprintf.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/platform/types.h\"\n#include \"tensorflow/core/util/saved_tensor_slice.pb.h\"\n#include \"tensorflow/core/util/saved_tensor_slice_util.h\"\n\nnamespace tensorflow {\n\nnamespace checkpoint {\n\nclass TensorSliceWriter {\n public:\n  // Abstract interface that TensorSliceWriter uses for building\n  class Builder {\n   public:\n    virtual ~Builder() {}\n    virtual void Add(StringPiece key, StringPiece value) = 0;\n    virtual Status Finish(int64_t* file_size) = 0;\n  };\n  typedef std::function<Status(const string&, Builder**)> CreateBuilderFunction;\n\n  TensorSliceWriter(const string& filename,\n                    CreateBuilderFunction create_builder);\n  virtual ~TensorSliceWriter() {}\n  // Adds a slice. We support float and int32 for now.\n  // TODO(yangke): add more supports\n  template <typename T>\n  Status Add(const string& name, const TensorShape& shape,\n             const TensorSlice& slice, const T* data);\n  Status Finish();\n\n  // Allocate \"num_elements\" elements in \"ss\" and save the data in \"data\"\n  // there.\n  template <typename T>\n  static Status SaveData(const T* data, int64_t num_elements, SavedSlice* ss);\n\n  static size_t MaxBytesPerElement(DataType dt);\n\n private:\n  static constexpr size_t kMaxMessageBytes = 1LL << 31;\n  // Filling in the TensorProto in a SavedSlice will add the following\n  // header bytes, in addition to the data:\n  // - 1 byte: TensorProto tag and wire format\n  // - <= 5 bytes: TensorProto length\n  // - 1 byte: Repeated *_val tag and wire format\n  // - <= 5 bytes: *_val length\n  // However, we add 1KB of slack, to be conservative and guard\n  // against other additions to the TensorProto.\n  static constexpr size_t kTensorProtoHeaderBytes = 1 << 10;\n\n  const string filename_;\n  const CreateBuilderFunction create_builder_;\n  const string tmpname_;\n\n  // A mapping from the tensor names to their index in meta_.saved_slice_meta()\n  std::unordered_map<string, int> name_to_index_;\n  // The metadata that holds all the saved tensor slices.\n  SavedTensorSlices sts_;\n  // The data to be written to the builder\n  std::map<string, string> data_;\n  // Total number of slices written\n  int slices_;\n  TF_DISALLOW_COPY_AND_ASSIGN(TensorSliceWriter);\n};\n\ntemplate <typename T>\nStatus TensorSliceWriter::Add(const string& name, const TensorShape& shape,\n                              const TensorSlice& slice, const T* data) {\n  // The tensor and the slice have to be compatible\n  if (shape.dims() != slice.dims()) {\n    return errors::Internal(\"Incompatible tensor shape and slice: \", \"shape = \",\n                            shape.DebugString(),\n                            \", slice = \", slice.DebugString());\n  }\n  DataType dt = DataTypeToEnum<T>::value;\n  // We need to add an entry for \"name\" if there isn't an entry already.\n  int index = gtl::FindWithDefault(name_to_index_, name, -1);\n  if (index >= 0) {\n    // The same tensor has been registered -- we verify that the shapes and the\n    // type agree.\n    const SavedSliceMeta& ssm = sts_.meta().tensor(index);\n    CHECK_EQ(name, ssm.name()) << ssm.ShortDebugString();\n    TensorShape ssm_shape(ssm.shape());\n    if (!shape.IsSameSize(ssm_shape)) {\n      return errors::Internal(\n          \"Mismatching shapes: existing tensor = \", ssm_shape.DebugString(),\n          \", trying to add name \", name, \", shape = \", shape.DebugString());\n    }\n    if (dt != ssm.type()) {\n      return errors::Internal(\n          \"Mismatching types: existing type = \", DataTypeString(ssm.type()),\n          \", trying to add name \", name, \", type = \", DataTypeString(dt));\n    }\n  } else {\n    // Insert the new tensor name with the shape information\n    index = sts_.meta().tensor_size();\n    name_to_index_.insert(std::make_pair(name, index));\n    SavedSliceMeta* ssm = sts_.mutable_meta()->add_tensor();\n    ssm->set_name(name);\n    shape.AsProto(ssm->mutable_shape());\n    ssm->set_type(dt);\n  }\n  // Now we need to add the slice info the list of slices.\n  SavedSliceMeta* ssm = sts_.mutable_meta()->mutable_tensor(index);\n  slice.AsProto(ssm->add_slice());\n\n  // Now we need to add the real data.\n  {\n    SavedTensorSlices sts;\n    SavedSlice* ss = sts.mutable_data();\n    ss->set_name(name);\n    slice.AsProto(ss->mutable_slice());\n    TensorShape saved_shape(ssm->shape());\n    TensorShape sliced_shape;\n    TF_RETURN_IF_ERROR(slice.SliceTensorShape(saved_shape, &sliced_shape));\n    TF_RETURN_IF_ERROR(SaveData(data, sliced_shape.num_elements(), ss));\n    string key = EncodeTensorNameSlice(name, slice);\n    // TODO(yangke): consider doing a two-pass thing where the first pass just\n    // list the tensor slices we want to save and then another pass to actually\n    // set the data. Need to figure out if the interface works well.\n    std::pair<string, string> key_value(key, \"\");\n    if (!sts.AppendToString(&key_value.second)) {\n      return errors::Internal(\"Error writing Tensor. Possible size overflow.\");\n    }\n    data_.insert(key_value);\n  }\n  ++slices_;\n  return OkStatus();\n}\n\ntemplate <typename T>\nStatus TensorSliceWriter::SaveData(const T* data, int64_t num_elements,\n                                   SavedSlice* ss) {\n  size_t size_bound =\n      ss->ByteSize() + kTensorProtoHeaderBytes +\n      (MaxBytesPerElement(DataTypeToEnum<T>::value) * num_elements);\n  if (size_bound > kMaxMessageBytes) {\n    return errors::InvalidArgument(\n        \"Tensor slice is too large to serialize (conservative estimate: \",\n        size_bound, \" bytes)\");\n  }\n  Fill(data, num_elements, ss->mutable_data());\n  DCHECK_GE(ss->ByteSize(), 0);\n  DCHECK_LE(ss->ByteSize(), size_bound);\n  return OkStatus();\n}\n\ntemplate <>\nStatus TensorSliceWriter::SaveData(const tstring* data, int64_t num_elements,\n                                   SavedSlice* ss);\n\n// Create a table builder that will write to \"filename\" in\n// tensorflow::io::Table format.  If successful, return OK\n// and set \"*builder\" to the allocated builder.  Otherwise, return a\n// non-OK status.\nStatus CreateTableTensorSliceBuilder(const string& filename,\n                                     TensorSliceWriter::Builder** builder);\n\n}  // namespace checkpoint\n\n}  // namespace tensorflow\n\n#endif  // TENSORFLOW_CORE_UTIL_TENSOR_SLICE_WRITER_H_"