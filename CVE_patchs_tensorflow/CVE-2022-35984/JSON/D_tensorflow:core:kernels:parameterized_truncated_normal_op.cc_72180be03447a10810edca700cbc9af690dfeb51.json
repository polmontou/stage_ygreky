"diff --git a/tensorflow/core/kernels/parameterized_truncated_normal_op.cc b/tensorflow/core/kernels/parameterized_truncated_normal_op.cc\nindex 24b7e3f4ebd..a007d37c4e2 100644\n--- a/tensorflow/core/kernels/parameterized_truncated_normal_op.cc\n+++ b/tensorflow/core/kernels/parameterized_truncated_normal_op.cc\n@@ -32,6 +32,7 @@ limitations under the License.\n #include \"tensorflow/core/framework/register_types.h\"\n #include \"tensorflow/core/framework/tensor.h\"\n #include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/tensor_util.h\"\n #include \"tensorflow/core/kernels/stateless_random_ops.h\"\n #include \"tensorflow/core/lib/random/random_distributions.h\"\n #include \"tensorflow/core/platform/logging.h\"\n@@ -630,20 +631,18 @@ class ParameterizedTruncatedNormalOp : public OpKernel {\n     OP_REQUIRES(ctx, shape_tensor.NumElements() > 0,\n                 errors::InvalidArgument(\"Shape tensor must not be empty, got \",\n                                         shape_tensor.DebugString()));\n-    int32_t num_batches = shape_tensor.flat<int32>()(0);\n+    TensorShape tensor_shape;\n+    OP_REQUIRES_OK(ctx, tensor::MakeShape(shape_tensor, &tensor_shape));\n \n+    int32_t num_batches = tensor_shape.dim_size(0);\n     int32_t samples_per_batch = 1;\n-    const int32_t num_dims = shape_tensor.dim_size(0);\n+    const int32_t num_dims = tensor_shape.dims();\n     for (int32_t i = 1; i < num_dims; i++) {\n-      samples_per_batch *= shape_tensor.flat<int32>()(i);\n+      samples_per_batch *= tensor_shape.dim_size(i);\n     }\n     const int32_t num_elements = num_batches * samples_per_batch;\n \n     // Allocate the output before fudging num_batches and samples_per_batch.\n-    auto shape_vec = shape_tensor.flat<int32>();\n-    TensorShape tensor_shape;\n-    OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(\n-                            shape_vec.data(), shape_vec.size(), &tensor_shape));\n     Tensor* samples_tensor;\n     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, tensor_shape, &samples_tensor));\n "