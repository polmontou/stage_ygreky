"diff --git a/tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py b/tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py\nindex a1c6072abfd..8ad859230ed 100644\n--- a/tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py\n+++ b/tensorflow/python/kernel_tests/random/parameterized_truncated_normal_op_test.py\n@@ -303,6 +303,29 @@ class ParameterizedTruncatedNormalTest(test.TestCase):\n       self.assertAllGreater(samples, 0.)\n       self.assertAllGreater(samples_stateless, 0.)\n \n+  def testShapeTypes(self):\n+    for shape_dtype in [np.int32, np.int64]:\n+      shape = np.array([1000], dtype=shape_dtype)\n+      sample_op = random_ops.parameterized_truncated_normal(\n+          shape=shape, means=0.0, stddevs=0.1, minvals=-1., maxvals=1.)\n+      new_seed = random_ops.random_uniform([2],\n+                                           seed=1234,\n+                                           minval=0,\n+                                           maxval=(2**31 - 1),\n+                                           dtype=np.int32)\n+      sample_op_stateless = stateless.stateless_parameterized_truncated_normal(\n+          shape=shape,\n+          seed=new_seed,\n+          means=0.0,\n+          stddevs=0.1,\n+          minvals=-1.,\n+          maxvals=1.)\n+\n+      samples = self.evaluate(sample_op)\n+      stateless_samples = self.evaluate(sample_op_stateless)\n+      self.assertAllEqual(samples.shape, shape)\n+      self.assertAllEqual(stateless_samples.shape, shape)\n+\n   def testStatelessParameterizedTruncatedNormalHasGrads(self):\n     mean = variables.Variable(0.01)\n     stddev = variables.Variable(1.)"