"diff --git a/tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py b/tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py\nindex 9fb7724f695..f44c7316845 100644\n--- a/tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py\n+++ b/tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py\n@@ -20,11 +20,13 @@ import numpy as np\n \n from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors_impl\n from tensorflow.python.framework import test_util\n from tensorflow.python.ops import array_ops\n from tensorflow.python.ops import gradient_checker\n from tensorflow.python.ops import gradients_impl\n from tensorflow.python.ops import nn\n+from tensorflow.python.ops import random_ops\n import tensorflow.python.ops.nn_grad  # pylint: disable=unused-import\n from tensorflow.python.platform import test\n \n@@ -111,6 +113,41 @@ class LRNOpTest(test.TestCase):\n     self.assertAllClose(r, expected)\n     self.assertShapeEqual(expected, grad)\n \n+  @test_util.run_in_graph_and_eager_modes\n+  def testIncompatibleInputAndOutputImageShapes(self):\n+    depth_radius = 1\n+    bias = 1.59018219\n+    alpha = 0.117728651\n+    beta = 0.404427052\n+    input_grads = random_ops.random_uniform(\n+        shape=[4, 4, 4, 4],\n+        minval=-10000,\n+        maxval=10000,\n+        dtype=dtypes.float32,\n+        seed=-2033)\n+    input_image = random_ops.random_uniform(\n+        shape=[4, 4, 4, 4],\n+        minval=-10000,\n+        maxval=10000,\n+        dtype=dtypes.float32,\n+        seed=-2033)\n+    invalid_output_image = random_ops.random_uniform(\n+        shape=[4, 4, 4, 4, 4, 4],\n+        minval=-10000,\n+        maxval=10000,\n+        dtype=dtypes.float32,\n+        seed=-2033)\n+    with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):\n+      self.evaluate(\n+          nn.lrn_grad(\n+              input_grads=input_grads,\n+              input_image=input_image,\n+              output_image=invalid_output_image,\n+              depth_radius=depth_radius,\n+              bias=bias,\n+              alpha=alpha,\n+              beta=beta))\n+\n   def _RunAndVerifyGradients(self, dtype):\n     with self.cached_session():\n       # random shape"