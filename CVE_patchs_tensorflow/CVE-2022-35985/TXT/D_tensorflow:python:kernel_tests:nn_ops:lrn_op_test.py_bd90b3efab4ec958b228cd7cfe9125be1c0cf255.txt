diff --git a/tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py b/tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py
index 9fb7724f695..f44c7316845 100644
--- a/tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py
+++ b/tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py
@@ -20,11 +20,13 @@ import numpy as np
 
 from tensorflow.python.framework import constant_op
 from tensorflow.python.framework import dtypes
+from tensorflow.python.framework import errors_impl
 from tensorflow.python.framework import test_util
 from tensorflow.python.ops import array_ops
 from tensorflow.python.ops import gradient_checker
 from tensorflow.python.ops import gradients_impl
 from tensorflow.python.ops import nn
+from tensorflow.python.ops import random_ops
 import tensorflow.python.ops.nn_grad  # pylint: disable=unused-import
 from tensorflow.python.platform import test
 
@@ -111,6 +113,41 @@ class LRNOpTest(test.TestCase):
     self.assertAllClose(r, expected)
     self.assertShapeEqual(expected, grad)
 
+  @test_util.run_in_graph_and_eager_modes
+  def testIncompatibleInputAndOutputImageShapes(self):
+    depth_radius = 1
+    bias = 1.59018219
+    alpha = 0.117728651
+    beta = 0.404427052
+    input_grads = random_ops.random_uniform(
+        shape=[4, 4, 4, 4],
+        minval=-10000,
+        maxval=10000,
+        dtype=dtypes.float32,
+        seed=-2033)
+    input_image = random_ops.random_uniform(
+        shape=[4, 4, 4, 4],
+        minval=-10000,
+        maxval=10000,
+        dtype=dtypes.float32,
+        seed=-2033)
+    invalid_output_image = random_ops.random_uniform(
+        shape=[4, 4, 4, 4, 4, 4],
+        minval=-10000,
+        maxval=10000,
+        dtype=dtypes.float32,
+        seed=-2033)
+    with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):
+      self.evaluate(
+          nn.lrn_grad(
+              input_grads=input_grads,
+              input_image=input_image,
+              output_image=invalid_output_image,
+              depth_radius=depth_radius,
+              bias=bias,
+              alpha=alpha,
+              beta=beta))
+
   def _RunAndVerifyGradients(self, dtype):
     with self.cached_session():
       # random shape