"diff --git a/tensorflow/python/kernel_tests/data_structures/list_ops_test.py b/tensorflow/python/kernel_tests/data_structures/list_ops_test.py\nindex 796786aa306..7e7ad79e78a 100644\n--- a/tensorflow/python/kernel_tests/data_structures/list_ops_test.py\n+++ b/tensorflow/python/kernel_tests/data_structures/list_ops_test.py\n@@ -481,6 +481,30 @@ class ListOpsTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n     # TensorListScatter should return a list with size num_elements.\n     self.assertAllEqual(list_ops.tensor_list_length(l), 5)\n \n+  def testScatterFailsWhenElementShapeIsNotVector(self):\n+    c0 = constant_op.constant([1.0, 2.0])\n+    # In Eager mode, InvalidArgumentError is generated by the Compute function.\n+    # In graph mode, ValueError is generated by the shape function.\n+    with self.assertRaisesRegex(\n+        (errors.InvalidArgumentError, ValueError),\n+        \"must be at most rank 1\"):\n+      l = gen_list_ops.tensor_list_scatter(\n+          # Wrong element_shape. Should be at most rank 1.\n+          c0, [1, 3], element_shape=[[1]])\n+      self.evaluate(l)\n+\n+  def testScatterV2FailsWhenElementShapeIsNotVector(self):\n+    c0 = constant_op.constant([1.0, 2.0])\n+    # In Eager mode, InvalidArgumentError is generated by the Compute function.\n+    # In graph mode, ValueError is generated by the shape function.\n+    with self.assertRaisesRegex(\n+        (errors.InvalidArgumentError, ValueError),\n+        \"must be at most rank 1\"):\n+      l = gen_list_ops.tensor_list_scatter_v2(\n+          # Wrong element_shape. Should be at most rank 1.\n+          c0, [1, 3], element_shape=[[1]], num_elements=2)\n+      self.evaluate(l)\n+\n   def testScatterFailsWhenIndexLargerThanNumElements(self):\n     c0 = constant_op.constant([1.0, 2.0])\n     with self.assertRaisesRegex("