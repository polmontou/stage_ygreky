"# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for the API surface of the V1 tf.summary ops.\n\nThese tests don't check the actual serialized proto summary value for the\nmore complex summaries (e.g. audio, image).  Those test live separately in\ntensorflow/python/kernel_tests/summary_v1_*.py.\n\"\"\"\n\n\nfrom tensorflow.core.framework import summary_pb2\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import meta_graph\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import variables\nfrom tensorflow.python.platform import test\nfrom tensorflow.python.summary import summary as summary_lib\n\n\nclass SummaryTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testScalarSummary(self):\n    with self.cached_session() as s:\n      i = constant_op.constant(3)\n      with ops.name_scope('outer'):\n        im = summary_lib.scalar('inner', i)\n      summary_str = s.run(im)\n    summary = summary_pb2.Summary()\n    summary.ParseFromString(summary_str)\n    values = summary.value\n    self.assertEqual(len(values), 1)\n    self.assertEqual(values[0].tag, 'outer/inner')\n    self.assertEqual(values[0].simple_value, 3.0)\n\n  @test_util.run_deprecated_v1\n  def testScalarSummaryWithFamily(self):\n    with self.cached_session() as s:\n      i = constant_op.constant(7)\n      with ops.name_scope('outer'):\n        im1 = summary_lib.scalar('inner', i, family='family')\n        self.assertEqual(im1.op.name, 'outer/family/inner')\n        im2 = summary_lib.scalar('inner', i, family='family')\n        self.assertEqual(im2.op.name, 'outer/family/inner_1')\n      sm1, sm2 = s.run([im1, im2])\n    summary = summary_pb2.Summary()\n\n    summary.ParseFromString(sm1)\n    values = summary.value\n    self.assertEqual(len(values), 1)\n    self.assertEqual(values[0].tag, 'family/outer/family/inner')\n    self.assertEqual(values[0].simple_value, 7.0)\n\n    summary.ParseFromString(sm2)\n    values = summary.value\n    self.assertEqual(len(values), 1)\n    self.assertEqual(values[0].tag, 'family/outer/family/inner_1')\n    self.assertEqual(values[0].simple_value, 7.0)\n\n  @test_util.run_deprecated_v1\n  def testSummarizingVariable(self):\n    with self.cached_session() as s:\n      c = constant_op.constant(42.0)\n      v = variables.Variable(c)\n      ss = summary_lib.scalar('summary', v)\n      init = variables.global_variables_initializer()\n      s.run(init)\n      summ_str = s.run(ss)\n    summary = summary_pb2.Summary()\n    summary.ParseFromString(summ_str)\n    self.assertEqual(len(summary.value), 1)\n    value = summary.value[0]\n    self.assertEqual(value.tag, 'summary')\n    self.assertEqual(value.simple_value, 42.0)\n\n  @test_util.run_deprecated_v1\n  def testImageSummary(self):\n    with self.cached_session() as s:\n      i = array_ops.ones((5, 4, 4, 3))\n      with ops.name_scope('outer'):\n        im = summary_lib.image('inner', i, max_outputs=3)\n      summary_str = s.run(im)\n    summary = summary_pb2.Summary()\n    summary.ParseFromString(summary_str)\n    values = summary.value\n    self.assertEqual(len(values), 3)\n    tags = sorted(v.tag for v in values)\n    expected = sorted('outer/inner/image/{}'.format(i) for i in range(3))\n    self.assertEqual(tags, expected)\n\n  @test_util.run_deprecated_v1\n  def testImageSummaryWithFamily(self):\n    with self.cached_session() as s:\n      i = array_ops.ones((5, 2, 3, 1))\n      with ops.name_scope('outer'):\n        im = summary_lib.image('inner', i, max_outputs=3, family='family')\n        self.assertEqual(im.op.name, 'outer/family/inner')\n      summary_str = s.run(im)\n    summary = summary_pb2.Summary()\n    summary.ParseFromString(summary_str)\n    values = summary.value\n    self.assertEqual(len(values), 3)\n    tags = sorted(v.tag for v in values)\n    expected = sorted(\n        'family/outer/family/inner/image/{}'.format(i) for i in range(3))\n    self.assertEqual(tags, expected)\n\n  @test_util.run_deprecated_v1\n  def testHistogramSummary(self):\n    with self.cached_session() as s:\n      i = array_ops.ones((5, 4, 4, 3))\n      with ops.name_scope('outer'):\n        summ_op = summary_lib.histogram('inner', i)\n      summary_str = s.run(summ_op)\n    summary = summary_pb2.Summary()\n    summary.ParseFromString(summary_str)\n    self.assertEqual(len(summary.value), 1)\n    self.assertEqual(summary.value[0].tag, 'outer/inner')\n\n  @test_util.run_deprecated_v1\n  def testHistogramSummaryWithFamily(self):\n    with self.cached_session() as s:\n      i = array_ops.ones((5, 4, 4, 3))\n      with ops.name_scope('outer'):\n        summ_op = summary_lib.histogram('inner', i, family='family')\n        self.assertEqual(summ_op.op.name, 'outer/family/inner')\n      summary_str = s.run(summ_op)\n    summary = summary_pb2.Summary()\n    summary.ParseFromString(summary_str)\n    self.assertEqual(len(summary.value), 1)\n    self.assertEqual(summary.value[0].tag, 'family/outer/family/inner')\n\n  def testHistogramSummaryTypes(self):\n    for dtype in (dtypes.int8, dtypes.uint8, dtypes.int16, dtypes.int32,\n                  dtypes.float32, dtypes.float64):\n      const = constant_op.constant(10, dtype=dtype)\n      summary_lib.histogram('h', const)\n\n  @test_util.run_deprecated_v1\n  def testAudioSummary(self):\n    with self.cached_session() as s:\n      i = array_ops.ones((5, 3, 4))\n      with ops.name_scope('outer'):\n        aud = summary_lib.audio('inner', i, 0.2, max_outputs=3)\n      summary_str = s.run(aud)\n    summary = summary_pb2.Summary()\n    summary.ParseFromString(summary_str)\n    values = summary.value\n    self.assertEqual(len(values), 3)\n    tags = sorted(v.tag for v in values)\n    expected = sorted('outer/inner/audio/{}'.format(i) for i in range(3))\n    self.assertEqual(tags, expected)\n\n  @test_util.run_deprecated_v1\n  def testAudioSummaryWithFamily(self):\n    with self.cached_session() as s:\n      i = array_ops.ones((5, 3, 4))\n      with ops.name_scope('outer'):\n        aud = summary_lib.audio('inner', i, 0.2, max_outputs=3, family='family')\n        self.assertEqual(aud.op.name, 'outer/family/inner')\n      summary_str = s.run(aud)\n    summary = summary_pb2.Summary()\n    summary.ParseFromString(summary_str)\n    values = summary.value\n    self.assertEqual(len(values), 3)\n    tags = sorted(v.tag for v in values)\n    expected = sorted(\n        'family/outer/family/inner/audio/{}'.format(i) for i in range(3))\n    self.assertEqual(tags, expected)\n\n  def testAudioSummaryWithInvalidSampleRate(self):\n    with self.assertRaises(errors.InvalidArgumentError):\n      invalid_sample_rate = [22000.0, 22000.0]\n      self.evaluate(summary_lib.audio('', [[1.0]], invalid_sample_rate))\n\n  @test_util.run_deprecated_v1\n  def testTextSummary(self):\n    with self.cached_session():\n      with self.assertRaises(ValueError):\n        num = array_ops.constant(1)\n        summary_lib.text('foo', num)\n\n      # The API accepts vectors.\n      arr = array_ops.constant(['one', 'two', 'three'])\n      summ = summary_lib.text('foo', arr)\n      self.assertEqual(summ.op.type, 'TensorSummaryV2')\n\n      # the API accepts scalars\n      summ = summary_lib.text('foo', array_ops.constant('one'))\n      self.assertEqual(summ.op.type, 'TensorSummaryV2')\n\n  @test_util.run_deprecated_v1\n  def testSummaryNameConversion(self):\n    c = constant_op.constant(3)\n    s = summary_lib.scalar('name with spaces', c)\n    self.assertEqual(s.op.name, 'name_with_spaces')\n\n    s2 = summary_lib.scalar('name with many $#illegal^: characters!', c)\n    self.assertEqual(s2.op.name, 'name_with_many___illegal___characters_')\n\n    s3 = summary_lib.scalar('/name/with/leading/slash', c)\n    self.assertEqual(s3.op.name, 'name/with/leading/slash')\n\n  @test_util.run_deprecated_v1\n  def testSummaryWithFamilyMetaGraphExport(self):\n    with ops.name_scope('outer'):\n      i = constant_op.constant(11)\n      summ = summary_lib.scalar('inner', i)\n      self.assertEqual(summ.op.name, 'outer/inner')\n      summ_f = summary_lib.scalar('inner', i, family='family')\n      self.assertEqual(summ_f.op.name, 'outer/family/inner')\n\n    metagraph_def, _ = meta_graph.export_scoped_meta_graph(export_scope='outer')\n\n    with ops.Graph().as_default() as g:\n      meta_graph.import_scoped_meta_graph(metagraph_def, graph=g,\n                                          import_scope='new_outer')\n      # The summaries should exist, but with outer scope renamed.\n      new_summ = g.get_tensor_by_name('new_outer/inner:0')\n      new_summ_f = g.get_tensor_by_name('new_outer/family/inner:0')\n\n      # However, the tags are unaffected.\n      with self.cached_session() as s:\n        new_summ_str, new_summ_f_str = s.run([new_summ, new_summ_f])\n        new_summ_pb = summary_pb2.Summary()\n        new_summ_pb.ParseFromString(new_summ_str)\n        self.assertEqual('outer/inner', new_summ_pb.value[0].tag)\n        new_summ_f_pb = summary_pb2.Summary()\n        new_summ_f_pb.ParseFromString(new_summ_f_str)\n        self.assertEqual('family/outer/family/inner',\n                         new_summ_f_pb.value[0].tag)\n\n\nif __name__ == '__main__':\n  test.main()"