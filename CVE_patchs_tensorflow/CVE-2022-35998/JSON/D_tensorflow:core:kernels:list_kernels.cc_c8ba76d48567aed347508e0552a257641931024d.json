"diff --git a/tensorflow/core/kernels/list_kernels.cc b/tensorflow/core/kernels/list_kernels.cc\nindex 7b4465963bd..a87b9508780 100644\n--- a/tensorflow/core/kernels/list_kernels.cc\n+++ b/tensorflow/core/kernels/list_kernels.cc\n@@ -21,7 +21,11 @@ limitations under the License.\n \n #include \"tensorflow/core/kernels/list_kernels.h\"\n \n+#include <algorithm>\n+#include <iterator>\n #include <limits>\n+#include <memory>\n+#include <utility>\n \n #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n #include \"tensorflow/core/framework/allocator.h\"\n@@ -30,10 +34,6 @@ limitations under the License.\n #include \"tensorflow/core/framework/tensor_types.h\"\n #include \"tensorflow/core/framework/variant.h\"\n #include \"tensorflow/core/framework/variant_op_registry.h\"\n-#include \"tensorflow/core/kernels/concat_lib.h\"\n-#include \"tensorflow/core/lib/core/coding.h\"\n-#include \"tensorflow/core/lib/core/errors.h\"\n-#include \"tensorflow/core/util/util.h\"\n \n namespace tensorflow {\n \n@@ -49,6 +49,9 @@ Status TensorShapeFromTensor(const Tensor& t, PartialTensorShape* out) {\n     return errors::InvalidArgument(\n         \"The only valid scalar shape tensor is the fully unknown shape \"\n         \"specified as -1.\");\n+  } else if (t.shape().dims() != 1) {\n+    return errors::InvalidArgument(\"Shape must be at most rank 1 but is rank \",\n+                                   t.shape().dims());\n   }\n   if (t.dtype() == DT_INT32) {\n     return PartialTensorShape::MakePartialShape(t.vec<int32>().data(),"