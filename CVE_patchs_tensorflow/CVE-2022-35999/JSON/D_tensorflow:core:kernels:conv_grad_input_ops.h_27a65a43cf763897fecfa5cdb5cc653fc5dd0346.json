"diff --git a/tensorflow/core/kernels/conv_grad_input_ops.h b/tensorflow/core/kernels/conv_grad_input_ops.h\nindex 88df14d395c..a9db8a9795f 100644\n--- a/tensorflow/core/kernels/conv_grad_input_ops.h\n+++ b/tensorflow/core/kernels/conv_grad_input_ops.h\n@@ -37,6 +37,7 @@ limitations under the License.\n #include \"tensorflow/core/kernels/conv_2d.h\"\n #include \"tensorflow/core/kernels/conv_grad_ops.h\"\n #include \"tensorflow/core/kernels/conv_grad_shape_utils.h\"\n+#include \"tensorflow/core/kernels/fill_functor.h\"\n #ifdef TENSORFLOW_USE_LIBXSMM_CONVOLUTIONS\n #include \"tensorflow/core/kernels/xsmm_conv2d.h\"\n #endif\n@@ -436,6 +437,15 @@ class Conv2DBackpropInputOp : public OpKernel {\n       return;\n     }\n \n+    // If shapes are valid but `out_backprop` is empty, in_backprop should be\n+    // set to all zeros.  Otherwise, cudnn/dnnl fail with an empty input.\n+    if (out_backprop.NumElements() == 0) {\n+      functor::SetZeroFunctor<Device, T> set_zero;\n+      set_zero(context->eigen_device<Device>(),\n+               in_backprop->template flat<T>());\n+      return;\n+    }\n+\n     // For now we take the stride from the second and third dimensions only (we\n     // do not support striding on the batch or depth dimension).\n     const int stride_rows = GetTensorDim(strides_, data_format_, 'H');\n@@ -554,6 +564,15 @@ class Conv2DCustomBackpropInputOp : public OpKernel {\n       return;\n     }\n \n+    // If shapes are valid but `out_backprop` is empty, in_backprop should be\n+    // set to all zeros.  Otherwise, cudnn/dnnl fail with an empty input.\n+    if (out_backprop.NumElements() == 0) {\n+      functor::SetZeroFunctor<Device, T> set_zero;\n+      set_zero(context->eigen_device<Device>(),\n+               in_backprop->template flat<T>());\n+      return;\n+    }\n+\n // TODO(ezhulenev): Remove custom kernel and move XSMM support to\n // LaunchConv2DBackpropInputOp functor.\n #if defined TENSORFLOW_USE_LIBXSMM_CONVOLUTIONS && \\"