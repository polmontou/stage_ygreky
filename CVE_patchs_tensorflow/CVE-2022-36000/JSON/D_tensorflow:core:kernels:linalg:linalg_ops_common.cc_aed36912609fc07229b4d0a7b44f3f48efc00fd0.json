"diff --git a/tensorflow/core/kernels/linalg/linalg_ops_common.cc b/tensorflow/core/kernels/linalg/linalg_ops_common.cc\nindex 5529e04ab77..a64bdbed182 100644\n--- a/tensorflow/core/kernels/linalg/linalg_ops_common.cc\n+++ b/tensorflow/core/kernels/linalg/linalg_ops_common.cc\n@@ -15,6 +15,7 @@ limitations under the License.\n \n #include \"tensorflow/core/kernels/linalg/linalg_ops_common.h\"\n \n+#include <initializer_list>\n #include <utility>\n \n #include \"third_party/eigen3/Eigen/Core\"\n@@ -22,7 +23,9 @@ limitations under the License.\n #include \"tensorflow/core/framework/kernel_def_builder.h\"\n #include \"tensorflow/core/framework/op_kernel.h\"\n #include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/types.h\"\n #include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/platform/errors.h\"\n #include \"tensorflow/core/platform/logging.h\"\n #include \"tensorflow/core/platform/types.h\"\n \n@@ -152,6 +155,10 @@ void LinearAlgebraOp<InputScalar, OutputScalar>::AnalyzeInputs(\n     input_matrix_shapes->emplace_back(\n         std::initializer_list<int64_t>({num_rows, num_cols}));\n     inputs->emplace_back(&in);\n+    OP_REQUIRES(\n+        context, in.dtype() == DataTypeToEnum<InputScalar>::v(),\n+        errors::InvalidArgument(\"Invalid input dtype \", in.dtype(), \" vs \",\n+                                DataTypeToEnum<InputScalar>::v()));\n   }\n   // Have the derived class validate that the inputs are as expected.\n   ValidateInputMatrixShapes(context, *input_matrix_shapes);\n@@ -212,6 +219,11 @@ void LinearAlgebraOp<InputScalar, OutputScalar>::PrepareOutputs(\n       OP_REQUIRES_OK(context, context->allocate_output(\n                                   output_idx, output_tensor_shape, &out));\n     }\n+    OP_REQUIRES(\n+        context, out->dtype() == DataTypeToEnum<OutputScalar>::v(),\n+        errors::InvalidArgument(\"Invalid output dtype \", out->dtype(), \" vs \",\n+                                DataTypeToEnum<OutputScalar>::v()));\n+\n     outputs->emplace_back(out);\n   }\n }"