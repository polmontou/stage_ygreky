"# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for tensorflow.ops.random_ops.random_poisson.\"\"\"\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.kernel_tests.random import util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import random_ops\nfrom tensorflow.python.platform import test\nfrom tensorflow.python.platform import tf_logging\n\n# All supported dtypes for random_poisson().\n_SUPPORTED_DTYPES = (dtypes.float16, dtypes.float32, dtypes.float64,\n                     dtypes.int32, dtypes.int64)\n\n\nclass RandomPoissonTest(test.TestCase):\n  \"\"\"This is a large test due to the moments computation taking some time.\"\"\"\n\n  def _Sampler(self, num, lam, dtype, use_gpu, seed=None):\n\n    def func():\n      with self.session(use_gpu=use_gpu, graph=ops.Graph()) as sess:\n        rng = random_ops.random_poisson(lam, [num], dtype=dtype, seed=seed)\n        ret = np.empty([10, num])\n        for i in range(10):\n          ret[i, :] = self.evaluate(rng)\n      return ret\n\n    return func\n\n  def testMoments(self):\n    try:\n      from scipy import stats  # pylint: disable=g-import-not-at-top\n    except ImportError as e:\n      tf_logging.warn(\"Cannot test moments: %s\", e)\n      return\n\n    # The moments test is a z-value test.  This is the largest z-value\n    # we want to tolerate. Since the z-test approximates a unit normal\n    # distribution, it should almost definitely never exceed 6.\n    z_limit = 6.0\n    for dt in _SUPPORTED_DTYPES:\n      # Test when lam < 10 and when lam >= 10\n      for stride in 0, 4, 10:\n        for lam in (3., 20):\n          max_moment = 5\n          sampler = self._Sampler(10000, lam, dt, use_gpu=False, seed=12345)\n          z_scores = util.test_moment_matching(\n              sampler(),\n              max_moment,\n              stats.poisson(lam),\n              stride=stride,\n          )\n          self.assertAllLess(z_scores, z_limit)\n\n  # Checks that the CPU and GPU implementation returns the same results,\n  # given the same random seed\n  @test_util.run_deprecated_v1\n  def testCPUGPUMatch(self):\n    for dt in _SUPPORTED_DTYPES:\n      results = {}\n      for use_gpu in [False, True]:\n        sampler = self._Sampler(1000, 1.0, dt, use_gpu=use_gpu, seed=12345)\n        results[use_gpu] = sampler()\n      if dt == dtypes.float16:\n        self.assertAllClose(results[False], results[True], rtol=1e-3, atol=1e-3)\n      else:\n        self.assertAllClose(results[False], results[True], rtol=1e-6, atol=1e-6)\n\n  @test_util.run_deprecated_v1\n  def testSeed(self):\n    for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n      sx = self._Sampler(1000, 1.0, dt, use_gpu=True, seed=345)\n      sy = self._Sampler(1000, 1.0, dt, use_gpu=True, seed=345)\n      self.assertAllEqual(sx(), sy())\n\n  @test_util.run_deprecated_v1\n  def testNoCSE(self):\n    \"\"\"CSE = constant subexpression eliminator.\n\n    SetIsStateful() should prevent two identical random ops from getting\n    merged.\n    \"\"\"\n    for dtype in dtypes.float16, dtypes.float32, dtypes.float64:\n      with self.cached_session():\n        rnd1 = random_ops.random_poisson(2.0, [24], dtype=dtype)\n        rnd2 = random_ops.random_poisson(2.0, [24], dtype=dtype)\n        diff = rnd2 - rnd1\n        # Since these are all positive integers, the norm will\n        # be at least 1 if they are different.\n        self.assertGreaterEqual(np.linalg.norm(diff.eval()), 1)\n\n  def testZeroShape(self):\n    with self.cached_session():\n      rnd = random_ops.random_poisson([], [], seed=12345)\n      self.assertEqual([0], rnd.get_shape().as_list())\n      self.assertAllClose(np.array([], dtype=np.float32), self.evaluate(rnd))\n\n  @test_util.run_deprecated_v1\n  def testShape(self):\n    # Fully known shape\n    rnd = random_ops.random_poisson(2.0, [150], seed=12345)\n    self.assertEqual([150], rnd.get_shape().as_list())\n    rnd = random_ops.random_poisson(\n        lam=array_ops.ones([1, 2, 3]),\n        shape=[150],\n        seed=12345)\n    self.assertEqual([150, 1, 2, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_poisson(\n        lam=array_ops.ones([1, 2, 3]),\n        shape=[20, 30],\n        seed=12345)\n    self.assertEqual([20, 30, 1, 2, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_poisson(\n        lam=array_ops.placeholder(dtypes.float32, shape=(2,)),\n        shape=[12],\n        seed=12345)\n    self.assertEqual([12, 2], rnd.get_shape().as_list())\n    # Partially known shape.\n    rnd = random_ops.random_poisson(\n        lam=array_ops.ones([7, 3]),\n        shape=array_ops.placeholder(dtypes.int32, shape=(1,)),\n        seed=12345)\n    self.assertEqual([None, 7, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_poisson(\n        lam=array_ops.ones([9, 6]),\n        shape=array_ops.placeholder(dtypes.int32, shape=(3,)),\n        seed=12345)\n    self.assertEqual([None, None, None, 9, 6], rnd.get_shape().as_list())\n    # Unknown shape.\n    rnd = random_ops.random_poisson(\n        lam=array_ops.placeholder(dtypes.float32),\n        shape=array_ops.placeholder(dtypes.int32),\n        seed=12345)\n    self.assertIs(None, rnd.get_shape().ndims)\n    rnd = random_ops.random_poisson(\n        lam=array_ops.placeholder(dtypes.float32),\n        shape=[50],\n        seed=12345)\n    self.assertIs(None, rnd.get_shape().ndims)\n\n  @test_util.run_deprecated_v1\n  def testDTypeCombinationsV2(self):\n    \"\"\"Tests random_poisson_v2() for all supported dtype combinations.\"\"\"\n    with self.cached_session():\n      for lam_dt in _SUPPORTED_DTYPES:\n        for out_dt in _SUPPORTED_DTYPES:\n          random_ops.random_poisson(\n              constant_op.constant([1], dtype=lam_dt), [10],\n              dtype=out_dt).eval()\n\n  @test_util.run_deprecated_v1\n  def testInfRate(self):\n    sample = random_ops.random_poisson(shape=[2], lam=np.inf)\n    self.assertAllEqual([np.inf, np.inf], self.evaluate(sample))\n\n\nif __name__ == \"__main__\":\n  test.main()"