"diff --git a/tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py b/tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py\nindex 4c6d9974c1f..21059a72e7c 100644\n--- a/tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py\n+++ b/tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py\n@@ -77,6 +77,71 @@ class FakeQuantWithMinMaxVarsPerChannelOpTest(test_util.TensorFlowTestCase):\n               inputs=inputs, min=[0.0], max=[1.0, 1.1]))\n \n \n+class FakeQuantWithMinMaxVarsGradientOpTest(test_util.TensorFlowTestCase):\n+\n+  @test_util.run_in_graph_and_eager_modes\n+  def test_invalid_inputs(self):\n+    gradients = constant_op.constant(\n+        value=[[1.0], [2.0], [4.0]], dtype=dtypes.float32)\n+    inputs = constant_op.constant(\n+        value=[[1.0], [2.0], [4.0]], dtype=dtypes.float32)\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be equal rank|must be rank 0\"):\n+      self.evaluate(\n+          array_ops.fake_quant_with_min_max_vars_gradient(\n+              gradients=gradients,\n+              inputs=inputs,\n+              min=0.0,\n+              max=[[1.0], [2.0], [4.0]]))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          array_ops.fake_quant_with_min_max_vars_gradient(\n+              gradients=gradients,\n+              inputs=inputs,\n+              min=[[1.0], [2.0], [4.0]],\n+              max=[[1.0], [2.0], [4.0]]))\n+\n+\n+class FakeQuantWithMinMaxVarsPerChannelGradientOpTest(\n+    test_util.TensorFlowTestCase):\n+\n+  @test_util.run_in_graph_and_eager_modes\n+  def test_invalid_inputs(self):\n+    gradients = constant_op.constant(\n+        value=[[1.0], [2.0], [4.0]], dtype=dtypes.float32)\n+    inputs = constant_op.constant(\n+        value=[[1.0], [2.0], [4.0]], dtype=dtypes.float32)\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"Shapes must be equal rank|must be rank 1\"):\n+      self.evaluate(\n+          array_ops.fake_quant_with_min_max_vars_per_channel_gradient(\n+              gradients=gradients, inputs=inputs, min=[[0.0]], max=[1.0]))\n+\n+    with self.assertRaisesRegex(\n+        (ValueError, errors.InvalidArgumentError),\n+        \"Dimension 0 in both shapes must be equal|incorrect size\"):\n+      self.evaluate(\n+          array_ops.fake_quant_with_min_max_vars_per_channel_gradient(\n+              gradients=gradients, inputs=inputs, min=[0.0, 0.1], max=[1.0]))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"Shapes must be equal rank|must be rank 1\"):\n+      self.evaluate(\n+          array_ops.fake_quant_with_min_max_vars_per_channel_gradient(\n+              gradients=gradients, inputs=inputs, min=[1.0], max=[[1.0]]))\n+\n+    with self.assertRaisesRegex(\n+        (ValueError, errors.InvalidArgumentError),\n+        \"Dimension 0 in both shapes must be equal|incorrect size\"):\n+      self.evaluate(\n+          array_ops.fake_quant_with_min_max_vars_per_channel_gradient(\n+              gradients=gradients, inputs=inputs, min=[0.0], max=[1.0, 1.1]))\n+\n+\n class QuantizedBiasedAddTest(test_util.TensorFlowTestCase):\n \n   @test_util.run_in_graph_and_eager_modes\n@@ -337,10 +402,9 @@ class QuantizeDownAndShrinkRangeOpTest(test_util.TensorFlowTestCase):\n     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                 \"must be rank 0\"):\n       self.evaluate(\n-          math_ops.quantize_down_and_shrink_range(input=inputs,\n-                                                  input_min=[],\n-                                                  input_max=4.0,\n-                                                  out_type=dtypes.quint8))\n+          math_ops.quantize_down_and_shrink_range(\n+              input=inputs, input_min=[], input_max=4.0,\n+              out_type=dtypes.quint8))\n \n \n if __name__ == \"__main__\":"