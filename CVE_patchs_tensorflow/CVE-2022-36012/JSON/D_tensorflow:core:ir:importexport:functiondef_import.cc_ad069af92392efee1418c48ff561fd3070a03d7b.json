"diff --git a/tensorflow/core/ir/importexport/functiondef_import.cc b/tensorflow/core/ir/importexport/functiondef_import.cc\nindex 781baeaf632..f8916529197 100644\n--- a/tensorflow/core/ir/importexport/functiondef_import.cc\n+++ b/tensorflow/core/ir/importexport/functiondef_import.cc\n@@ -33,6 +33,7 @@ limitations under the License.\n #include \"tensorflow/core/ir/ops.h\"\n #include \"tensorflow/core/platform/errors.h\"\n #include \"tensorflow/core/platform/status.h\"\n+#include \"tensorflow/core/platform/statusor.h\"\n \n using tensorflow::AttrValue;\n using tensorflow::FunctionDef;\n@@ -40,6 +41,7 @@ using tensorflow::NodeDef;\n using tensorflow::OpDef;\n using tensorflow::OpDef_AttrDef;\n using tensorflow::Status;\n+using tensorflow::StatusOr;\n using tensorflow::errors::InvalidArgument;\n using tensorflow::protobuf::RepeatedPtrField;\n \n@@ -166,9 +168,12 @@ Status ImportNodes(ValueMapManager value_manager,\n     if (node.op().empty()) return InvalidArgument(\"empty op type\");\n     OperationState state(unknown_loc, absl::StrCat(\"tfg.\", node.op()));\n     // Fetch the inputs, creating placeholder if an input hasn't been visited.\n-    for (const std::string& input : node.input())\n+    for (const std::string& input : node.input()) {\n+      if (input.empty())\n+        return InvalidArgument(\"Node '\", node.name(), \"' has an empty input\");\n       state.operands.push_back(\n           value_manager.GetValueOrCreatePlaceholder(input));\n+    }\n     // Retrieve the entry in the nodes_map for this node and infer the result\n     // count from what was inferred during the first traversal above.\n     state.types.push_back(placeholder_ty);\n@@ -461,21 +466,31 @@ Status ImportGenericFunction(\n                               Value());\n   for (const auto& ret_val : func.ret()) {\n     auto position = output_name_to_position.find(ret_val.first);\n-    if (position == output_name_to_position.end())\n+    if (position == output_name_to_position.end()) {\n       return InvalidArgument(\n           \"Can't import function, returned value references unknown output \"\n           \"argument \",\n           ret_val.first);\n+    }\n+    if (ret_val.second.empty()) {\n+      return InvalidArgument(\"Function '\", func.signature().name(),\n+                             \"' has empty result name\");\n+    }\n     ret_vals[position->second] =\n         value_manager.GetValueOrCreatePlaceholder(ret_val.second);\n   }\n   for (const auto& ret_val : func.control_ret()) {\n     auto position = control_output_to_position.find(ret_val.first);\n-    if (position == control_output_to_position.end())\n+    if (position == control_output_to_position.end()) {\n       return InvalidArgument(\n           \"Can't import function, returned value references unknown output \"\n           \"argument \",\n           ret_val.first);\n+    }\n+    if (ret_val.second.empty()) {\n+      return InvalidArgument(\"Function '\", func.signature().name(),\n+                             \"' has empty control result name\");\n+    }\n     Value result = value_manager.GetValueOrCreatePlaceholder(\n         (Twine(\"^\") + ret_val.second).str());\n     if (!result.getType().isa<ControlType>())"