"diff --git a/tensorflow/core/kernels/quantized_bias_add_op.cc b/tensorflow/core/kernels/quantized_bias_add_op.cc\nindex db0e21a4980..c064f9b1b21 100644\n--- a/tensorflow/core/kernels/quantized_bias_add_op.cc\n+++ b/tensorflow/core/kernels/quantized_bias_add_op.cc\n@@ -20,6 +20,7 @@ limitations under the License.\n #include \"tensorflow/core/framework/numeric_op.h\"\n #include \"tensorflow/core/framework/op_kernel.h\"\n #include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n #include \"tensorflow/core/kernels/meta_support.h\"\n #include \"tensorflow/core/kernels/ops_util.h\"\n #include \"tensorflow/core/kernels/quantization_utils.h\"\n@@ -38,10 +39,30 @@ class QuantizedBiasAddOp : public OpKernel {\n   void Compute(OpKernelContext* context) override {\n     const Tensor& input = context->input(0);\n     const Tensor& bias = context->input(1);\n-    const float input_min = context->input(2).flat<float>()(0);\n-    const float input_max = context->input(3).flat<float>()(0);\n-    const float bias_min = context->input(4).flat<float>()(0);\n-    const float bias_max = context->input(5).flat<float>()(0);\n+\n+    const Tensor& min_input = context->input(2);\n+    const Tensor& max_input = context->input(3);\n+    const Tensor& min_bias = context->input(4);\n+    const Tensor& max_bias = context->input(5);\n+    OP_REQUIRES(\n+        context, TensorShapeUtils::IsScalar(min_input.shape()),\n+        errors::InvalidArgument(\"`min_input` must be rank 0 but is rank \",\n+                                min_input.dims()));\n+    OP_REQUIRES(\n+        context, TensorShapeUtils::IsScalar(max_input.shape()),\n+        errors::InvalidArgument(\"`max_input` must be rank 0 but is rank \",\n+                                max_input.dims()));\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(min_bias.shape()),\n+                errors::InvalidArgument(\n+                    \"`min_bias` must be rank 0 but is rank \", min_bias.dims()));\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(max_bias.shape()),\n+                errors::InvalidArgument(\n+                    \"`max_bias` must be rank 0 but is rank \", max_bias.dims()));\n+\n+    const float input_min = min_input.flat<float>()(0);\n+    const float input_max = max_input.flat<float>()(0);\n+    const float bias_min = min_bias.flat<float>()(0);\n+    const float bias_max = max_bias.flat<float>()(0);\n \n     OP_REQUIRES(context, TensorShapeUtils::IsMatrixOrHigher(input.shape()),\n                 errors::InvalidArgument(\"Input tensor must be at least 2D: \","