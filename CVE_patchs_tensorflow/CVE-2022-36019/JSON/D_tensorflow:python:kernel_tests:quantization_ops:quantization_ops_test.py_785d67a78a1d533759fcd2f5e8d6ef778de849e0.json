"diff --git a/tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py b/tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py\nnew file mode 100644\nindex 00000000000..af7cecf2ffb\n--- /dev/null\n+++ b/tensorflow/python/kernel_tests/quantization_ops/quantization_ops_test.py\n@@ -0,0 +1,210 @@\n+# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Tests for tf.quantize ops.\"\"\"\n+import numpy as np\n+\n+from tensorflow.python.framework import constant_op\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors\n+from tensorflow.python.framework import test_util\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import math_ops\n+from tensorflow.python.ops import nn_ops\n+from tensorflow.python.platform import googletest\n+\n+\n+class FakeQuantWithMinMaxVarsOpTest(test_util.TensorFlowTestCase):\n+\n+  @test_util.run_in_graph_and_eager_modes\n+  def test_invalid_inputs(self):\n+    inputs = constant_op.constant(\n+        value=[[1.0], [2.0], [4.0]], dtype=dtypes.float32)\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          array_ops.fake_quant_with_min_max_vars(\n+              inputs=inputs, min=0.0, max=[[1.0], [2.0], [4.0]]))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          array_ops.fake_quant_with_min_max_vars(\n+              inputs=inputs, min=[[1.0], [2.0], [4.0]], max=1.0))\n+\n+\n+class FakeQuantWithMinMaxVarsPerChannelOpTest(test_util.TensorFlowTestCase):\n+\n+  @test_util.run_in_graph_and_eager_modes\n+  def test_invalid_inputs(self):\n+    inputs = constant_op.constant(\n+        value=[[1.0], [2.0], [4.0]], dtype=dtypes.float32)\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 1\"):\n+      self.evaluate(\n+          array_ops.fake_quant_with_min_max_vars_per_channel(\n+              inputs=inputs, min=[[0.0]], max=[1.0]))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"Dimensions must be equal|incorrect size\"):\n+      self.evaluate(\n+          array_ops.fake_quant_with_min_max_vars_per_channel(\n+              inputs=inputs, min=[0.0, 0.1], max=[1.0]))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 1\"):\n+      self.evaluate(\n+          array_ops.fake_quant_with_min_max_vars_per_channel(\n+              inputs=inputs, min=[1.0], max=[[1.0]]))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"Dimensions must be equal|incorrect size\"):\n+      self.evaluate(\n+          array_ops.fake_quant_with_min_max_vars_per_channel(\n+              inputs=inputs, min=[0.0], max=[1.0, 1.1]))\n+\n+\n+class QuantizedBiasedAddTest(test_util.TensorFlowTestCase):\n+\n+  @test_util.run_in_graph_and_eager_modes\n+  def test_invalid_inputs(self):\n+    inputs = constant_op.constant(\n+        np.int8(0), shape=[3, 3, 3, 3], dtype=dtypes.qint8)\n+    bias = constant_op.constant(np.int8(0), shape=[3], dtype=dtypes.qint8)\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          nn_ops.quantized_bias_add(\n+              input=inputs,\n+              bias=bias,\n+              min_input=[],\n+              max_input=1.0,\n+              min_bias=0.0,\n+              max_bias=1.0,\n+              out_type=dtypes.qint32))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          nn_ops.quantized_bias_add(\n+              input=inputs,\n+              bias=bias,\n+              min_input=0.0,\n+              max_input=[],\n+              min_bias=0.0,\n+              max_bias=1.0,\n+              out_type=dtypes.qint32))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          nn_ops.quantized_bias_add(\n+              input=inputs,\n+              bias=bias,\n+              min_input=0.0,\n+              max_input=1.0,\n+              min_bias=[],\n+              max_bias=1.0,\n+              out_type=dtypes.qint32))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          nn_ops.quantized_bias_add(\n+              input=inputs,\n+              bias=bias,\n+              min_input=0.0,\n+              max_input=1.0,\n+              min_bias=0.0,\n+              max_bias=[],\n+              out_type=dtypes.qint32))\n+\n+\n+class QuantizedInstanceNormOpTest(test_util.TensorFlowTestCase):\n+\n+  @test_util.run_in_graph_and_eager_modes\n+  def test_invalid_inputs(self):\n+    inputs = constant_op.constant(\n+        np.uint8(0), shape=[3, 3, 3, 3], dtype=dtypes.quint8)\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          array_ops.quantized_instance_norm(\n+              x=inputs, x_min=0.0, x_max=[[1.0], [2.0], [4.0]]))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          array_ops.quantized_instance_norm(\n+              x=inputs, x_min=[[1.0], [2.0], [4.0]], x_max=1.0))\n+\n+\n+class RequantizeOpTest(test_util.TensorFlowTestCase):\n+\n+  @test_util.run_in_graph_and_eager_modes\n+  def test_invalid_inputs(self):\n+    inputs = constant_op.constant(\n+        np.int32(0), shape=[3, 3, 3, 3], dtype=dtypes.qint32)\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          math_ops.requantize(\n+              input=inputs,\n+              input_min=[],\n+              input_max=1.0,\n+              requested_output_min=0.0,\n+              requested_output_max=1.0,\n+              out_type=dtypes.qint8))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          math_ops.requantize(\n+              input=inputs,\n+              input_min=0.0,\n+              input_max=[],\n+              requested_output_min=0.0,\n+              requested_output_max=1.0,\n+              out_type=dtypes.qint8))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          math_ops.requantize(\n+              input=inputs,\n+              input_min=0.0,\n+              input_max=1.0,\n+              requested_output_min=[],\n+              requested_output_max=1.0,\n+              out_type=dtypes.qint8))\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"must be rank 0\"):\n+      self.evaluate(\n+          math_ops.requantize(\n+              input=inputs,\n+              input_min=0.0,\n+              input_max=1.0,\n+              requested_output_min=0.0,\n+              requested_output_max=[],\n+              out_type=dtypes.qint8))\n+\n+\n+if __name__ == \"__main__\":\n+  googletest.main()"