"diff --git a/tensorflow/python/lib/core/ndarray_tensor_bridge.cc b/tensorflow/python/lib/core/ndarray_tensor_bridge.cc\nindex 00aeed4978d..b3b1fe2fdc7 100644\n--- a/tensorflow/python/lib/core/ndarray_tensor_bridge.cc\n+++ b/tensorflow/python/lib/core/ndarray_tensor_bridge.cc\n@@ -13,8 +13,12 @@ See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================*/\n \n+// clang-format off\n // Must be included first.\n #include \"tensorflow/python/lib/core/numpy.h\"\n+// clang-format on\n+\n+#include \"tensorflow/python/lib/core/ndarray_tensor_bridge.h\"\n \n #include <vector>\n \n@@ -22,7 +26,7 @@ limitations under the License.\n #include \"tensorflow/core/lib/core/errors.h\"\n #include \"tensorflow/core/platform/mutex.h\"\n #include \"tensorflow/python/lib/core/bfloat16.h\"\n-#include \"tensorflow/python/lib/core/ndarray_tensor_bridge.h\"\n+#include \"tensorflow/python/lib/core/py_util.h\"\n \n namespace tensorflow {\n \n@@ -214,6 +218,20 @@ Status ArrayFromMemory(int dim_size, npy_intp* dims, void* data, DataType dtype,\n   }\n   auto* np_array = reinterpret_cast<PyArrayObject*>(\n       PyArray_SimpleNewFromData(dim_size, dims, type_num, data));\n+  if (np_array == nullptr) {\n+    string shape_str = absl::StrJoin(\n+        absl::Span<npy_intp>{dims, static_cast<size_t>(dim_size)}, \", \");\n+    if (PyErr_Occurred()) {\n+      string exception_str = PyExceptionFetch();\n+      PyErr_Clear();\n+      return errors::InvalidArgument(\n+          \"Failed to create numpy array from tensor of shape [\", shape_str,\n+          \"]. Numpy error: \", exception_str);\n+    }\n+    return errors::Internal(\n+        \"Failed to create numpy array from tensor of shape [\", shape_str, \"]\");\n+  }\n+\n   PyArray_CLEARFLAGS(np_array, NPY_ARRAY_OWNDATA);\n   if (PyType_Ready(&TensorReleaserType) == -1) {\n     return errors::Unknown(\"Python type initialization failed.\");"