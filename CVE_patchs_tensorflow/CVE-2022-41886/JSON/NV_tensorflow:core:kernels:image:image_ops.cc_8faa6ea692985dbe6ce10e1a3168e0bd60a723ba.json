"/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#define EIGEN_USE_THREADS\n\n#if GOOGLE_CUDA\n#define EIGEN_USE_GPU\n#endif  // GOOGLE_CUDA\n\n#include \"tensorflow/core/kernels/image/image_ops.h\"\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\nnamespace functor {\n\n// Explicit instantiation of the CPU functor.\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\ntemplate struct FillProjectiveTransform<CPUDevice, uint8>;\ntemplate struct FillProjectiveTransform<CPUDevice, int32>;\ntemplate struct FillProjectiveTransform<CPUDevice, int64_t>;\ntemplate struct FillProjectiveTransform<CPUDevice, Eigen::half>;\ntemplate struct FillProjectiveTransform<CPUDevice, float>;\ntemplate struct FillProjectiveTransform<CPUDevice, double>;\n\n}  // end namespace functor\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\nusing functor::FillProjectiveTransform;\nusing generator::Interpolation;\nusing generator::Mode;\n\ntemplate <typename Device, typename T>\nvoid DoImageProjectiveTransformOp(OpKernelContext* ctx,\n                                  const Interpolation& interpolation,\n                                  const Mode& fill_mode) {\n  const Tensor& images_t = ctx->input(0);\n  const Tensor& transform_t = ctx->input(1);\n  OP_REQUIRES(ctx, images_t.shape().dims() == 4,\n              errors::InvalidArgument(\"Input images must have rank 4\"));\n  OP_REQUIRES(ctx,\n              (TensorShapeUtils::IsMatrix(transform_t.shape()) &&\n               (transform_t.dim_size(0) == images_t.dim_size(0) ||\n                transform_t.dim_size(0) == 1) &&\n               transform_t.dim_size(1) == 8),\n              errors::InvalidArgument(\n                  \"Input transform should be num_images x 8 or 1 x 8\"));\n\n  int32_t out_height, out_width;\n  // Kernel is shared by legacy \"ImageProjectiveTransform\" op with 2 args.\n  if (ctx->num_inputs() >= 3) {\n    const Tensor& shape_t = ctx->input(2);\n    OP_REQUIRES(ctx, shape_t.dims() == 1,\n                errors::InvalidArgument(\"output shape must be 1-dimensional\",\n                                        shape_t.shape().DebugString()));\n    OP_REQUIRES(ctx, shape_t.NumElements() == 2,\n                errors::InvalidArgument(\"output shape must have two elements\",\n                                        shape_t.shape().DebugString()));\n    auto shape_vec = shape_t.vec<int32>();\n    out_height = shape_vec(0);\n    out_width = shape_vec(1);\n    OP_REQUIRES(ctx, out_height > 0 && out_width > 0,\n                errors::InvalidArgument(\"output dimensions must be positive\"));\n  } else {\n    // Shape is N (batch size), H (height), W (width), C (channels).\n    out_height = images_t.shape().dim_size(1);\n    out_width = images_t.shape().dim_size(2);\n  }\n\n  T fill_value(0);\n  // Kernel is shared by \"ImageProjectiveTransformV2\" with 3 args.\n  if (ctx->num_inputs() >= 4) {\n    const Tensor& fill_value_t = ctx->input(3);\n    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(fill_value_t.shape()),\n                errors::InvalidArgument(\"fill_value must be a scalar\",\n                                        fill_value_t.shape().DebugString()));\n    fill_value = static_cast<T>(*(fill_value_t.scalar<float>().data()));\n  }\n\n  Tensor* output_t;\n  TensorShape output_shape;\n  OP_REQUIRES_OK(\n      ctx, TensorShape::BuildTensorShape({images_t.dim_size(0), out_height,\n                                          out_width, images_t.dim_size(3)},\n                                         &output_shape));\n  OP_REQUIRES_OK(ctx, ctx->allocate_output(0, output_shape, &output_t));\n  auto output = output_t->tensor<T, 4>();\n  auto images = images_t.tensor<T, 4>();\n  auto transform = transform_t.matrix<float>();\n\n  (FillProjectiveTransform<Device, T>(interpolation))(\n      ctx->eigen_device<Device>(), &output, images, transform, fill_mode,\n      fill_value);\n}\n\ntemplate <typename Device, typename T>\nclass ImageProjectiveTransformV2 : public OpKernel {\n private:\n  Interpolation interpolation_;\n  Mode fill_mode_;\n\n public:\n  explicit ImageProjectiveTransformV2(OpKernelConstruction* ctx)\n      : OpKernel(ctx) {\n    string interpolation_str;\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"interpolation\", &interpolation_str));\n    if (interpolation_str == \"NEAREST\") {\n      interpolation_ = Interpolation::NEAREST;\n    } else if (interpolation_str == \"BILINEAR\") {\n      interpolation_ = Interpolation::BILINEAR;\n    } else {\n      LOG(ERROR) << \"Invalid interpolation \" << interpolation_str\n                 << \". Supported types: NEAREST, BILINEAR\";\n    }\n    string mode_str;\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"fill_mode\", &mode_str));\n    if (mode_str == \"REFLECT\") {\n      fill_mode_ = Mode::FILL_REFLECT;\n    } else if (mode_str == \"WRAP\") {\n      fill_mode_ = Mode::FILL_WRAP;\n    } else if (mode_str == \"CONSTANT\") {\n      fill_mode_ = Mode::FILL_CONSTANT;\n    } else if (mode_str == \"NEAREST\") {\n      fill_mode_ = Mode::FILL_NEAREST;\n    } else {\n      LOG(ERROR) << \"Invalid mode \" << mode_str\n                 << \". Supported types: REFLECT, WRAP, CONSTANT, NEAREST\";\n    }\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    DoImageProjectiveTransformOp<Device, T>(ctx, interpolation_, fill_mode_);\n  }\n};\n\n#define REGISTER(TYPE)                                        \\\n  REGISTER_KERNEL_BUILDER(Name(\"ImageProjectiveTransformV2\")  \\\n                              .Device(DEVICE_CPU)             \\\n                              .TypeConstraint<TYPE>(\"dtype\"), \\\n                          ImageProjectiveTransformV2<CPUDevice, TYPE>)\n\nTF_CALL_uint8(REGISTER);\nTF_CALL_int32(REGISTER);\nTF_CALL_int64(REGISTER);\nTF_CALL_half(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\n\n#undef REGISTER\n\ntemplate <typename Device, typename T>\nclass ImageProjectiveTransformV3\n    : public ImageProjectiveTransformV2<Device, T> {\n public:\n  explicit ImageProjectiveTransformV3(OpKernelConstruction* ctx)\n      : ImageProjectiveTransformV2<Device, T>(ctx) {}\n};\n\n#define REGISTER(TYPE)                                        \\\n  REGISTER_KERNEL_BUILDER(Name(\"ImageProjectiveTransformV3\")  \\\n                              .Device(DEVICE_CPU)             \\\n                              .TypeConstraint<TYPE>(\"dtype\"), \\\n                          ImageProjectiveTransformV3<CPUDevice, TYPE>)\n\nTF_CALL_uint8(REGISTER);\nTF_CALL_int32(REGISTER);\nTF_CALL_int64(REGISTER);\nTF_CALL_half(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\n\n#undef REGISTER\n\n#if GOOGLE_CUDA\n\ntypedef Eigen::GpuDevice GPUDevice;\ntypedef generator::Mode Mode;\n\nnamespace functor {\n\n// NOTE(ringwalt): We get an undefined symbol error if we don't explicitly\n// instantiate the operator() in GCC'd code.\n#define DECLARE_PROJECT_FUNCTOR(TYPE)                                       \\\n  template <>                                                               \\\n  void FillProjectiveTransform<GPUDevice, TYPE>::operator()(                \\\n      const GPUDevice& device, OutputType* output, const InputType& images, \\\n      const TransformsType& transform, const Mode fill_mode,                \\\n      const TYPE fill_value) const;                                         \\\n  extern template struct FillProjectiveTransform<GPUDevice, TYPE>\n\nTF_CALL_uint8(DECLARE_PROJECT_FUNCTOR);\nTF_CALL_int32(DECLARE_PROJECT_FUNCTOR);\nTF_CALL_int64(DECLARE_PROJECT_FUNCTOR);\nTF_CALL_half(DECLARE_PROJECT_FUNCTOR);\nTF_CALL_float(DECLARE_PROJECT_FUNCTOR);\nTF_CALL_double(DECLARE_PROJECT_FUNCTOR);\n\n}  // end namespace functor\n\nnamespace generator {\n\n#define DECLARE_MAP_FUNCTOR(Mode)                                         \\\n  template <>                                                             \\\n  float MapCoordinate<GPUDevice, Mode>::operator()(const float out_coord, \\\n                                                   const DenseIndex len); \\\n  extern template struct MapCoordinate<GPUDevice, Mode>\n\nDECLARE_MAP_FUNCTOR(Mode::FILL_REFLECT);\nDECLARE_MAP_FUNCTOR(Mode::FILL_WRAP);\nDECLARE_MAP_FUNCTOR(Mode::FILL_CONSTANT);\nDECLARE_MAP_FUNCTOR(Mode::FILL_NEAREST);\n\n}  // end namespace generator\n\n#define REGISTER(TYPE)                                       \\\n  REGISTER_KERNEL_BUILDER(Name(\"ImageProjectiveTransformV2\") \\\n                              .Device(DEVICE_GPU)            \\\n                              .TypeConstraint<TYPE>(\"dtype\") \\\n                              .HostMemory(\"output_shape\"),   \\\n                          ImageProjectiveTransformV2<GPUDevice, TYPE>)\n\nTF_CALL_uint8(REGISTER);\nTF_CALL_int32(REGISTER);\nTF_CALL_int64(REGISTER);\nTF_CALL_half(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\n\n#undef REGISTER\n\n#define REGISTER(TYPE)                                       \\\n  REGISTER_KERNEL_BUILDER(Name(\"ImageProjectiveTransformV3\") \\\n                              .Device(DEVICE_GPU)            \\\n                              .TypeConstraint<TYPE>(\"dtype\") \\\n                              .HostMemory(\"output_shape\")    \\\n                              .HostMemory(\"fill_value\"),     \\\n                          ImageProjectiveTransformV3<GPUDevice, TYPE>)\n\nTF_CALL_uint8(REGISTER);\nTF_CALL_int32(REGISTER);\nTF_CALL_int64(REGISTER);\nTF_CALL_half(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\n\n#undef REGISTER\n\n#endif  // GOOGLE_CUDA\n\n}  // end namespace tensorflow"