"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/util/bcast.h\"\n\n#include \"tensorflow/core/lib/strings/str_util.h\"\n#include \"tensorflow/core/lib/strings/strcat.h\"\n#include \"tensorflow/core/platform/test.h\"\n#include \"tensorflow/core/platform/test_benchmark.h\"\n\nnamespace tensorflow {\nnamespace {\n\nstring BCast(const tensorflow::BCast::Vec& x, const tensorflow::BCast::Vec& y,\n             const bool fewer_dims_optimization = true) {\n  tensorflow::BCast b(x, y, fewer_dims_optimization);\n  if (!b.IsValid()) {\n    return \"invalid\";\n  }\n  string ret;\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.x_reshape(), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.x_bcast(), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.y_reshape(), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.y_bcast(), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.result_shape(), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.output_shape(), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.grad_x_reduce_idx(), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.grad_y_reduce_idx(), \",\"), \"]\");\n  return ret;\n}\n\nstring BCastBatchIndices(const tensorflow::BCast::Vec& x,\n                         const tensorflow::BCast::Vec& y,\n                         const bool fewer_dims_optimization = true) {\n  tensorflow::BCast b(x, y, fewer_dims_optimization,\n                      /*return_flattened_batch_indices=*/true);\n  string ret;\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.x_batch_indices(), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.y_batch_indices(), \",\"), \"]\");\n  return ret;\n}\n\nstring BCastList3(const tensorflow::BCast::Vec& x,\n                  const tensorflow::BCast::Vec& y,\n                  const tensorflow::BCast::Vec& z,\n                  const bool fewer_dims_optimization = true) {\n  tensorflow::BCastList<3> b({x, y, z}, fewer_dims_optimization);\n  if (!b.IsValid()) {\n    return \"invalid\";\n  }\n  string ret;\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.reshape(0), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.bcast(0), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.reshape(1), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.bcast(1), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.reshape(2), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.bcast(2), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.result_shape(), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.output_shape(), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.grad_reduce_idx(0), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.grad_reduce_idx(1), \",\"), \"]\");\n  strings::StrAppend(&ret, \"[\", absl::StrJoin(b.grad_reduce_idx(2), \",\"), \"]\");\n  return ret;\n}\n\nTEST(BCastTest, Invalid) {\n  for (const bool use_optimization : {true, false}) {\n    EXPECT_EQ(\"invalid\", BCast({5, 3, 2}, {3}, use_optimization));\n    EXPECT_EQ(\"invalid\", BCast({5, 3, 2}, {2, 2}, use_optimization));\n    EXPECT_EQ(\"invalid\", BCast({5, 3, 2}, {10, 1, 1}, use_optimization));\n    EXPECT_EQ(\"invalid\",\n              BCast({1, 2, 1, 2, 1, 2}, {2, 4, 2, 1, 2, 1}, use_optimization));\n  }\n}\n\nTEST(BCastListTest, Invalid) {\n  for (const bool use_optimization : {true, false}) {\n    EXPECT_EQ(\"invalid\", BCastList3({5, 3, 2}, {3}, {1}, use_optimization));\n    EXPECT_EQ(\"invalid\", BCastList3({5, 3, 2}, {2, 2}, {1}, use_optimization));\n    EXPECT_EQ(\"invalid\",\n              BCastList3({5, 3, 2}, {10, 1, 1}, {1}, use_optimization));\n    EXPECT_EQ(\"invalid\", BCastList3({1, 2, 1, 2, 1, 2}, {2, 4, 2, 1, 2, 1}, {1},\n                                    use_optimization));\n    EXPECT_EQ(\"invalid\", BCastList3({5, 3, 2}, {1}, {3}, use_optimization));\n    EXPECT_EQ(\"invalid\", BCastList3({5, 3, 2}, {1}, {2, 2}, use_optimization));\n    EXPECT_EQ(\"invalid\",\n              BCastList3({5, 3, 2}, {1}, {10, 1, 1}, use_optimization));\n\n    EXPECT_EQ(\"invalid\", BCastList3({1}, {5, 3, 2}, {3}, use_optimization));\n    EXPECT_EQ(\"invalid\", BCastList3({1}, {5, 3, 2}, {2, 2}, use_optimization));\n    EXPECT_EQ(\"invalid\",\n              BCastList3({1}, {5, 3, 2}, {10, 1, 1}, use_optimization));\n  }\n}\n\nTEST(BCastTest, Basic_SameShape) {\n  // Effectively no broadcast needed.\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {11, 7, 5, 3, 2}),\n            \"[2310][1][2310][1]\"\n            \"[2310]\"\n            \"[11,7,5,3,2]\"\n            \"[][]\");\n\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {11, 7, 5, 3, 2}, false),\n            \"[11,7,5,3,2][1,1,1,1,1][11,7,5,3,2][1,1,1,1,1]\"\n            \"[11,7,5,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[][]\");\n}\n\nTEST(BCastListTest, Basic_SameShape) {\n  // Effectively no broadcast needed.\n  EXPECT_EQ(BCastList3({11, 7, 5, 3, 2}, {11, 7, 5, 3, 2}, {11, 7, 5, 3, 2}),\n            \"[2310][1][2310][1][2310][1]\"\n            \"[2310]\"\n            \"[11,7,5,3,2]\"\n            \"[][][]\");\n\n  EXPECT_EQ(\n      BCastList3({11, 7, 5, 3, 2}, {11, 7, 5, 3, 2}, {11, 7, 5, 3, 2}, false),\n      \"[11,7,5,3,2][1,1,1,1,1][11,7,5,3,2][1,1,1,1,1][11,7,5,3,2][1,1,1,1,1]\"\n      \"[11,7,5,3,2]\"\n      \"[11,7,5,3,2]\"\n      \"[][][]\");\n}\n\nTEST(BCastTest, Basic_SameShapeWithZeroDim) {\n  // Effectively no broadcast needed.\n  EXPECT_EQ(BCast({11, 7, 0, 3, 2}, {11, 7, 0, 3, 2}),\n            \"[0][1][0][1]\"\n            \"[0]\"\n            \"[11,7,0,3,2]\"\n            \"[][]\");\n\n  EXPECT_EQ(BCast({11, 7, 0, 3, 2}, {11, 7, 0, 3, 2}, false),\n            \"[11,7,0,3,2][1,1,1,1,1][11,7,0,3,2][1,1,1,1,1]\"\n            \"[11,7,0,3,2]\"\n            \"[11,7,0,3,2]\"\n            \"[][]\");\n}\n\nTEST(BCastListTest, Basic_SameShapeWithZeroDim) {\n  // Effectively no broadcast needed.\n  EXPECT_EQ(BCastList3({11, 7, 0, 3, 2}, {11, 7, 0, 3, 2}, {11, 7, 0, 3, 2}),\n            \"[0][1][0][1][0][1]\"\n            \"[0]\"\n            \"[11,7,0,3,2]\"\n            \"[][][]\");\n\n  EXPECT_EQ(\n      BCastList3({11, 7, 0, 3, 2}, {11, 7, 0, 3, 2}, {11, 7, 0, 3, 2}, false),\n      \"[11,7,0,3,2][1,1,1,1,1][11,7,0,3,2][1,1,1,1,1][11,7,0,3,2][1,1,1,1,1]\"\n      \"[11,7,0,3,2]\"\n      \"[11,7,0,3,2]\"\n      \"[][][]\");\n}\n\nTEST(BCastTest, Basic_Scalar_Scalar) {\n  // Effectively it's a scalar and a scalar.\n  // [1, 1] [1]\n  //\n  EXPECT_EQ(BCast({1, 1}, {}),\n            \"[1][1][1][1]\"\n            \"[1]\"\n            \"[1,1]\"\n            \"[0,1][0,1]\");\n\n  EXPECT_EQ(BCast({1, 1}, {1}),\n            \"[1][1][1][1]\"\n            \"[1]\"\n            \"[1,1]\"\n            \"[0,1][0,1]\");\n\n  EXPECT_EQ(BCast({1, 1}, {1}, false),\n            \"[1,1][1,1][1,1][1,1]\"\n            \"[1,1]\"\n            \"[1,1]\"\n            \"[0,1][0,1]\");\n\n  // [1] [1, 1]\n  EXPECT_EQ(BCast({1}, {1, 1}),\n            \"[1][1][1][1]\"\n            \"[1]\"\n            \"[1,1]\"\n            \"[0,1][0,1]\");\n\n  EXPECT_EQ(BCast({1}, {1, 1}, false),\n            \"[1,1][1,1][1,1][1,1]\"\n            \"[1,1]\"\n            \"[1,1]\"\n            \"[0,1][0,1]\");\n}\n\nTEST(BCastTest, Basic_TrueScalar_Scalar) {\n  // [] []\n  EXPECT_EQ(BCast({}, {}),\n            \"[1][1][1][1]\"\n            \"[1]\"\n            \"[]\"\n            \"[][]\");\n\n  // [] [1]\n  EXPECT_EQ(BCast({}, {1}),\n            \"[1][1][1][1]\"\n            \"[1]\"\n            \"[1]\"\n            \"[0][0]\");\n\n  EXPECT_EQ(BCast({}, {1}, false),\n            \"[1][1][1][1]\"\n            \"[1]\"\n            \"[1]\"\n            \"[0][0]\");\n\n  // [] [1, 1]\n  EXPECT_EQ(BCast({}, {1, 1}),\n            \"[1][1][1][1]\"\n            \"[1]\"\n            \"[1,1]\"\n            \"[0,1][0,1]\");\n\n  EXPECT_EQ(BCast({}, {1, 1}, false),\n            \"[1,1][1,1][1,1][1,1]\"\n            \"[1,1]\"\n            \"[1,1]\"\n            \"[0,1][0,1]\");\n\n  // [1] []\n  EXPECT_EQ(BCast({1}, {}),\n            \"[1][1][1][1]\"\n            \"[1]\"\n            \"[1]\"\n            \"[0][0]\");\n\n  EXPECT_EQ(BCast({1}, {}, false),\n            \"[1][1][1][1]\"\n            \"[1]\"\n            \"[1]\"\n            \"[0][0]\");\n\n  // [1, 1] []\n  EXPECT_EQ(BCast({1, 1}, {}),\n            \"[1][1][1][1]\"\n            \"[1]\"\n            \"[1,1]\"\n            \"[0,1][0,1]\");\n\n  EXPECT_EQ(BCast({1, 1}, {}, false),\n            \"[1,1][1,1][1,1][1,1]\"\n            \"[1,1]\"\n            \"[1,1]\"\n            \"[0,1][0,1]\");\n}\n\nTEST(BCastListTest, Basic_Scalar_Scalar_Scalar) {\n  // Effectively it's a scalar and a scalar.\n  // [1, 1] [1] [1]\n  EXPECT_EQ(BCastList3({1, 1}, {1}, {1}),\n            \"[1][1][1][1][1][1]\"\n            \"[1]\"\n            \"[1,1]\"\n            \"[0,1][0,1][0,1]\");\n\n  EXPECT_EQ(BCastList3({1, 1}, {1}, {1}, false),\n            \"[1,1][1,1][1,1][1,1][1,1][1,1]\"\n            \"[1,1]\"\n            \"[1,1]\"\n            \"[0,1][0,1][0,1]\");\n\n  // [1] [1, 1] [1]\n  EXPECT_EQ(BCastList3({1}, {1, 1}, {1}),\n            \"[1][1][1][1][1][1]\"\n            \"[1]\"\n            \"[1,1]\"\n            \"[0,1][0,1][0,1]\");\n\n  EXPECT_EQ(BCastList3({1}, {1, 1}, {1}, false),\n            \"[1,1][1,1][1,1][1,1][1,1][1,1]\"\n            \"[1,1]\"\n            \"[1,1]\"\n            \"[0,1][0,1][0,1]\");\n\n  // [1] [1] [1, 1]\n  EXPECT_EQ(BCastList3({1}, {1}, {1, 1}),\n            \"[1][1][1][1][1][1]\"\n            \"[1]\"\n            \"[1,1]\"\n            \"[0,1][0,1][0,1]\");\n\n  EXPECT_EQ(BCastList3({1}, {1}, {1, 1}, false),\n            \"[1,1][1,1][1,1][1,1][1,1][1,1]\"\n            \"[1,1]\"\n            \"[1,1]\"\n            \"[0,1][0,1][0,1]\");\n}\n\nTEST(BCastListTest, Basic_TrueScalar_Scalar_Scalar) {\n  // Effectively it's a scalar and a scalar.\n  // [1, 1] [1] []\n  EXPECT_EQ(BCastList3({1, 1}, {1}, {}),\n            \"[1][1][1][1][1][1]\"\n            \"[1]\"\n            \"[1,1]\"\n            \"[0,1][0,1][0,1]\");\n\n  EXPECT_EQ(BCastList3({1, 1}, {1}, {}, false),\n            \"[1,1][1,1][1,1][1,1][1,1][1,1]\"\n            \"[1,1]\"\n            \"[1,1]\"\n            \"[0,1][0,1][0,1]\");\n\n  // [] [1, 1] [1]\n  EXPECT_EQ(BCastList3({}, {1, 1}, {1}),\n            \"[1][1][1][1][1][1]\"\n            \"[1]\"\n            \"[1,1]\"\n            \"[0,1][0,1][0,1]\");\n\n  EXPECT_EQ(BCastList3({}, {1, 1}, {1}, false),\n            \"[1,1][1,1][1,1][1,1][1,1][1,1]\"\n            \"[1,1]\"\n            \"[1,1]\"\n            \"[0,1][0,1][0,1]\");\n\n  // [1] [] [1, 1]\n  EXPECT_EQ(BCastList3({1}, {}, {1, 1}),\n            \"[1][1][1][1][1][1]\"\n            \"[1]\"\n            \"[1,1]\"\n            \"[0,1][0,1][0,1]\");\n\n  EXPECT_EQ(BCastList3({1}, {}, {1, 1}, false),\n            \"[1,1][1,1][1,1][1,1][1,1][1,1]\"\n            \"[1,1]\"\n            \"[1,1]\"\n            \"[0,1][0,1][0,1]\");\n}\n\nTEST(BCastTest, Basic_Tensor_Scalar) {\n  // Effectively it's a tensor and a scalar.\n  // [11, 7, 5, 3, 2] [1]\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {1}),\n            \"[2310][1][1][2310]\"\n            \"[2310]\"\n            \"[11,7,5,3,2]\"\n            \"[][0,1,2,3,4]\");\n\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {1}, false),\n            \"[11,7,5,3,2][1,1,1,1,1][1,1,1,1,1][11,7,5,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[][0,1,2,3,4]\");\n\n  // [1] [11, 7, 5, 3, 2]\n  EXPECT_EQ(BCast({1}, {11, 7, 5, 3, 2}),\n            \"[1][2310][2310][1]\"\n            \"[2310]\"\n            \"[11,7,5,3,2]\"\n            \"[0,1,2,3,4][]\");\n\n  EXPECT_EQ(BCast({1}, {11, 7, 5, 3, 2}, false),\n            \"[1,1,1,1,1][11,7,5,3,2][11,7,5,3,2][1,1,1,1,1]\"\n            \"[11,7,5,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[0,1,2,3,4][]\");\n}\n\nTEST(BCastTest, Basic_Tensor_With_DimSize_1_Scalar) {\n  // Effectively it's a tensor and a scalar.\n  // [11, 7, 5, 3, 2, 1] [1]\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2, 1}, {1}),\n            \"[2310][1][1][2310]\"\n            \"[2310]\"\n            \"[11,7,5,3,2,1]\"\n            \"[5][0,1,2,3,4,5]\");\n\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2, 1}, {1}, false),\n            \"[11,7,5,3,2,1][1,1,1,1,1,1][1,1,1,1,1,1][11,7,5,3,2,1]\"\n            \"[11,7,5,3,2,1]\"\n            \"[11,7,5,3,2,1]\"\n            \"[5][0,1,2,3,4,5]\");\n\n  // [1] [11, 7, 5, 3, 2, 1]\n  EXPECT_EQ(BCast({1}, {11, 7, 5, 3, 2, 1}),\n            \"[1][2310][2310][1]\"\n            \"[2310]\"\n            \"[11,7,5,3,2,1]\"\n            \"[0,1,2,3,4,5][5]\");\n\n  EXPECT_EQ(BCast({1}, {11, 7, 5, 3, 2, 1}, false),\n            \"[1,1,1,1,1,1][11,7,5,3,2,1][11,7,5,3,2,1][1,1,1,1,1,1]\"\n            \"[11,7,5,3,2,1]\"\n            \"[11,7,5,3,2,1]\"\n            \"[0,1,2,3,4,5][5]\");\n\n  // Effectively it's a tensor and a scalar.\n  // [11, 7, 5, 1, 1, 3, 2, 1] [1]\n  EXPECT_EQ(BCast({11, 7, 5, 1, 1, 3, 2, 1, 1}, {1}),\n            \"[2310][1][1][2310]\"\n            \"[2310]\"\n            \"[11,7,5,1,1,3,2,1,1]\"\n            \"[3,4,7,8][0,1,2,3,4,5,6,7,8]\");\n\n  EXPECT_EQ(BCast({11, 7, 5, 1, 1, 3, 2, 1, 1}, {1}, false),\n            \"[11,7,5,1,1,3,2,1,1][1,1,1,1,1,1,1,1,1]\"  // x_reshape(), x_bcast()\n            \"[1,1,1,1,1,1,1,1,1][11,7,5,1,1,3,2,1,1]\"  // y_reshape(), y_bcast()\n            \"[11,7,5,1,1,3,2,1,1]\"\n            \"[11,7,5,1,1,3,2,1,1]\"\n            \"[3,4,7,8][0,1,2,3,4,5,6,7,8]\");\n\n  // [1] [11, 7, 5, 1, 1, 3, 2, 1]\n  EXPECT_EQ(BCast({1}, {11, 7, 5, 1, 1, 3, 2, 1, 1}),\n            \"[1][2310][2310][1]\"\n            \"[2310]\"\n            \"[11,7,5,1,1,3,2,1,1]\"\n            \"[0,1,2,3,4,5,6,7,8][3,4,7,8]\");\n\n  EXPECT_EQ(BCast({1}, {11, 7, 5, 1, 1, 3, 2, 1, 1}, false),\n            \"[1,1,1,1,1,1,1,1,1][11,7,5,1,1,3,2,1,1]\"  // x_reshape(), x_bcast()\n            \"[11,7,5,1,1,3,2,1,1][1,1,1,1,1,1,1,1,1]\"  // y_reshape(), y_bcast()\n            \"[11,7,5,1,1,3,2,1,1]\"\n            \"[11,7,5,1,1,3,2,1,1]\"\n            \"[0,1,2,3,4,5,6,7,8][3,4,7,8]\");\n}\n\nTEST(BCastTest, Basic_Tensor_Vector) {\n  // [11, 7, 5, 3, 2] [2]\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {2}),\n            \"[1155,2][1,1][1,2][1155,1]\"\n            \"[1155,2]\"\n            \"[11,7,5,3,2]\"\n            \"[][0,1,2,3]\");\n\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {2}, false),\n            \"[11,7,5,3,2][1,1,1,1,1][1,1,1,1,2][11,7,5,3,1]\"\n            \"[11,7,5,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[][0,1,2,3]\");\n\n  // [2] [11, 7, 5, 3, 2]\n  EXPECT_EQ(BCast({2}, {11, 7, 5, 3, 2}),\n            \"[1,2][1155,1][1155,2][1,1]\"\n            \"[1155,2]\"\n            \"[11,7,5,3,2]\"\n            \"[0,1,2,3][]\");\n\n  EXPECT_EQ(BCast({2}, {11, 7, 5, 3, 2}, false),\n            \"[1,1,1,1,2][11,7,5,3,1][11,7,5,3,2][1,1,1,1,1]\"\n            \"[11,7,5,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[0,1,2,3][]\");\n}\n\nTEST(BCastTest, Basic_Tensor_Matrix) {\n  // [11, 7, 5, 3, 2] [3, 2]\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {3, 2}),\n            \"[385,6][1,1][1,6][385,1]\"\n            \"[385,6]\"\n            \"[11,7,5,3,2]\"\n            \"[][0,1,2]\");\n\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {3, 2}, false),\n            \"[11,7,5,3,2][1,1,1,1,1][1,1,1,3,2][11,7,5,1,1]\"\n            \"[11,7,5,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[][0,1,2]\");\n\n  // [3, 2] [11, 7, 5, 3, 2]\n  EXPECT_EQ(BCast({3, 2}, {11, 7, 5, 3, 2}),\n            \"[1,6][385,1][385,6][1,1]\"\n            \"[385,6]\"\n            \"[11,7,5,3,2]\"\n            \"[0,1,2][]\");\n\n  EXPECT_EQ(BCast({3, 2}, {11, 7, 5, 3, 2}, false),\n            \"[1,1,1,3,2][11,7,5,1,1][11,7,5,3,2][1,1,1,1,1]\"\n            \"[11,7,5,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[0,1,2][]\");\n}\n\nTEST(BCastTest, Basic_Tensor_Matrix_Column) {\n  // [11, 7, 5, 3, 2] [3, 1]\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {3, 1}),\n            \"[385,3,2][1,1,1][1,3,1][385,1,2]\"\n            \"[385,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[][0,1,2,4]\");\n\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {3, 1}, false),\n            \"[11,7,5,3,2][1,1,1,1,1][1,1,1,3,1][11,7,5,1,2]\"\n            \"[11,7,5,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[][0,1,2,4]\");\n\n  // [3, 1] [11, 7, 5, 3, 2]\n  EXPECT_EQ(BCast({3, 1}, {11, 7, 5, 3, 2}),\n            \"[1,3,1][385,1,2][385,3,2][1,1,1]\"\n            \"[385,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[0,1,2,4][]\");\n\n  EXPECT_EQ(BCast({3, 1}, {11, 7, 5, 3, 2}, false),\n            \"[1,1,1,3,1][11,7,5,1,2][11,7,5,3,2][1,1,1,1,1]\"\n            \"[11,7,5,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[0,1,2,4][]\");\n}\n\nTEST(BCastTest, Basic_Tensor_Matrix_As_Tensor) {\n  // [11, 7, 5, 3, 2] [7, 5, 1, 1]\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {7, 5, 1, 1}),\n            \"[11,35,6][1,1,1][1,35,1][11,1,6]\"\n            \"[11,35,6]\"\n            \"[11,7,5,3,2]\"\n            \"[][0,3,4]\");\n\n  EXPECT_EQ(BCast({11, 7, 5, 3, 2}, {7, 5, 1, 1}, false),\n            \"[11,7,5,3,2][1,1,1,1,1][1,7,5,1,1][11,1,1,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[][0,3,4]\");\n\n  // [7, 5, 1, 1] [11, 7, 5, 3, 2]\n  EXPECT_EQ(BCast({7, 5, 1, 1}, {11, 7, 5, 3, 2}),\n            \"[1,35,1][11,1,6][11,35,6][1,1,1]\"\n            \"[11,35,6]\"\n            \"[11,7,5,3,2]\"\n            \"[0,3,4][]\");\n\n  EXPECT_EQ(BCast({7, 5, 1, 1}, {11, 7, 5, 3, 2}, false),\n            \"[1,7,5,1,1][11,1,1,3,2][11,7,5,3,2][1,1,1,1,1]\"\n            \"[11,7,5,3,2][11,7,5,3,2]\"\n            \"[0,3,4][]\");\n}\n\nTEST(BCastTest, Basic_SymbolicShape) {\n  constexpr int64_t kSymDim1 = -10'000'000'000;\n  constexpr int64_t kSymDim2 = -10'000'000'001;\n\n  const tensorflow::BCast bcast({10, kSymDim1, kSymDim2}, {10, 1, 1}, false);\n  EXPECT_TRUE(bcast.IsValid());\n  EXPECT_EQ(bcast.output_batch_size(), -1);\n}\n\nTEST(BCastTest, Complex_BCast_To_Each_Other) {\n  // Rare cases. x and y broadcast to each other.  x and y are of\n  // different ranks.\n  // Can be verified in numpy as:\n  //   import numpy as np\n  //   x = np.arange(0,110).reshape([11,1,5,1,2])\n  //   y = np.arange(0,21).reshape([7,1,3,1])\n  //   np.shape(x + y)\n  //   Out[.]: (11, 7, 5, 3, 2)\n  string truth =\n      \"[11,1,5,1,2][1,7,1,3,1][1,7,1,3,1][11,1,5,1,2]\"\n      \"[11,7,5,3,2]\"\n      \"[11,7,5,3,2]\"\n      \"[1,3][0,2,4]\";\n\n  EXPECT_EQ(BCast({11, 1, 5, 1, 2}, {7, 1, 3, 1}), truth);\n  EXPECT_EQ(BCast({11, 1, 5, 1, 2}, {7, 1, 3, 1}, false), truth);\n}\n\nTEST(BCastListTest, Complex_BCast_To_Each_Other) {\n  // Rare cases. x, y and z broadcast to each other. x,y and z are of\n  // different ranks.\n  // Can be verified in numpy as:\n  //   import numpy as np\n  //   x = np.arange(0,22).reshape([11,1,1,1,2])\n  //   y = np.arange(0,21).reshape([7,1,3,1])\n  //   z = np.arange(0,5).reshape([5,1,1])\n  //   np.shape(x + y + z)\n  //   Out[.]: (11, 7, 5, 3, 2)\n  //\n  string truth =\n      \"[11,1,1,1,2][1,7,5,3,1]\"\n      \"[1,7,1,3,1][11,1,5,1,2]\"\n      \"[1,1,5,1,1][11,7,1,3,2]\"\n      \"[11,7,5,3,2]\"\n      \"[11,7,5,3,2]\"\n      \"[1,2,3][0,2,4][0,1,3,4]\";\n\n  EXPECT_EQ(BCastList3({11, 1, 1, 1, 2}, {7, 1, 3, 1}, {5, 1, 1}), truth);\n  EXPECT_EQ(BCastList3({11, 1, 1, 1, 2}, {7, 1, 3, 1}, {5, 1, 1}, false),\n            truth);\n}\n\nTEST(BCastTest, TestZeroDimensionShape) {\n  // (2,0,5) and (5) in both orders\n  EXPECT_EQ(BCast({2, 0, 5}, {5}),\n            \"[0,5][1,1][1,5][0,1]\"\n            \"[0,5]\"\n            \"[2,0,5]\"\n            \"[][0,1]\");\n  EXPECT_EQ(BCast({5}, {2, 0, 5}),\n            \"[1,5][0,1][0,5][1,1]\"\n            \"[0,5]\"\n            \"[2,0,5]\"\n            \"[0,1][]\");\n\n  EXPECT_EQ(BCast({2, 0, 5}, {5}, false),\n            \"[2,0,5][1,1,1][1,1,5][2,0,1]\"\n            \"[2,0,5]\"\n            \"[2,0,5]\"\n            \"[][0,1]\");\n  EXPECT_EQ(BCast({5}, {2, 0, 5}, false),\n            \"[1,1,5][2,0,1][2,0,5][1,1,1]\"\n            \"[2,0,5]\"\n            \"[2,0,5]\"\n            \"[0,1][]\");\n\n  // (2,0,3,0,5) and (5) in both orders\n  EXPECT_EQ(BCast({2, 0, 3, 0, 5}, {5}),\n            \"[0,5][1,1][1,5][0,1]\"\n            \"[0,5]\"\n            \"[2,0,3,0,5]\"\n            \"[][0,1,2,3]\");\n  EXPECT_EQ(BCast({5}, {2, 0, 3, 0, 5}),\n            \"[1,5][0,1][0,5][1,1]\"\n            \"[0,5]\"\n            \"[2,0,3,0,5]\"\n            \"[0,1,2,3][]\");\n\n  EXPECT_EQ(BCast({2, 0, 3, 0, 5}, {5}, false),\n            \"[2,0,3,0,5][1,1,1,1,1][1,1,1,1,5][2,0,3,0,1]\"\n            \"[2,0,3,0,5]\"\n            \"[2,0,3,0,5]\"\n            \"[][0,1,2,3]\");\n  EXPECT_EQ(BCast({5}, {2, 0, 3, 0, 5}, false),\n            \"[1,1,1,1,5][2,0,3,0,1][2,0,3,0,5][1,1,1,1,1]\"\n            \"[2,0,3,0,5]\"\n            \"[2,0,3,0,5]\"\n            \"[0,1,2,3][]\");\n\n  // (2,0,3,0,5) and (3,1,5) in both orders\n  EXPECT_EQ(BCast({2, 0, 3, 0, 5}, {3, 1, 5}),\n            \"[0,3,0,5][1,1,1,1][1,3,1,5][0,1,0,1]\"\n            \"[0,3,0,5]\"\n            \"[2,0,3,0,5]\"\n            \"[][0,1,3]\");\n  EXPECT_EQ(BCast({3, 1, 5}, {2, 0, 3, 0, 5}),\n            \"[1,3,1,5][0,1,0,1][0,3,0,5][1,1,1,1]\"\n            \"[0,3,0,5]\"\n            \"[2,0,3,0,5]\"\n            \"[0,1,3][]\");\n\n  EXPECT_EQ(BCast({2, 0, 3, 0, 5}, {3, 1, 5}, false),\n            \"[2,0,3,0,5][1,1,1,1,1][1,1,3,1,5][2,0,1,0,1]\"\n            \"[2,0,3,0,5]\"\n            \"[2,0,3,0,5]\"\n            \"[][0,1,3]\");\n  EXPECT_EQ(BCast({3, 1, 5}, {2, 0, 3, 0, 5}, false),\n            \"[1,1,3,1,5][2,0,1,0,1][2,0,3,0,5][1,1,1,1,1]\"\n            \"[2,0,3,0,5]\"\n            \"[2,0,3,0,5]\"\n            \"[0,1,3][]\");\n}\n\nTEST(BCastTest, BatchIndices) {\n  EXPECT_EQ(\"[0,0,0,0][0,1,2,3]\", BCastBatchIndices({1}, {4}));\n  // Invalid broadcast.\n  EXPECT_EQ(\"[][]\", BCastBatchIndices({5}, {7}));\n  // Same shape, no batch indices.\n  EXPECT_EQ(\"[][]\", BCastBatchIndices({2, 4, 6}, {2, 4, 6}));\n  // More complicated broadcasts.\n  EXPECT_EQ(\"[0,0,0,0,1,1,1,1,2,2,2,2][0,1,2,3,0,1,2,3,0,1,2,3]\",\n            BCastBatchIndices({3, 1}, {1, 4}));\n  EXPECT_EQ(\"[0,0,1,1,2,2,0,0,1,1,2,2][0,1,0,1,0,1,2,3,2,3,2,3]\",\n            BCastBatchIndices({3, 1}, {2, 1, 2}));\n}\n\nvoid BM_BCastSetup(::testing::benchmark::State& state) {\n  const int same_shape = state.range(0);\n\n  if (same_shape) {\n    state.SetLabel(\"same_shapes\");\n    for (auto s : state) {\n      class BCast b({1000, 100}, {1000, 100});\n    }\n  } else {\n    state.SetLabel(\"different_shapes\");\n    for (auto s : state) {\n      class BCast b({3, 1, 5}, {2, 0, 3, 0, 5});\n    }\n  }\n}\nBENCHMARK(BM_BCastSetup)->Arg(0)->Arg(1);\n\n}  // namespace\n}  // namespace tensorflow"