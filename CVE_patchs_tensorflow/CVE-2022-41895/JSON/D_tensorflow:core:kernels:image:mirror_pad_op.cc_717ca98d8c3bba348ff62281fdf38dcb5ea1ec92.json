"diff --git a/tensorflow/core/kernels/image/mirror_pad_op.cc b/tensorflow/core/kernels/image/mirror_pad_op.cc\nindex 9b9ba452517..b4bf3b39975 100644\n--- a/tensorflow/core/kernels/image/mirror_pad_op.cc\n+++ b/tensorflow/core/kernels/image/mirror_pad_op.cc\n@@ -297,13 +297,21 @@ class MirrorPadGradOp : public OpKernel {\n     TensorShape output_shape;\n     typename TTypes<Tpaddings>::ConstMatrix paddings = in1.matrix<Tpaddings>();\n     for (int d = 0; d < dims; ++d) {\n-      const Tpaddings before = paddings(d, 0);  // Pad before existing elements.\n-      const Tpaddings after = paddings(d, 1);   // Pad after existing elements.\n+      const int64_t before = paddings(d, 0);  // Pad before existing elements.\n+      const int64_t after = paddings(d, 1);   // Pad after existing elements.\n       OP_REQUIRES(context, before >= 0 && after >= 0,\n                   errors::InvalidArgument(\n                       \"Paddings must be non-negative: \", before, \", \", after));\n \n-      const int64_t out_size = in0.dim_size(d) - (before + after);\n+      const int64_t in_size = in0.dim_size(d);\n+      const int64_t total_padding = before + after;\n+      OP_REQUIRES(\n+          context, total_padding < in_size && total_padding >= 0,\n+          errors::InvalidArgument(\n+              \"Total paddings must be less than the input dimension size: \",\n+              total_padding, \" was not less than \", in_size));\n+\n+      const int64_t out_size = in_size - total_padding;\n       if (offset_ == 0) {  // SYMMETRIC mode.\n         OP_REQUIRES(context, before <= out_size && after <= out_size,\n                     errors::InvalidArgument(\"paddings must be no greater \""