"diff --git a/tensorflow/core/kernels/mfcc_mel_filterbank_test.cc b/tensorflow/core/kernels/mfcc_mel_filterbank_test.cc\nindex 54f31e1699e..26b5afed135 100644\n--- a/tensorflow/core/kernels/mfcc_mel_filterbank_test.cc\n+++ b/tensorflow/core/kernels/mfcc_mel_filterbank_test.cc\n@@ -15,6 +15,7 @@ limitations under the License.\n \n #include \"tensorflow/core/kernels/mfcc_mel_filterbank.h\"\n \n+#include <limits>\n #include <vector>\n \n #include \"tensorflow/core/platform/test.h\"\n@@ -85,4 +86,37 @@ TEST(MfccMelFilterbankTest, IgnoresExistingContentOfOutputVector) {\n   }\n }\n \n+TEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxIntValue) {\n+  // Test for bug where vector throws a length_error when it suspects the size\n+  // to be more than it's max_size. For now, we fail initialization when the\n+  // number of requested channels is >= the maximum value int can take (since\n+  // num_channels_ is an int).\n+  MfccMelFilterbank filterbank;\n+\n+  const int kSampleCount = 513;\n+  std::size_t num_channels = std::numeric_limits<int>::max();\n+  bool initialized = filterbank.Initialize(\n+      kSampleCount, 2 /* sample rate */, num_channels /* channels */,\n+      1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);\n+\n+  EXPECT_FALSE(initialized);\n+}\n+\n+TEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxSize) {\n+  // Test for bug where vector throws a length_error when it suspects the size\n+  // to be more than it's max_size. For now, we fail initialization when the\n+  // number of requested channels is > than std::vector<double>::max_size().\n+  MfccMelFilterbank filterbank;\n+\n+  const int kSampleCount = 513;\n+  // Set num_channels to exceed the max_size a double vector can\n+  // theoretically take.\n+  std::size_t num_channels = std::vector<double>().max_size() + 1;\n+  bool initialized = filterbank.Initialize(\n+      kSampleCount, 2 /* sample rate */, num_channels /* channels */,\n+      1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);\n+\n+  EXPECT_FALSE(initialized);\n+}\n+\n }  // namespace tensorflow"