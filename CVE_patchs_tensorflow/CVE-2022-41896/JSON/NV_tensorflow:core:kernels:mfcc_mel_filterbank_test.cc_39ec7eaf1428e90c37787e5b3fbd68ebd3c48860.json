"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/kernels/mfcc_mel_filterbank.h\"\n\n#include <limits>\n#include <vector>\n\n#include \"tensorflow/core/platform/test.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\nTEST(MfccMelFilterbankTest, AgreesWithPythonGoldenValues) {\n  // This test verifies the Mel filterbank against \"golden values\".\n  // Golden values are from an independent Python Mel implementation.\n  MfccMelFilterbank filterbank;\n\n  std::vector<double> input;\n  const int kSampleCount = 513;\n  input.reserve(kSampleCount);\n  for (int i = 0; i < kSampleCount; ++i) {\n    input.push_back(i + 1);\n  }\n  const int kChannelCount = 20;\n  filterbank.Initialize(\n      input.size(), 22050 /* sample rate */, kChannelCount /* channels */,\n      20.0 /*  lower frequency limit */, 4000.0 /* upper frequency limit */);\n\n  std::vector<double> output;\n  filterbank.Compute(input, &output);\n\n  std::vector<double> expected = {\n      7.38894574,   10.30330648, 13.72703292,  17.24158686,  21.35253118,\n      25.77781089,  31.30624108, 37.05877236,  43.9436536,   51.80306637,\n      60.79867148,  71.14363376, 82.90910141,  96.50069158,  112.08428368,\n      129.96721968, 150.4277597, 173.74997634, 200.86037462, 231.59802942};\n\n  ASSERT_EQ(output.size(), kChannelCount);\n\n  for (int i = 0; i < kChannelCount; ++i) {\n    EXPECT_NEAR(output[i], expected[i], 1e-04);\n  }\n}\n\nTEST(MfccMelFilterbankTest, IgnoresExistingContentOfOutputVector) {\n  // Test for bug where the output vector was not cleared before\n  // accumulating next frame's weighted spectral values.\n  MfccMelFilterbank filterbank;\n\n  const int kSampleCount = 513;\n  std::vector<double> input;\n  std::vector<double> output;\n\n  filterbank.Initialize(kSampleCount, 22050 /* sample rate */,\n                        20 /* channels */, 20.0 /*  lower frequency limit */,\n                        4000.0 /* upper frequency limit */);\n\n  // First call with nonzero input value, and an empty output vector,\n  // will resize the output and fill it with the correct, nonzero outputs.\n  input.assign(kSampleCount, 1.0);\n  filterbank.Compute(input, &output);\n  for (const double value : output) {\n    EXPECT_LE(0.0, value);\n  }\n\n  // Second call with zero input should also generate zero output.  However,\n  // the output vector now is already the correct size, but full of nonzero\n  // values.  Make sure these don't affect the output.\n  input.assign(kSampleCount, 0.0);\n  filterbank.Compute(input, &output);\n  for (const double value : output) {\n    EXPECT_EQ(0.0, value);\n  }\n}\n\nTEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxIntValue) {\n  // Test for bug where vector throws a length_error when it suspects the size\n  // to be more than it's max_size. For now, we fail initialization when the\n  // number of requested channels is >= the maximum value int can take (since\n  // num_channels_ is an int).\n  MfccMelFilterbank filterbank;\n\n  const int kSampleCount = 513;\n  std::size_t num_channels = std::numeric_limits<int>::max();\n  bool initialized = filterbank.Initialize(\n      kSampleCount, 2 /* sample rate */, num_channels /* channels */,\n      1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);\n\n  EXPECT_FALSE(initialized);\n}\n\nTEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxSize) {\n  // Test for bug where vector throws a length_error when it suspects the size\n  // to be more than it's max_size. For now, we fail initialization when the\n  // number of requested channels is > than std::vector<double>::max_size().\n  MfccMelFilterbank filterbank;\n\n  const int kSampleCount = 513;\n  // Set num_channels to exceed the max_size a double vector can\n  // theoretically take.\n  std::size_t num_channels = std::vector<double>().max_size() + 1;\n  bool initialized = filterbank.Initialize(\n      kSampleCount, 2 /* sample rate */, num_channels /* channels */,\n      1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);\n\n  EXPECT_FALSE(initialized);\n}\n\n}  // namespace tensorflow"