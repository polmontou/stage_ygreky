"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/audio_ops.cc\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/kernels/mfcc.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n\nnamespace tensorflow {\n\n// Create a speech fingerprint from spectrogram data.\nclass MfccOp : public OpKernel {\n public:\n  explicit MfccOp(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"upper_frequency_limit\",\n                                             &upper_frequency_limit_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"lower_frequency_limit\",\n                                             &lower_frequency_limit_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"filterbank_channel_count\",\n                                             &filterbank_channel_count_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"dct_coefficient_count\",\n                                             &dct_coefficient_count_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& spectrogram = context->input(0);\n    OP_REQUIRES(context, spectrogram.dims() == 3,\n                errors::InvalidArgument(\"spectrogram must be 3-dimensional\",\n                                        spectrogram.shape().DebugString()));\n    const Tensor& sample_rate_tensor = context->input(1);\n    OP_REQUIRES(context, TensorShapeUtils::IsScalar(sample_rate_tensor.shape()),\n                errors::InvalidArgument(\n                    \"Input sample_rate should be a scalar tensor, got \",\n                    sample_rate_tensor.shape().DebugString(), \" instead.\"));\n    const int32_t sample_rate = sample_rate_tensor.scalar<int32>()();\n\n    const int spectrogram_channels = spectrogram.dim_size(2);\n    const int spectrogram_samples = spectrogram.dim_size(1);\n    const int audio_channels = spectrogram.dim_size(0);\n\n    Mfcc mfcc;\n    mfcc.set_upper_frequency_limit(upper_frequency_limit_);\n    mfcc.set_lower_frequency_limit(lower_frequency_limit_);\n    mfcc.set_filterbank_channel_count(filterbank_channel_count_);\n    mfcc.set_dct_coefficient_count(dct_coefficient_count_);\n    OP_REQUIRES(\n        context, mfcc.Initialize(spectrogram_channels, sample_rate),\n        errors::InvalidArgument(\"Mfcc initialization failed for channel count \",\n                                spectrogram_channels, \", sample rate \",\n                                sample_rate, \" and filterbank_channel_count \",\n                                filterbank_channel_count_));\n\n    Tensor* output_tensor = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(\n                       0,\n                       TensorShape({audio_channels, spectrogram_samples,\n                                    dct_coefficient_count_}),\n                       &output_tensor));\n\n    const float* spectrogram_flat = spectrogram.flat<float>().data();\n    float* output_flat = output_tensor->flat<float>().data();\n\n    for (int audio_channel = 0; audio_channel < audio_channels;\n         ++audio_channel) {\n      for (int spectrogram_sample = 0; spectrogram_sample < spectrogram_samples;\n           ++spectrogram_sample) {\n        const float* sample_data =\n            spectrogram_flat +\n            (audio_channel * spectrogram_samples * spectrogram_channels) +\n            (spectrogram_sample * spectrogram_channels);\n        std::vector<double> mfcc_input(sample_data,\n                                       sample_data + spectrogram_channels);\n        std::vector<double> mfcc_output;\n        mfcc.Compute(mfcc_input, &mfcc_output);\n        DCHECK_EQ(dct_coefficient_count_, mfcc_output.size());\n        float* output_data =\n            output_flat +\n            (audio_channel * spectrogram_samples * dct_coefficient_count_) +\n            (spectrogram_sample * dct_coefficient_count_);\n        for (int i = 0; i < dct_coefficient_count_; ++i) {\n          output_data[i] = mfcc_output[i];\n        }\n      }\n    }\n  }\n\n private:\n  float upper_frequency_limit_;\n  float lower_frequency_limit_;\n  int32 filterbank_channel_count_;\n  int32 dct_coefficient_count_;\n};\nREGISTER_KERNEL_BUILDER(Name(\"Mfcc\").Device(DEVICE_CPU), MfccOp);\n\n}  // namespace tensorflow"