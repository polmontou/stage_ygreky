"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <math.h>\n\n#include \"tensorflow/core/kernels/mfcc.h\"\n\n#include \"tensorflow/core/platform/logging.h\"\n\nnamespace tensorflow {\n\nconst double kDefaultUpperFrequencyLimit = 4000;\nconst double kDefaultLowerFrequencyLimit = 20;\nconst double kFilterbankFloor = 1e-12;\nconst int kDefaultFilterbankChannelCount = 40;\nconst int kDefaultDCTCoefficientCount = 13;\n\nMfcc::Mfcc()\n    : initialized_(false),\n      lower_frequency_limit_(kDefaultLowerFrequencyLimit),\n      upper_frequency_limit_(kDefaultUpperFrequencyLimit),\n      filterbank_channel_count_(kDefaultFilterbankChannelCount),\n      dct_coefficient_count_(kDefaultDCTCoefficientCount) {}\n\nbool Mfcc::Initialize(int input_length, double input_sample_rate) {\n  bool initialized = mel_filterbank_.Initialize(\n      input_length, input_sample_rate, filterbank_channel_count_,\n      lower_frequency_limit_, upper_frequency_limit_);\n  initialized &=\n      dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);\n  initialized_ = initialized;\n  return initialized;\n}\n\nvoid Mfcc::Compute(const std::vector<double>& spectrogram_frame,\n                   std::vector<double>* output) const {\n  if (!initialized_) {\n    LOG(ERROR) << \"Mfcc not initialized.\";\n    return;\n  }\n  std::vector<double> working;\n  mel_filterbank_.Compute(spectrogram_frame, &working);\n  for (int i = 0; i < working.size(); ++i) {\n    double val = working[i];\n    if (val < kFilterbankFloor) {\n      val = kFilterbankFloor;\n    }\n    working[i] = log(val);\n  }\n  dct_.Compute(working, output);\n}\n\n}  // namespace tensorflow"