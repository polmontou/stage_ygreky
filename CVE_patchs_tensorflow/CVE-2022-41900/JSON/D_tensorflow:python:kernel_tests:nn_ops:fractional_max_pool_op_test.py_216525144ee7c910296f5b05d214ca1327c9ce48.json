"diff --git a/tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py b/tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py\nindex 79b2c799d58..9102973fa13 100644\n--- a/tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py\n+++ b/tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py\n@@ -320,7 +320,7 @@ class FractionalMaxPoolTest(test.TestCase):\n       nn_ops.fractional_max_pool(\n           rand_mat, [1, 1.5, 1.5, 1], seed=1, seed2=1, deterministic=True)\n \n-  def testPoolingRatio(self):\n+  def testPoolingRatioHasMoreDimThanInput(self):\n     with self.cached_session() as _:\n       with self.assertRaisesRegex(\n           errors.InvalidArgumentError,\n@@ -338,6 +338,23 @@ class FractionalMaxPoolTest(test.TestCase):\n             name=None)\n         self.evaluate(result)\n \n+  def testPoolingRatioValueOutOfRange(self):\n+    with self.cached_session() as _:\n+      # Whether turn on `TF2_BEHAVIOR` generates different error messages\n+      with self.assertRaisesRegex(\n+          (errors.InvalidArgumentError, ValueError),\n+          r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):\n+        result = nn_ops.gen_nn_ops.fractional_max_pool(\n+            value=np.zeros([3, 30, 30, 3]),\n+            pooling_ratio=[1, -1, 3, 1],\n+            pseudo_random=False,\n+            overlapping=False,\n+            deterministic=False,\n+            seed=0,\n+            seed2=0,\n+        )\n+        self.evaluate(result)\n+\n \n class FractionalMaxPoolGradTest(test.TestCase):\n   \"\"\"Tests for FractionalMaxPoolGrad."