"diff --git a/tensorflow/core/kernels/sparse/sparse_matrix.h b/tensorflow/core/kernels/sparse/sparse_matrix.h\nindex b2ec20acc65..15fbe5df6eb 100644\n--- a/tensorflow/core/kernels/sparse/sparse_matrix.h\n+++ b/tensorflow/core/kernels/sparse/sparse_matrix.h\n@@ -25,10 +25,12 @@ limitations under the License.\n #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n #include \"tensorflow/core/framework/op_kernel.h\"\n #include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n #include \"tensorflow/core/framework/tensor_types.h\"\n #include \"tensorflow/core/framework/variant.h\"\n #include \"tensorflow/core/framework/variant_encode_decode.h\"\n #include \"tensorflow/core/framework/variant_op_registry.h\"\n+#include \"tensorflow/core/platform/errors.h\"\n \n namespace tensorflow {\n \n@@ -633,6 +635,11 @@ template <typename T>\n Status ExtractVariantFromInput(OpKernelContext* ctx, int index,\n                                const T** value) {\n   const Tensor& input_t = ctx->input(index);\n+  if (!TensorShapeUtils::IsScalar(input_t.shape())) {\n+    return errors::InvalidArgument(\n+        \"Invalid input matrix: Shape must be rank 0 but is rank \",\n+        input_t.dims());\n+  }\n   const Variant& input_variant = input_t.scalar<Variant>()();\n   *value = input_variant.get<T>();\n   if (*value == nullptr) {"