"diff --git a/tensorflow/python/lib/core/py_func.cc b/tensorflow/python/lib/core/py_func.cc\nindex 1fdfab1a6c0..925929fa2f0 100644\n--- a/tensorflow/python/lib/core/py_func.cc\n+++ b/tensorflow/python/lib/core/py_func.cc\n@@ -83,8 +83,8 @@ bool IsCPUDevice(const Device* d) {\n   return d == nullptr || d->tensorflow_accelerator_device_info() == nullptr;\n }\n \n-// Givens the 'call', prepares the token and inputs as a python tuple\n-// that is appropriate for calling the trampoline.\n+// Given the 'call', prepares the token and inputs as a python tuple that is\n+// appropriate for calling the trampoline.\n Status MakeArgTuple(const PyCall* call, TFE_Context* ctx, PyObject** tuple) {\n   int64_t n = call->ins.size();\n   PyObject* lst = PyList_New(n);\n@@ -119,7 +119,11 @@ Status MakeArgTuple(const PyCall* call, TFE_Context* ctx, PyObject** tuple) {\n     PyList_SetItem(lst, i, arg);\n   }\n   *tuple = Py_BuildValue(\"(ssN)\", call->token.c_str(), device_name, lst);\n-  CHECK(*tuple);\n+  if (*tuple == nullptr) {\n+    return errors::Internal(\n+        \"Failed to create python tuple. Please make sure `token` is a \"\n+        \"well-formed UTF-8 string.\");\n+  }\n   return OkStatus();\n }\n "