"diff --git a/tensorflow/compiler/xla/stream_executor/plugin_registry.cc b/tensorflow/compiler/xla/stream_executor/plugin_registry.cc\nindex dc682ae5ded..9b55a25aca2 100644\n--- a/tensorflow/compiler/xla/stream_executor/plugin_registry.cc\n+++ b/tensorflow/compiler/xla/stream_executor/plugin_registry.cc\n@@ -19,8 +19,8 @@ limitations under the License.\n #include \"absl/strings/str_cat.h\"\n #include \"absl/strings/str_format.h\"\n #include \"absl/synchronization/mutex.h\"\n-#include \"tensorflow/compiler/xla/stream_executor/lib/error.h\"\n #include \"tensorflow/compiler/xla/stream_executor/multi_platform_manager.h\"\n+#include \"tensorflow/tsl/platform/errors.h\"\n \n namespace stream_executor {\n \n@@ -76,7 +76,7 @@ tsl::Status PluginRegistry::RegisterFactoryInternal(\n \n   if (factories->find(plugin_id) != factories->end()) {\n     return tsl::Status(\n-        port::error::ALREADY_EXISTS,\n+        tsl::error::ALREADY_EXISTS,\n         absl::StrFormat(\"Attempting to register factory for plugin %s when \"\n                         \"one has already been registered\",\n                         plugin_name));\n@@ -96,7 +96,7 @@ tsl::StatusOr<FACTORY_TYPE> PluginRegistry::GetFactoryInternal(\n     iter = generic_factories.find(plugin_id);\n     if (iter == generic_factories.end()) {\n       return tsl::Status(\n-          port::error::NOT_FOUND,\n+          tsl::error::NOT_FOUND,\n           absl::StrFormat(\"Plugin ID %p not registered.\", plugin_id));\n     }\n   }\n@@ -217,7 +217,7 @@ bool PluginRegistry::HasFactory(Platform::Id platform_id,\n                                                                               \\\n       if (plugin_id == kNullPlugin) {                                         \\\n         return tsl::Status(                                                   \\\n-            port::error::FAILED_PRECONDITION,                                 \\\n+            tsl::error::FAILED_PRECONDITION,                                  \\\n             \"No suitable \" PLUGIN_STRING                                      \\\n             \" plugin registered. Have you linked in a \" PLUGIN_STRING         \\\n             \"-providing plugin?\");                                            \\\n@@ -236,7 +236,7 @@ bool PluginRegistry::HasFactory(Platform::Id platform_id,\n       PlatformKind platform_kind, PluginId plugin_id) {                       \\\n     auto iter = platform_id_by_kind_.find(platform_kind);                     \\\n     if (iter == platform_id_by_kind_.end()) {                                 \\\n-      return tsl::Status(port::error::FAILED_PRECONDITION,                    \\\n+      return tsl::Status(tsl::error::FAILED_PRECONDITION,                     \\\n                          absl::StrFormat(\"Platform kind %d not registered.\",  \\\n                                          static_cast<int>(platform_kind)));   \\\n     }                                                                         \\"