"diff --git a/tensorflow/core/kernels/rnn/gru_ops.cc b/tensorflow/core/kernels/rnn/gru_ops.cc\nindex 702e618804d..93aa88ca067 100644\n--- a/tensorflow/core/kernels/rnn/gru_ops.cc\n+++ b/tensorflow/core/kernels/rnn/gru_ops.cc\n@@ -49,61 +49,68 @@ class GRUCellBlockOp : public OpKernel {\n     const Tensor* b_c_tensor = nullptr;\n     OP_REQUIRES_OK(ctx, ctx->input(\"b_c\", &b_c_tensor));\n \n+    // Sanity checks for input shapes.\n+\n+    // Shape of 'x' must be [batch_size, input_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(x_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of x must be 2\", x_tensor->dims(),\n+                                        \" vs. 2\"));\n     const int64_t batch_size = x_tensor->dim_size(0);\n     const int64_t input_size = x_tensor->dim_size(1);\n-    const int64_t cell_size = h_prev_tensor->dim_size(1);\n-\n-    // Sanity checks for input shapes.\n \n     // Shape of 'h' must be [batch_size, cell_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(h_prev_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of h_prev must be 2, got \",\n+                                        h_prev_tensor->dims()));\n     OP_REQUIRES(ctx, h_prev_tensor->dim_size(0) == batch_size,\n                 errors::InvalidArgument(\"h_prev.dims(0) != batch_size: \",\n                                         h_prev_tensor->dim_size(0), \" vs. \",\n                                         batch_size));\n-    OP_REQUIRES(ctx, h_prev_tensor->dim_size(1) == cell_size,\n-                errors::InvalidArgument(\n-                    \"h_prev.dims(1) != cell_size: \", h_prev_tensor->dim_size(1),\n-                    \" vs. \", cell_size));\n+    const int64_t cell_size = h_prev_tensor->dim_size(1);\n \n     // Shape of 'w_ru' must be [input_size+cell_size, 2*cell_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(w_ru_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of w_ru_ must be 2, got \",\n+                                        w_ru_tensor->dims()));\n     OP_REQUIRES(ctx, w_ru_tensor->dim_size(0) == input_size + cell_size,\n                 errors::InvalidArgument(\n                     \"w_ru.dim_size(0) != input_size + cell_size: \",\n                     w_ru_tensor->dim_size(0), \" vs. \", input_size + cell_size));\n-\n     OP_REQUIRES(ctx, w_ru_tensor->dim_size(1) == cell_size * 2,\n                 errors::InvalidArgument(\"w_ru.dim_size(1) != cell_size * 2: \",\n                                         w_ru_tensor->dim_size(1), \" vs. \",\n                                         cell_size * 2));\n \n     // Shape of 'w_c' must be [input_size+cell_size, cell_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(w_c_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of w_c must be 2, got \",\n+                                        w_c_tensor->dims()));\n     OP_REQUIRES(ctx, w_c_tensor->dim_size(0) == input_size + cell_size,\n                 errors::InvalidArgument(\n                     \"w_c.dim_size(0) != input_size + cell_size: \",\n                     w_c_tensor->dim_size(0), \" vs. \", input_size + cell_size));\n-\n     OP_REQUIRES(ctx, w_c_tensor->dim_size(1) == cell_size,\n                 errors::InvalidArgument(\n                     \"w_c.dim_size(1) != cell_size: \", w_c_tensor->dim_size(1),\n                     \" vs. \", cell_size));\n \n     // Shape of 'b_ru' must be [2*cell_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsVector(b_ru_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of b_ru must be 1, got \",\n+                                        b_ru_tensor->dims()));\n     OP_REQUIRES(ctx, b_ru_tensor->dim_size(0) == cell_size * 2,\n                 errors::InvalidArgument(\"b_ru.dim_size(0) != cell_size * 2: \",\n                                         b_ru_tensor->dim_size(0), \" vs. \",\n                                         cell_size * 2));\n \n-    OP_REQUIRES(ctx, b_ru_tensor->dims() == 1,\n-                errors::InvalidArgument(\"Rank of b_ru must be 1\",\n-                                        b_ru_tensor->dims(), \" vs. 1\", 1));\n     // Shape of 'b_c' must be [cell_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsVector(b_c_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of b_c must be 1, got \",\n+                                        b_c_tensor->dims()));\n     OP_REQUIRES(ctx, b_c_tensor->dim_size(0) == cell_size,\n                 errors::InvalidArgument(\n                     \"b_c.dim_size(0) != cell_size: \", b_c_tensor->dim_size(0),\n                     \" vs. \", cell_size));\n-    OP_REQUIRES(ctx, b_c_tensor->dims() == 1,\n-                errors::InvalidArgument(\"Rank of b_c must be 1\",\n-                                        b_c_tensor->dims(), \" vs. 1\"));\n \n     // Create output tensors.\n     Tensor* r_tensor = nullptr;\n@@ -204,65 +211,71 @@ class GRUBlockCellGradOp : public OpKernel {\n     const Tensor* d_h_tensor = nullptr;\n     OP_REQUIRES_OK(ctx, ctx->input(\"d_h\", &d_h_tensor));\n \n+    // Shape of 'x' must be [batch_size, input_size]\n+    OP_REQUIRES(\n+        ctx, TensorShapeUtils::IsMatrix(x_tensor->shape()),\n+        errors::InvalidArgument(\"Rank of x must be 2, got \", x_tensor->dims()));\n     const int64_t batch_size = x_tensor->dim_size(0);\n     const int64_t input_size = x_tensor->dim_size(1);\n-    const int64_t cell_size = h_prev_tensor->dim_size(1);\n \n-    // Sanity checks for input shapes.\n-\n-    // Shape of 'h_prev' must be [batch_size, cell_size]\n+    // Shape of 'h' must be [batch_size, cell_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(h_prev_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of h_prev must be 2, got \",\n+                                        h_prev_tensor->dims()));\n     OP_REQUIRES(ctx, h_prev_tensor->dim_size(0) == batch_size,\n                 errors::InvalidArgument(\"h_prev.dims(0) != batch_size: \",\n                                         h_prev_tensor->dim_size(0), \" vs. \",\n                                         batch_size));\n-    OP_REQUIRES(ctx, h_prev_tensor->dim_size(1) == cell_size,\n-                errors::InvalidArgument(\n-                    \"h_prev.dims(1) != cell_size: \", h_prev_tensor->dim_size(1),\n-                    \" vs. \", cell_size));\n+    const int64_t cell_size = h_prev_tensor->dim_size(1);\n \n     // Shape of 'w_ru' must be [input_size+cell_size, 2*cell_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(w_ru_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of w_ru_ must be 2, got \",\n+                                        w_ru_tensor->dims()));\n     OP_REQUIRES(ctx, w_ru_tensor->dim_size(0) == input_size + cell_size,\n                 errors::InvalidArgument(\n                     \"w_ru.dim_size(0) != input_size + cell_size: \",\n                     w_ru_tensor->dim_size(0), \" vs. \", input_size + cell_size));\n-\n     OP_REQUIRES(ctx, w_ru_tensor->dim_size(1) == cell_size * 2,\n                 errors::InvalidArgument(\"w_ru.dim_size(1) != cell_size * 2: \",\n                                         w_ru_tensor->dim_size(1), \" vs. \",\n                                         cell_size * 2));\n \n     // Shape of 'w_c' must be [input_size+cell_size, cell_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(w_c_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of w_c must be 2, got \",\n+                                        w_c_tensor->dims()));\n     OP_REQUIRES(ctx, w_c_tensor->dim_size(0) == input_size + cell_size,\n                 errors::InvalidArgument(\n                     \"w_c.dim_size(0) != input_size + cell_size: \",\n                     w_c_tensor->dim_size(0), \" vs. \", input_size + cell_size));\n-\n     OP_REQUIRES(ctx, w_c_tensor->dim_size(1) == cell_size,\n                 errors::InvalidArgument(\n                     \"w_c.dim_size(1) != cell_size: \", w_c_tensor->dim_size(1),\n                     \" vs. \", cell_size));\n \n     // Shape of 'b_ru' must be [2*cell_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsVector(b_ru_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of b_ru must be 1, got \",\n+                                        b_ru_tensor->dims()));\n     OP_REQUIRES(ctx, b_ru_tensor->dim_size(0) == cell_size * 2,\n                 errors::InvalidArgument(\"b_ru.dim_size(0) != cell_size * 2: \",\n                                         b_ru_tensor->dim_size(0), \" vs. \",\n                                         cell_size * 2));\n \n-    OP_REQUIRES(ctx, b_ru_tensor->dims() == 1,\n-                errors::InvalidArgument(\"Rank of b_ru must be 1\",\n-                                        b_ru_tensor->dims(), \" vs. 1\"));\n-\n     // Shape of 'b_c' must be [cell_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsVector(b_c_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of b_c must be 1, got \",\n+                                        b_c_tensor->dims()));\n     OP_REQUIRES(ctx, b_c_tensor->dim_size(0) == cell_size,\n                 errors::InvalidArgument(\n                     \"b_c.dim_size(0) != cell_size: \", b_c_tensor->dim_size(0),\n                     \" vs. \", cell_size));\n \n-    OP_REQUIRES(ctx, b_c_tensor->dims() == 1,\n-                errors::InvalidArgument(\"Rank of b_c must be 1 \",\n-                                        b_c_tensor->dims(), \" vs. 1\"));\n-\n     // Shape of 'r' must be [batch_size, cell_size]\n+    OP_REQUIRES(\n+        ctx, TensorShapeUtils::IsMatrix(r_tensor->shape()),\n+        errors::InvalidArgument(\"Rank of r must be 2, got \", r_tensor->dims()));\n     OP_REQUIRES(ctx, r_tensor->dim_size(0) == batch_size,\n                 errors::InvalidArgument(\n                     \"r.dims(0) != batch_size: \", r_tensor->dim_size(0), \" vs. \",\n@@ -273,6 +286,9 @@ class GRUBlockCellGradOp : public OpKernel {\n                     cell_size));\n \n     // Shape of 'u' must be [batch_size, cell_size]\n+    OP_REQUIRES(\n+        ctx, TensorShapeUtils::IsMatrix(u_tensor->shape()),\n+        errors::InvalidArgument(\"Rank of u must be 2, got \", u_tensor->dims()));\n     OP_REQUIRES(ctx, u_tensor->dim_size(0) == batch_size,\n                 errors::InvalidArgument(\n                     \"u.dims(0) != batch_size: \", u_tensor->dim_size(0), \" vs. \",\n@@ -283,6 +299,9 @@ class GRUBlockCellGradOp : public OpKernel {\n                     cell_size));\n \n     // Shape of 'c' must be [batch_size, cell_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(c_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of w_c must be 2, got \",\n+                                        c_tensor->dims()));\n     OP_REQUIRES(ctx, c_tensor->dim_size(0) == batch_size,\n                 errors::InvalidArgument(\n                     \"c.dims(0) != batch_size: \", c_tensor->dim_size(0), \" vs. \",\n@@ -293,6 +312,9 @@ class GRUBlockCellGradOp : public OpKernel {\n                     cell_size));\n \n     // Shape of 'd_h' must be [batch_size, cell_size]\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(d_h_tensor->shape()),\n+                errors::InvalidArgument(\"Rank of d_h must be 2, got \",\n+                                        d_h_tensor->dims()));\n     OP_REQUIRES(ctx, d_h_tensor->dim_size(0) == batch_size,\n                 errors::InvalidArgument(\n                     \"d_h.dims(0) != batch_size: \", d_h_tensor->dim_size(0),"