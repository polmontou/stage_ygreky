"diff --git a/tensorflow/tsl/profiler/lib/traceme_encode.h b/tensorflow/tsl/profiler/lib/traceme_encode.h\nindex 1e94f32e55c..dac5f08515a 100644\n--- a/tensorflow/tsl/profiler/lib/traceme_encode.h\n+++ b/tensorflow/tsl/profiler/lib/traceme_encode.h\n@@ -20,6 +20,7 @@ limitations under the License.\n #include <initializer_list>\n #include <string>\n \n+#include \"absl/base/attributes.h\"\n #include \"absl/strings/match.h\"\n #include \"absl/strings/str_cat.h\"\n #include \"absl/strings/string_view.h\"\n@@ -31,14 +32,21 @@ namespace profiler {\n \n // An argument passed to TraceMeEncode.\n struct TraceMeArg {\n-  // This constructor is required because absl::AlphaNum is non-copyable.\n-  template <typename Value>\n-  TraceMeArg(absl::string_view k, Value v) : key(k), value(v) {}\n+  // String conversions of value types are supported via AlphaNum. We keep a\n+  // reference to the AlphaNum's internal buffer here, so it must remain valid\n+  // for the lifetime of this object. We cannot store it by value because it is\n+  // not safe to construct an AlphaNum as a member of a class, particularly when\n+  // AbslStringify is being used (it may reference default arguments that are on\n+  // the caller's stack, if we constructed it here those default arguments would\n+  // be destroyed before they are used).\n+  TraceMeArg(absl::string_view k,\n+             const absl::AlphaNum& v ABSL_ATTRIBUTE_LIFETIME_BOUND)\n+      : key(k), value(v.Piece()) {}\n \n   TF_DISALLOW_COPY_AND_ASSIGN(TraceMeArg);\n \n   absl::string_view key;\n-  absl::AlphaNum value;\n+  absl::string_view value;\n };\n \n namespace traceme_internal {\n@@ -74,7 +82,7 @@ TF_ATTRIBUTE_ALWAYS_INLINE inline std::string AppendArgs(\n     for (const auto& arg : args) {\n       out = Append(out, arg.key);\n       *out++ = '=';\n-      out = Append(out, arg.value.Piece());\n+      out = Append(out, arg.value);\n       *out++ = ',';\n     }\n     *(out - 1) = '#';"