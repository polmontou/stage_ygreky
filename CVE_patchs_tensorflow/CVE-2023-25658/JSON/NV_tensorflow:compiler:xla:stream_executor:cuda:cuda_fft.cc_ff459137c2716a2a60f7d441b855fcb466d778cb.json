"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_fft.h\"\n\n#include <array>\n#include <complex>\n#include <limits>\n\n#include \"absl/strings/str_cat.h\"\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_activation.h\"\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.h\"\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_helpers.h\"\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_platform_id.h\"\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_stream.h\"\n#include \"tensorflow/compiler/xla/stream_executor/device_memory.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/initialize.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/logging.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/port.h\"\n#include \"tensorflow/compiler/xla/stream_executor/plugin_registry.h\"\n#include \"tensorflow/compiler/xla/stream_executor/stream.h\"\n#include \"tensorflow/compiler/xla/stream_executor/stream_executor_internal.h\"\n#include \"tensorflow/tsl/platform/errors.h\"\n#include \"tensorflow/tsl/platform/status.h\"\n\nnamespace stream_executor {\nnamespace gpu {\n\nPLUGIN_REGISTRY_DEFINE_PLUGIN_ID(kCuFftPlugin);\n\nnamespace {\n\n// A helper function transforming gpu_fft arguments into cuFFT arguments.\ncufftType CUDAFftType(fft::Type type) {\n  switch (type) {\n    case fft::Type::kC2CForward:\n    case fft::Type::kC2CInverse:\n      return CUFFT_C2C;\n    case fft::Type::kC2R:\n      return CUFFT_C2R;\n    case fft::Type::kR2C:\n      return CUFFT_R2C;\n    case fft::Type::kZ2ZForward:\n    case fft::Type::kZ2ZInverse:\n      return CUFFT_Z2Z;\n    case fft::Type::kZ2D:\n      return CUFFT_Z2D;\n    case fft::Type::kD2Z:\n      return CUFFT_D2Z;\n    default:\n      LOG(FATAL) << \"Invalid value of fft::Type.\";\n  }\n}\n\n// Associates the given stream with the given cuFFT plan.\nbool SetStream(GpuExecutor *parent, cufftHandle plan, Stream *stream) {\n  cuda::ScopedActivateExecutorContext sac(parent);\n  auto ret = cufftSetStream(plan, AsGpuStreamValue(stream));\n  if (ret != CUFFT_SUCCESS) {\n    LOG(ERROR) << \"Failed to run cuFFT routine cufftSetStream: \" << ret;\n    return false;\n  }\n  return true;\n}\n\n// Populates array of 32b integers from 64b integers, or an error if the\n// numbers don't fit in 32b (signed).\ntsl::StatusOr<std::array<int32_t, 3>> Downsize64bArray(\n    std::array<long long, 3> source, int32_t rank) {  // NOLINT\n  std::array<int32_t, 3> downsized = {0};\n  for (int32_t i = 0; i < rank; ++i) {\n    if (source[i] > std::numeric_limits<int32_t>::max()) {\n      return tsl::errors::InvalidArgument(\n          source[i], \" exceeds max 32b signed integer. Conversion failed.\");\n    }\n    downsized[i] = static_cast<int32_t>(source[i]);\n  }\n  return downsized;\n}\n\n}  // namespace\n\ntsl::Status CUDAFftPlan::Initialize(\n    GpuExecutor *parent, Stream *stream, int rank, uint64_t *elem_count,\n    uint64_t *input_embed, uint64 input_stride, uint64 input_distance,\n    uint64_t *output_embed, uint64 output_stride, uint64 output_distance,\n    fft::Type type, int batch_count, ScratchAllocator *scratch_allocator) {\n  if (IsInitialized()) {\n    return tsl::errors::Internal(\"cuFFT is already initialized.\");\n  }\n  is_initialized_ = true;\n  scratch_allocator_ = scratch_allocator;\n  cuda::ScopedActivateExecutorContext sac(parent);\n  // NOLINTBEGIN\n  std::array<long long, 3> elem_count_ = {0};\n  std::array<long long, 3> input_embed_ = {0};\n  std::array<long long, 3> output_embed_ = {0};\n  // NOLINTEND\n  for (int32_t i = 0; i < rank; ++i) {\n    elem_count_[i] = elem_count[i];\n    if (input_embed) {\n      input_embed_[i] = input_embed[i];\n    }\n    if (output_embed) {\n      output_embed_[i] = output_embed[i];\n    }\n  }\n  parent_ = parent;\n  fft_type_ = type;\n  if (batch_count == 1 && input_embed == nullptr && output_embed == nullptr) {\n    cufftResult_t ret;\n    if (scratch_allocator == nullptr) {\n      switch (rank) {\n        case 1:\n          // cufftPlan1d\n          ret = cufftPlan1d(&plan_, elem_count_[0], CUDAFftType(type),\n                            1 /* = batch */);\n          if (ret != CUFFT_SUCCESS) {\n            LOG(ERROR) << \"Failed to create cuFFT 1d plan: \" << ret;\n            return tsl::errors::Internal(\"Failed to create cuFFT 1d plan.\");\n          }\n          return ::tsl::OkStatus();\n        case 2:\n          // cufftPlan2d\n          ret = cufftPlan2d(&plan_, elem_count_[0], elem_count_[1],\n                            CUDAFftType(type));\n          if (ret != CUFFT_SUCCESS) {\n            LOG(ERROR) << \"Failed to create cuFFT 2d plan: \" << ret;\n            return tsl::errors::Internal(\"Failed to create cuFFT 2d plan.\");\n          }\n          return ::tsl::OkStatus();\n        case 3:\n          // cufftPlan3d\n          ret = cufftPlan3d(&plan_, elem_count_[0], elem_count_[1],\n                            elem_count_[2], CUDAFftType(type));\n          if (ret != CUFFT_SUCCESS) {\n            LOG(ERROR) << \"Failed to create cuFFT 3d plan: \" << ret;\n            return tsl::errors::Internal(\"Failed to create cuFFT 3d plan.\");\n          }\n          return ::tsl::OkStatus();\n        default:\n          LOG(ERROR) << \"Invalid rank value for cufftPlan. \"\n                        \"Requested 1, 2, or 3, given: \"\n                     << rank;\n          return tsl::errors::InvalidArgument(\n              \"cufftPlan only takes rank 1, 2, or 3.\");\n      }\n    } else {\n      ret = cufftCreate(&plan_);\n      if (ret != CUFFT_SUCCESS) {\n        LOG(ERROR) << \"Failed to create cuFFT plan: \" << ret;\n        return tsl::errors::Internal(\"Failed to create cuFFT plan.\");\n      }\n      ret = cufftSetAutoAllocation(plan_, 0);\n      if (ret != CUFFT_SUCCESS) {\n        LOG(ERROR) << \"Failed to set auto allocation for cuFFT plan: \" << ret;\n        return tsl::errors::Internal(\n            \"Failed to set auto allocation for cuFFT plan.\");\n      }\n      switch (rank) {\n        case 1:\n          ret = cufftMakePlan1d(plan_, elem_count_[0], CUDAFftType(type),\n                                /*batch=*/1, &scratch_size_bytes_);\n          if (ret != CUFFT_SUCCESS) {\n            LOG(ERROR) << \"Failed to make cuFFT 1d plan: \" << ret;\n            return tsl::errors::Internal(\"Failed to make cuFFT 1d plan.\");\n          }\n          break;\n        case 2:\n          ret = cufftMakePlan2d(plan_, elem_count_[0], elem_count_[1],\n                                CUDAFftType(type), &scratch_size_bytes_);\n          if (ret != CUFFT_SUCCESS) {\n            LOG(ERROR) << \"Failed to make cuFFT 2d plan: \" << ret;\n            return tsl::errors::Internal(\"Failed to make cuFFT 2d plan.\");\n          }\n          break;\n        case 3:\n          ret = cufftMakePlan3d(plan_, elem_count_[0], elem_count_[1],\n                                elem_count_[2], CUDAFftType(type),\n                                &scratch_size_bytes_);\n          if (ret != CUFFT_SUCCESS) {\n            LOG(ERROR) << \"Failed to make cuFFT 3d plan: \" << ret;\n            return tsl::errors::Internal(\"Failed to make cuFFT 3d plan.\");\n          }\n          break;\n        default:\n          LOG(ERROR) << \"Invalid rank value for cufftPlan. \"\n                        \"Requested 1, 2, or 3, given: \"\n                     << rank;\n          return tsl::errors::InvalidArgument(\n              \"cufftPlan only takes rank 1, 2, or 3.\");\n      }\n      return UpdateScratchAllocator(stream, scratch_allocator);\n    }\n  } else {\n    // For either multiple batches or rank higher than 3, use cufft*PlanMany*().\n    if (scratch_allocator == nullptr) {\n      // Downsize 64b arrays to 32b as there's no 64b version of cufftPlanMany\n      TF_ASSIGN_OR_RETURN(auto elem_count_32b_,\n                          Downsize64bArray(elem_count_, rank));\n      TF_ASSIGN_OR_RETURN(auto input_embed_32b_,\n                          Downsize64bArray(input_embed_, rank));\n      TF_ASSIGN_OR_RETURN(auto output_embed_32b_,\n                          Downsize64bArray(output_embed_, rank));\n      auto ret = cufftPlanMany(\n          &plan_, rank, elem_count_32b_.data(),\n          input_embed ? input_embed_32b_.data() : nullptr, input_stride,\n          input_distance, output_embed ? output_embed_32b_.data() : nullptr,\n          output_stride, output_distance, CUDAFftType(type), batch_count);\n      if (ret != CUFFT_SUCCESS) {\n        LOG(ERROR) << \"Failed to create cuFFT batched plan: \" << ret;\n        return tsl::errors::Internal(\"Failed to create cuFFT batched plan.\");\n      }\n    } else {\n      auto ret = cufftCreate(&plan_);\n      if (ret != CUFFT_SUCCESS) {\n        LOG(ERROR) << \"Failed to create cuFFT batched plan: \" << ret;\n        return tsl::errors::Internal(\"Failed to create cuFFT batched plan.\");\n      }\n      ret = cufftSetAutoAllocation(plan_, 0);\n      if (ret != CUFFT_SUCCESS) {\n        LOG(ERROR) << \"Failed to set auto allocation for cuFFT batched plan: \"\n                   << ret;\n        return tsl::errors::Internal(\n            \"Failed to set auto allocation for cuFFT batched plan.\");\n      }\n      ret = cufftMakePlanMany64(\n          plan_, rank, elem_count_.data(),\n          input_embed ? input_embed_.data() : nullptr, input_stride,\n          input_distance, output_embed ? output_embed_.data() : nullptr,\n          output_stride, output_distance, CUDAFftType(type), batch_count,\n          &scratch_size_bytes_);\n      if (ret != CUFFT_SUCCESS) {\n        LOG(ERROR) << \"Failed to make cuFFT batched plan: \" << ret;\n        return tsl::errors::Internal(\"Failed to make cuFFT batched plan.\");\n      }\n      return UpdateScratchAllocator(stream, scratch_allocator);\n    }\n  }\n  return ::tsl::OkStatus();\n}\n\ntsl::Status CUDAFftPlan::Initialize(GpuExecutor *parent, Stream *stream,\n                                    int rank, uint64_t *elem_count,\n                                    fft::Type type,\n                                    ScratchAllocator *scratch_allocator) {\n  return Initialize(parent_, stream, rank, elem_count,\n                    /*input_embed=*/nullptr, /*input_stride=*/0,\n                    /*input_distance=*/0,\n                    /*output_embed=*/nullptr, /*output_stride=*/0,\n                    /*output_distance=*/0, type, 1, scratch_allocator);\n}\n\ntsl::Status CUDAFftPlan::UpdateScratchAllocator(\n    Stream *stream, ScratchAllocator *scratch_allocator) {\n  scratch_allocator_ = scratch_allocator;\n\n  if (scratch_size_bytes_ != 0) {\n    auto allocated = scratch_allocator->AllocateBytes(scratch_size_bytes_);\n    if (!allocated.ok() || (scratch_ = allocated.value()) == nullptr) {\n      LOG(ERROR) << \"Failed to allocate work area.\";\n      return allocated.status();\n    }\n  }\n  // Connect work area with allocated space.\n  cuda::ScopedActivateExecutorContext sac(parent_);\n  cufftResult_t ret = cufftSetWorkArea(plan_, scratch_.opaque());\n  if (ret != CUFFT_SUCCESS) {\n    LOG(ERROR) << \"Failed to set work area for cuFFT plan: \" << ret;\n    return tsl::errors::Internal(\"Failed to set work area for cuFFT plan.\");\n  }\n  return ::tsl::OkStatus();\n}\n\nCUDAFftPlan::~CUDAFftPlan() {\n  cuda::ScopedActivateExecutorContext sac(parent_);\n  cufftDestroy(plan_);\n}\n\nint CUDAFftPlan::GetFftDirection() const {\n  if (!IsInitialized()) {\n    LOG(FATAL) << \"Try to get fft direction before initialization.\";\n  } else {\n    switch (fft_type_) {\n      case fft::Type::kC2CForward:\n      case fft::Type::kZ2ZForward:\n      case fft::Type::kR2C:\n      case fft::Type::kD2Z:\n        return CUFFT_FORWARD;\n      case fft::Type::kC2CInverse:\n      case fft::Type::kZ2ZInverse:\n      case fft::Type::kC2R:\n      case fft::Type::kZ2D:\n        return CUFFT_INVERSE;\n      default:\n        LOG(FATAL) << \"Invalid value of fft::Type.\";\n    }\n  }\n}\n\nstd::unique_ptr<fft::Plan> CUDAFft::Create1dPlan(Stream *stream, uint64_t num_x,\n                                                 fft::Type type,\n                                                 bool in_place_fft) {\n  std::unique_ptr<CUDAFftPlan> fft_plan_ptr{new CUDAFftPlan()};\n  uint64_t elem_count[1] = {num_x};\n  tsl::Status status =\n      fft_plan_ptr->Initialize(parent_, stream, 1, elem_count, type,\n                               /*scratch_allocator=*/nullptr);\n  if (!status.ok()) {\n    LOG(ERROR) << \"Plan Parameters: num_x: \" << num_x;\n    LOG(ERROR) << \"Failed to initialize cufft 1d plan: \"\n               << status.error_message();\n    return nullptr;\n  }\n  return std::move(fft_plan_ptr);\n}\n\nstd::unique_ptr<fft::Plan> CUDAFft::Create1dPlanWithScratchAllocator(\n    Stream *stream, uint64_t num_x, fft::Type type, bool in_place_fft,\n    ScratchAllocator *scratch_allocator) {\n  std::unique_ptr<CUDAFftPlan> fft_plan_ptr{new CUDAFftPlan()};\n  uint64_t elem_count[1] = {num_x};\n  tsl::Status status = fft_plan_ptr->Initialize(parent_, stream, 1, elem_count,\n                                                type, scratch_allocator);\n  if (!status.ok()) {\n    LOG(ERROR) << \"Plan Parameters: num_x: \" << num_x;\n    LOG(ERROR)\n        << \"Failed to initialize cufft 1d plan with customized allocator: \"\n        << status.error_message();\n    return nullptr;\n  }\n  return std::move(fft_plan_ptr);\n}\n\nstd::unique_ptr<fft::Plan> CUDAFft::Create2dPlan(Stream *stream, uint64_t num_x,\n                                                 uint64_t num_y, fft::Type type,\n                                                 bool in_place_fft) {\n  std::unique_ptr<CUDAFftPlan> fft_plan_ptr{new CUDAFftPlan()};\n  uint64_t elem_count[2] = {num_x, num_y};\n  tsl::Status status =\n      fft_plan_ptr->Initialize(parent_, stream, 1, elem_count, type,\n                               /*scratch_allocator=*/nullptr);\n  if (!status.ok()) {\n    LOG(ERROR) << \"Plan Parameters: num_x: \" << num_x << \" num_y: \" << num_y;\n    LOG(ERROR) << \"Failed to initialize cufft 2d plan: \"\n               << status.error_message();\n    return nullptr;\n  }\n  return std::move(fft_plan_ptr);\n}\n\nstd::unique_ptr<fft::Plan> CUDAFft::Create2dPlanWithScratchAllocator(\n    Stream *stream, uint64_t num_x, uint64 num_y, fft::Type type,\n    bool in_place_fft, ScratchAllocator *scratch_allocator) {\n  std::unique_ptr<CUDAFftPlan> fft_plan_ptr{new CUDAFftPlan()};\n  uint64_t elem_count[2] = {num_x, num_y};\n  tsl::Status status = fft_plan_ptr->Initialize(parent_, stream, 2, elem_count,\n                                                type, scratch_allocator);\n  if (!status.ok()) {\n    LOG(ERROR) << \"Plan Parameters: num_x: \" << num_x << \" num_y: \" << num_y;\n    LOG(ERROR)\n        << \"Failed to initialize cufft 2d plan with customized allocator: \"\n        << status.error_message();\n    return nullptr;\n  }\n  return std::move(fft_plan_ptr);\n}\n\nstd::unique_ptr<fft::Plan> CUDAFft::Create3dPlan(Stream *stream, uint64_t num_x,\n                                                 uint64_t num_y, uint64 num_z,\n                                                 fft::Type type,\n                                                 bool in_place_fft) {\n  std::unique_ptr<CUDAFftPlan> fft_plan_ptr{new CUDAFftPlan()};\n  uint64_t elem_count[3] = {num_x, num_y, num_z};\n  tsl::Status status =\n      fft_plan_ptr->Initialize(parent_, stream, 3, elem_count, type,\n                               /*scratch_allocator=*/nullptr);\n  if (!status.ok()) {\n    LOG(ERROR) << \"Plan Parameters: num_x: \" << num_x << \" num_y: \" << num_y\n               << \" num_z: \" << num_z;\n    LOG(ERROR) << \"Failed to initialize cufft 3d plan: \"\n               << status.error_message();\n    return nullptr;\n  }\n  return std::move(fft_plan_ptr);\n}\n\nstd::unique_ptr<fft::Plan> CUDAFft::Create3dPlanWithScratchAllocator(\n    Stream *stream, uint64_t num_x, uint64 num_y, uint64 num_z, fft::Type type,\n    bool in_place_fft, ScratchAllocator *scratch_allocator) {\n  std::unique_ptr<CUDAFftPlan> fft_plan_ptr{new CUDAFftPlan()};\n  uint64_t elem_count[3] = {num_x, num_y, num_z};\n  tsl::Status status = fft_plan_ptr->Initialize(parent_, stream, 3, elem_count,\n                                                type, scratch_allocator);\n  if (!status.ok()) {\n    LOG(ERROR) << \"Plan Parameters: num_x: \" << num_x << \" num_y: \" << num_y\n               << \" num_z: \" << num_z;\n    LOG(ERROR)\n        << \"Failed to initialize cufft 3d plan with customized allocator: \"\n        << status.error_message();\n    return nullptr;\n  }\n  return std::move(fft_plan_ptr);\n}\n\nstd::unique_ptr<fft::Plan> CUDAFft::CreateBatchedPlan(\n    Stream *stream, int rank, uint64_t *elem_count, uint64 *input_embed,\n    uint64_t input_stride, uint64 input_distance, uint64 *output_embed,\n    uint64_t output_stride, uint64 output_distance, fft::Type type,\n    bool in_place_fft, int batch_count) {\n  std::unique_ptr<CUDAFftPlan> fft_plan_ptr{new CUDAFftPlan()};\n  tsl::Status status = fft_plan_ptr->Initialize(\n      parent_, stream, rank, elem_count, input_embed, input_stride,\n      input_distance, output_embed, output_stride, output_distance, type,\n      batch_count, /*scratch_allocator=*/nullptr);\n  if (!status.ok()) {\n    LOG(ERROR) << \"Initialize Params: rank: \" << rank\n               << \" elem_count: \" << *elem_count\n               << \" input_embed: \" << *input_embed\n               << \" input_stride: \" << input_stride\n               << \" input_distance: \" << input_distance\n               << \" output_embed: \" << *output_embed\n               << \" output_stride: \" << output_stride\n               << \" output_distance: \" << output_distance\n               << \" batch_count: \" << batch_count;\n    LOG(ERROR) << \"Failed to initialize batched cufft plan: \"\n               << status.error_message();\n    return nullptr;\n  }\n\n  return std::move(fft_plan_ptr);\n}\n\nstd::unique_ptr<fft::Plan> CUDAFft::CreateBatchedPlanWithScratchAllocator(\n    Stream *stream, int rank, uint64_t *elem_count, uint64 *input_embed,\n    uint64_t input_stride, uint64 input_distance, uint64 *output_embed,\n    uint64_t output_stride, uint64 output_distance, fft::Type type,\n    bool in_place_fft, int batch_count, ScratchAllocator *scratch_allocator) {\n  std::unique_ptr<CUDAFftPlan> fft_plan_ptr{new CUDAFftPlan()};\n  tsl::Status status = fft_plan_ptr->Initialize(\n      parent_, stream, rank, elem_count, input_embed, input_stride,\n      input_distance, output_embed, output_stride, output_distance, type,\n      batch_count, scratch_allocator);\n  if (!status.ok()) {\n    LOG(ERROR) << \"Initialize Params: rank: \" << rank\n               << \" elem_count: \" << *elem_count\n               << \" input_embed: \" << *input_embed\n               << \" input_stride: \" << input_stride\n               << \" input_distance: \" << input_distance\n               << \" output_embed: \" << *output_embed\n               << \" output_stride: \" << output_stride\n               << \" output_distance: \" << output_distance\n               << \" batch_count: \" << batch_count;\n    LOG(ERROR)\n        << \"Failed to initialize batched cufft plan with customized allocator: \"\n        << status.error_message();\n    return nullptr;\n  }\n  return std::move(fft_plan_ptr);\n}\n\nvoid CUDAFft::UpdatePlanWithScratchAllocator(\n    Stream *stream, fft::Plan *plan, ScratchAllocator *scratch_allocator) {\n  CUDAFftPlan *cuda_fft_plan = dynamic_cast<CUDAFftPlan *>(plan);\n  tsl::Status status =\n      cuda_fft_plan->UpdateScratchAllocator(stream, scratch_allocator);\n  if (!status.ok()) {\n    LOG(FATAL) << \"Failed to update custom allocator for cufft plan: \"\n               << status.error_message();\n  }\n}\n\ntemplate <typename FuncT, typename InputT, typename OutputT>\nbool CUDAFft::DoFftInternal(Stream *stream, fft::Plan *plan, FuncT cufftExec,\n                            const DeviceMemory<InputT> &input,\n                            DeviceMemory<OutputT> *output) {\n  CUDAFftPlan *cuda_fft_plan = dynamic_cast<CUDAFftPlan *>(plan);\n\n  DeviceMemory<InputT> input_maybe_copy = input;\n\n  if (cuda_fft_plan == nullptr) {\n    LOG(ERROR) << \"The passed-in plan is not a CUDAFftPlan object.\";\n    return false;\n  }\n\n  if (!SetStream(parent_, cuda_fft_plan->GetPlan(), stream)) {\n    return false;\n  }\n\n#if CUDA_VERSION >= 10010\n  // Workaround a cuFFT bug, which mutates the input buffer when it shouldn't.\n  // See b/155276727 and go/nvbugs/2959622.\n  // TODO(b/155276727): refine the bounding condition.\n  if (input.opaque() != output->opaque() &&\n      (std::is_same<InputT, std::complex<float>>::value ||\n       std::is_same<InputT, std::complex<double>>::value) &&\n      (std::is_same<OutputT, float>::value ||\n       std::is_same<OutputT, double>::value) &&\n      input.size() > 0) {\n    auto *allocator = cuda_fft_plan->GetScratchAllocator();\n    if (allocator) {\n      auto allocated = allocator->AllocateBytes(input.size());\n      if (allocated.ok()) {\n        if (stream->ThenMemcpy(&allocated.value(), input, input.size()).ok()) {\n          input_maybe_copy = DeviceMemory<InputT>(allocated.value());\n        }\n      }\n      // Keep going even the workaround fails, since we don't have a good\n      // bounding box. We don't want to give up on a potentially correct\n      // execution just because the allocation for the incorrect case fails.\n    }\n  }\n#endif\n\n  cuda::ScopedActivateExecutorContext sac(parent_);\n  auto ret =\n      cufftExec(cuda_fft_plan->GetPlan(),\n                GpuComplex(const_cast<InputT *>(GpuMemory(input_maybe_copy))),\n                GpuComplex(GpuMemoryMutable(output)));\n\n  if (ret != CUFFT_SUCCESS) {\n    LOG(ERROR) << \"Failed to run cuFFT routine: \" << ret;\n    return false;\n  }\n\n  return true;\n}\n\ntemplate <typename FuncT, typename InputT, typename OutputT>\nbool CUDAFft::DoFftWithDirectionInternal(Stream *stream, fft::Plan *plan,\n                                         FuncT cufftExec,\n                                         const DeviceMemory<InputT> &input,\n                                         DeviceMemory<OutputT> *output) {\n  CUDAFftPlan *cuda_fft_plan = dynamic_cast<CUDAFftPlan *>(plan);\n  if (cuda_fft_plan == nullptr) {\n    LOG(ERROR) << \"The passed-in plan is not a CUDAFftPlan object.\";\n    return false;\n  }\n\n  if (!SetStream(parent_, cuda_fft_plan->GetPlan(), stream)) {\n    return false;\n  }\n\n  cuda::ScopedActivateExecutorContext sac(parent_);\n  auto ret = cufftExec(cuda_fft_plan->GetPlan(),\n                       GpuComplex(const_cast<InputT *>(GpuMemory(input))),\n                       GpuComplex(GpuMemoryMutable(output)),\n                       cuda_fft_plan->GetFftDirection());\n\n  if (ret != CUFFT_SUCCESS) {\n    LOG(ERROR) << \"Failed to run cuFFT routine: \" << ret;\n    return false;\n  }\n\n  return true;\n}\n\n#define STREAM_EXECUTOR_CUDA_DEFINE_FFT(__type, __fft_type1, __fft_type2,      \\\n                                        __fft_type3)                           \\\n  bool CUDAFft::DoFft(Stream *stream, fft::Plan *plan,                         \\\n                      const DeviceMemory<std::complex<__type>> &input,         \\\n                      DeviceMemory<std::complex<__type>> *output) {            \\\n    return DoFftWithDirectionInternal(stream, plan, cufftExec##__fft_type1,    \\\n                                      input, output);                          \\\n  }                                                                            \\\n  bool CUDAFft::DoFft(Stream *stream, fft::Plan *plan,                         \\\n                      const DeviceMemory<__type> &input,                       \\\n                      DeviceMemory<std::complex<__type>> *output) {            \\\n    return DoFftInternal(stream, plan, cufftExec##__fft_type2, input, output); \\\n  }                                                                            \\\n  bool CUDAFft::DoFft(Stream *stream, fft::Plan *plan,                         \\\n                      const DeviceMemory<std::complex<__type>> &input,         \\\n                      DeviceMemory<__type> *output) {                          \\\n    return DoFftInternal(stream, plan, cufftExec##__fft_type3, input, output); \\\n  }\n\nSTREAM_EXECUTOR_CUDA_DEFINE_FFT(float, C2C, R2C, C2R)\nSTREAM_EXECUTOR_CUDA_DEFINE_FFT(double, Z2Z, D2Z, Z2D)\n\n#undef STREAM_EXECUTOR_CUDA_DEFINE_FFT\n\n}  // namespace gpu\n\nvoid initialize_cufft() {\n  tsl::Status status =\n      PluginRegistry::Instance()->RegisterFactory<PluginRegistry::FftFactory>(\n          cuda::kCudaPlatformId, gpu::kCuFftPlugin, \"cuFFT\",\n          [](internal::StreamExecutorInterface *parent) -> fft::FftSupport * {\n            gpu::GpuExecutor *cuda_executor =\n                dynamic_cast<gpu::GpuExecutor *>(parent);\n            if (cuda_executor == nullptr) {\n              LOG(ERROR) << \"Attempting to initialize an instance of the cuFFT \"\n                         << \"support library with a non-CUDA StreamExecutor\";\n              return nullptr;\n            }\n\n            return new gpu::CUDAFft(cuda_executor);\n          });\n  if (!status.ok()) {\n    LOG(ERROR) << \"Unable to register cuFFT factory: \"\n               << status.error_message();\n  }\n\n  PluginRegistry::Instance()->SetDefaultFactory(\n      cuda::kCudaPlatformId, PluginKind::kFft, gpu::kCuFftPlugin);\n}\n\n}  // namespace stream_executor\n\nREGISTER_MODULE_INITIALIZER(register_cufft,\n                            { stream_executor::initialize_cufft(); });"