"/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/compiler/xla/stream_executor/host/host_platform.h\"\n\n#include <thread>\n\n#include \"absl/memory/memory.h\"\n#include \"absl/strings/str_format.h\"\n#include \"tensorflow/compiler/xla/stream_executor/host/host_gpu_executor.h\"\n#include \"tensorflow/compiler/xla/stream_executor/host/host_platform_id.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/initialize.h\"\n#include \"tensorflow/tsl/platform/errors.h\"\n\nnamespace stream_executor {\nnamespace host {\n\nHostPlatform::HostPlatform() : name_(\"Host\") {}\n\nHostPlatform::~HostPlatform() {}\n\nPlatform::Id HostPlatform::id() const { return kHostPlatformId; }\n\nint HostPlatform::VisibleDeviceCount() const {\n  return std::thread::hardware_concurrency();\n}\n\nconst std::string& HostPlatform::Name() const { return name_; }\n\ntsl::StatusOr<std::unique_ptr<DeviceDescription>>\nHostPlatform::DescriptionForDevice(int ordinal) const {\n  return HostExecutor::CreateDeviceDescription(ordinal);\n}\n\ntsl::StatusOr<StreamExecutor*> HostPlatform::ExecutorForDevice(int ordinal) {\n  StreamExecutorConfig config;\n  config.ordinal = ordinal;\n  config.plugin_config = PluginConfig();\n  config.device_options = DeviceOptions::Default();\n  return GetExecutor(config);\n}\n\ntsl::StatusOr<StreamExecutor*> HostPlatform::ExecutorForDeviceWithPluginConfig(\n    int device_ordinal, const PluginConfig& plugin_config) {\n  StreamExecutorConfig config;\n  config.ordinal = device_ordinal;\n  config.plugin_config = plugin_config;\n  config.device_options = DeviceOptions::Default();\n  return GetExecutor(config);\n}\n\ntsl::StatusOr<StreamExecutor*> HostPlatform::GetExecutor(\n    const StreamExecutorConfig& config) {\n  return executor_cache_.GetOrCreate(\n      config, [&]() { return GetUncachedExecutor(config); });\n}\n\ntsl::StatusOr<std::unique_ptr<StreamExecutor>>\nHostPlatform::GetUncachedExecutor(const StreamExecutorConfig& config) {\n  auto executor = std::make_unique<StreamExecutor>(\n      this, std::make_unique<HostExecutor>(config.plugin_config),\n      config.ordinal);\n  auto init_status = executor->Init(config.device_options);\n  if (!init_status.ok()) {\n    return tsl::Status(\n        tsl::error::INTERNAL,\n        absl::StrFormat(\n            \"failed initializing StreamExecutor for device ordinal %d: %s\",\n            config.ordinal, init_status.ToString().c_str()));\n  }\n\n  return std::move(executor);\n}\n\nvoid HostPlatform::RegisterTraceListener(\n    std::unique_ptr<TraceListener> listener) {\n  LOG(FATAL) << \"not yet implemented: register host trace listener\";\n}\n\nvoid HostPlatform::UnregisterTraceListener(TraceListener* listener) {\n  LOG(FATAL) << \"not yet implemented: unregister host trace listener\";\n}\n\nstatic void InitializeHostPlatform() {\n  std::unique_ptr<Platform> platform(new host::HostPlatform);\n  TF_CHECK_OK(MultiPlatformManager::RegisterPlatform(std::move(platform)));\n}\n\n}  // namespace host\n}  // namespace stream_executor\n\nREGISTER_MODULE_INITIALIZER(host_platform,\n                            stream_executor::host::InitializeHostPlatform());\n\n// Note that module initialization sequencing is not supported in the\n// open-source project, so this will be a no-op there.\nREGISTER_MODULE_INITIALIZER_SEQUENCE(host_platform, multi_platform_manager);\nREGISTER_MODULE_INITIALIZER_SEQUENCE(multi_platform_manager_listener,\n                                     host_platform);"