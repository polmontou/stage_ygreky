"/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/compiler/xla/stream_executor/tf_allocator_adapter.h\"\n\n#include \"absl/synchronization/mutex.h\"\n#include \"tensorflow/compiler/xla/stream_executor/stream.h\"\n#include \"tensorflow/compiler/xla/stream_executor/stream_executor.h\"\n#include \"tensorflow/tsl/platform/errors.h\"\n\nnamespace stream_executor {\n\nTfAllocatorAdapter::TfAllocatorAdapter(tsl::Allocator *wrapped, Stream *stream)\n    : DeviceMemoryAllocator(stream->parent()->platform()),\n      wrapped_(wrapped),\n      stream_(stream) {}\n\nTfAllocatorAdapter::TfAllocatorAdapter(tsl::Allocator *wrapped,\n                                       Platform *platform)\n    : DeviceMemoryAllocator(platform), wrapped_(wrapped), stream_(nullptr) {}\n\nTfAllocatorAdapter::~TfAllocatorAdapter() {}\n\ntsl::StatusOr<OwningDeviceMemory> TfAllocatorAdapter::Allocate(\n    int device_ordinal, uint64_t size, bool retry_on_failure,\n    int64_t memory_space) {\n  CHECK_EQ(memory_space, 0);\n  tsl::AllocationAttributes attrs;\n  attrs.retry_on_failure = retry_on_failure;\n  void *data = nullptr;\n  if (size != 0) {\n    data =\n        wrapped_->AllocateRaw(tsl::Allocator::kAllocatorAlignment, size, attrs);\n    if (data == nullptr) {\n      return tsl::errors::ResourceExhausted(\n          \"Out of memory while trying to allocate \", size, \" bytes.\");\n    }\n  }\n  return OwningDeviceMemory(DeviceMemoryBase(data, size), device_ordinal, this);\n}\n\ntsl::Status TfAllocatorAdapter::Deallocate(int device_ordinal,\n                                           DeviceMemoryBase mem) {\n  wrapped_->DeallocateRaw(mem.opaque());\n  return ::tsl::OkStatus();\n}\n\ntsl::StatusOr<Stream *> TfAllocatorAdapter::GetStream(int device_ordinal) {\n  CHECK_EQ(stream_->parent()->device_ordinal(), device_ordinal);\n  return stream_;\n}\n\n}  // namespace stream_executor"