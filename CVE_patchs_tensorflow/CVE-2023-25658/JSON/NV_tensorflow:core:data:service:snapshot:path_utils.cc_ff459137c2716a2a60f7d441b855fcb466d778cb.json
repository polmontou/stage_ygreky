"/* Copyright 2022 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/core/data/service/snapshot/path_utils.h\"\n\n#include <string>\n#include <utility>\n#include <vector>\n\n#include \"absl/strings/str_cat.h\"\n#include \"absl/strings/str_split.h\"\n#include \"absl/strings/string_view.h\"\n#include \"tensorflow/tsl/platform/errors.h\"\n#include \"tensorflow/tsl/platform/path.h\"\n#include \"tensorflow/tsl/platform/statusor.h\"\n\nnamespace tensorflow {\nnamespace data {\nnamespace {\n\nconstexpr const char kDoneFileName[] = \"DONE\";\nconstexpr const char kSnapshotMetadataFileName[] = \"snapshot.metadata\";\nconstexpr const char kDatasetDefFileName[] = \"dataset_def.proto\";\nconstexpr const char kStreamsDirectoryName[] = \"streams\";\nconstexpr const char kSplitsDirectoryName[] = \"splits\";\nconstexpr const char kCheckpointsDirectoryName[] = \"checkpoints\";\nconstexpr const char kCommittedChunksDirectoryName[] = \"chunks\";\nconstexpr const char kUncommittedChunksDirectoryName[] = \"uncommitted_chunks\";\n\n}  // namespace\n\nstd::string StreamsDirectory(absl::string_view snapshot_path) {\n  return tsl::io::JoinPath(snapshot_path, kStreamsDirectoryName);\n}\n\nstd::string StreamDirectory(absl::string_view snapshot_path,\n                            int64_t stream_index) {\n  return tsl::io::JoinPath(StreamsDirectory(snapshot_path),\n                           absl::StrCat(\"stream_\", stream_index));\n}\n\nstd::string SplitsDirectory(absl::string_view snapshot_path,\n                            int64_t stream_index) {\n  return tsl::io::JoinPath(StreamDirectory(snapshot_path, stream_index),\n                           kSplitsDirectoryName);\n}\n\nstd::string SourceDirectory(absl::string_view snapshot_path,\n                            int64_t stream_index, int64_t source_id) {\n  return tsl::io::JoinPath(SplitsDirectory(snapshot_path, stream_index),\n                           absl::StrCat(\"source_\", source_id));\n}\n\nstd::string SplitPath(absl::string_view snapshot_path, int64_t stream_index,\n                      int64_t source_id, int64_t local_index,\n                      int64_t global_index) {\n  return tsl::io::JoinPath(\n      SourceDirectory(snapshot_path, stream_index, source_id),\n      absl::StrCat(\"split_\", local_index, \"_\", global_index));\n}\n\ntsl::StatusOr<std::pair<int64_t, int64_t>> SplitIndex(\n    absl::string_view split_path) {\n  std::vector<std::string> tokens = absl::StrSplit(split_path, '_');\n  int64_t local_split_index = 0, global_split_index = 0;\n  if (tokens.size() != 3 || tokens[0] != \"split\" ||\n      !absl::SimpleAtoi(tokens[1], &local_split_index) ||\n      local_split_index < 0 ||\n      !absl::SimpleAtoi(tokens[2], &global_split_index) ||\n      global_split_index < 0) {\n    return tsl::errors::InvalidArgument(\n        \"Invalid split file name: \", split_path,\n        \". Expected split_<local_split_index>_<global_split_index>.\");\n  }\n  if (local_split_index > global_split_index) {\n    return tsl::errors::InvalidArgument(\n        \"Invalid split file name: \", split_path, \". The local split index \",\n        local_split_index, \" exceeds the global split index \",\n        global_split_index, \".\");\n  }\n  return std::make_pair(local_split_index, global_split_index);\n}\n\nstd::string SnapshotMetadataFilePath(absl::string_view snapshot_path_) {\n  return tsl::io::JoinPath(snapshot_path_, kSnapshotMetadataFileName);\n}\n\nstd::string DatasetDefFilePath(absl::string_view snapshot_path_) {\n  return tsl::io::JoinPath(snapshot_path_, kDatasetDefFileName);\n}\n\nstd::string StreamDoneFilePath(absl::string_view snapshot_path,\n                               int64_t stream_index) {\n  return tsl::io::JoinPath(StreamDirectory(snapshot_path, stream_index),\n                           kDoneFileName);\n}\n\nstd::string CheckpointsDirectory(absl::string_view snapshot_path,\n                                 int64_t stream_index) {\n  return tsl::io::JoinPath(StreamDirectory(snapshot_path, stream_index),\n                           kCheckpointsDirectoryName);\n}\n\nstd::string CommittedChunksDirectory(absl::string_view snapshot_path) {\n  return tsl::io::JoinPath(snapshot_path, kCommittedChunksDirectoryName);\n}\n\nstd::string UncommittedChunksDirectory(absl::string_view snapshot_path,\n                                       int64_t stream_index) {\n  return tsl::io::JoinPath(StreamDirectory(snapshot_path, stream_index),\n                           kUncommittedChunksDirectoryName);\n}\n}  // namespace data\n}  // namespace tensorflow"