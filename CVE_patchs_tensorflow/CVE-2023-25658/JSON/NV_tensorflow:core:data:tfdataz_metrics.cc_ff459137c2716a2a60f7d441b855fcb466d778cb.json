"/* Copyright 2022 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/core/data/tfdataz_metrics.h\"\n\n#include <algorithm>\n#include <cstdint>\n#include <deque>\n#include <memory>\n#include <string>\n#include <utility>\n#include <vector>\n\n#include \"absl/time/time.h\"\n#include \"tensorflow/core/platform/env.h\"\n\nnamespace tensorflow {\nnamespace data {\n\nApproximateLatencyEstimator::ApproximateLatencyEstimator(const Env& env)\n    : env_(env),\n      last_updated_time_mins_(0),\n      latency_value_counter_(0),\n      latency_count_counter_(0),\n      next_slot_(0) {\n  for (int i = 0; i < kSlots; ++i) {\n    latency_value_[i] = 0;\n    latency_count_[i] = 0;\n  }\n}\n\nvoid ApproximateLatencyEstimator::AddLatency(const int64_t latency_usec)\n    TF_LOCKS_EXCLUDED(mu_) {\n  UpdateRingBuffer();\n\n  mutex_lock l(mu_);\n  latency_value_counter_ += latency_usec;\n  latency_count_counter_ += 1;\n}\n\nvoid ApproximateLatencyEstimator::UpdateRingBuffer() TF_LOCKS_EXCLUDED(mu_) {\n  int64_t now_minutes =\n      absl::ToInt64Minutes(absl::Microseconds(env_.NowMicros()));\n\n  mutex_lock l(mu_);\n  int64_t elapsed_minutes = now_minutes - last_updated_time_mins_;\n  int64_t minutes_to_update = std::min(elapsed_minutes, kSlots);\n  for (int i = 0; i < minutes_to_update; ++i) {\n    latency_value_[next_slot_] = latency_value_counter_;\n    latency_count_[next_slot_] = latency_count_counter_;\n    IncrementNextSlot();\n  }\n  last_updated_time_mins_ = now_minutes;\n}\n\nvoid ApproximateLatencyEstimator::IncrementNextSlot()\n    TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n  next_slot_ = (next_slot_ + 1) % kSlots;\n}\n\nint ApproximateLatencyEstimator::PrevSlot(int steps)\n    TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n  return (next_slot_ - steps + kSlots) % kSlots;\n}\n\nabsl::Duration ApproximateLatencyEstimator::GetAverageLatency(Duration duration)\n    TF_LOCKS_EXCLUDED(mu_) {\n  UpdateRingBuffer();\n\n  mutex_lock l(mu_);\n  double interval_latency =\n      static_cast<double>(latency_value_counter_ -\n                          latency_value_[PrevSlot(static_cast<int>(duration))]);\n  double interval_count =\n      static_cast<double>(latency_count_counter_ -\n                          latency_count_[PrevSlot(static_cast<int>(duration))]);\n  return absl::Duration(absl::Microseconds(interval_latency)) / interval_count;\n}\n\nTfDatazMetricsCollector::TfDatazMetricsCollector(const Env& env,\n                                                 IteratorBase* iterator)\n    : iterator_(iterator), latency_estimator_(env) {}\n\nvoid TfDatazMetricsCollector::RecordGetNextLatency(\n    int64_t get_next_latency_usec) {\n  if (get_next_latency_usec > 0) {\n    latency_estimator_.AddLatency(get_next_latency_usec);\n  }\n}\n\nabsl::Duration TfDatazMetricsCollector::GetAverageLatencyForLastOneMinute() {\n  return latency_estimator_.GetAverageLatency(\n      ApproximateLatencyEstimator::Duration::kMinute);\n}\n\nabsl::Duration TfDatazMetricsCollector::GetAverageLatencyForLastFiveMinutes() {\n  return latency_estimator_.GetAverageLatency(\n      ApproximateLatencyEstimator::Duration::kFiveMinutes);\n}\n\nabsl::Duration TfDatazMetricsCollector::GetAverageLatencyForLastSixtyMinutes() {\n  return latency_estimator_.GetAverageLatency(\n      ApproximateLatencyEstimator::Duration::kSixtyMinutes);\n}\n\nint64_t TfDatazMetricsCollector::GetIteratorTotalMemoryUsage() {\n  return iterator_->TotalBufferedBytes();\n}\n\nnamespace {\nstatic mutex* get_tfdataz_metrics_registry_lock() {\n  static mutex tfdataz_metrics_registry_lock(LINKER_INITIALIZED);\n  return &tfdataz_metrics_registry_lock;\n}\n\nusing TfDatazMetricsCollectors =\n    absl::flat_hash_set<std::shared_ptr<TfDatazMetricsCollector>>;\nTfDatazMetricsCollectors& tfdataz_metric_collectors() {\n  static auto& collectors = *new TfDatazMetricsCollectors();\n  return collectors;\n}\n}  // namespace\n\nvoid TfDatazMetricsRegistry::Register(\n    std::shared_ptr<TfDatazMetricsCollector> collector) {\n  mutex_lock l(*get_tfdataz_metrics_registry_lock());\n  tfdataz_metric_collectors().insert(collector);\n}\n\nvoid TfDatazMetricsRegistry::Deregister(\n    std::shared_ptr<TfDatazMetricsCollector> collector) {\n  mutex_lock l(*get_tfdataz_metrics_registry_lock());\n  tfdataz_metric_collectors().erase(collector);\n}\n\nabsl::flat_hash_set<std::shared_ptr<TfDatazMetricsCollector>>\nTfDatazMetricsRegistry::GetIteratorMetricCollectors() {\n  mutex_lock l(*get_tfdataz_metrics_registry_lock());\n  return tfdataz_metric_collectors();\n}\n\n}  // namespace data\n}  // namespace tensorflow"