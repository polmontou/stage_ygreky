"/* Copyright 2022 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/core/data/tfdataz_metrics.h\"\n\n#include <memory>\n#include <utility>\n\n#include \"absl/time/time.h\"\n#include \"tensorflow/core/framework/dataset.h\"\n#include \"tensorflow/core/platform/env.h\"\n#include \"tensorflow/core/platform/test.h\"\n#include \"tensorflow/core/util/fake_clock_env.h\"\n\nnamespace tensorflow {\nnamespace data {\nnamespace {\n\nstatic int64_t k1MinutesInMicros = absl::ToInt64Microseconds(absl::Minutes(1));\nstatic int64_t k2MinutesInMicros = absl::ToInt64Microseconds(absl::Minutes(2));\nstatic int64_t k5MinutesInMicros = absl::ToInt64Microseconds(absl::Minutes(5));\nstatic int64_t k59MinutesInMicros =\n    absl::ToInt64Microseconds(absl::Minutes(59));\nstatic int64_t k60MinutesInMicros =\n    absl::ToInt64Microseconds(absl::Minutes(60));\nstatic int64_t k61MinutesInMicros =\n    absl::ToInt64Microseconds(absl::Minutes(61));\n\nclass TfDatazMetricsTest : public ::testing::Test {\n protected:\n  void SetUp() override {\n    env_ = std::make_unique<FakeClockEnv>(Env::Default());\n    tfdataz_metrics_ =\n        std::make_unique<TfDatazMetricsCollector>(*env_, iterator_.get());\n  }\n\n  void TearDown() override {\n    env_.reset();\n    tfdataz_metrics_.reset();\n  }\n\n  std::unique_ptr<IteratorBase> iterator_;\n  std::unique_ptr<FakeClockEnv> env_;\n  std::unique_ptr<TfDatazMetricsCollector> tfdataz_metrics_;\n};\n\nTEST_F(TfDatazMetricsTest, RecordGetNextLatency) {\n  tfdataz_metrics_->RecordGetNextLatency(1);\n  tfdataz_metrics_->RecordGetNextLatency(2);\n  tfdataz_metrics_->RecordGetNextLatency(3);\n\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastOneMinute()),\n                  2.0);\n}\n\nTEST_F(TfDatazMetricsTest, GetAverageLatencyForLastOneMinute) {\n  tfdataz_metrics_->RecordGetNextLatency(1);\n  env_->AdvanceByMicroseconds(k2MinutesInMicros);\n  tfdataz_metrics_->RecordGetNextLatency(2);\n  tfdataz_metrics_->RecordGetNextLatency(3);\n\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastOneMinute()),\n                  2.5);\n}\n\nTEST_F(TfDatazMetricsTest, GetAverageLatencyForLastFiveMinutes) {\n  tfdataz_metrics_->RecordGetNextLatency(1);\n  env_->AdvanceByMicroseconds(k5MinutesInMicros);\n  tfdataz_metrics_->RecordGetNextLatency(4);\n  tfdataz_metrics_->RecordGetNextLatency(5);\n  tfdataz_metrics_->RecordGetNextLatency(6);\n\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastFiveMinutes()),\n                  5.0);\n}\n\nTEST_F(TfDatazMetricsTest,\n       GetAverageLatencyForLastSixtyMinutesWithAdvanceBySixtyMinutes) {\n  tfdataz_metrics_->RecordGetNextLatency(1);\n  env_->AdvanceByMicroseconds(k60MinutesInMicros);\n  tfdataz_metrics_->RecordGetNextLatency(4);\n  tfdataz_metrics_->RecordGetNextLatency(5);\n  tfdataz_metrics_->RecordGetNextLatency(6);\n\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastSixtyMinutes()),\n                  5.0);\n}\n\nTEST_F(TfDatazMetricsTest,\n       GetAverageLatencyForLastSixtyMinutesWithAdvanceByFiftyNineMinutes) {\n  tfdataz_metrics_->RecordGetNextLatency(1);\n  env_->AdvanceByMicroseconds(k59MinutesInMicros);\n  tfdataz_metrics_->RecordGetNextLatency(4);\n  tfdataz_metrics_->RecordGetNextLatency(5);\n  tfdataz_metrics_->RecordGetNextLatency(6);\n\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastSixtyMinutes()),\n                  4.0);\n}\n\nTEST_F(TfDatazMetricsTest,\n       GetAverageLatencyForLastSixtyMinutesWithAdvanceBySixtyOneMinutes) {\n  tfdataz_metrics_->RecordGetNextLatency(1);\n  env_->AdvanceByMicroseconds(k61MinutesInMicros);\n  tfdataz_metrics_->RecordGetNextLatency(2);\n  tfdataz_metrics_->RecordGetNextLatency(3);\n  tfdataz_metrics_->RecordGetNextLatency(4);\n\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastSixtyMinutes()),\n                  3.0);\n}\n\nTEST_F(TfDatazMetricsTest, GetMultipleAverageLatencies) {\n  tfdataz_metrics_->RecordGetNextLatency(1);\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastOneMinute()),\n                  1.0);\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastFiveMinutes()),\n                  1.0);\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastSixtyMinutes()),\n                  1.0);\n\n  env_->AdvanceByMicroseconds(k1MinutesInMicros);\n  tfdataz_metrics_->RecordGetNextLatency(2);\n  tfdataz_metrics_->RecordGetNextLatency(3);\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastOneMinute()),\n                  2.5);\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastFiveMinutes()),\n                  2.0);\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastSixtyMinutes()),\n                  2.0);\n\n  env_->AdvanceByMicroseconds(k60MinutesInMicros);\n  tfdataz_metrics_->RecordGetNextLatency(4);\n  tfdataz_metrics_->RecordGetNextLatency(5);\n  tfdataz_metrics_->RecordGetNextLatency(6);\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastOneMinute()),\n                  5.0);\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastFiveMinutes()),\n                  5.0);\n  EXPECT_FLOAT_EQ(absl::ToDoubleMicroseconds(\n                      tfdataz_metrics_->GetAverageLatencyForLastSixtyMinutes()),\n                  5.0);\n}\n\nclass ScopedTfDataMetricsRegistration {\n public:\n  explicit ScopedTfDataMetricsRegistration(\n      std::shared_ptr<TfDatazMetricsCollector> collector)\n      : collector_(std::move(collector)) {\n    TfDatazMetricsRegistry::Register(collector_);\n  }\n\n  ~ScopedTfDataMetricsRegistration() {\n    TfDatazMetricsRegistry::Deregister(collector_);\n  }\n\n  void Deregister() { TfDatazMetricsRegistry::Deregister(collector_); }\n\n private:\n  std::shared_ptr<TfDatazMetricsCollector> collector_;\n};\n\nTEST(TfDatazMetricsRegistryTest, Register) {\n  std::unique_ptr<IteratorBase> iterator;\n  auto collector_one = std::make_shared<TfDatazMetricsCollector>(\n      *Env::Default(), iterator.get());\n  auto collector_two = std::make_shared<TfDatazMetricsCollector>(\n      *Env::Default(), iterator.get());\n\n  ScopedTfDataMetricsRegistration scoped_registration_one(collector_one);\n  ScopedTfDataMetricsRegistration scoped_registration_two(collector_two);\n\n  EXPECT_EQ(TfDatazMetricsRegistry::GetIteratorMetricCollectors().size(), 2);\n}\n\nTEST(TfDatazMetricsRegistryTest, Deregister) {\n  std::unique_ptr<IteratorBase> iterator;\n  auto collector_one = std::make_shared<TfDatazMetricsCollector>(\n      *Env::Default(), iterator.get());\n  auto collector_two = std::make_shared<TfDatazMetricsCollector>(\n      *Env::Default(), iterator.get());\n  auto collector_three = std::make_shared<TfDatazMetricsCollector>(\n      *Env::Default(), iterator.get());\n  ScopedTfDataMetricsRegistration scoped_registration_one(collector_one);\n  ScopedTfDataMetricsRegistration scoped_registration_two(collector_two);\n  ScopedTfDataMetricsRegistration scoped_registration_three(collector_three);\n  EXPECT_EQ(TfDatazMetricsRegistry::GetIteratorMetricCollectors().size(), 3);\n\n  scoped_registration_one.Deregister();\n  EXPECT_EQ(TfDatazMetricsRegistry::GetIteratorMetricCollectors().size(), 2);\n\n  scoped_registration_two.Deregister();\n  scoped_registration_three.Deregister();\n  EXPECT_EQ(TfDatazMetricsRegistry::GetIteratorMetricCollectors().size(), 0);\n}\n\n}  // namespace\n}  // namespace data\n}  // namespace tensorflow"