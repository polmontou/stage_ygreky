"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/lib/core/status.h\"\n\n#include \"absl/strings/match.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/core/status_test_util.h\"\n#include \"tensorflow/core/platform/test.h\"\n#include \"tensorflow/core/platform/test_benchmark.h\"\n\nnamespace tensorflow {\n\nTEST(Status, OK) {\n  EXPECT_EQ(OkStatus().code(), error::OK);\n  EXPECT_EQ(OkStatus().error_message(), \"\");\n  TF_EXPECT_OK(OkStatus());\n  TF_ASSERT_OK(OkStatus());\n  EXPECT_EQ(OkStatus(), Status());\n  Status s;\n  EXPECT_TRUE(s.ok());\n}\n\nTEST(DeathStatus, CheckOK) {\n  Status status(errors::InvalidArgument(\"Invalid\"));\n  ASSERT_DEATH(TF_CHECK_OK(status), \"Invalid\");\n}\n\nTEST(Status, Set) {\n  Status status;\n  status = Status(error::CANCELLED, \"Error message\");\n  EXPECT_EQ(status.code(), error::CANCELLED);\n  EXPECT_EQ(status.error_message(), \"Error message\");\n}\n\nTEST(Status, Copy) {\n  Status a(errors::InvalidArgument(\"Invalid\"));\n  Status b(a);\n  ASSERT_EQ(a.ToString(), b.ToString());\n}\n\nTEST(Status, Assign) {\n  Status a(errors::InvalidArgument(\"Invalid\"));\n  Status b;\n  b = a;\n  ASSERT_EQ(a.ToString(), b.ToString());\n}\n\nTEST(Status, Move) {\n  Status a(errors::InvalidArgument(\"Invalid\"));\n  Status b(std::move(a));\n  ASSERT_EQ(\"INVALID_ARGUMENT: Invalid\", b.ToString());\n}\n\nTEST(Status, MoveAssign) {\n  Status a(errors::InvalidArgument(\"Invalid\"));\n  Status b;\n  b = std::move(a);\n  ASSERT_EQ(\"INVALID_ARGUMENT: Invalid\", b.ToString());\n}\n\nTEST(Status, Update) {\n  Status s;\n  s.Update(OkStatus());\n  ASSERT_TRUE(s.ok());\n  Status a(errors::InvalidArgument(\"Invalid\"));\n  s.Update(a);\n  ASSERT_EQ(s.ToString(), a.ToString());\n  Status b(errors::Internal(\"Internal\"));\n  s.Update(b);\n  ASSERT_EQ(s.ToString(), a.ToString());\n  s.Update(OkStatus());\n  ASSERT_EQ(s.ToString(), a.ToString());\n  ASSERT_FALSE(s.ok());\n}\n\nTEST(Status, EqualsOK) { ASSERT_EQ(OkStatus(), Status()); }\n\nTEST(Status, EqualsSame) {\n  Status a(errors::InvalidArgument(\"Invalid\"));\n  Status b(errors::InvalidArgument(\"Invalid\"));\n  ASSERT_EQ(a, b);\n}\n\nTEST(Status, EqualsCopy) {\n  const Status a(errors::InvalidArgument(\"Invalid\"));\n  const Status b = a;\n  ASSERT_EQ(a, b);\n}\n\nTEST(Status, EqualsDifferentCode) {\n  const Status a(errors::InvalidArgument(\"message\"));\n  const Status b(errors::Internal(\"message\"));\n  ASSERT_NE(a, b);\n}\n\nTEST(Status, EqualsDifferentMessage) {\n  const Status a(errors::InvalidArgument(\"message\"));\n  const Status b(errors::InvalidArgument(\"another\"));\n  ASSERT_NE(a, b);\n}\n\nTEST(StatusGroup, OKStatusGroup) {\n  StatusGroup c;\n  c.Update(OkStatus());\n  c.Update(OkStatus());\n  ASSERT_EQ(c.as_summary_status(), OkStatus());\n  ASSERT_EQ(c.as_concatenated_status(), OkStatus());\n}\n\nTEST(StatusGroup, AggregateWithSingleErrorStatus) {\n  StatusGroup c;\n  const Status internal(errors::Internal(\"Original error.\"));\n\n  c.Update(internal);\n  ASSERT_EQ(c.as_summary_status(), internal);\n\n  Status concat_status = c.as_concatenated_status();\n  ASSERT_EQ(concat_status.code(), internal.code());\n  ASSERT_TRUE(absl::StrContains(concat_status.error_message(),\n                                internal.error_message()));\n\n  // Add derived error status\n  const Status derived =\n      StatusGroup::MakeDerived(errors::Internal(\"Derived error.\"));\n  c.Update(derived);\n\n  ASSERT_EQ(c.as_summary_status(), internal);\n\n  concat_status = c.as_concatenated_status();\n  ASSERT_EQ(concat_status.code(), internal.code());\n  ASSERT_TRUE(absl::StrContains(concat_status.error_message(),\n                                internal.error_message()));\n}\n\nTEST(StatusGroup, AggregateWithMultipleErrorStatus) {\n  StatusGroup c;\n  const Status internal(errors::Internal(\"Original error.\"));\n  const Status cancelled(errors::Cancelled(\"Cancelled after 10 steps.\"));\n  const Status aborted(errors::Aborted(\"Aborted after 10 steps.\"));\n\n  c.Update(internal);\n  c.Update(cancelled);\n  c.Update(aborted);\n\n  Status summary = c.as_summary_status();\n\n  ASSERT_EQ(summary.code(), internal.code());\n  ASSERT_TRUE(\n      absl::StrContains(summary.error_message(), internal.error_message()));\n  ASSERT_TRUE(\n      absl::StrContains(summary.error_message(), cancelled.error_message()));\n  ASSERT_TRUE(\n      absl::StrContains(summary.error_message(), aborted.error_message()));\n\n  Status concat_status = c.as_concatenated_status();\n  ASSERT_EQ(concat_status.code(), internal.code());\n  ASSERT_TRUE(absl::StrContains(concat_status.error_message(),\n                                internal.error_message()));\n  ASSERT_TRUE(absl::StrContains(concat_status.error_message(),\n                                cancelled.error_message()));\n  ASSERT_TRUE(absl::StrContains(concat_status.error_message(),\n                                aborted.error_message()));\n}\n\nTEST(Status, InvalidPayloadGetsIgnored) {\n  Status s = Status();\n  s.SetPayload(\"Invalid\", absl::Cord(\"Invalid Val\"));\n  ASSERT_FALSE(s.GetPayload(\"Invalid\").has_value());\n  bool is_err_erased = s.ErasePayload(\"Invalid\");\n  ASSERT_EQ(is_err_erased, false);\n}\n\nTEST(Status, SetPayloadSetsOrUpdatesIt) {\n  Status s(error::INTERNAL, \"Error message\");\n  s.SetPayload(\"Error key\", absl::Cord(\"Original\"));\n  ASSERT_EQ(s.GetPayload(\"Error key\"), absl::Cord(\"Original\"));\n  s.SetPayload(\"Error key\", absl::Cord(\"Updated\"));\n  ASSERT_EQ(s.GetPayload(\"Error key\"), absl::Cord(\"Updated\"));\n}\n\nTEST(Status, ErasePayloadRemovesIt) {\n  Status s(error::INTERNAL, \"Error message\");\n  s.SetPayload(\"Error key\", absl::Cord(\"Original\"));\n\n  bool is_err_erased = s.ErasePayload(\"Error key\");\n  ASSERT_EQ(is_err_erased, true);\n  is_err_erased = s.ErasePayload(\"Error key\");\n  ASSERT_EQ(is_err_erased, false);\n  ASSERT_FALSE(s.GetPayload(\"Error key\").has_value());\n}\n\nstatic void BM_TF_CHECK_OK(::testing::benchmark::State& state) {\n  tensorflow::Status s = (state.max_iterations < 0)\n                             ? errors::InvalidArgument(\"Invalid\")\n                             : OkStatus();\n  for (auto i : state) {\n    TF_CHECK_OK(s);\n  }\n}\nBENCHMARK(BM_TF_CHECK_OK);\n\n}  // namespace tensorflow"