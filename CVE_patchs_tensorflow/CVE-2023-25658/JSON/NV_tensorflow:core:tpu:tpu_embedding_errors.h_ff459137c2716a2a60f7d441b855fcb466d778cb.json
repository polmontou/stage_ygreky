"/* Copyright 2022 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#ifndef TENSORFLOW_CORE_TPU_TPU_EMBEDDING_ERRORS_H_\n#define TENSORFLOW_CORE_TPU_TPU_EMBEDDING_ERRORS_H_\n\n#include <string>\n\n#include \"absl/strings/str_cat.h\"\n#include \"absl/strings/string_view.h\"\n#include \"tensorflow/core/platform/status.h\"\n#include \"tensorflow/core/platform/statusor.h\"\n#include \"tensorflow/core/protobuf/tpu/tpu_embedding_configuration.pb.h\"\n\nnamespace tensorflow::tpu {\n\n// The payload URL for TPU embedding initialization permanent errors.\nconstexpr absl::string_view kTpuEmbeddingErrorUrl =\n    \"type.googleapis.com/tensorflow.tpu.TPUEmbeddingError\";\n\nconstexpr absl::string_view kTpuEmbeddingErrorMessage =\n    \"TPUEmbedding permanent error\";\n\n// Appends a payload of type tensorflow::tpu::kTpuEmbeddingErrorUrl to the\n// tensorflow::Status obj if the status is NOT OK. Returns the\n// tensorflow::Status obj unchanged if the status is OK.\nStatus AppendTpuEmbeddingErrorPayload(Status obj);\n\n// Appends a payload of type tensorflow::tpu::kTpuEmbeddingErrorUrl to the\n// tensorflow::Status obj if the status is NOT OK. Returns obj.value() if the\n// status is OK.\ntemplate <typename T>\nStatusOr<T> AppendTpuEmbeddingErrorPayload(StatusOr<T> obj) {\n  if (obj.ok()) {\n    return std::move(obj.value());\n  } else {\n    const std::string error_message = absl::StrCat(\n        kTpuEmbeddingErrorMessage, \". \", obj.status().error_message());\n    Status status(obj.status().code(), error_message);\n    TPUEmbeddingError error_payload;\n    status.SetPayload(kTpuEmbeddingErrorUrl,\n                      absl::Cord(error_payload.SerializeAsString()));\n    return status;\n  }\n}\n\n// Returns true if the tensorflow::Status obj has a payload of type\n// tensorflow::tpu::kTpuEmbeddingErrorUrl.\nbool HasTpuEmbeddingErrorPayload(const Status& status);\n\n// Returns true if the tensorflow::Status obj error message contains\n// tensorflow::tpu::kTpuEmbeddingErrorMessage as a substring.\nbool HasTpuEmbeddingErrorMessage(const Status& status);\n\n}  // namespace tensorflow::tpu\n\n#endif  // TENSORFLOW_CORE_TPU_TPU_EMBEDDING_ERRORS_H_"