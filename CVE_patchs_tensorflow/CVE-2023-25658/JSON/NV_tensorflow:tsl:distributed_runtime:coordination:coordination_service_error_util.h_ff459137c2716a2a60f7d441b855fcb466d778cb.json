"/* Copyright 2022 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#ifndef TENSORFLOW_TSL_DISTRIBUTED_RUNTIME_COORDINATION_COORDINATION_SERVICE_ERROR_UTIL_H_\n#define TENSORFLOW_TSL_DISTRIBUTED_RUNTIME_COORDINATION_COORDINATION_SERVICE_ERROR_UTIL_H_\n\n#include \"absl/strings/string_view.h\"\n#include \"tensorflow/tsl/platform/errors.h\"\n#include \"tensorflow/tsl/platform/status.h\"\n#include \"tensorflow/tsl/protobuf/coordination_service.pb.h\"\n\nnamespace tsl {\n\nconstexpr absl::string_view CoordinationErrorPayloadKey() {\n  return \"type.googleapis.com/tensorflow.CoordinationServiceError\";\n}\n\n// Mark error as a coordination service error (as opposed to RPC\n// errors).\ninline Status MakeCoordinationError(Status s) {\n  s.SetPayload(CoordinationErrorPayloadKey(), absl::Cord(\"\"));\n  return s;\n}\n\n// Mark error as a coordination service error (as opposed to RPC\n// errors), and indicate error origin.\n// Errors reported via the agent API by the user should set `is_reported_error`\n// to true.\ninline Status MakeCoordinationError(Status s,\n                                    const tensorflow::CoordinatedTask& origin,\n                                    bool is_reported_error = false) {\n  tensorflow::CoordinationServiceError error;\n  *error.mutable_source_task() = origin;\n  error.set_is_reported_error(is_reported_error);\n  s.SetPayload(CoordinationErrorPayloadKey(),\n               absl::Cord(error.SerializeAsString()));\n  return s;\n}\n\n// Mark error as a coordination service error with payload.\ninline Status MakeCoordinationError(\n    Status s, const tensorflow::CoordinationServiceError& payload) {\n  s.SetPayload(CoordinationErrorPayloadKey(),\n               absl::Cord(payload.SerializeAsString()));\n  return s;\n}\n}  // namespace tsl\n\n#endif  // TENSORFLOW_TSL_DISTRIBUTED_RUNTIME_COORDINATION_COORDINATION_SERVICE_ERROR_UTIL_H_"