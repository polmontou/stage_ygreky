"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_driver.h\"\n\n#include <stdint.h>\n#include <stdlib.h>\n\n#include <cstdint>\n#include <map>\n#include <set>\n#include <utility>\n\n#include \"absl/base/casts.h\"\n#include \"absl/base/const_init.h\"\n#include \"absl/base/optimization.h\"\n#include \"absl/container/inlined_vector.h\"\n#include \"absl/debugging/leak_check.h\"\n#include \"absl/memory/memory.h\"\n#include \"absl/strings/str_cat.h\"\n#include \"absl/strings/str_format.h\"\n#include \"absl/synchronization/mutex.h\"\n#include \"absl/synchronization/notification.h\"\n#include \"third_party/gpus/cuda/include/cuda_runtime_api.h\"\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.h\"\n#include \"tensorflow/compiler/xla/stream_executor/lib/error.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/logging.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/port.h\"\n#include \"tensorflow/tsl/platform/env.h\"\n#include \"tensorflow/tsl/platform/stacktrace.h\"\n#include \"tensorflow/tsl/platform/static_threadlocal.h\"\n#include \"tensorflow/tsl/platform/threadpool.h\"\n\nbool FLAGS_gpuexec_cuda_driver_inject_init_error = false;\nbool FLAGS_gpuexec_cuda_sync_around_driver_calls = false;\nbool FLAGS_gpuexec_cuda_device_0_only = false;\n\n#define RETURN_IF_CUDA_RES_ERROR(expr, ...)                                 \\\n  do {                                                                      \\\n    CUresult _res = (expr);                                                 \\\n    if (ABSL_PREDICT_FALSE(_res != CUDA_SUCCESS)) {                         \\\n      return tsl::errors::Internal(__VA_ARGS__, \": \",                       \\\n                                   ::stream_executor::gpu::ToString(_res)); \\\n    }                                                                       \\\n  } while (0)\n\n#define FAIL_IF_CUDA_RES_ERROR(expr, ...)                   \\\n  do {                                                      \\\n    CUresult _res = (expr);                                 \\\n    if (ABSL_PREDICT_FALSE(_res != CUDA_SUCCESS)) {         \\\n      LOG(FATAL) << absl::StrCat(__VA_ARGS__) << \": \"       \\\n                 << ::stream_executor::gpu::ToString(_res); \\\n    }                                                       \\\n  } while (0)\n\n// Debugging: on each push and pop of a cuda context, verify the current context\n// matches the expected one.\nconstexpr bool kVerifyGpuContext = false;\n\nnamespace stream_executor {\nnamespace gpu {\n\n/* static */ absl::Mutex CreatedContexts::mu_{absl::kConstInit};\n/* static */ int64_t CreatedContexts::next_id_ = 1;  // 0 means \"no context\"\n\nnamespace {\n\n// Returns the current context and checks that it is in the set of CUDA contexts\n// created by StreamExecutor (to ensure that the CUDA runtime didn't create a\n// context behind our backs).\nCUcontext CurrentContext() {\n  CUcontext current = cuda::CurrentContextOrDie();\n  if (current != nullptr && !CreatedContexts::Has(current)) {\n    LOG(FATAL) << \"current context was not created by the StreamExecutor \"\n                  \"cuda_driver API: \"\n               << current\n               << \"; a CUDA runtime call \"\n                  \"was likely performed without using a StreamExecutor context\";\n  }\n  return current;\n}\n\n// CUDA driver routines may require a large amount of stack (particularly\n// cuModuleLoadDataEx, in our experience). To avoid stack overflow when using\n// stack-limited threads (such as those spawned by a default-argument\n// thread::ThreadPool on some platforms), we run certain routines in this pool\n// and wait for completion.\ntsl::thread::ThreadPool* GetDriverExecutor() {\n  static tsl::thread::ThreadPool* thread_pool = new tsl::thread::ThreadPool(\n      tsl::Env::Default(), tsl::ThreadOptions(), \"cuda_driver\", 1);\n  return thread_pool;\n}\n\n}  // namespace\n\nstd::string MemorySpaceString(MemorySpace memory_space) {\n  switch (memory_space) {\n    case MemorySpace::kHost:\n      return \"host\";\n    case MemorySpace::kDevice:\n      return \"device\";\n    default:\n      LOG(FATAL) << \"impossible memory space\";\n  }\n}\n\nnamespace {\n\n// Call cuCtxtSynchronize and crash if it doesn't succeed.\nvoid SynchronizeOrDie() {\n  FAIL_IF_CUDA_RES_ERROR(cuCtxSynchronize(),\n                         \"Synchronize fail: \", tsl::CurrentStackTrace());\n}\n\nstruct ThreadLocalData {\n  int64_t id;\n  GpuContext* context;  // Only valid if id == a known good context.\n  int depth;\n};\n\nTSL_STATIC_THREAD_LOCAL_POD(ThreadLocalData, tls_data);\n\n}  // namespace\n\nScopedActivateContext::ScopedActivateContext(GpuContext* cuda_context) {\n  if (FLAGS_gpuexec_cuda_sync_around_driver_calls) SynchronizeOrDie();\n\n  auto* tls = &tls_data.get();\n\n  // If this is an outermost scope, we must not assume that the CUDA context has\n  // been left in the same state we left it. Other code may have run on this\n  // thread and altered the context.\n  if (tls->depth == 0) {\n    VLOG(3) << \"ScopedActivateContext switching to \" << cuda_context->id();\n    FAIL_IF_CUDA_RES_ERROR(cuCtxSetCurrent(cuda_context->context()),\n                           \"Failed setting context\");\n    tls->depth = 1;\n    tls->id = cuda_context->id();\n    tls->context = cuda_context;\n    to_restore_ = nullptr;\n    return;\n  }\n\n  tls->depth++;\n  if (tls->id == cuda_context->id()) {\n    if (kVerifyGpuContext) {\n      CHECK_EQ(CurrentContext(), cuda_context->context());\n    }\n    DCHECK_EQ(CurrentContext(), cuda_context->context());\n    return;\n  }\n\n  VLOG(3) << \"ScopedActivateContext switching context from \" << tls->id\n          << \" to \" << cuda_context->id();\n\n  to_restore_ = tls->context;\n  // Set the context and update thread local.\n  FAIL_IF_CUDA_RES_ERROR(cuCtxSetCurrent(cuda_context->context()),\n                         \"Failed setting context\");\n  tls->id = cuda_context->id();\n  tls->context = cuda_context;\n}\n\nScopedActivateContext::~ScopedActivateContext() {\n  if (FLAGS_gpuexec_cuda_sync_around_driver_calls) SynchronizeOrDie();\n\n  auto* tls = &tls_data.get();\n\n  if (kVerifyGpuContext) {\n    // Note that if kVerifyGpuContext is used, and contexts are deleted, it's\n    // possible this could fail in the CurrentContext() call.\n    CHECK_EQ(CurrentContext(),\n             tls->context == nullptr ? nullptr : tls->context->context());\n  }\n\n  tls->depth--;\n  DCHECK_GE(tls->depth, 0);\n  if (to_restore_ == nullptr) {\n    // Leave context, tls->id, and tls->context set.\n    return;\n  }\n\n  // Set context and update thread local.\n  FAIL_IF_CUDA_RES_ERROR(cuCtxSetCurrent(to_restore_->context()),\n                         \"Failed setting context\");\n  tls->id = to_restore_->id();\n  tls->context = to_restore_;\n}\n\nnamespace {\n\n// Returns a stringified device number associated with pointer, primarily for\n// logging purposes. Returns \"?\" if the device could not be successfully\n// queried.\nstd::string CUDAPointerToDeviceString(CUdeviceptr pointer) {\n  auto value = GpuDriver::GetPointerDevice(pointer);\n  if (value.ok()) {\n    return absl::StrCat(value.value());\n  }\n  LOG(ERROR) << \"could not query device: \" << value.status();\n  return \"?\";\n}\n\n// Returns a stringified memory space associated with pointer, primarily for\n// logging purposes. Returns \"?\" if the memory space could not be successfully\n// queried.\nstd::string CUDAPointerToMemorySpaceString(CUdeviceptr pointer) {\n  auto value = GpuDriver::GetPointerMemorySpace(pointer);\n  if (value.ok()) {\n    return MemorySpaceString(value.value());\n  }\n  LOG(ERROR) << \"could not query device: \" << value.status();\n  return \"?\";\n}\n\n// Returns a stringified representation of whether or not peer access is\n// permitted between the \"from\" and \"to\" pointers' associated contexts,\n// primarily for logging purposes. Returns \"error\" if an error is encountered\n// in the process of querying.\nstd::string CUDAPointersToCanAccessString(CUdeviceptr from, CUdeviceptr to) {\n  auto from_context = GpuDriver::GetPointerContext(from);\n  if (!from_context.ok()) {\n    LOG(ERROR) << \"could not retrieve source pointer's context: \"\n               << from_context.status();\n    return \"source ptr error\";\n  }\n  auto to_context = GpuDriver::GetPointerContext(to);\n  if (!to_context.ok()) {\n    LOG(ERROR) << \"could not retrieve destination pointer's context: \"\n               << to_context.status();\n    return \"destination ptr error\";\n  }\n  return GpuDriver::CanEnablePeerAccess(from_context.value(),\n                                        to_context.value())\n             ? \"true\"\n             : \"false\";\n}\n\n// Actually performs the work of CUDA initialization. Wrapped up in one-time\n// execution guard.\nstatic tsl::Status InternalInit() {\n  CUresult res = CUDA_ERROR_NO_DEVICE;\n  if (FLAGS_gpuexec_cuda_driver_inject_init_error) {\n    LOG(ERROR) << \"injecting CUDA init error; initialization will fail\";\n  } else {\n    res = cuInit(0 /* = flags */);\n  }\n\n  if (res == CUDA_SUCCESS) {\n    return ::tsl::OkStatus();\n  } else if (res == CUDA_ERROR_SHARED_OBJECT_INIT_FAILED) {\n    VLOG(1) << \"failed call to cuInit: \" << ToString(res);\n  } else {\n    LOG(ERROR) << \"failed call to cuInit: \" << ToString(res);\n  }\n\n  Diagnostician::LogDiagnosticInformation();\n  return tsl::Status(port::error::ABORTED,\n                     absl::StrCat(\"failed call to cuInit: \", ToString(res)));\n}\n\n}  // namespace\n\n/* static */ tsl::Status GpuDriver::Init() {\n  // Cached return value from calling InternalInit(), as cuInit need only be\n  // called once, but GpuDriver::Init may be called many times.\n  static tsl::Status* init_retval = [] {\n    return new tsl::Status(InternalInit());\n  }();\n  return *init_retval;\n}\n\n/* static */ tsl::Status GpuDriver::GetDevice(int device_ordinal,\n                                              CUdevice* device) {\n  RETURN_IF_CUDA_RES_ERROR(cuDeviceGet(device, device_ordinal),\n                           \"Failed call to cuDeviceGet\");\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::Status GpuDriver::GetDeviceName(CUdevice device,\n                                                  std::string* device_name) {\n  static const size_t kCharLimit = 64;\n  absl::InlinedVector<char, 4> chars(kCharLimit);\n  RETURN_IF_CUDA_RES_ERROR(\n      cuDeviceGetName(chars.begin(), kCharLimit - 1, device),\n      \"Failed to get device name\");\n  chars[kCharLimit - 1] = '\\0';\n  *device_name = chars.begin();\n  return ::tsl::OkStatus();\n}\n\nbool DeviceOptionsToContextFlags(const DeviceOptions& device_options,\n                                 int* flags) {\n  static_assert(DeviceOptions::kMask == 0xf,\n                \"needs update for new device options\");\n\n  if (device_options.flags() & DeviceOptions::kDoNotReclaimStackAllocation) {\n    *flags |= CU_CTX_LMEM_RESIZE_TO_MAX;\n  }\n\n  // If no flags are set the default is CU_CTX_SCHED_AUTO, which\n  // in Google environments is very likely to mean SPIN.\n  if (device_options.flags() & DeviceOptions::kScheduleSpin) {\n    *flags |= CU_CTX_SCHED_SPIN;\n  }\n  if (device_options.flags() & DeviceOptions::kScheduleYield) {\n    *flags |= CU_CTX_SCHED_YIELD;\n  }\n  if (device_options.flags() & DeviceOptions::kScheduleBlockingSync) {\n    *flags |= CU_CTX_SCHED_BLOCKING_SYNC;\n  }\n\n  return true;\n}\n\n/* static */ tsl::Status GpuDriver::CreateContext(\n    int device_ordinal, CUdevice device, const DeviceOptions& device_options,\n    GpuContext** context) {\n  *context = nullptr;\n\n  int flags = 0;\n  if (!DeviceOptionsToContextFlags(device_options, &flags)) {\n    LOG(WARNING) << \"could not convert all device options into context flags\";\n  }\n\n  CUresult res;\n  CUcontext former_context;\n  CUcontext new_context;\n\n  unsigned int former_primary_context_flags;\n  int former_primary_context_is_active;\n  CHECK_EQ(CUDA_SUCCESS,\n           cuDevicePrimaryCtxGetState(device, &former_primary_context_flags,\n                                      &former_primary_context_is_active));\n  if (former_primary_context_flags != flags) {\n    if (former_primary_context_is_active) {\n      LOG(ERROR)\n          << \"The primary context is active and has a different flag set (\"\n          << former_primary_context_flags << \") than the desired flag set (\"\n          << flags << \").\";\n    } else {\n      CHECK_EQ(CUDA_SUCCESS, cuDevicePrimaryCtxSetFlags(device, flags));\n    }\n  }\n\n  former_context = cuda::CurrentContextOrDie();\n  res = cuDevicePrimaryCtxRetain(&new_context, device);\n  if (former_context != nullptr) {\n    CUdevice former_device;\n    if (cuCtxGetDevice(&former_device) == CUDA_SUCCESS) {\n      if (former_device == device) {\n        if (former_context == new_context) {\n          VLOG(2) << \"The primary context \" << former_context << \" for device \"\n                  << device\n                  << \" exists before initializing the StreamExecutor.\";\n        } else {\n          LOG(WARNING) << \"A non-primary context \" << former_context\n                       << \" for device \" << device\n                       << \" exists before initializing the StreamExecutor. The \"\n                       << \"primary context is now \" << new_context << \". We \"\n                       << \"haven't verified StreamExecutor works with that.\";\n        }\n      }\n    } else {\n      LOG(ERROR) << \"Failed to get the device of the current context \"\n                 << former_context;\n    }\n  }\n  CHECK_EQ(CUDA_SUCCESS, cuCtxSetCurrent(former_context));\n\n  if (res == CUDA_SUCCESS) {\n    *context = CreatedContexts::Add(new_context, device_ordinal);\n    CHECK(*context != nullptr)\n        << \"success in this call must entail non-null result\";\n    VLOG(2) << \"created or reused context \" << new_context\n            << \" for this thread\";\n    return ::tsl::OkStatus();\n  }\n\n  std::string message =\n      \"failed call to cuDevicePrimaryCtxRetain: \" + ToString(res);\n  if (res == CUDA_ERROR_OUT_OF_MEMORY) {\n    uint64_t total_memory;\n    if (GetDeviceTotalMemory(device, &total_memory)) {\n      absl::StrAppend(&message, \"; total memory reported: \", total_memory);\n    } else {\n      absl::StrAppend(&message, \"; could not query total memory\");\n    }\n  }\n\n  return tsl::Status(port::error::INTERNAL, message);\n}\n\n/* static */ void GpuDriver::DestroyContext(GpuContext* context) {\n  if (context == nullptr) {\n    return;\n  }\n  CUcontext former_context = CurrentContext();\n  CUresult res = cuCtxSetCurrent(context->context());\n  CUdevice device;\n  cuCtxGetDevice(&device);\n  cuCtxSetCurrent(former_context);\n\n  res = cuDevicePrimaryCtxRelease(device);\n\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to release CUDA context; leaking: \" << ToString(res);\n  }\n\n  CreatedContexts::Remove(context->context());\n}\n\n/* static */ CUcontext GpuDriver::GetContextHandle(GpuContext* context) {\n  return context->context();\n}\n\n/* static */ tsl::Status GpuDriver::FuncGetAttribute(\n    CUfunction_attribute attribute, CUfunction func, int* attribute_value) {\n  RETURN_IF_CUDA_RES_ERROR(cuFuncGetAttribute(attribute_value, attribute, func),\n                           \"Failed to query kernel attribute: \", attribute);\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::Status GpuDriver::FuncSetCacheConfig(\n    CUfunction function, CUfunc_cache cache_config) {\n  RETURN_IF_CUDA_RES_ERROR(cuFuncSetCacheConfig(function, cache_config),\n                           \"Failed to set CUDA kernel cache config\");\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::StatusOr<CUsharedconfig> GpuDriver::ContextGetSharedMemConfig(\n    GpuContext* context) {\n  CUsharedconfig shared_mem_config;\n  ScopedActivateContext activation(context);\n  RETURN_IF_CUDA_RES_ERROR(cuCtxGetSharedMemConfig(&shared_mem_config),\n                           \"Failed to get shared memory config\");\n  return shared_mem_config;\n}\n\n/* static */ tsl::Status GpuDriver::ContextSetSharedMemConfig(\n    GpuContext* context, CUsharedconfig shared_mem_config) {\n  ScopedActivateContext activation(context);\n  RETURN_IF_CUDA_RES_ERROR(cuCtxSetSharedMemConfig(shared_mem_config),\n                           \"Failed to set shared memory config\");\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::Status GpuDriver::LaunchKernel(\n    GpuContext* context, absl::string_view kernel_name, CUfunction function,\n    unsigned int grid_dim_x, unsigned int grid_dim_y, unsigned int grid_dim_z,\n    unsigned int block_dim_x, unsigned int block_dim_y,\n    unsigned int block_dim_z, unsigned int shared_mem_bytes, CUstream stream,\n    void** kernel_params, void** extra) {\n  ScopedActivateContext activation(context);\n  VLOG(2) << \"launching kernel: \" << kernel_name << \"; gdx: \" << grid_dim_x\n          << \" gdy: \" << grid_dim_y << \" gdz: \" << grid_dim_z\n          << \" bdx: \" << block_dim_x << \" bdy: \" << block_dim_y\n          << \" bdz: \" << block_dim_z;\n  RETURN_IF_CUDA_RES_ERROR(\n      cuLaunchKernel(function, grid_dim_x, grid_dim_y, grid_dim_z, block_dim_x,\n                     block_dim_y, block_dim_z, shared_mem_bytes, stream,\n                     kernel_params, extra),\n      \"Failed to launch CUDA kernel: \", kernel_name,\n      \" with block dimensions: \", block_dim_x, \"x\", block_dim_y, \"x\",\n      block_dim_z, \" and grid dimensions: \", grid_dim_x, \"x\", grid_dim_y, \"x\",\n      grid_dim_z);\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::Status GpuDriver::LoadCubin(GpuContext* context,\n                                              const char* cubin_bytes,\n                                              CUmodule* module) {\n  ScopedActivateContext activation(context);\n  RETURN_IF_CUDA_RES_ERROR(cuModuleLoadFatBinary(module, cubin_bytes),\n                           \"Failed to load in-memory CUBIN\");\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::Status GpuDriver::LoadPtx(GpuContext* context,\n                                            const char* ptx_contents,\n                                            CUmodule* module) {\n  absl::Notification notification;\n  tsl::Status ret = ::tsl::OkStatus();\n  GetDriverExecutor()->Schedule([context, ptx_contents, module, &ret,\n                                 &notification]() {\n    ScopedActivateContext activation(context);\n    void* ptx_data = const_cast<char*>(ptx_contents);\n    static const unsigned int kLogBufferBytesLimit = 1024;\n    unsigned int error_log_buffer_bytes = kLogBufferBytesLimit;\n    unsigned int info_log_buffer_bytes = kLogBufferBytesLimit;\n    absl::InlinedVector<char, 4> error_log_buffer(error_log_buffer_bytes);\n    absl::InlinedVector<char, 4> info_log_buffer(info_log_buffer_bytes);\n    bool log_verbose = true;\n    CUjit_option options[] = {CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,\n                              CU_JIT_ERROR_LOG_BUFFER,\n                              CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,\n                              CU_JIT_INFO_LOG_BUFFER, CU_JIT_LOG_VERBOSE};\n    // Note that the driver API wants the contents of this values to be stored\n    // in an array of void*s, so we coerce them accordingly.\n    void* option_values[] = {\n        absl::bit_cast<void*>(uintptr_t(error_log_buffer_bytes)),\n        absl::bit_cast<void*>(error_log_buffer.data()),\n        absl::bit_cast<void*>(uintptr_t(info_log_buffer_bytes)),\n        absl::bit_cast<void*>(info_log_buffer.data()),\n        absl::bit_cast<void*>(uintptr_t(log_verbose))};\n    CHECK(TF_ARRAYSIZE(options) == TF_ARRAYSIZE(option_values));\n\n    CUresult res;\n    {\n      // TODO(leary) Need to see if NVIDIA can expunge the leakiness in their\n      // module loading: see http://b/13248943\n      absl::LeakCheckDisabler disabler;\n      res = cuModuleLoadDataEx(module, ptx_data, TF_ARRAYSIZE(options), options,\n                               option_values);\n    }\n\n    // The PTX JIT mutates the values in the option values array to reflect the\n    // size of the logs it output; now that we've made the call, read the values\n    // back out.\n    error_log_buffer_bytes = reinterpret_cast<uintptr_t>(option_values[0]);\n    info_log_buffer_bytes = reinterpret_cast<uintptr_t>(option_values[2]);\n    CHECK_LE(error_log_buffer_bytes, kLogBufferBytesLimit);\n    CHECK_LE(info_log_buffer_bytes, kLogBufferBytesLimit);\n\n    if (res != CUDA_SUCCESS) {\n      LOG(ERROR) << \"failed to load PTX text as a module: \" << ToString(res);\n      // As a precaution for null termination of the API-provided value, ensure\n      // that at least the last byte is null.\n      error_log_buffer[error_log_buffer_bytes ? error_log_buffer_bytes - 1\n                                              : 0] = '\\0';\n      LOG(ERROR) << \"error log buffer (\" << error_log_buffer_bytes\n                 << \" bytes): \" << error_log_buffer.data();\n      ret = tsl::errors::Internal(\"Failed to load PTX text as a module: \",\n                                  ToString(res));\n      notification.Notify();\n    }\n\n    VLOG(3) << \"PTX compilation info log (\" << info_log_buffer_bytes\n            << \" bytes): \" << info_log_buffer.data();\n    VLOG(3) << \"PTX compilation error log (\" << error_log_buffer_bytes\n            << \" bytes): \" << error_log_buffer.data();\n    CHECK(module != nullptr);\n    notification.Notify();\n  });\n  notification.WaitForNotification();\n\n  return ret;\n}\n\n/* static */ tsl::Status GpuDriver::LoadHsaco(GpuContext* context,\n                                              const char* hsaco_contents,\n                                              CUmodule* module) {\n  return tsl::errors::Internal(\n      \"Feature not supported on CUDA platform (LoadHsaco)\");\n}\n\n/* static */ tsl::Status GpuDriver::SynchronousMemsetUint8(GpuContext* context,\n                                                           CUdeviceptr location,\n                                                           uint8_t value,\n                                                           size_t size) {\n  ScopedActivateContext activation(context);\n  RETURN_IF_CUDA_RES_ERROR(cuMemsetD8(location, value, size),\n                           \"Failed to memset memory\");\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::Status GpuDriver::SynchronousMemsetUint32(\n    GpuContext* context, CUdeviceptr location, uint32_t value,\n    size_t uint32_count) {\n  ScopedActivateContext activation(context);\n  RETURN_IF_CUDA_RES_ERROR(cuMemsetD32(location, value, uint32_count),\n                           \"Failed to memset memory\");\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::Status GpuDriver::AsynchronousMemsetUint8(\n    GpuContext* context, CUdeviceptr location, uint8_t value,\n    size_t uint32_count, CUstream stream) {\n  ScopedActivateContext activation(context);\n  RETURN_IF_CUDA_RES_ERROR(\n      cuMemsetD8Async(location, value, uint32_count, stream),\n      \"Failed to enqueue async memset operation\");\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::Status GpuDriver::AsynchronousMemsetUint32(\n    GpuContext* context, CUdeviceptr location, uint32_t value,\n    size_t uint32_count, CUstream stream) {\n  ScopedActivateContext activation(context);\n  RETURN_IF_CUDA_RES_ERROR(\n      cuMemsetD32Async(location, value, uint32_count, stream),\n      \"Failed to enqueue async memset operation\");\n  return ::tsl::OkStatus();\n}\n\n/* static */ bool GpuDriver::AddStreamCallback(GpuContext* context,\n                                               CUstream stream,\n                                               StreamCallback callback,\n                                               void* data) {\n  // Note: flags param is required to be zero according to CUDA 6.0.\n  CUresult res = cuStreamAddCallback(stream, callback, data, 0 /* = flags */);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"unable to add host callback: \" << ToString(res);\n    return false;\n  }\n  return true;\n}\n\n/* static */ bool GpuDriver::GetModuleFunction(GpuContext* context,\n                                               CUmodule module,\n                                               const char* kernel_name,\n                                               CUfunction* function) {\n  ScopedActivateContext activated{context};\n  CHECK(module != nullptr && kernel_name != nullptr);\n  CUresult res = cuModuleGetFunction(function, module, kernel_name);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to get PTX kernel \\\"\" << kernel_name\n               << \"\\\" from module: \" << ToString(res);\n    return false;\n  }\n\n  return true;\n}\n\n/* static */ bool GpuDriver::GetModuleSymbol(GpuContext* context,\n                                             CUmodule module,\n                                             const char* symbol_name,\n                                             CUdeviceptr* dptr, size_t* bytes) {\n  ScopedActivateContext activated{context};\n  CHECK(module != nullptr && symbol_name != nullptr &&\n        (dptr != nullptr || bytes != nullptr));\n  CUresult res = cuModuleGetGlobal(dptr, bytes, module, symbol_name);\n  if (res != CUDA_SUCCESS) {\n    // symbol may not be found in the current module, but it may reside in\n    // another module.\n    VLOG(2) << \"failed to get symbol \\\"\" << symbol_name\n            << \"\\\" from module: \" << ToString(res);\n    return false;\n  }\n\n  return true;\n}\n\n/* static */ void GpuDriver::UnloadModule(GpuContext* context,\n                                          CUmodule module) {\n  ScopedActivateContext activated{context};\n  CUresult res = cuModuleUnload(module);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to unload module \" << module\n               << \"; leaking: \" << ToString(res);\n  }\n}\n\n/* static */ tsl::StatusOr<CUdevice> GpuDriver::DeviceFromContext(\n    GpuContext* context) {\n  ScopedActivateContext activated{context};\n  CUdevice device = -1;\n  CUresult result = cuCtxGetDevice(&device);\n  if (result == CUDA_SUCCESS) {\n    return device;\n  }\n\n  return tsl::Status(\n      port::error::INTERNAL,\n      absl::StrCat(\"failed to get device for context: \", ToString(result)));\n}\n\n/* static */ bool GpuDriver::CreateStream(GpuContext* context, CUstream* stream,\n                                          int priority) {\n  // TODO(leary) can we switch this to CU_STREAM_NON_BLOCKING or will that mess\n  // up synchronization with respect to memsets and any other things that have\n  // to occur on the default stream?\n  ScopedActivateContext activated{context};\n  CUresult res;\n  // If the priority is 0, then use the previous api to create the stream with\n  // the default priority for backward compatibility. Probably there is no\n  // difference in using the new api call but leaving it as is for now.\n  if (priority == 0) {\n    res = cuStreamCreate(stream, 0);\n  } else {\n    res = cuStreamCreateWithPriority(stream, 0, priority);\n  }\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"could not allocate CUDA stream for context \"\n               << context->context() << \": \" << ToString(res);\n    return false;\n  }\n\n  VLOG(2) << \"successfully created stream \" << *stream << \" for context \"\n          << context->context() << \" on thread\";\n  return true;\n}\n\n/* static */ void GpuDriver::DestroyStream(GpuContext* context,\n                                           CUstream* stream) {\n  if (*stream == nullptr) {\n    return;\n  }\n\n  ScopedActivateContext activated{context};\n  CUresult res = cuStreamDestroy(*stream);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to destroy CUDA stream for context \"\n               << context->context() << \": \" << ToString(res);\n  } else {\n    VLOG(2) << \"successfully destroyed stream \" << *stream << \" for context \"\n            << context->context();\n    *stream = nullptr;\n  }\n}\n\n/* static */ void* GpuDriver::DeviceAllocate(GpuContext* context,\n                                             uint64_t bytes) {\n  if (bytes == 0) {\n    return nullptr;\n  }\n\n  ScopedActivateContext activated{context};\n  CUdeviceptr result = 0;\n  CUresult res = cuMemAlloc(&result, bytes);\n  if (res != CUDA_SUCCESS) {\n    // LOG(INFO) because this isn't always important to users (e.g. BFCAllocator\n    // implements a retry if the first allocation fails).\n    LOG(INFO) << \"failed to allocate \"\n              << tsl::strings::HumanReadableNumBytes(bytes) << \" (\" << bytes\n              << \" bytes) from device: \" << ToString(res);\n    return nullptr;\n  }\n  void* ptr = reinterpret_cast<void*>(result);\n  VLOG(2) << \"allocated \" << ptr << \" for context \" << context->context()\n          << \" of \" << bytes << \" bytes\";\n  return ptr;\n}\n\n/* static */ void GpuDriver::DeviceDeallocate(GpuContext* context,\n                                              void* location) {\n  ScopedActivateContext activation(context);\n  CUdeviceptr pointer = absl::bit_cast<CUdeviceptr>(location);\n  CUresult res = cuMemFree(pointer);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to free device memory at \" << location\n               << \"; result: \" << ToString(res);\n  } else {\n    VLOG(2) << \"deallocated \" << location << \" for context \"\n            << context->context();\n  }\n}\n\n/* static */ void* GpuDriver::UnifiedMemoryAllocate(GpuContext* context,\n                                                    uint64_t bytes) {\n  ScopedActivateContext activation(context);\n  CUdeviceptr result = 0;\n  // \"Portable\" memory is visible to all CUDA contexts. Safe for our use model.\n  CUresult res = cuMemAllocManaged(&result, bytes, CU_MEM_ATTACH_GLOBAL);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to alloc \" << bytes\n               << \" bytes unified memory; result: \" << ToString(res);\n    return nullptr;\n  }\n  void* ptr = reinterpret_cast<void*>(result);\n  VLOG(2) << \"allocated \" << ptr << \" for context \" << context->context()\n          << \" of \" << bytes << \" bytes in unified memory\";\n  return ptr;\n}\n\n/* static */ void GpuDriver::UnifiedMemoryDeallocate(GpuContext* context,\n                                                     void* location) {\n  ScopedActivateContext activation(context);\n  CUdeviceptr pointer = absl::bit_cast<CUdeviceptr>(location);\n  CUresult res = cuMemFree(pointer);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to free unified memory at \" << location\n               << \"; result: \" << ToString(res);\n  } else {\n    VLOG(2) << \"deallocated unified memory at \" << location << \" for context \"\n            << context->context();\n  }\n}\n\n/* static */ void* GpuDriver::HostAllocate(GpuContext* context,\n                                           uint64_t bytes) {\n  ScopedActivateContext activation(context);\n  void* host_mem = nullptr;\n  // \"Portable\" memory is visible to all CUDA contexts. Safe for our use model.\n  CUresult res = cuMemHostAlloc(&host_mem, bytes, CU_MEMHOSTALLOC_PORTABLE);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to alloc \" << bytes\n               << \" bytes on host: \" << ToString(res);\n  }\n  return host_mem;\n}\n\n/* static */ void GpuDriver::HostDeallocate(GpuContext* context,\n                                            void* location) {\n  ScopedActivateContext activation(context);\n  CUresult res = cuMemFreeHost(location);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"error deallocating host memory at \" << location << \": \"\n               << ToString(res);\n  }\n}\n\n/* static */ bool GpuDriver::HostRegister(GpuContext* context, void* location,\n                                          uint64_t bytes) {\n  ScopedActivateContext activation(context);\n  // \"Portable\" memory is visible to all CUDA contexts. Safe for our use model.\n  CUresult res =\n      cuMemHostRegister(location, bytes, CU_MEMHOSTREGISTER_PORTABLE);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"error registering host memory at \" << location << \": \"\n               << ToString(res);\n    return false;\n  }\n  return true;\n}\n\n/* static */ bool GpuDriver::HostUnregister(GpuContext* context,\n                                            void* location) {\n  ScopedActivateContext activation(context);\n  CUresult res = cuMemHostUnregister(location);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"error unregistering host memory at \" << location << \": \"\n               << ToString(res);\n    return false;\n  }\n  return true;\n}\n\n#if CUDA_VERSION >= 10020\n/* static */ tsl::StatusOr<GpuDriver::VmemSpan> GpuDriver::ReserveVirtualMemory(\n    GpuContext* context, uint64_t bytes) {\n  ScopedActivateContext activation(context);\n  CUdeviceptr base;\n  CUresult res = cuMemAddressReserve(&base, bytes, /*alignment=*/0,\n                                     /*addr=*/0, /*flags=*/0);\n  if (res != CUDA_SUCCESS) {\n    return tsl::errors::Internal(\n        absl::StrFormat(\"error reserving %d bytes of virtual GPU memory: %s\",\n                        bytes, ToString(res)));\n  }\n  return {{base, bytes}};\n}\n\n/* static */ void GpuDriver::FreeVirtualMemory(\n    GpuContext* context, GpuDriver::VmemSpan reservation) {\n  ScopedActivateContext activation(context);\n  CUresult res = cuMemAddressFree(reservation.base, reservation.size_bytes);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"error freeing vmem reservation of size \"\n               << reservation.size_bytes << \" at address \" << reservation.base;\n  }\n}\n\n/* static */ tsl::StatusOr<uint64_t> GpuDriver::GetMinAllocationGranularity(\n    GpuDeviceHandle device) {\n  CUmemAllocationProp props = {};\n  props.type = CU_MEM_ALLOCATION_TYPE_PINNED;\n  props.location.type = CU_MEM_LOCATION_TYPE_DEVICE;\n  props.location.id = device;\n\n  size_t granularity;\n  CUresult res = cuMemGetAllocationGranularity(\n      &granularity, &props, CU_MEM_ALLOC_GRANULARITY_MINIMUM);\n  if (res != CUDA_SUCCESS) {\n    return tsl::errors::Internal(\"failed to get min allocation granularity: \",\n                                 ToString(res));\n  }\n  return granularity;\n}\n\n/* static */ tsl::StatusOr<GpuDriver::GenericMemoryHandle>\nGpuDriver::CreateMemoryHandle(GpuContext* context, uint64_t bytes) {\n  ScopedActivateContext activation(context);\n  auto device = DeviceFromContext(context);\n  if (!device.ok()) {\n    LOG(ERROR) << \"Failed to get device from context\" << device.status();\n    return device.status();\n  }\n\n  CUmemAllocationProp props = {};\n  props.type = CU_MEM_ALLOCATION_TYPE_PINNED;\n  props.location.type = CU_MEM_LOCATION_TYPE_DEVICE;\n  props.location.id = device.value();\n\n  CUmemGenericAllocationHandle mem_handle;\n  CUresult res = cuMemCreate(&mem_handle, bytes, &props, 0);\n  if (res != CUDA_SUCCESS) {\n    return tsl::errors::Internal(\n        absl::StrFormat(\"failed to create memory allocation of size %d: %s\",\n                        bytes, ToString(res)));\n  }\n  return GpuDriver::GenericMemoryHandle{mem_handle, bytes};\n}\n\n/* static */ void GpuDriver::ReleaseMemoryHandle(\n    GpuContext* context, GpuDriver::GenericMemoryHandle handle) {\n  ScopedActivateContext activation(context);\n\n  CUresult res = cuMemRelease(handle.handle);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"Failed to release memory handle \" << handle.handle\n               << \" of size \" << handle.bytes << \": \" << ToString(res);\n  }\n}\n\n/* static */ tsl::Status GpuDriver::MapMemory(\n    GpuContext* context, CUdeviceptr va,\n    const GpuDriver::GenericMemoryHandle& handle,\n    const std::vector<GpuDeviceHandle>& device_handles) {\n  ScopedActivateContext activation(context);\n\n  auto device = DeviceFromContext(context);\n  if (!device.ok()) {\n    return device.status();\n  }\n\n  // NB: Zero is the only valid value for both flags and offset.\n  CUresult res =\n      cuMemMap(va, handle.bytes, /*offset=*/0, handle.handle, /*flags=*/0);\n  if (res != CUDA_SUCCESS) {\n    return tsl::errors::Internal(absl::StrFormat(\n        \"Failed to map %d bytes at %d: %s\", handle.bytes, va, ToString(res)));\n  }\n\n  std::vector<CUmemAccessDesc> access_descriptors(device_handles.size());\n  for (int i = 0; i < access_descriptors.size(); ++i) {\n    access_descriptors[i].location.id = device_handles[i];\n    access_descriptors[i].location.type = CU_MEM_LOCATION_TYPE_DEVICE;\n    access_descriptors[i].flags = CU_MEM_ACCESS_FLAGS_PROT_READWRITE;\n  }\n\n  res = cuMemSetAccess(va, handle.bytes, access_descriptors.data(),\n                       access_descriptors.size());\n  if (res != CUDA_SUCCESS) {\n    // Unmap the memory that we failed to set access for.\n    if (cuMemUnmap(va, handle.bytes) != CUDA_SUCCESS) {\n      LOG(ERROR)\n          << \"Failed to unmap memory in GpuDriver::MapMemory error path.\";\n    }\n    return tsl::errors::Internal(absl::StrFormat(\n        \"Failed to set read/write access on memory mapped at %d: %s\", va,\n        ToString(res)));\n  }\n  return tsl::OkStatus();\n}\n\n/* static */ void GpuDriver::UnmapMemory(GpuContext* context, CUdeviceptr va,\n                                         uint64_t bytes) {\n  ScopedActivateContext activation(context);\n\n  CUresult res = cuMemUnmap(va, bytes);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"Failed to unmap memory at \" << va << \" of size \" << bytes\n               << \": \" << ToString(res);\n  }\n}\n\n#endif\n\n/* static */ tsl::Status GpuDriver::DestroyEvent(GpuContext* context,\n                                                 CUevent* event) {\n  if (*event == nullptr) {\n    return tsl::Status(port::error::INVALID_ARGUMENT,\n                       \"input event cannot be null\");\n  }\n\n  ScopedActivateContext activated{context};\n  RETURN_IF_CUDA_RES_ERROR(cuEventDestroy(*event),\n                           \"Error destroying CUDA event\");\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::Status GpuDriver::RecordEvent(GpuContext* context,\n                                                CUevent event,\n                                                CUstream stream) {\n  ScopedActivateContext activated{context};\n  RETURN_IF_CUDA_RES_ERROR(cuEventRecord(event, stream),\n                           \"Error recording CUDA event\");\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::StatusOr<CUresult> GpuDriver::QueryEvent(GpuContext* context,\n                                                           CUevent event) {\n  ScopedActivateContext activated{context};\n  CUresult res = cuEventQuery(event);\n  if (res != CUDA_SUCCESS && res != CUDA_ERROR_NOT_READY) {\n    return tsl::Status(\n        port::error::INTERNAL,\n        absl::StrFormat(\"failed to query event: %s\", ToString(res)));\n  }\n\n  return res;\n}\n\n/* static */ bool GpuDriver::GetEventElapsedTime(GpuContext* context,\n                                                 float* elapsed_milliseconds,\n                                                 CUevent start, CUevent stop) {\n  ScopedActivateContext activated{context};\n  // The stop event must have completed in order for cuEventElapsedTime to\n  // work.\n  CUresult res = cuEventSynchronize(stop);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to synchronize the stop event: \" << ToString(res);\n    return false;\n  }\n  res = cuEventElapsedTime(elapsed_milliseconds, start, stop);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to get elapsed time between events: \"\n               << ToString(res);\n    return false;\n  }\n\n  return true;\n}\n\n/* static */ bool GpuDriver::WaitStreamOnEvent(GpuContext* context,\n                                               CUstream stream, CUevent event) {\n  ScopedActivateContext activation(context);\n  CUresult res = cuStreamWaitEvent(stream, event, 0 /* = flags */);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"could not wait stream on event: \" << ToString(res);\n    return false;\n  }\n\n  return true;\n}\n\n/* static */ bool GpuDriver::SynchronizeContext(GpuContext* context) {\n  ScopedActivateContext activation(context);\n  CUresult res = cuCtxSynchronize();\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"could not synchronize on CUDA context: \" << ToString(res)\n               << \" :: \" << tsl::CurrentStackTrace();\n    return false;\n  }\n\n  return true;\n}\n\n/* static */ tsl::Status GpuDriver::SynchronizeStream(GpuContext* context,\n                                                      CUstream stream) {\n  ScopedActivateContext activated{context};\n  CHECK(stream != nullptr);\n  RETURN_IF_CUDA_RES_ERROR(cuStreamSynchronize(stream),\n                           \"Could not synchronize CUDA stream\");\n  return ::tsl::OkStatus();\n}\n\n/* static */ bool GpuDriver::IsStreamIdle(GpuContext* context,\n                                          CUstream stream) {\n  ScopedActivateContext activated{context};\n  CHECK(stream != nullptr);\n  CUresult res = cuStreamQuery(stream);\n  if (res == CUDA_SUCCESS) {\n    return true;\n  }\n\n  if (res != CUDA_ERROR_NOT_READY) {\n    LOG(ERROR) << \"stream in bad state on status query: \" << ToString(res);\n  }\n  return false;\n}\n\n/* static */ tsl::Status GpuDriver::SynchronousMemcpyD2H(GpuContext* context,\n                                                         void* host_dst,\n                                                         CUdeviceptr gpu_src,\n                                                         uint64_t size) {\n  ScopedActivateContext activation(context);\n  RETURN_IF_CUDA_RES_ERROR(\n      cuMemcpyDtoH(host_dst, gpu_src, size),\n      absl::StrFormat(\"failed to synchronous memcpy from device to host \"\n                      \"host dst: %p; GPU src: %p; size: %u=0x%x\",\n                      host_dst, absl::bit_cast<void*>(gpu_src), size, size));\n  VLOG(2) << \"successfully sync memcpy'd d2h of \" << size << \" bytes to \"\n          << host_dst;\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::Status GpuDriver::SynchronousMemcpyH2D(GpuContext* context,\n                                                         CUdeviceptr gpu_dst,\n                                                         const void* host_src,\n                                                         uint64_t size) {\n  ScopedActivateContext activation(context);\n  RETURN_IF_CUDA_RES_ERROR(\n      cuMemcpyHtoD(gpu_dst, host_src, size),\n      absl::StrFormat(\n          \"failed to synchronous memcpy from host to device: GPU dst: %p;\"\n          \" host src: %p; size: %u=0x%x\",\n          absl::bit_cast<void*>(gpu_dst), host_src, size, size));\n  VLOG(2) << \"successfully enqueued sync memcpy h2d of \" << size << \" bytes\";\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::Status GpuDriver::SynchronousMemcpyD2D(GpuContext* context,\n                                                         CUdeviceptr gpu_dst,\n                                                         CUdeviceptr gpu_src,\n                                                         uint64_t size) {\n  ScopedActivateContext activation(context);\n\n  CUresult result;\n  // CreatedContexts::GetAnyContext() doesn't works when ptr == 0.\n  // This happens when the size is 0.\n  if (gpu_dst == 0 || gpu_src == 0) {\n    result = cuMemcpyDtoD(gpu_dst, gpu_src, size);\n  } else {\n    // Any context work here.\n    CUcontext dst_context =\n        CreatedContexts::GetAnyContext(absl::bit_cast<void*>(gpu_dst));\n    CUcontext src_context =\n        CreatedContexts::GetAnyContext(absl::bit_cast<void*>(gpu_src));\n\n    if (static_cast<void*>(dst_context) == nullptr) {\n      tsl::StatusOr<GpuContext*> tmp_context = GetPointerContext(gpu_dst);\n      if (tmp_context.ok()) {\n        dst_context = tmp_context.value()->context();\n      }\n    }\n\n    if (static_cast<void*>(src_context) == nullptr) {\n      tsl::StatusOr<GpuContext*> tmp_context = GetPointerContext(gpu_src);\n      if (tmp_context.ok()) {\n        src_context = tmp_context.value()->context();\n      }\n    }\n\n    result = cuMemcpyPeer(gpu_dst, dst_context, gpu_src, src_context, size);\n  }\n\n  RETURN_IF_CUDA_RES_ERROR(\n      result,\n      absl::StrFormat(\n          \"failed to synchronous memcpy from host to device: GPU dst: %p; \"\n          \"GPU src: %p; size: %u=0x%x\",\n          absl::bit_cast<void*>(gpu_dst), absl::bit_cast<void*>(gpu_src), size,\n          size));\n  VLOG(2) << \"successfully sync memcpy'd d2d of \" << size << \" bytes\";\n  return ::tsl::OkStatus();\n}\n\n/* static */ bool GpuDriver::AsynchronousMemcpyD2H(GpuContext* context,\n                                                   void* host_dst,\n                                                   CUdeviceptr gpu_src,\n                                                   uint64_t size,\n                                                   CUstream stream) {\n  ScopedActivateContext activation(context);\n  CUresult res = cuMemcpyDtoHAsync(host_dst, gpu_src, size, stream);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << absl::StrFormat(\n        \"failed to enqueue async memcpy from device to host: %s; host dst: %p; \"\n        \"GPU src: %p; size: %u=0x%x\",\n        ToString(res), host_dst, absl::bit_cast<void*>(gpu_src), size, size);\n    return false;\n  }\n  VLOG(2) << \"successfully enqueued async memcpy d2h of \" << size\n          << \" bytes from \" << absl::bit_cast<void*>(gpu_src) << \" to \"\n          << host_dst << \" on stream \" << stream;\n  return true;\n}\n\n/* static */ bool GpuDriver::AsynchronousMemcpyH2D(GpuContext* context,\n                                                   CUdeviceptr gpu_dst,\n                                                   const void* host_src,\n                                                   uint64_t size,\n                                                   CUstream stream) {\n  ScopedActivateContext activation(context);\n  CUresult res = cuMemcpyHtoDAsync(gpu_dst, host_src, size, stream);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << absl::StrFormat(\n        \"failed to enqueue async memcpy from host to device: %s; GPU dst: %p; \"\n        \"host src: %p; size: %u=0x%x\",\n        ToString(res), absl::bit_cast<void*>(gpu_dst), host_src, size, size);\n    return false;\n  }\n  VLOG(2) << \"successfully enqueued async memcpy h2d of \" << size << \" bytes\"\n          << \" on stream \" << stream;\n  return true;\n}\n\n/* static */ bool GpuDriver::AsynchronousMemcpyD2D(GpuContext* context,\n                                                   CUdeviceptr gpu_dst,\n                                                   CUdeviceptr gpu_src,\n                                                   uint64_t size,\n                                                   CUstream stream) {\n  ScopedActivateContext activation(context);\n  CUresult result;\n  // CreatedContexts::GetAnyContext() doesn't works when ptr == 0.\n  // This happens when the size is 0.\n  if (gpu_dst == 0 || gpu_src == 0) {\n    result = cuMemcpyDtoDAsync(gpu_dst, gpu_src, size, stream);\n  } else {\n    // Any context work here.\n    CUcontext dst_context =\n        CreatedContexts::GetAnyContext(absl::bit_cast<void*>(gpu_dst));\n    CUcontext src_context =\n        CreatedContexts::GetAnyContext(absl::bit_cast<void*>(gpu_src));\n\n    if (static_cast<void*>(dst_context) == nullptr) {\n      tsl::StatusOr<GpuContext*> tmp_context = GetPointerContext(gpu_dst);\n      if (tmp_context.ok()) {\n        dst_context = tmp_context.value()->context();\n      }\n    }\n\n    if (static_cast<void*>(src_context) == nullptr) {\n      tsl::StatusOr<GpuContext*> tmp_context = GetPointerContext(gpu_src);\n      if (tmp_context.ok()) {\n        src_context = tmp_context.value()->context();\n      }\n    }\n\n    result = cuMemcpyPeerAsync(gpu_dst, dst_context, gpu_src, src_context, size,\n                               stream);\n  }\n  if (result != CUDA_SUCCESS) {\n    LOG(ERROR) << absl::StrFormat(\n        \"failed to enqueue async memcpy from device to device: %s\"\n        \"; GPU dst: %p on %s %s\"\n        \"; GPU src: %p on %s %s\"\n        \"; can access? %s; size: %u=0x%x\",\n        ToString(result), absl::bit_cast<void*>(gpu_dst),\n        CUDAPointerToMemorySpaceString(gpu_dst),\n        CUDAPointerToDeviceString(gpu_dst), absl::bit_cast<void*>(gpu_src),\n        CUDAPointerToMemorySpaceString(gpu_src),\n        CUDAPointerToDeviceString(gpu_src),\n        CUDAPointersToCanAccessString(gpu_src, gpu_dst), size, size);\n\n    return false;\n  }\n  VLOG(2) << \"successfully enqueued async memcpy d2d of \" << size << \" bytes\";\n  return true;\n}\n\n/* static */ tsl::Status GpuDriver::InitEvent(GpuContext* context,\n                                              CUevent* result,\n                                              EventFlags flags) {\n  int cuflags;\n  switch (flags) {\n    case EventFlags::kDefault:\n      cuflags = CU_EVENT_DEFAULT;\n      break;\n    case EventFlags::kDisableTiming:\n      cuflags = CU_EVENT_DISABLE_TIMING;\n      break;\n    default:\n      LOG(FATAL) << \"impossible event flags: \" << int(flags);\n  }\n\n  ScopedActivateContext activated{context};\n  CUresult res = cuEventCreate(result, cuflags);\n\n  if (res == CUDA_SUCCESS) {\n    return ::tsl::OkStatus();\n  } else if (res == CUDA_ERROR_OUT_OF_MEMORY) {\n    return tsl::Status(port::error::RESOURCE_EXHAUSTED,\n                       \"could not create CUDA event: out of device memory\");\n  } else {\n    return tsl::Status(\n        port::error::FAILED_PRECONDITION,\n        absl::StrCat(\"could not create CUDA event: \", ToString(res)));\n  }\n}\n\n/* static */ int GpuDriver::GetDeviceCount() {\n  int device_count = 0;\n  CUresult res = cuDeviceGetCount(&device_count);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"could not retrieve CUDA device count: \" << ToString(res);\n    return 0;\n  }\n\n  if (FLAGS_gpuexec_cuda_device_0_only && device_count > 1) {\n    device_count = 1;\n  }\n  return device_count;\n}\n\n/* static */ tsl::StatusOr<GpuContext*> GpuDriver::GetPointerContext(\n    CUdeviceptr pointer) {\n  GpuContext* context = nullptr;\n  CUresult result =\n      cuPointerGetAttribute(&context, CU_POINTER_ATTRIBUTE_CONTEXT, pointer);\n  if (result == CUDA_SUCCESS) {\n    // For cudaMallocAsync, the context returned is null.  For now\n    // return not-available. But how to manage that correctly\n    // everywhere in TF?  Currently this is only used during error\n    // handling.  So all is working fine, but TF have a different\n    // error then the original one.\n    if (context == nullptr) {\n      return tsl::Status(\n          port::error::UNAVAILABLE,\n          \"Empty context returned while querying context for device pointer\");\n    }\n    return context;\n  }\n\n  return tsl::Status(\n      port::error::INTERNAL,\n      absl::StrCat(\"failed to query context for device pointer: \",\n                   ToString(result)));\n}\n\n/* static */ tsl::StatusOr<MemorySpace> GpuDriver::GetPointerMemorySpace(\n    CUdeviceptr pointer) {\n  unsigned int value;\n  CUresult result =\n      cuPointerGetAttribute(&value, CU_POINTER_ATTRIBUTE_MEMORY_TYPE, pointer);\n  if (result == CUDA_SUCCESS) {\n    switch (value) {\n      case CU_MEMORYTYPE_DEVICE:\n        return MemorySpace::kDevice;\n      case CU_MEMORYTYPE_HOST:\n        return MemorySpace::kHost;\n      default:\n        return tsl::Status(\n            port::error::INTERNAL,\n            absl::StrCat(\"unknown memory space provided by CUDA API: \", value));\n    }\n  }\n\n  return tsl::Status(\n      port::error::INTERNAL,\n      absl::StrCat(\"failed to query device pointer for memory space: \",\n                   ToString(result)));\n}\n\n/* static */ tsl::Status GpuDriver::GetPointerAddressRange(CUdeviceptr dptr,\n                                                           CUdeviceptr* base,\n                                                           size_t* size) {\n  CUresult result = cuMemGetAddressRange(base, size, dptr);\n  if (result == CUDA_SUCCESS) {\n    return ::tsl::OkStatus();\n  } else if (result == CUDA_ERROR_NOT_FOUND) {\n    // We differentiate between \"this pointer is unknown\" (return here) and\n    // \"there was an internal error while performing this operation\" (return\n    // below).\n    return tsl::Status(\n        port::error::NOT_FOUND,\n        absl::StrFormat(\"not a device pointer %p; %s\",\n                        reinterpret_cast<void*>(dptr), ToString(result)));\n  }\n\n  return tsl::Status(\n      port::error::INTERNAL,\n      absl::StrFormat(\"failed to get pointer into for device pointer %p; %s\",\n                      reinterpret_cast<void*>(dptr), ToString(result)));\n}\n\n/* static */ tsl::StatusOr<CUdevice> GpuDriver::GetPointerDevice(\n    CUdeviceptr pointer) {\n  auto result = GetPointerContext(pointer);\n  if (!result.ok()) {\n    return result.status();\n  }\n\n  return DeviceFromContext(result.value());\n}\n\n/* static */ tsl::Status GpuDriver::GetComputeCapability(int* cc_major,\n                                                         int* cc_minor,\n                                                         CUdevice device) {\n  *cc_major = 0;\n  *cc_minor = 0;\n\n  CUresult res = cuDeviceGetAttribute(\n      cc_major, CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR, device);\n  if (res != CUDA_SUCCESS) {\n    return tsl::Status(\n        port::error::INTERNAL,\n        absl::StrFormat(\n            \"failed to get compute capability major for device: %s; %d\",\n            ToString(res), device));\n  }\n\n  res = cuDeviceGetAttribute(\n      cc_minor, CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR, device);\n  if (res != CUDA_SUCCESS) {\n    return tsl::Status(\n        port::error::INTERNAL,\n        absl::StrFormat(\n            \"failed to get compute capability minor for device: %s; %d\",\n            ToString(res), device));\n  }\n\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::Status GpuDriver::GetGpuISAVersion(int* version,\n                                                     CUdevice device) {\n  return tsl::Status{\n      port::error::INTERNAL,\n      \"Feature not supported on CUDA platform (GetGpuISAVersion)\"};\n}\n\n/* static */ tsl::Status GpuDriver::GetGpuGCNArchName(CUdevice, std::string*) {\n  return tsl::Status{\n      port::error::INTERNAL,\n      \"Feature not supported on CUDA platform (GetGpuGCNArchName)\"};\n}\n\n// Helper function that turns the integer output of cuDeviceGetAttribute to type\n// T and wraps it in a StatusOr.\ntemplate <typename T>\nstatic tsl::StatusOr<T> GetSimpleAttribute(CUdevice device,\n                                           CUdevice_attribute attribute) {\n  int value = -1;\n  RETURN_IF_CUDA_RES_ERROR(cuDeviceGetAttribute(&value, attribute, device),\n                           \"Could not retrieve CUDA device attribute (\",\n                           attribute);\n  T converted = value;\n  return converted;\n}\n\n/* static */ tsl::StatusOr<int> GpuDriver::GetMultiprocessorCount(\n    CUdevice device) {\n  return GetSimpleAttribute<int>(device,\n                                 CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT);\n}\n\n/* static */ tsl::StatusOr<int64_t> GpuDriver::GetMaxSharedMemoryPerCore(\n    CUdevice device) {\n  return GetSimpleAttribute<int64_t>(\n      device, CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR);\n}\n\n/* static */ tsl::StatusOr<int64_t> GpuDriver::GetMaxSharedMemoryPerBlock(\n    CUdevice device) {\n  return GetSimpleAttribute<int64_t>(\n      device, CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK);\n}\n\n/* static */ tsl::StatusOr<int64_t> GpuDriver::GetMaxThreadsPerMultiprocessor(\n    CUdevice device) {\n  return GetSimpleAttribute<int64_t>(\n      device, CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR);\n}\n\n/* static */ tsl::StatusOr<int64_t> GpuDriver::GetMaxThreadsPerBlock(\n    CUdevice device) {\n  return GetSimpleAttribute<int64_t>(device,\n                                     CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK);\n}\n\n/* static */ tsl::StatusOr<int64_t> GpuDriver::GetMaxRegistersPerBlock(\n    CUdevice device) {\n  return GetSimpleAttribute<int64_t>(\n      device, CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK);\n}\n\n/* static */ tsl::StatusOr<int64_t> GpuDriver::GetThreadsPerWarp(\n    CUdevice device) {\n  return GetSimpleAttribute<int64_t>(device, CU_DEVICE_ATTRIBUTE_WARP_SIZE);\n}\n\n/* static */ bool GpuDriver::GetGridLimits(int* x, int* y, int* z,\n                                           CUdevice device) {\n  int value;\n  CUresult res =\n      cuDeviceGetAttribute(&value, CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X, device);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to query max grid dim x: \" << ToString(res);\n    return false;\n  }\n  *x = value;\n\n  res =\n      cuDeviceGetAttribute(&value, CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y, device);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to query max grid dim y: \" << ToString(res);\n    return false;\n  }\n  *y = value;\n\n  res =\n      cuDeviceGetAttribute(&value, CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z, device);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to query max grid dim z: \" << ToString(res);\n    return false;\n  }\n  *z = value;\n  return true;\n}\n\n/* static */ bool GpuDriver::GetDriverVersion(int* driver_version) {\n  CUresult res = cuDriverGetVersion(driver_version);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to query driver version: \" << ToString(res);\n    return false;\n  }\n\n  return true;\n}\n\n/* static */ bool GpuDriver::GetDeviceProperties(CUdevprop* device_properties,\n                                                 int device_ordinal) {\n  CUresult res = cuDeviceGetProperties(device_properties, device_ordinal);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to query device properties: \" << ToString(res);\n    return false;\n  }\n\n  return true;\n}\n\n/* static */ tsl::StatusOr<int> GpuDriver::GetDeviceAttribute(\n    CUdevice_attribute attribute, CUdevice device) {\n  int val;\n  CUresult res = cuDeviceGetAttribute(&val, attribute, device);\n  if (res != CUDA_SUCCESS) {\n    return tsl::Status(\n        port::error::INTERNAL,\n        absl::StrFormat(\"failed to get device attribute %d for device %d: %s\",\n                        attribute, device, ToString(res)));\n  }\n  return val;\n}\n\n/* static */ bool GpuDriver::IsEccEnabled(CUdevice device, bool* result) {\n  int value = -1;\n  CUresult res =\n      cuDeviceGetAttribute(&value, CU_DEVICE_ATTRIBUTE_ECC_ENABLED, device);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to query ECC status: \" << ToString(res);\n    return false;\n  }\n\n  *result = value;\n  return true;\n}\n\n/* static */ bool GpuDriver::GetDeviceMemoryInfo(GpuContext* context,\n                                                 int64_t* free_out,\n                                                 int64_t* total_out) {\n  ScopedActivateContext activation(context);\n  size_t free = 0;\n  size_t total = 0;\n  CUresult res = cuMemGetInfo(&free, &total);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to query device memory info: \" << ToString(res);\n    return false;\n  }\n\n  *free_out = free;\n  *total_out = total;\n  return true;\n}\n\n/* static */ bool GpuDriver::GetDeviceTotalMemory(CUdevice device,\n                                                  uint64_t* result) {\n  size_t value = -1;\n  CUresult res = cuDeviceTotalMem(&value, device);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to query total available memory: \" << ToString(res);\n    return false;\n  }\n\n  *result = value;\n  return true;\n}\n\n/* static */ std::string GpuDriver::GetPCIBusID(CUdevice device) {\n  std::string pci_bus_id;\n  static const int kBufferSize = 64;\n  absl::InlinedVector<char, 4> chars(kBufferSize);\n  chars[kBufferSize - 1] = '\\0';\n  CUresult res = cuDeviceGetPCIBusId(chars.begin(), kBufferSize - 1, device);\n  if (res != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to query PCI bus id for device: \" << ToString(res);\n    return pci_bus_id;\n  }\n  pci_bus_id = chars.begin();\n  return pci_bus_id;\n}\n\n/* static */ bool GpuDriver::CanEnablePeerAccess(GpuContext* from,\n                                                 GpuContext* to) {\n  if (from == to) {\n    return true;  // A context can always access its own memory.\n  }\n\n  auto from_device = DeviceFromContext(from);\n  if (!from_device.ok()) {\n    LOG(ERROR) << \"failed to resolve 'from' peer access context to a device: \"\n               << from_device.status();\n    return false;\n  }\n  auto to_device = DeviceFromContext(to);\n  if (!to_device.ok()) {\n    LOG(ERROR) << \"failed to resolve 'to' peer access context to a device: \"\n               << to_device.status();\n    return false;\n  }\n  return CanEnablePeerAccess(from_device.value(), to_device.value());\n}\n\n/* static */ bool GpuDriver::CanEnablePeerAccess(GpuDeviceHandle from,\n                                                 GpuDeviceHandle to) {\n  int can_access_peer = -1;\n  CUresult result = cuDeviceCanAccessPeer(&can_access_peer, from, to);\n  if (result != CUDA_SUCCESS) {\n    LOG(ERROR) << \"failed to detect peer access capability: \"\n               << ToString(result);\n    return false;\n  }\n  return can_access_peer;\n}\n\n/* static */ tsl::Status GpuDriver::EnablePeerAccess(GpuContext* from,\n                                                     GpuContext* to) {\n  if (from == to) {\n    return ::tsl::OkStatus();  // A context can always access its own\n                               // memory.\n  }\n\n  ScopedActivateContext activated{from};\n  CUresult result = cuCtxEnablePeerAccess(to->context(), 0 /* = flags */);\n  if (result != CUDA_SUCCESS &&\n      result != CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED) {\n    return tsl::Status(\n        port::error::INTERNAL,\n        absl::StrFormat(\"failed to enable peer access from %p to %p: %s\", from,\n                        to, ToString(result)));\n  }\n\n  return ::tsl::OkStatus();\n}\n\n/* static */ tsl::StatusOr<int> GpuDriver::GetMaxOccupiedBlocksPerCore(\n    GpuContext* context, CUfunction kernel, int threads_per_block,\n    size_t dynamic_shared_memory_bytes) {\n  ScopedActivateContext activation(context);\n\n  int max_blocks;\n  RETURN_IF_CUDA_RES_ERROR(\n      cuOccupancyMaxActiveBlocksPerMultiprocessor(\n          &max_blocks, kernel, threads_per_block, dynamic_shared_memory_bytes),\n      absl::StrFormat(\"Failed to calculate occupancy of kernel %p\", kernel));\n  return max_blocks;\n}\n\n}  // namespace gpu\n\nnamespace cuda {\n\nCUcontext CurrentContextOrDie() {\n  CUcontext current = nullptr;\n  FAIL_IF_CUDA_RES_ERROR(cuCtxGetCurrent(&current),\n                         \"Failed to query current context\");\n  return current;\n}\n\n}  // namespace cuda\n}  // namespace stream_executor"