"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.h\"\n\n#include <cstdint>\n#include <optional>\n#include <utility>\n\n#if defined(__APPLE__)\n#include <mach-o/dyld.h>\n#endif\n#if defined(PLATFORM_WINDOWS)\n#include <windows.h>\n#define PATH_MAX MAX_PATH\n#else\n#include <unistd.h>\n#endif\n#include \"absl/functional/any_invocable.h\"\n#include \"absl/strings/ascii.h\"\n#include \"absl/strings/numbers.h\"\n#include \"absl/strings/str_cat.h\"\n#include \"absl/strings/str_format.h\"\n#include \"absl/strings/str_split.h\"\n#include \"absl/strings/string_view.h\"\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.h\"\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_driver.h\"\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_event.h\"\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_platform_id.h\"\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_stream.h\"\n#include \"tensorflow/compiler/xla/stream_executor/cuda/cuda_timer.h\"\n#include \"tensorflow/compiler/xla/stream_executor/kernel_cache_config.h\"\n#include \"tensorflow/compiler/xla/stream_executor/lib/error.h\"\n#include \"tensorflow/compiler/xla/stream_executor/lib/initialize.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/logging.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/port.h\"\n#include \"tensorflow/compiler/xla/stream_executor/plugin_registry.h\"\n#include \"tensorflow/compiler/xla/stream_executor/stream.h\"\n#include \"tensorflow/compiler/xla/stream_executor/stream_executor_internal.h\"\n#include \"tensorflow/compiler/xla/stream_executor/stream_executor_pimpl.h\"\n#include \"tensorflow/compiler/xla/stream_executor/timer.h\"\n#include \"tensorflow/tsl/platform/env.h\"\n#include \"tensorflow/tsl/platform/numbers.h\"\n#include \"tensorflow/tsl/platform/statusor.h\"\n\n// LOG(ERROR) uses a const named ERROR, so a macro with the same name is\n// always unwanted. This happens on Windows that defines such a macro.\n#undef ERROR\n\n#ifdef PLATFORMS_GPUS_CUDA_DYNAMIC_LIBCUDA_DYNAMIC_LIBCUDA_H_\n#error \\\n    \"No driver calls in this file, wrap driver functionality in cuda_driver.cc.\"\n#endif\n\n#ifdef __CUDA_RUNTIME_H__\n#error \\\n    \"CUDA runtime being included into CUDA GPU executor; should be driver only.\"\n#endif\n\nextern bool FLAGS_check_gpu_leaks;\nbool FLAGS_prefer_cubin_to_ptx = true;\n\nnamespace stream_executor {\nnamespace gpu {\n\n// Hook that can be used to CUBIN-ate PTX before it is loaded into the driver.\n// It has been observed that loading both PTX and cubins into the driver library\n// can cause it to crash, but loading only CUBINs avoids those crashes;\n// therefore, it's useful to have this hook to hack in uniform CUBIN-ation of\n// PTX code.\n//\n// As this is an implementation-detail workaround, the usage is to declare this\n// variable with extern linkage and populate it from another translation unit.\nstd::function<std::string(const std::string&)> g_cubinate;\n\nstatic GpuEvent* AsGpuEvent(Event* event) {\n  DCHECK(event != nullptr);\n  return static_cast<GpuEvent*>(event->implementation());\n}\n\n// Given a platform-independent timer datatype, returns the internal CUDA\n// platform implementation pointer.\nstatic GpuTimer* AsGpuTimer(Timer* timer) {\n  DCHECK(timer != nullptr);\n  return static_cast<GpuTimer*>(timer->implementation());\n}\n\n// Given const GPU memory, returns a libcuda device pointer datatype, suitable\n// for passing directly to libcuda APIs.\n//\n// N.B. we must lose constness in order to pass a suitable type to the existing\n// libcuda APIs, so the caller should take care to only pass the result of const\n// GPU memory conversions to libcuda functions which will honor constness.\nstatic CUdeviceptr AsCudaDevicePtr(const DeviceMemoryBase& gpu_mem) {\n  return reinterpret_cast<CUdeviceptr>(gpu_mem.opaque());\n}\n\n// See description on const version above.\nstatic CUdeviceptr AsCudaDevicePtr(DeviceMemoryBase* gpu_mem) {\n  return AsCudaDevicePtr(*gpu_mem);\n}\n\nGpuContext* ExtractGpuContext(GpuExecutor* cuda_exec) {\n  CHECK(cuda_exec != nullptr);\n  return cuda_exec->gpu_context();\n}\n\nGpuExecutor::~GpuExecutor() {\n  CHECK(kernel_to_gpu_binary_.empty()) << \"GpuExecutor has live kernels.\";\n  CHECK(gpu_binary_to_module_.empty()) << \"GpuExecutor has loaded modules.\";\n  if (context_ != nullptr) {\n    GpuDriver::DestroyContext(context_);\n  }\n}\n\ntsl::Status GpuExecutor::Init(int device_ordinal,\n                              DeviceOptions device_options) {\n  device_ordinal_ = device_ordinal;\n\n  auto status = GpuDriver::Init();\n  if (!status.ok()) {\n    return status;\n  }\n\n  status = GpuDriver::GetDevice(device_ordinal_, &device_);\n  if (!status.ok()) {\n    return status;\n  }\n\n  status = GpuDriver::CreateContext(device_ordinal_, device_, device_options,\n                                    &context_);\n  if (!status.ok()) {\n    return status;\n  }\n\n  return GpuDriver::GetComputeCapability(&cc_major_, &cc_minor_, device_);\n}\n\nbool GpuExecutor::FindOnDiskForComputeCapability(\n    absl::string_view filename, absl::string_view canonical_suffix,\n    std::string* found_filename) const {\n  if (cc_major_ == 0 && cc_minor_ == 0) {\n    return false;\n  }\n\n  std::string cc_specific =\n      absl::StrCat(filename, \".cc\", cc_major_, cc_minor_, canonical_suffix);\n  if (tsl::Env::Default()->FileExists(cc_specific).ok()) {\n    VLOG(2) << \"found compute-capability-specific file, using that: \"\n            << cc_specific;\n    *found_filename = cc_specific;\n    return true;\n  }\n\n  VLOG(2) << \"could not find compute-capability specific file at: \"\n          << cc_specific;\n  if (tsl::Env::Default()->FileExists(std::string(filename)).ok()) {\n    *found_filename = std::string(filename);\n    return true;\n  }\n\n  return false;\n}\n\nbool GpuExecutor::FindOnDiskForISAVersion(absl::string_view filename,\n                                          absl::string_view canonical_suffix,\n                                          std::string* found_filename) const {\n  LOG(ERROR)\n      << \"Feature not supported on CUDA platform (FindOnDiskForISAVersion)\";\n  return false;\n}\n// Returns the path to the running executable.\n// N.B. Derived from //knowledge/smalltalk/background_kb.cc\n// Arg: strip_exe: if true, remove the name of the executable itself from the\n//                 returned string. Example: calling this from /usr/bin/foo\n//                 would return /usr/bin.\nstatic std::string GetBinaryDir(bool strip_exe) {\n  std::string exe_path = tsl::Env::Default()->GetExecutablePath();\n  if (strip_exe) {\n    // The exe is the last component of the path, so remove one component.\n    std::vector<std::string> components = absl::StrSplit(exe_path, '/');\n    components.pop_back();\n    return absl::StrJoin(components, \"/\");\n  }\n  return exe_path;\n}\n\ntsl::Status GpuExecutor::LoadModuleFromCuBin(const char* cubin,\n                                             CUmodule* module) {\n  uint64_t module_refcount;\n  std::tie(*module, module_refcount) = gpu_binary_to_module_[cubin];\n\n  if (*module == nullptr) {\n    TF_RETURN_IF_ERROR(GpuDriver::LoadCubin(context_, cubin, module));\n    module_refcount = 1;\n    VLOG(3) << \"Loaded CUBIN \" << static_cast<const void*>(cubin)\n            << \" as module \" << *module;\n  } else {\n    ++module_refcount;\n    VLOG(3) << \"CUBIN \" << static_cast<const void*>(cubin)\n            << \" is already loaded as module \" << *module;\n  }\n  gpu_binary_to_module_[cubin] = {*module, module_refcount};\n  return ::tsl::OkStatus();\n}\n\ntsl::Status GpuExecutor::LoadModuleFromPtx(const char* ptx, CUmodule* module) {\n  uint64_t module_refcount;\n  std::tie(*module, module_refcount) = gpu_binary_to_module_[ptx];\n\n  if (*module == nullptr) {\n    TF_RETURN_IF_ERROR(GpuDriver::LoadPtx(context_, ptx, module));\n    VLOG(3) << \"Loaded PTX \" << static_cast<const void*>(ptx) << \" as module \"\n            << *module;\n    module_refcount = 1;\n  } else {\n    ++module_refcount;\n    VLOG(3) << \"PTX \" << static_cast<const void*>(ptx)\n            << \" is already loaded as module \" << module;\n  }\n  gpu_binary_to_module_[ptx] = {*module, module_refcount};\n  return ::tsl::OkStatus();\n}\n\ntsl::Status GpuExecutor::LoadModuleFromHsaco(const char* hsaco,\n                                             CUmodule* module) {\n  return tsl::errors::Internal(\n      \"Feature not supported on CUDA platform (LoadModuleFromHsaco)\");\n}\n\ntsl::Status GpuExecutor::GetKernel(const MultiKernelLoaderSpec& spec,\n                                   KernelBase* kernel) {\n  GpuKernel* cuda_kernel = AsGpuKernel(kernel);\n  CUmodule module;\n  const std::string* kernelname;\n\n  VLOG(3) << \"GetKernel on kernel \" << kernel << \" : \" << kernel->name();\n\n  if (spec.has_cuda_cubin_in_memory()) {\n    absl::MutexLock lock{&in_memory_modules_mu_};\n    kernelname = &spec.cuda_cubin_in_memory().kernelname();\n    const char* cubin = spec.cuda_cubin_in_memory().bytes();\n    TF_RETURN_IF_ERROR(LoadModuleFromCuBin(cubin, &module));\n    kernel_to_gpu_binary_[kernel] = cubin;\n  } else if (spec.has_cuda_ptx_in_memory()) {\n    kernelname = &spec.cuda_ptx_in_memory().kernelname();\n\n    if (cc_major_ == 0 && cc_minor_ == 0) {\n      return tsl::errors::Internal(\"Compute capability not set\");\n    }\n\n    const char* ptx = spec.cuda_ptx_in_memory().text(cc_major_, cc_minor_);\n    if (ptx == nullptr) {\n      ptx = spec.cuda_ptx_in_memory().default_text();\n    }\n    if (ptx == nullptr) {\n      LOG(FATAL) << \"Loader spec has no ptx for kernel \" << *kernelname;\n    }\n\n    absl::MutexLock lock{&in_memory_modules_mu_};\n    TF_RETURN_IF_ERROR(LoadModuleFromPtx(ptx, &module));\n    kernel_to_gpu_binary_[kernel] = ptx;\n  } else {\n    return tsl::errors::Internal(\"No method of loading CUDA kernel provided\");\n  }\n  VLOG(2) << \"getting function \" << *kernelname << \" from module \" << module;\n  if (!GpuDriver::GetModuleFunction(context_, module, kernelname->c_str(),\n                                    cuda_kernel->gpu_function_ptr())) {\n    return tsl::errors::Internal(\"Could not find the corresponding function\");\n  }\n\n  // We have to trust the kernel loader spec arity because there doesn't appear\n  // to be a way to reflect on the number of expected arguments w/the CUDA API.\n  cuda_kernel->set_arity(spec.arity());\n\n  KernelMetadata kernel_metadata;\n  TF_RETURN_IF_ERROR(GetKernelMetadata(cuda_kernel, &kernel_metadata));\n  kernel->set_metadata(kernel_metadata);\n  kernel->set_name(*kernelname);\n  return ::tsl::OkStatus();\n}\n\nbool GpuExecutor::UnloadGpuBinary(const void* gpu_binary) {\n  auto module_it = gpu_binary_to_module_.find(gpu_binary);\n  if (gpu_binary_to_module_.end() == module_it) {\n    VLOG(3) << \"No loaded CUDA module for \" << gpu_binary;\n    return false;\n  }\n  auto& module = module_it->second.first;\n  auto& refcount = module_it->second.second;\n  VLOG(3) << \"Found CUDA module \" << module << \" with refcount \" << refcount;\n  if (--refcount == 0) {\n    VLOG(3) << \"Unloading CUDA module \" << module;\n    GpuDriver::UnloadModule(context_, module);\n    gpu_binary_to_module_.erase(module_it);\n  }\n  return true;\n}\n\nvoid GpuExecutor::UnloadKernel(const KernelBase* kernel) {\n  VLOG(3) << \"Unloading kernel \" << kernel << \" : \" << kernel->name();\n\n  absl::MutexLock lock{&in_memory_modules_mu_};\n  auto gpu_binary_it = kernel_to_gpu_binary_.find(kernel);\n  if (kernel_to_gpu_binary_.end() == gpu_binary_it) {\n    VLOG(3) << \"Kernel \" << kernel << \" : \" << kernel->name()\n            << \" has never been loaded.\";\n    return;  // We've never seen this kernel.\n  }\n  VLOG(3) << \"Kernel \" << kernel << \" : \" << kernel->name()\n          << \" has loaded GPU code \" << gpu_binary_it->second;\n  UnloadGpuBinary(gpu_binary_it->second);\n  kernel_to_gpu_binary_.erase(gpu_binary_it);\n}\n\ntsl::Status GpuExecutor::LoadModule(const MultiModuleLoaderSpec& spec,\n                                    ModuleHandle* module_handle) {\n  // In GpuExecutor we store the pointer to the GPU binary (PTX or CUBIN) as\n  // ModuleHandle::id().\n  CUmodule cu_module;\n  if (spec.has_cuda_cubin_in_memory()) {\n    absl::MutexLock lock{&in_memory_modules_mu_};\n    TF_RETURN_IF_ERROR(LoadModuleFromCuBin(\n        reinterpret_cast<const char*>(spec.cuda_cubin_in_memory().data()),\n        &cu_module));\n    *module_handle = ModuleHandle(const_cast<void*>(\n        static_cast<const void*>(spec.cuda_cubin_in_memory().data())));\n    return ::tsl::OkStatus();\n  } else if (spec.has_cuda_ptx_in_memory()) {\n    if (cc_major_ == 0 && cc_minor_ == 0) {\n      return tsl::errors::Internal(\"Compute capability not set\");\n    }\n\n    if (!spec.cuda_ptx_in_memory()) {\n      return tsl::errors::Internal(\"PTX not found in spec\");\n    }\n\n    absl::MutexLock lock{&in_memory_modules_mu_};\n    TF_RETURN_IF_ERROR(\n        LoadModuleFromPtx(spec.cuda_ptx_in_memory(), &cu_module));\n    *module_handle = ModuleHandle(\n        const_cast<void*>(static_cast<const void*>(spec.cuda_ptx_in_memory())));\n    return ::tsl::OkStatus();\n  }\n  return tsl::errors::Internal(\"No method of loading CUDA module provided\");\n}\n\nbool GpuExecutor::UnloadModule(ModuleHandle module_handle) {\n  const char* gpu_binary = reinterpret_cast<const char*>(module_handle.id());\n  absl::MutexLock lock{&in_memory_modules_mu_};\n  return UnloadGpuBinary(gpu_binary);\n}\n\nnamespace {\nabsl::uint128 Fingerprint128(const absl::string_view s) {\n  auto fp = tsl::Fingerprint128(s);\n  return absl::MakeUint128(fp.high64, fp.low64);\n}\n\nint fpus_per_core(int cc_major, int cc_minor) {\n  // Source:\n  // https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#arithmetic-instructions\n  int n = 128;          // 5.x, 6.1, 6.2, 8.6, 9.0 -> 128.\n  if (cc_major == 3) {  // 3.x -> 192.\n    n = 192;\n  } else if ((cc_major == 6 && cc_minor == 0) || (cc_major == 7) ||\n             (cc_major == 8 && cc_minor == 0)) {\n    n = 64;  // 6.0, 7.x, 8.0 -> 64.\n  }\n  return n;\n}\n\n}  // namespace\n\ntsl::StatusOr<std::shared_ptr<DeviceMemoryBase>>\nGpuExecutor::CreateOrShareConstant(Stream* stream,\n                                   const std::vector<uint8_t>& content) {\n  absl::MutexLock lock{&shared_constants_mu_};\n  // We assume all constants are uniquely identified by this hash. In the\n  // (highly unlikely) event of a hash collision, the program will likely crash\n  // (because the cached constant that will be returned by mistake is unlikely\n  // to have the correct size).\n  absl::uint128 fingerprint = Fingerprint128(absl::string_view(\n      reinterpret_cast<const char*>(content.data()), content.size()));\n  // Must insert nullptr first to get an iterator to the insertion point.\n  auto insert_result = shared_constants_.insert(\n      {fingerprint, std::weak_ptr<DeviceMemoryBase>()});\n  auto it = insert_result.first;\n  bool was_already_in_cache = !insert_result.second;\n  std::shared_ptr<DeviceMemoryBase> shared_constant;\n\n  if (was_already_in_cache) {\n    shared_constant = it->second.lock();\n  }\n\n  if (shared_constant == nullptr) {\n    // Either the constant wasn't found in the cache, or it was but its\n    // weak_ptr had expired.\n    DeviceMemoryBase* new_constant =\n        new DeviceMemoryBase(Allocate(content.size(), /*memory_space=*/0));\n    if (new_constant->opaque() == nullptr) {\n      return tsl::errors::Internal(absl::StrFormat(\n          \"Failed to allocate %d bytes for new constant\", content.size()));\n    }\n\n    tsl::Status status =\n        stream->ThenMemcpy(new_constant, content.data(), content.size())\n            .BlockHostUntilDone();\n    if (!status.ok()) {\n      Deallocate(new_constant);\n      status.Update(tsl::errors::Internal(absl::StrFormat(\n          \"Memcpy to device address %p failed\", new_constant->opaque())));\n      return status;\n    }\n\n    // Capturing 'this' in the custom deleter means this executor must\n    // outlive all shared uses of this constant.\n    shared_constant = std::shared_ptr<DeviceMemoryBase>(\n        new_constant, [this](DeviceMemoryBase* p) {\n          Deallocate(p);\n          delete p;\n        });\n    it->second = std::weak_ptr<DeviceMemoryBase>(shared_constant);\n  }\n\n  return shared_constant;\n}\n\ntsl::Status GpuExecutor::GetKernelMetadata(GpuKernel* cuda_kernel,\n                                           KernelMetadata* kernel_metadata) {\n  int value;\n  TF_RETURN_IF_ERROR(GpuDriver::FuncGetAttribute(\n      CU_FUNC_ATTRIBUTE_NUM_REGS, *cuda_kernel->gpu_function_ptr(), &value));\n  kernel_metadata->set_registers_per_thread(value);\n\n  TF_RETURN_IF_ERROR(\n      GpuDriver::FuncGetAttribute(CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES,\n                                  *cuda_kernel->gpu_function_ptr(), &value));\n  kernel_metadata->set_shared_memory_bytes(value);\n  return ::tsl::OkStatus();\n}\n\ntsl::Status GpuExecutor::Launch(Stream* stream, const ThreadDim& thread_dims,\n                                const BlockDim& block_dims,\n                                const KernelBase& kernel,\n                                const KernelArgsArrayBase& args) {\n  CHECK_EQ(kernel.Arity() + (args.number_of_shared_bytes() > 0),\n           args.number_of_arguments());\n  CUstream custream = AsGpuStreamValue(stream);\n  const GpuKernel* cuda_kernel = AsGpuKernel(&kernel);\n  CUfunction cufunc = cuda_kernel->AsGpuFunctionHandle();\n\n  // Only perform/print the occupancy check once.  Even just checking to see\n  // whether we've done an occupancy check on this kernel before isn't free\n  // (because we have to synchronize), so we only do this at -v 2+.\n  if (VLOG_IS_ON(2)) {\n    absl::MutexLock lock(&launched_kernels_mu_);\n    if (!launched_kernels_.count(cufunc)) {\n      VlogOccupancyInfo(kernel, thread_dims, block_dims);\n      // TODO(rspringer): Remove elements from launched_kernels_...if we ever\n      // expose a kernel/module deallocation method.\n      launched_kernels_.insert(cufunc);\n    }\n  }\n\n  if (cuda_kernel->GetPreferredCacheConfig() !=\n      KernelCacheConfig::kNoPreference) {\n    TF_RETURN_IF_ERROR(GpuDriver::FuncSetCacheConfig(\n        cufunc, cuda_kernel->GetGpuCacheConfig()));\n  }\n\n  void** kernel_params = const_cast<void**>(args.argument_addresses().data());\n\n  return GpuDriver::LaunchKernel(context_, kernel.name(), cufunc, block_dims.x,\n                                 block_dims.y, block_dims.z, thread_dims.x,\n                                 thread_dims.y, thread_dims.z,\n                                 args.number_of_shared_bytes(), custream,\n                                 kernel_params, nullptr /* = extra */);\n}\n\n// This is a non-essential operation; if there's a failure, proceed without\n// logging an error. It's nearly certain that in case of failures, we'd never\n// get here in the first place; these are very low-impact routines.\nvoid GpuExecutor::VlogOccupancyInfo(const KernelBase& kernel,\n                                    const ThreadDim& thread_dims,\n                                    const BlockDim& block_dims) {\n  VLOG(2) << \"Computing kernel occupancy for kernel \"\n          << kernel.demangled_name();\n  VLOG(2) << \"Thread dimensions (\" << thread_dims.x << \", \" << thread_dims.y\n          << \", \" << thread_dims.z << \")\";\n\n  int regs_per_thread;\n  if (!kernel.metadata().registers_per_thread(&regs_per_thread)) {\n    return;\n  }\n\n  int smem_per_block;\n  if (!kernel.metadata().shared_memory_bytes(&smem_per_block)) {\n    return;\n  }\n\n  const DeviceDescription& device_description =\n      kernel.parent()->GetDeviceDescription();\n\n  const GpuKernel* cuda_kernel = AsGpuKernel(&kernel);\n  CUfunction cufunc = cuda_kernel->AsGpuFunctionHandle();\n\n  int blocks_per_sm = CalculateOccupancy(device_description, regs_per_thread,\n                                         smem_per_block, thread_dims, cufunc);\n  VLOG(2) << \"Resident blocks per SM is \" << blocks_per_sm;\n\n  int suggested_threads =\n      CompareOccupancy(&blocks_per_sm, device_description, regs_per_thread,\n                       smem_per_block, thread_dims, cufunc);\n  if (suggested_threads != 0) {\n    VLOG(2) << \"The cuda occupancy calculator recommends using \"\n            << suggested_threads\n            << \" threads per block to achieve an occupancy of \" << blocks_per_sm\n            << \" blocks per SM.\";\n  }\n}\n\n// Compute and return maximum blocks per core (occupancy) based on the\n// device description, some kernel characteristics and the number of threads per\n// block.  If unable to compute occupancy, zero is returned.\nint GpuExecutor::CalculateOccupancy(const DeviceDescription& device_description,\n                                    uint64_t registers_per_thread,\n                                    uint64_t shared_memory_per_block,\n                                    const ThreadDim& thread_dims,\n                                    CUfunction func) {\n  int suggested_blocks = 0;\n  int suggested_threads = 0;\n  CUresult err = cuOccupancyMaxPotentialBlockSize(\n      &suggested_blocks, &suggested_threads, func, nullptr,\n      shared_memory_per_block, 0);\n  CHECK_EQ(err, CUDA_SUCCESS);\n  return suggested_blocks;\n}\n\n// Compute and return the suggested thread count to achieve ideal occupancy.\n// If the provided thread dimensions match this number, zero is returned.\nint GpuExecutor::CompareOccupancy(int* initial_blocks,\n                                  const DeviceDescription& device_description,\n                                  uint64_t registers_per_thread,\n                                  uint64_t shared_memory_per_block,\n                                  const ThreadDim& thread_dims,\n                                  CUfunction func) {\n  int suggested_blocks = 0;\n  int suggested_threads = 0;\n  CUresult err = cuOccupancyMaxPotentialBlockSize(\n      &suggested_blocks, &suggested_threads, func, nullptr,\n      shared_memory_per_block, 0);\n  CHECK_EQ(err, CUDA_SUCCESS);\n  if (suggested_blocks > *initial_blocks) {\n    *initial_blocks = suggested_blocks;\n    return suggested_threads;\n  } else {\n    return 0;\n  }\n}\n\nDeviceMemoryBase GpuExecutor::Allocate(uint64_t size, int64_t memory_space) {\n  CHECK_EQ(memory_space, 0);\n  return DeviceMemoryBase(GpuDriver::DeviceAllocate(context_, size), size);\n}\n\nvoid* GpuExecutor::GetSubBuffer(DeviceMemoryBase* mem, uint64_t offset_bytes,\n                                uint64_t size_bytes) {\n  // offset and size are in bytes, so char* works as the pointer type.\n  return reinterpret_cast<char*>(mem->opaque()) + offset_bytes;\n}\n\nvoid GpuExecutor::Deallocate(DeviceMemoryBase* mem) {\n  GpuDriver::DeviceDeallocate(context_, mem->opaque());\n}\n\nbool GpuExecutor::HostMemoryRegister(void* location, uint64_t size) {\n  if (location == nullptr || size == 0) {\n    LOG(WARNING) << \"attempting to register null or zero-sized memory: \"\n                 << location << \"; size \" << size;\n  }\n  VLOG(2) << \"registering \" << location << \" size \" << size;\n  return GpuDriver::HostRegister(context_, location, size);\n}\n\nbool GpuExecutor::HostMemoryUnregister(void* location) {\n  VLOG(2) << \"unregistering \" << location;\n  return GpuDriver::HostUnregister(context_, location);\n}\n\nbool GpuExecutor::SynchronizeAllActivity() {\n  return GpuDriver::SynchronizeContext(context_);\n}\n\ntsl::Status GpuExecutor::SynchronousMemZero(DeviceMemoryBase* location,\n                                            uint64_t size) {\n  if (reinterpret_cast<uintptr_t>(location->opaque()) % 4 == 0 &&\n      size % 4 == 0) {\n    return GpuDriver::SynchronousMemsetUint32(\n        context_, AsCudaDevicePtr(location), 0x0, size / 4);\n  }\n  return GpuDriver::SynchronousMemsetUint8(context_, AsCudaDevicePtr(location),\n                                           0x0, size);\n}\n\ntsl::Status GpuExecutor::SynchronousMemSet(DeviceMemoryBase* location,\n                                           int value, uint64_t size) {\n  if (reinterpret_cast<uintptr_t>(location->opaque()) % 4 == 0 &&\n      size % 4 == 0) {\n    // cudaMemset reinterprets \"value\" as a uint8_t.\n    uint8_t byte_value = static_cast<uint8_t>(value);\n    uint32_t pattern = (byte_value << 24) | (byte_value << 16) |\n                       (byte_value << 8) | byte_value;\n    return GpuDriver::SynchronousMemsetUint32(\n        context_, AsCudaDevicePtr(location), pattern, size / 4);\n  }\n  return GpuDriver::SynchronousMemsetUint8(context_, AsCudaDevicePtr(location),\n                                           value, size);\n}\n\ntsl::Status GpuExecutor::SynchronousMemcpy(DeviceMemoryBase* gpu_dst,\n                                           const void* host_src,\n                                           uint64_t size) {\n  return GpuDriver::SynchronousMemcpyH2D(context_, AsCudaDevicePtr(gpu_dst),\n                                         host_src, size);\n}\n\ntsl::Status GpuExecutor::SynchronousMemcpy(void* host_dst,\n                                           const DeviceMemoryBase& gpu_src,\n                                           uint64_t size) {\n  return GpuDriver::SynchronousMemcpyD2H(context_, host_dst,\n                                         AsCudaDevicePtr(gpu_src), size);\n}\n\ntsl::Status GpuExecutor::SynchronousMemcpyDeviceToDevice(\n    DeviceMemoryBase* gpu_dst, const DeviceMemoryBase& gpu_src, uint64_t size) {\n  return GpuDriver::SynchronousMemcpyD2D(context_, AsCudaDevicePtr(gpu_dst),\n                                         AsCudaDevicePtr(gpu_src), size);\n}\n\ntsl::Status GpuExecutor::MemZero(Stream* stream, DeviceMemoryBase* location,\n                                 uint64_t size) {\n  if (reinterpret_cast<uintptr_t>(location->opaque()) % 4 == 0 &&\n      size % 4 == 0) {\n    return Memset32(stream, location, 0x0, size);\n  } else {\n    return Memset(stream, location, 0x0, size);\n  }\n}\n\ntsl::Status GpuExecutor::Memset(Stream* stream, DeviceMemoryBase* location,\n                                uint8_t pattern, uint64_t size) {\n  VLOG(2) << \"enqueueing memset8 operation onto stream \" << stream\n          << \" at location \" << location << \" with size \" << size\n          << \" and pattern \" << std::hex << pattern;\n  return GpuDriver::AsynchronousMemsetUint8(context_, AsCudaDevicePtr(location),\n                                            pattern, size,\n                                            AsGpuStreamValue(stream));\n}\n\ntsl::Status GpuExecutor::Memset32(Stream* stream, DeviceMemoryBase* location,\n                                  uint32_t pattern, uint64_t size) {\n  VLOG(2) << \"enqueueing memset32 operation onto stream \" << stream\n          << \" at location \" << location << \" with size \" << size\n          << \" and pattern \" << std::hex << pattern;\n  CHECK(reinterpret_cast<uintptr_t>(location->opaque()) % 4 == 0 &&\n        size % 4 == 0);\n  return GpuDriver::AsynchronousMemsetUint32(\n      context_, AsCudaDevicePtr(location), pattern, size / 4,\n      AsGpuStreamValue(stream));\n}\n\nbool GpuExecutor::Memcpy(Stream* stream, void* host_dst,\n                         const DeviceMemoryBase& gpu_src, uint64_t size) {\n  return GpuDriver::AsynchronousMemcpyD2H(context_, host_dst,\n                                          AsCudaDevicePtr(gpu_src), size,\n                                          AsGpuStreamValue(stream));\n}\n\nbool GpuExecutor::Memcpy(Stream* stream, DeviceMemoryBase* gpu_dst,\n                         const void* host_src, uint64_t size) {\n  return GpuDriver::AsynchronousMemcpyH2D(context_, AsCudaDevicePtr(gpu_dst),\n                                          host_src, size,\n                                          AsGpuStreamValue(stream));\n}\n\nbool GpuExecutor::MemcpyDeviceToDevice(Stream* stream,\n                                       DeviceMemoryBase* gpu_dst,\n                                       const DeviceMemoryBase& gpu_src,\n                                       uint64_t size) {\n  return GpuDriver::AsynchronousMemcpyD2D(context_, AsCudaDevicePtr(gpu_dst),\n                                          AsCudaDevicePtr(gpu_src), size,\n                                          AsGpuStreamValue(stream));\n}\n\nbool GpuExecutor::HostCallback(Stream* stream,\n                               absl::AnyInvocable<tsl::Status() &&> callback) {\n  auto callback_ptr =\n      new absl::AnyInvocable<void() &&>([cb = std::move(callback)]() mutable {\n        tsl::Status s = std::move(cb)();\n        if (!s.ok()) {\n          LOG(WARNING) << \"Host callback failed: \" << s;\n        }\n      });\n  return GpuDriver::AddStreamCallback(context_, AsGpuStreamValue(stream),\n                                      InternalHostCallback, callback_ptr);\n}\n\n/* static */ void GpuExecutor::InternalHostCallback(CUstream stream,\n                                                    CUresult status,\n                                                    void* data) {\n  auto* callback = reinterpret_cast<absl::AnyInvocable<void() &&>*>(data);\n  std::move (*callback)();\n  delete callback;\n}\n\ntsl::Status GpuExecutor::AllocateEvent(Event* event) {\n  return AsGpuEvent(event)->Init();\n}\n\ntsl::Status GpuExecutor::DeallocateEvent(Event* event) {\n  return AsGpuEvent(event)->Destroy();\n}\n\ntsl::Status GpuExecutor::RecordEvent(Stream* stream, Event* event) {\n  return AsGpuEvent(event)->Record(AsGpuStream(stream));\n}\n\ntsl::Status GpuExecutor::WaitForEvent(Stream* stream, Event* event) {\n  if (GpuDriver::WaitStreamOnEvent(context_, AsGpuStream(stream)->gpu_stream(),\n                                   AsGpuEvent(event)->gpu_event())) {\n    return ::tsl::OkStatus();\n  } else {\n    return tsl::Status(\n        port::error::INTERNAL,\n        absl::StrFormat(\"error recording waiting for CUDA event on stream %p\",\n                        stream));\n  }\n}\n\nEvent::Status GpuExecutor::PollForEventStatus(Event* event) {\n  return AsGpuEvent(event)->PollForStatus();\n}\n\nbool GpuExecutor::AllocateStream(Stream* stream) {\n  absl::MutexLock l(&alive_gpu_streams_mu_);\n  bool out = AsGpuStream(stream)->Init();\n  alive_gpu_streams_[stream->implementation()->GpuStreamHack()] = stream;\n  return out;\n}\n\nvoid GpuExecutor::DeallocateStream(Stream* stream) {\n  GpuStream* cuda_stream = AsGpuStream(stream);\n  absl::MutexLock l(&alive_gpu_streams_mu_);\n  alive_gpu_streams_.erase(cuda_stream->GpuStreamHack());\n  if (!cuda_stream->IsIdle()) {\n    LOG(ERROR) << \"Deallocating stream with pending work\";\n  }\n  cuda_stream->Destroy();\n}\n\nbool GpuExecutor::AllocateTimer(Timer* timer) {\n  return AsGpuTimer(timer)->Init();\n}\n\nvoid GpuExecutor::DeallocateTimer(Timer* timer) {\n  AsGpuTimer(timer)->Destroy();\n}\n\nbool GpuExecutor::CreateStreamDependency(Stream* dependent, Stream* other) {\n  CUevent other_completed_event = *AsGpuStream(other)->completed_event();\n  bool ok = GpuDriver::RecordEvent(context_, other_completed_event,\n                                   AsGpuStreamValue(other))\n                .ok();\n  if (!ok) {\n    LOG(ERROR) << \"failed to record completion event; \"\n                  \"therefore, failed to create inter-stream dependency\";\n    return false;\n  }\n\n  return GpuDriver::WaitStreamOnEvent(context_, AsGpuStreamValue(dependent),\n                                      other_completed_event);\n}\n\nbool GpuExecutor::StartTimer(Stream* stream, Timer* timer) {\n  return AsGpuTimer(timer)->Start(AsGpuStream(stream));\n}\n\nbool GpuExecutor::StopTimer(Stream* stream, Timer* timer) {\n  return AsGpuTimer(timer)->Stop(AsGpuStream(stream));\n}\n\ntsl::Status GpuExecutor::BlockHostUntilDone(Stream* stream) {\n  return GpuDriver::SynchronizeStream(context_, AsGpuStreamValue(stream));\n}\n\nblas::BlasSupport* GpuExecutor::CreateBlas() {\n  PluginRegistry* registry = PluginRegistry::Instance();\n  tsl::StatusOr<PluginRegistry::BlasFactory> status =\n      registry->GetFactory<PluginRegistry::BlasFactory>(cuda::kCudaPlatformId,\n                                                        plugin_config_.blas());\n  if (!status.ok()) {\n    LOG(ERROR) << \"Unable to retrieve BLAS factory: \"\n               << status.status().error_message();\n    return nullptr;\n  }\n\n  return status.value()(this);\n}\n\ndnn::DnnSupport* GpuExecutor::CreateDnn() {\n  PluginRegistry* registry = PluginRegistry::Instance();\n  tsl::StatusOr<PluginRegistry::DnnFactory> status =\n      registry->GetFactory<PluginRegistry::DnnFactory>(cuda::kCudaPlatformId,\n                                                       plugin_config_.dnn());\n  if (!status.ok()) {\n    LOG(ERROR) << \"Unable to retrieve DNN factory: \"\n               << status.status().error_message();\n    return nullptr;\n  }\n\n  return status.value()(this);\n}\n\nfft::FftSupport* GpuExecutor::CreateFft() {\n  PluginRegistry* registry = PluginRegistry::Instance();\n  tsl::StatusOr<PluginRegistry::FftFactory> status =\n      registry->GetFactory<PluginRegistry::FftFactory>(cuda::kCudaPlatformId,\n                                                       plugin_config_.fft());\n  if (!status.ok()) {\n    LOG(ERROR) << \"Unable to retrieve FFT factory: \"\n               << status.status().error_message();\n    return nullptr;\n  }\n\n  return status.value()(this);\n}\n\nrng::RngSupport* GpuExecutor::CreateRng() {\n  PluginRegistry* registry = PluginRegistry::Instance();\n  tsl::StatusOr<PluginRegistry::RngFactory> status =\n      registry->GetFactory<PluginRegistry::RngFactory>(cuda::kCudaPlatformId,\n                                                       plugin_config_.rng());\n  if (!status.ok()) {\n    LOG(ERROR) << \"Unable to retrieve RNG factory: \"\n               << status.status().error_message();\n    return nullptr;\n  }\n\n  return status.value()(this);\n}\n\n// TODO(rspringer): Remove in b/18544742.\nbool GpuExecutor::SupportsDnn() const { return true; }\n\nbool GpuExecutor::CanEnablePeerAccessTo(StreamExecutorInterface* other) {\n  GpuExecutor* cuda_other = static_cast<GpuExecutor*>(other);\n  return GpuDriver::CanEnablePeerAccess(context_, cuda_other->context_);\n}\n\ntsl::Status GpuExecutor::EnablePeerAccessTo(StreamExecutorInterface* other) {\n  GpuExecutor* cuda_other = static_cast<GpuExecutor*>(other);\n  return GpuDriver::EnablePeerAccess(context_, cuda_other->context_);\n}\n\nbool GpuExecutor::DeviceMemoryUsage(int64_t* free, int64_t* total) const {\n  return GpuDriver::GetDeviceMemoryInfo(context_, free, total);\n}\n\nbool GpuExecutor::GetSymbol(const std::string& symbol_name,\n                            ModuleHandle module_handle, void** mem,\n                            size_t* bytes) {\n  CHECK(static_cast<bool>(module_handle));\n\n  auto lookup_in_module = [&](CUmodule module) {\n    CHECK(module != nullptr);\n    return GpuDriver::GetModuleSymbol(context_, module, symbol_name.c_str(),\n                                      reinterpret_cast<CUdeviceptr*>(mem),\n                                      bytes);\n  };\n\n  {  // give limited scope to mutex_lock\n    absl::MutexLock lock{&in_memory_modules_mu_};\n    auto it = gpu_binary_to_module_.find(module_handle.id());\n    CHECK(it != gpu_binary_to_module_.end());\n    return lookup_in_module(it->second.first);\n  }\n\n  LOG(INFO) << \"Failed to find symbol: \" << symbol_name;\n  return false;\n}\n\nbool FillBlockDimLimit(GpuDeviceHandle device, BlockDim* block_dim_limit) {\n  // The BlockDim name is a mismatch against these GRID_DIM_* queries because\n  // we use BlockDims to express the dimensions of blocks within a grid\n  // (as opposed to ThreadDim which expresses the dimensions of threads\n  // within a block).\n  int x, y, z;\n  if (!GpuDriver::GetGridLimits(&x, &y, &z, device)) {\n    return false;\n  }\n\n  block_dim_limit->x = x;\n  block_dim_limit->y = y;\n  block_dim_limit->z = z;\n  return true;\n}\n\nbool GpuExecutor::SupportsBlas() const { return true; }\n\nbool GpuExecutor::SupportsFft() const { return true; }\n\nbool GpuExecutor::SupportsRng() const { return true; }\n\nstd::unique_ptr<internal::EventInterface>\nGpuExecutor::CreateEventImplementation() {\n  return std::unique_ptr<internal::EventInterface>(new GpuEvent(this));\n}\n\nstd::unique_ptr<internal::KernelInterface>\nGpuExecutor::CreateKernelImplementation() {\n  return std::unique_ptr<internal::KernelInterface>(new GpuKernel());\n}\n\nstd::unique_ptr<internal::StreamInterface>\nGpuExecutor::GetStreamImplementation() {\n  return std::unique_ptr<internal::StreamInterface>(new GpuStream(this));\n}\n\nstd::unique_ptr<internal::TimerInterface>\nGpuExecutor::GetTimerImplementation() {\n  return std::unique_ptr<internal::TimerInterface>(new GpuTimer(this));\n}\n\nvoid* GpuExecutor::GpuContextHack() { return context_; }\n\nGpuContext* GpuExecutor::gpu_context() { return context_; }\n\n// Attempts to read the NUMA node corresponding to the GPU device's PCI bus out\n// of SysFS. Returns -1 if it cannot.\n//\n// For anything more complicated/prod-focused than this, you'll likely want to\n// turn to gsys' topology modeling.\nstatic int TryToReadNumaNode(const std::string& pci_bus_id,\n                             int device_ordinal) {\n#if defined(__APPLE__)\n  LOG(INFO) << \"OS X does not support NUMA - returning NUMA node zero\";\n  return 0;\n#elif defined(PLATFORM_WINDOWS)\n  // Windows support for NUMA is not currently implemented. Return node 0.\n  return 0;\n#else\n  VLOG(2) << \"trying to read NUMA node for device ordinal: \" << device_ordinal;\n  static const int kUnknownNumaNode = -1;\n\n  if (pci_bus_id.empty()) {\n    LOG(INFO) << \"no PCI bus ID for device ordinal: \" << device_ordinal;\n    return kUnknownNumaNode;\n  }\n\n  std::string filename =\n      absl::StrFormat(\"/sys/bus/pci/devices/%s/numa_node\", pci_bus_id);\n\n  // We have to use fopen/fread here so that the device properties can be\n  // populated before InitGoogle procedure has been completed (at which point we\n  // could use the file::* utilities).\n  FILE* file = fopen(filename.c_str(), \"r\");\n  if (file == nullptr) {\n    LOG(INFO) << \"could not open file to read NUMA node: \" << filename\n              << \"\\nYour kernel may have been built without NUMA support.\";\n    return kUnknownNumaNode;\n  }\n\n  std::string content;\n  char buf[32];\n  size_t did_read = fread(buf, sizeof(buf[0]), sizeof(buf) - 1, file);\n  buf[did_read] = '\\0';\n  content = buf;\n\n  int32_t value;\n  if (absl::SimpleAtoi(content, &value)) {\n    if (value < 0) {  // See http://b/18228951 for details on this path.\n      LOG(INFO) << \"successful NUMA node read from SysFS had negative value (\"\n                << value\n                << \"), but there must be at least one NUMA node\"\n                   \", so returning NUMA node zero.\"\n                   \" See more at \"\n                   \"https://github.com/torvalds/linux/blob/v6.0/Documentation/\"\n                   \"ABI/testing/sysfs-bus-pci#L344-L355\";\n      fclose(file);\n      return 0;\n    }\n    fclose(file);\n    return value;\n  }\n\n  LOG(WARNING)\n      << \"could not convert SysFS file contents to integral NUMA node value: \"\n      << content;\n\n  fclose(file);\n  return kUnknownNumaNode;\n#endif\n}\n\ntsl::StatusOr<std::unique_ptr<DeviceDescription>>\nGpuExecutor::CreateDeviceDescription(int device_ordinal) {\n  GpuDeviceHandle device;\n  auto status = GpuDriver::GetDevice(device_ordinal, &device);\n  if (!status.ok()) {\n    return status;\n  }\n\n  int cc_major;\n  int cc_minor;\n  status = GpuDriver::GetComputeCapability(&cc_major, &cc_minor, device);\n  if (!status.ok()) {\n    return status;\n  }\n\n  internal::DeviceDescriptionBuilder builder;\n\n  {\n    int driver_version = 0;\n    (void)GpuDriver::GetDriverVersion(&driver_version);\n    std::string augmented_driver_version = absl::StrFormat(\n        \"%d (%s)\", driver_version,\n        cuda::DriverVersionStatusToString(Diagnostician::FindDsoVersion()));\n    builder.set_driver_version(augmented_driver_version);\n  }\n\n  {\n    std::string pci_bus_id = GpuDriver::GetPCIBusID(device);\n\n    // Lower the hex characters to match sysfs.\n    pci_bus_id = absl::AsciiStrToLower(pci_bus_id);\n    builder.set_pci_bus_id(pci_bus_id);\n\n    // Read the NUMA node corresponding to the PCI bus ID out of sysfs.\n    int numa_node = TryToReadNumaNode(pci_bus_id, device_ordinal);\n    builder.set_numa_node(numa_node);\n  }\n\n  {\n    builder.set_threads_per_block_limit(\n        GpuDriver::GetDeviceAttribute(CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK,\n                                      device)\n            .value());\n\n    ThreadDim thread_dim_limit;\n    thread_dim_limit.x = GpuDriver::GetDeviceAttribute(\n                             CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X, device)\n                             .value();\n    thread_dim_limit.y = GpuDriver::GetDeviceAttribute(\n                             CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y, device)\n                             .value();\n    thread_dim_limit.z = GpuDriver::GetDeviceAttribute(\n                             CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z, device)\n                             .value();\n    builder.set_thread_dim_limit(thread_dim_limit);\n  }\n\n  int sm_clock_khz =\n      GpuDriver::GetDeviceAttribute(CU_DEVICE_ATTRIBUTE_CLOCK_RATE, device)\n          .value();\n  builder.set_clock_rate_ghz(static_cast<float>(sm_clock_khz) / 1e6);\n\n  {\n    bool ecc_enabled = false;\n    (void)GpuDriver::IsEccEnabled(device, &ecc_enabled);\n    builder.set_ecc_enabled(ecc_enabled);\n  }\n\n  uint64_t device_memory_size = static_cast<uint64_t>(-1);\n  (void)GpuDriver::GetDeviceTotalMemory(device, &device_memory_size);\n  builder.set_device_memory_size(device_memory_size);\n\n  int64_t l2_cache_bytes =\n      GpuDriver::GetDeviceAttribute(CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE, device)\n          .value();\n  builder.set_l2_cache_size(l2_cache_bytes);\n\n  tsl::StatusOr<int> mem_clock_khz = GpuDriver::GetDeviceAttribute(\n      CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, device_ordinal);\n  tsl::StatusOr<int> mem_bus_width_bits = GpuDriver::GetDeviceAttribute(\n      CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH, device_ordinal);\n  if (mem_clock_khz.ok() && mem_bus_width_bits.ok()) {\n    // Times 2 because HBM is DDR memory; it gets two data bits per each data\n    // lane.\n    builder.set_memory_bandwidth(2 * int64_t{mem_clock_khz.value()} * 1000 *\n                                 int64_t{mem_bus_width_bits.value()} / 8);\n  }\n\n  {\n    BlockDim block_dim_limit;\n    FillBlockDimLimit(device, &block_dim_limit);\n    builder.set_block_dim_limit(block_dim_limit);\n  }\n\n  {\n    std::string device_name;\n    TF_RETURN_IF_ERROR(GpuDriver::GetDeviceName(device, &device_name));\n    builder.set_name(device_name);\n  }\n\n  builder.set_platform_version(\n      absl::StrCat(\"Compute Capability \", cc_major, \".\", cc_minor));\n\n  // TODO(leary) should be a way to query this from the driver, but this is\n  // unlikely to change for us any time soon.\n  builder.set_device_address_bits(64);\n\n  builder.set_device_vendor(\"NVIDIA Corporation\");\n  builder.set_cuda_compute_capability(cc_major, cc_minor);\n  builder.set_shared_memory_per_core(\n      GpuDriver::GetMaxSharedMemoryPerCore(device).value());\n  builder.set_shared_memory_per_block(\n      GpuDriver::GetMaxSharedMemoryPerBlock(device).value());\n  int core_count = GpuDriver::GetMultiprocessorCount(device).value();\n  builder.set_core_count(core_count);\n  builder.set_fpus_per_core(fpus_per_core(cc_major, cc_minor));\n  builder.set_threads_per_core_limit(\n      GpuDriver::GetMaxThreadsPerMultiprocessor(device).value());\n  builder.set_registers_per_block_limit(\n      GpuDriver::GetMaxRegistersPerBlock(device).value());\n  builder.set_threads_per_warp(GpuDriver::GetThreadsPerWarp(device).value());\n  builder.set_registers_per_core_limit(\n      GpuDriver::GetDeviceAttribute(\n          CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR, device)\n          .value());\n\n  auto value_or = [](const auto& status_or, auto default_val) {\n    if (status_or.ok()) return *status_or;\n    return default_val;\n  };\n\n  // It would be better to use the PCI device ID or some other truly unique\n  // identifier for the GPU model.  But getting this requires using NVML or\n  // other hacks, which we don't have access to in OSS TensorFlow.\n  //\n  // Alternatively you might be tempted to use GpuDriver::GetDeviceName as a\n  // unique identifier, but this is not stable across GPU VBIOS versions.\n  //\n  // For now, this identifier is good enough.\n  builder.set_model_str(absl::StrFormat(\n      \"sm_%d.%d with %dB RAM, %d cores, %dKHz clock, %dKHz mem clock, %dB L2$\",\n      cc_major, cc_minor, device_memory_size, core_count, sm_clock_khz,\n      value_or(mem_clock_khz, 0), l2_cache_bytes));\n\n  return builder.Build();\n}\n\n}  // namespace gpu\n\n}  // namespace stream_executor\n\nREGISTER_MODULE_INITIALIZER(cuda_gpu_executor, {});"