"/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/compiler/xla/stream_executor/platform.h\"\n\n#include \"absl/strings/str_cat.h\"\n#include \"tensorflow/compiler/xla/stream_executor/lib/error.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/logging.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/port.h\"\n#include \"tensorflow/compiler/xla/stream_executor/stream_executor_pimpl.h\"\n\nnamespace stream_executor {\n\nstd::string PlatformKindString(PlatformKind kind) {\n  switch (kind) {\n    case PlatformKind::kCuda:\n      return \"CUDA\";\n    case PlatformKind::kROCm:\n      return \"ROCm\";\n    case PlatformKind::kOpenCL:\n      return \"OpenCL\";\n    case PlatformKind::kHost:\n      return \"Host\";\n    case PlatformKind::kMock:\n      return \"Mock\";\n    default:\n      return absl::StrCat(\"InvalidPlatformKind(\", static_cast<int>(kind), \")\");\n  }\n}\n\nPlatformKind PlatformKindFromString(std::string kind) {\n  for (int i = 0; i < static_cast<int>(PlatformKind::kSize); ++i) {\n    if (kind == PlatformKindString(static_cast<PlatformKind>(i))) {\n      return static_cast<PlatformKind>(i);\n    }\n  }\n\n  return PlatformKind::kInvalid;\n}\n\nbool PlatformIsRunnable(PlatformKind kind) {\n  switch (kind) {\n    case PlatformKind::kCuda:\n    case PlatformKind::kROCm:\n    case PlatformKind::kOpenCL:\n    case PlatformKind::kHost:\n      return true;\n    default:\n      return false;\n  }\n}\n\nbool PlatformIsRunnableOnDevice(PlatformKind kind) {\n  switch (kind) {\n    case PlatformKind::kCuda:\n    case PlatformKind::kROCm:\n    case PlatformKind::kOpenCL:\n      return true;\n    default:\n      return false;\n  }\n}\n\nvoid CheckPlatformKindIsValid(PlatformKind kind) {\n  CHECK(static_cast<int>(PlatformKind::kCuda) <= static_cast<int>(kind) &&\n        static_cast<int>(kind) <= static_cast<int>(PlatformKind::kMock))\n      << \"invalid GPU executor kind: \" << PlatformKindString(kind);\n}\n\nStreamExecutorConfig::StreamExecutorConfig()\n    : ordinal(-1), device_options(DeviceOptions::Default()) {}\n\nStreamExecutorConfig::StreamExecutorConfig(int ordinal_in)\n    : ordinal(ordinal_in), device_options(DeviceOptions::Default()) {}\n\nPlatform::~Platform() {}\n\nbool Platform::Initialized() const { return true; }\n\ntsl::Status Platform::Initialize(\n    const std::map<std::string, std::string> &platform_options) {\n  if (!platform_options.empty()) {\n    return tsl::Status(port::error::UNIMPLEMENTED,\n                       \"this platform does not support custom initialization\");\n  }\n  return ::tsl::OkStatus();\n}\n\ntsl::Status Platform::ForceExecutorShutdown() {\n  return tsl::Status(port::error::UNIMPLEMENTED,\n                     \"executor shutdown is not supported on this platform\");\n}\n\nstd::unique_ptr<Platform::PeerAccessMap> Platform::GetPeerAccessMap() {\n  auto *map = new PeerAccessMap;\n\n  int device_count = VisibleDeviceCount();\n  for (int i = 0; i < device_count; ++i) {\n    for (int j = 0; j < device_count; ++j) {\n      StreamExecutor *from = ExecutorForDevice(i).value();\n      StreamExecutor *to = ExecutorForDevice(j).value();\n      (*map)[{i, j}] = from->CanEnablePeerAccessTo(to);\n    }\n  }\n\n  return std::unique_ptr<Platform::PeerAccessMap>{map};\n}\n\ntsl::Status Platform::EnablePeerAccess() {\n  auto peer_access_map = GetPeerAccessMap();\n  for (const auto &access : *peer_access_map) {\n    auto devices = access.first;\n    if (access.second) {\n      StreamExecutor *from = ExecutorForDevice(devices.first).value();\n      StreamExecutor *to = ExecutorForDevice(devices.second).value();\n      auto status = from->EnablePeerAccessTo(to);\n      if (!status.ok()) {\n        return status;\n      }\n    } else {\n      LOG(INFO) << \"cannot enable peer access from device ordinal \"\n                << devices.first << \" to device ordinal \" << devices.second;\n    }\n  }\n  return ::tsl::OkStatus();\n}\n\n}  // namespace stream_executor"