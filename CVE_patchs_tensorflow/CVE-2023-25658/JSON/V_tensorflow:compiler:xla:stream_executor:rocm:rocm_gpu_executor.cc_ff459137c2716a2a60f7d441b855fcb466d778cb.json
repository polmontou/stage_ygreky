"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <unistd.h>\n\n#include \"absl/base/casts.h\"\n#include \"absl/functional/any_invocable.h\"\n#include \"absl/strings/ascii.h\"\n#include \"absl/strings/numbers.h\"\n#include \"absl/strings/str_cat.h\"\n#include \"absl/strings/str_format.h\"\n#include \"absl/strings/str_join.h\"\n#include \"tensorflow/compiler/xla/stream_executor/gpu/gpu_driver.h\"\n#include \"tensorflow/compiler/xla/stream_executor/gpu/gpu_event.h\"\n#include \"tensorflow/compiler/xla/stream_executor/gpu/gpu_executor.h\"\n#include \"tensorflow/compiler/xla/stream_executor/gpu/gpu_stream.h\"\n#include \"tensorflow/compiler/xla/stream_executor/gpu/gpu_timer.h\"\n#include \"tensorflow/compiler/xla/stream_executor/kernel_cache_config.h\"\n#include \"tensorflow/compiler/xla/stream_executor/lib/error.h\"\n#include \"tensorflow/compiler/xla/stream_executor/lib/initialize.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/dso_loader.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/logging.h\"\n#include \"tensorflow/compiler/xla/stream_executor/platform/port.h\"\n#include \"tensorflow/compiler/xla/stream_executor/plugin_registry.h\"\n#include \"tensorflow/compiler/xla/stream_executor/rocm/rocm_diagnostics.h\"\n#include \"tensorflow/compiler/xla/stream_executor/rocm/rocm_platform_id.h\"\n#include \"tensorflow/compiler/xla/stream_executor/stream.h\"\n#include \"tensorflow/compiler/xla/stream_executor/stream_executor_internal.h\"\n#include \"tensorflow/compiler/xla/stream_executor/stream_executor_pimpl.h\"\n#include \"tensorflow/compiler/xla/stream_executor/timer.h\"\n#include \"tensorflow/tsl/platform/env.h\"\n\n#ifdef PLATFORMS_GPUS_ROCM_DYNAMIC_LIBROCM_DYNAMIC_LIBROCM_H_\n#error \\\n    \"No driver calls in this file, wrap driver functionality in rocm_driver.cc.\"\n#endif\n\n#ifdef __ROCM_RUNTIME_H__\n#error \\\n    \"ROCM runtime being included into ROCM GPU executor; should be driver only.\"\n#endif\n\nnamespace stream_executor {\nnamespace gpu {\n\nstatic GpuEvent* AsGpuEvent(Event* event) {\n  DCHECK(event != nullptr);\n  return static_cast<GpuEvent*>(event->implementation());\n}\n\n// Given a platform-independent timer datatype, returns the internal ROCM\n// platform implementation pointer.\nstatic GpuTimer* AsGpuTimer(Timer* timer) {\n  DCHECK(timer != nullptr);\n  return static_cast<GpuTimer*>(timer->implementation());\n}\n\n// Given const GPU memory, returns a librocm device pointer datatype, suitable\n// for passing directly to librocm APIs.\n//\n// N.B. we must lose constness in order to pass a suitable type to the existing\n// librocm APIs, so the caller should take care to only pass the result of const\n// GPU memory conversions to librocm functions which will honor constness.\nstatic hipDeviceptr_t AsROCmDevicePtr(const DeviceMemoryBase& gpu_mem) {\n  return const_cast<hipDeviceptr_t>(gpu_mem.opaque());\n}\n\n// See description on const version above.\nstatic hipDeviceptr_t AsROCmDevicePtr(DeviceMemoryBase* gpu_mem) {\n  return AsROCmDevicePtr(*gpu_mem);\n}\n\nstatic GpuContext* GetGpuContext(Stream* stream) {\n  return static_cast<GpuExecutor*>(stream->parent()->implementation())\n      ->gpu_context();\n}\n\nGpuContext* ExtractGpuContext(GpuExecutor* rocm_exec) {\n  CHECK(rocm_exec != nullptr);\n  return rocm_exec->gpu_context();\n}\n\nGpuExecutor::~GpuExecutor() {\n  for (auto& it : disk_modules_) {\n    GpuDriver::UnloadModule(context_, it.second);\n  }\n  for (auto& it : in_memory_modules_) {\n    GpuDriver::UnloadModule(context_, it.second);\n  }\n  if (context_ != nullptr) {\n    GpuDriver::DestroyContext(context_);\n  }\n  CHECK(kernel_to_gpu_binary_.empty()) << \"GpuExecutor has live kernels.\";\n  CHECK(gpu_binary_to_module_.empty()) << \"GpuExecutor has loaded modules.\";\n}\nbool GpuExecutor::UnloadModule(ModuleHandle module_handle) {\n  const char* gpu_binary = reinterpret_cast<const char*>(module_handle.id());\n  absl::MutexLock lock{&in_memory_modules_mu_};\n  return UnloadGpuBinary(gpu_binary);\n}\n\ntsl::StatusOr<std::shared_ptr<DeviceMemoryBase>>\nGpuExecutor::CreateOrShareConstant(Stream* stream,\n                                   const std::vector<uint8_t>& content) {\n  return tsl::errors::Unimplemented(\"Not implemented for ROCm\");\n}\n\nbool GpuExecutor::UnloadGpuBinary(const void* gpu_binary) {\n  auto module_it = gpu_binary_to_module_.find(gpu_binary);\n  if (gpu_binary_to_module_.end() == module_it) {\n    VLOG(3) << \"No loaded  HSACO module for \" << gpu_binary;\n    return false;\n  }\n  auto& module = module_it->second.first;\n  auto& refcount = module_it->second.second;\n  VLOG(3) << \"Found HSACO module \" << module << \" with refcount \" << refcount;\n  if (--refcount == 0) {\n    VLOG(3) << \"Unloading  HSACO module \" << module;\n    GpuDriver::UnloadModule(context_, module);\n    gpu_binary_to_module_.erase(module_it);\n    const char* mem_it = nullptr;\n    for (auto x : in_memory_modules_) {\n      if (x.second == module) mem_it = x.first;\n    }\n    if (mem_it != nullptr) in_memory_modules_.erase(mem_it);\n  }\n  return true;\n}\n\nvoid GpuExecutor::UnloadKernel(const KernelBase* kernel) {\n  VLOG(3) << \"Unloading kernel \" << kernel << \" : \" << kernel->name();\n\n  absl::MutexLock lock{&in_memory_modules_mu_};\n  auto gpu_binary_it = kernel_to_gpu_binary_.find(kernel);\n  if (kernel_to_gpu_binary_.end() == gpu_binary_it) {\n    VLOG(3) << \"Kernel \" << kernel << \" : \" << kernel->name()\n            << \" has never been loaded.\";\n    return;  // We've never seen this kernel.\n  }\n  VLOG(3) << \"Kernel \" << kernel << \" : \" << kernel->name()\n          << \" has loaded GPU code \" << gpu_binary_it->second;\n  UnloadGpuBinary(gpu_binary_it->second);\n  kernel_to_gpu_binary_.erase(gpu_binary_it);\n}\n\ntsl::Status GpuExecutor::Init(int device_ordinal,\n                              DeviceOptions device_options) {\n  device_ordinal_ = device_ordinal;\n\n  auto status = GpuDriver::Init();\n  if (!status.ok()) {\n    return status;\n  }\n\n  status = GpuDriver::GetDevice(device_ordinal_, &device_);\n  if (!status.ok()) {\n    return status;\n  }\n\n  status = GpuDriver::CreateContext(device_ordinal_, device_, device_options,\n                                    &context_);\n  if (!status.ok()) {\n    return status;\n  }\n\n  return GpuDriver::GetGpuISAVersion(&version_, device_);\n}\n\nbool GpuExecutor::FindOnDiskForComputeCapability(\n    absl::string_view filename, absl::string_view canonical_suffix,\n    string* found_filename) const {\n  LOG(FATAL) << \"Feature not supported on ROCM platform \"\n                \"(FindOnDiskForComputeCapability)\";\n  return false;\n}\n\nbool GpuExecutor::FindOnDiskForISAVersion(absl::string_view filename,\n                                          absl::string_view canonical_suffix,\n                                          string* found_filename) const {\n  if (version_ == 0) {\n    return false;\n  }\n\n  string cc_specific =\n      absl::StrCat(filename, \".cc\", version_, canonical_suffix);\n  if (tsl::Env::Default()->FileExists(cc_specific).ok()) {\n    VLOG(2) << \"found AMDGPU ISA version-specific file, using that: \"\n            << cc_specific;\n    *found_filename = cc_specific;\n    return true;\n  }\n\n  VLOG(2) << \"could not find AMDGPU ISA version-specific file at: \"\n          << cc_specific;\n  if (tsl::Env::Default()->FileExists(string(filename)).ok()) {\n    *found_filename = string(filename);\n    return true;\n  }\n\n  return false;\n}\n\n// Returns the path to the running executable.\n// N.B. Derived from //knowledge/smalltalk/background_kb.cc\n// Arg: strip_exe: if true, remove the name of the executable itself from the\n//                 returned string. Example: calling this from /usr/bin/foo\n//                 would return /usr/bin.\nstatic string GetBinaryDir(bool strip_exe) {\n  char exe_path[PATH_MAX] = {0};\n  PCHECK(readlink(\"/proc/self/exe\", exe_path, sizeof(exe_path) - 1) != -1);\n  // Make sure it's null-terminated:\n  exe_path[sizeof(exe_path) - 1] = 0;\n\n  if (strip_exe) {\n    // The exe is the last component of the path, so remove one component.\n    string ret = exe_path;\n    std::vector<string> components = absl::StrSplit(exe_path, '/');\n    components.pop_back();\n    return absl::StrJoin(components, \"/\");\n  }\n  return exe_path;\n}\n\ntsl::Status GpuExecutor::GetKernel(const MultiKernelLoaderSpec& spec,\n                                   KernelBase* kernel) {\n  GpuKernel* rocm_kernel = AsGpuKernel(kernel);\n  hipModule_t module = nullptr;\n  const string* kernelname;\n\n  const OnDiskKernelLoaderSpec* on_disk_spec = nullptr;\n  bool has_cubin = spec.has_cuda_cubin_on_disk();\n  if (has_cubin) {\n    on_disk_spec = &spec.cuda_cubin_on_disk();\n  }\n\n  if (on_disk_spec != nullptr) {\n    return tsl::errors::Internal(\n        \"Loading ROCM kernel from disk is not supported\");\n  } else if (spec.has_cuda_cubin_in_memory()) {\n    kernelname = &spec.cuda_cubin_in_memory().kernelname();\n\n    const char* hsaco = spec.cuda_cubin_in_memory().bytes();\n    absl::MutexLock lock{&in_memory_modules_mu_};\n    module = in_memory_modules_[hsaco];\n\n    if (module == nullptr) {\n      TF_RETURN_IF_ERROR(GpuDriver::LoadHsaco(context_, hsaco, &module));\n    }\n    kernel_to_gpu_binary_[kernel] = hsaco;\n  } else {\n    return tsl::errors::Internal(\"No method of loading ROCM kernel provided\");\n  }\n\n  VLOG(2) << \"getting function \" << *kernelname << \" from module \" << module;\n  if (!GpuDriver::GetModuleFunction(context_, module, kernelname->c_str(),\n                                    rocm_kernel->gpu_function_ptr())) {\n    return tsl::errors::Internal(\"Failed getting module function\");\n  }\n\n  // We have to trust the kernel loader spec arity because there doesn't appear\n  // to be a way to reflect on the number of expected arguments w/the ROCM API.\n  rocm_kernel->set_arity(spec.arity());\n\n  KernelMetadata kernel_metadata;\n  TF_RETURN_IF_ERROR(GetKernelMetadata(rocm_kernel, &kernel_metadata));\n  kernel->set_metadata(kernel_metadata);\n  kernel->set_name(*kernelname);\n  return tsl::OkStatus();\n}\n\ntsl::Status GpuExecutor::GetKernelMetadata(GpuKernel* rocm_kernel,\n                                           KernelMetadata* kernel_metadata) {\n  int value = 0;\n  // TODO(ROCm) implement this feature in HIP\n  kernel_metadata->set_registers_per_thread(value);\n\n  // TODO(ROCm) implement this feature in HIP\n  kernel_metadata->set_shared_memory_bytes(value);\n  return tsl::OkStatus();\n}\n\ntsl::Status GpuExecutor::Launch(Stream* stream, const ThreadDim& thread_dims,\n                                const BlockDim& block_dims,\n                                const KernelBase& kernel,\n                                const KernelArgsArrayBase& args) {\n  CHECK_EQ(kernel.Arity(), args.number_of_arguments());\n  GpuStreamHandle hipstream = AsGpuStreamValue(stream);\n  const GpuKernel* rocm_kernel = AsGpuKernel(&kernel);\n  hipFunction_t hipfunc = rocm_kernel->AsGpuFunctionHandle();\n\n  // Only perform/print the occupancy check once.  Even just checking to see\n  // whether we've done an occupancy check on this kernel before isn't free\n  // (because we have to synchronize), so we only do this at -v 2+.\n  if (VLOG_IS_ON(2)) {\n    absl::MutexLock lock(&launched_kernels_mu_);\n    if (!launched_kernels_.count(hipfunc)) {\n      VlogOccupancyInfo(kernel, thread_dims, block_dims);\n      // TODO(rspringer): Remove elements from launched_kernels_...if we ever\n      // expose a kernel/module deallocation method.\n      launched_kernels_.insert(hipfunc);\n    }\n  }\n\n  if (rocm_kernel->GetPreferredCacheConfig() !=\n      KernelCacheConfig::kNoPreference) {\n    TF_RETURN_IF_ERROR(GpuDriver::FuncSetCacheConfig(\n        hipfunc, rocm_kernel->GetGpuCacheConfig()));\n  }\n\n  // prepare kernargs\n  // KernelArgsArrayBase keeps the pointer of arguments\n  // deference them here\n  std::vector<void*> kernargs;\n  KernelArgIterator iter = args.arg_iterator();\n  while (iter.has_next()) {\n    KernelArg arg = iter.next();\n    VLOG(2) << \"*(arg.address): \"\n            << reinterpret_cast<void*>(\n                   *static_cast<const uint64_t*>(arg.address));\n    kernargs.push_back(\n        reinterpret_cast<void*>(*static_cast<const uint64_t*>(arg.address)));\n  }\n\n  size_t size = sizeof(void*) * kernargs.size();\n  void* config[] = {HIP_LAUNCH_PARAM_BUFFER_POINTER, kernargs.data(),\n                    HIP_LAUNCH_PARAM_BUFFER_SIZE, &size, HIP_LAUNCH_PARAM_END};\n\n  return GpuDriver::LaunchKernel(\n      GetGpuContext(stream), kernel.name(), hipfunc, block_dims.x, block_dims.y,\n      block_dims.z, thread_dims.x, thread_dims.y, thread_dims.z,\n      args.number_of_shared_bytes(), hipstream, nullptr, (void**)&config);\n}\n\nint GpuExecutor::CalculateOccupancy(const DeviceDescription& device_description,\n                                    uint64_t registers_per_thread,\n                                    uint64_t shared_memory_per_block,\n                                    const ThreadDim& thread_dims,\n                                    GpuFunctionHandle func) {\n  LOG(FATAL) << \"Feature not supported on ROCM platform (CalculateOccupancy)\";\n  return 0;\n}\n\nint GpuExecutor::CompareOccupancy(int* initial_blocks,\n                                  const DeviceDescription& device_description,\n                                  uint64_t registers_per_thread,\n                                  uint64_t shared_memory_per_block,\n                                  const ThreadDim& thread_dims,\n                                  GpuFunctionHandle func) {\n  LOG(FATAL) << \"Feature not supported on ROCM platform (CompareOccupancy)\";\n  return 0;\n}\n\ntsl::Status GpuExecutor::LoadModule(const MultiModuleLoaderSpec& spec,\n                                    ModuleHandle* module_handle) {\n  // In GpuExecutor we store the pointer to the  HSACO binary  as\n  // ModuleHandle::id().\n  hipModule_t hip_module = nullptr;\n  // TODO(ROCm): Need  generic term instead of cubin/cuda/ptx\n  if (spec.has_cuda_cubin_in_memory()) {\n    absl::MutexLock lock{&in_memory_modules_mu_};\n    TF_RETURN_IF_ERROR(LoadModuleFromHsaco(\n        reinterpret_cast<const char*>(spec.cuda_cubin_in_memory().data()),\n        &hip_module));\n    *module_handle = ModuleHandle(const_cast<void*>(\n        static_cast<const void*>(spec.cuda_cubin_in_memory().data())));\n    return tsl::OkStatus();\n  } else {\n    return tsl::errors::Internal(\"No HASCO binary found\");\n  }\n}\n\ntsl::Status GpuExecutor::LoadModuleFromCuBin(const char* cubin,\n                                             hipModule_t* module) {\n  LOG(FATAL) << \"Feature not supported on ROCM platform (LoadModuleFromCuBin)\";\n}\n\ntsl::Status GpuExecutor::LoadModuleFromPtx(const char* ptx,\n                                           hipModule_t* module) {\n  LOG(FATAL) << \"Feature not supported on ROCM platform (LoadModuleFromPtx)\";\n}\n\ntsl::Status GpuExecutor::LoadModuleFromHsaco(const char* hsaco,\n                                             hipModule_t* module) {\n  uint64_t module_refcount;\n  std::tie(*module, module_refcount) = gpu_binary_to_module_[hsaco];\n\n  if (*module == nullptr) {\n    TF_RETURN_IF_ERROR(GpuDriver::LoadHsaco(context_, hsaco, module));\n    module_refcount = 1;\n    in_memory_modules_[hsaco] = *module;\n    VLOG(3) << \"Loaded HSACO \" << static_cast<const void*>(hsaco)\n            << \" as module \" << *module;\n  } else {\n    ++module_refcount;\n    VLOG(3) << \"HSACO \" << static_cast<const void*>(hsaco)\n            << \" is already loaded as module \" << *module;\n  }\n  gpu_binary_to_module_[hsaco] = {*module, module_refcount};\n  return tsl::OkStatus();\n}\n\n// This is a non-essential operation; if there's a failure, proceed without\n// logging an error. It's nearly certain that in case of failures, we'd never\n// get here in the first place; these are very low-impact routines.\nvoid GpuExecutor::VlogOccupancyInfo(const KernelBase& kernel,\n                                    const ThreadDim& thread_dims,\n                                    const BlockDim& block_dims) {\n  // TODO(ROCm) implement this feature in HIP\n}\n\nDeviceMemoryBase GpuExecutor::Allocate(uint64_t size, int64_t memory_space) {\n  CHECK_EQ(memory_space, 0);\n  return DeviceMemoryBase(GpuDriver::DeviceAllocate(context_, size), size);\n}\n\nvoid* GpuExecutor::GetSubBuffer(DeviceMemoryBase* mem, uint64_t offset_bytes,\n                                uint64_t size_bytes) {\n  // offset and size are in bytes, so char* works as the pointer type.\n  return reinterpret_cast<char*>(mem->opaque()) + offset_bytes;\n}\n\nvoid GpuExecutor::Deallocate(DeviceMemoryBase* mem) {\n  GpuDriver::DeviceDeallocate(context_, mem->opaque());\n}\n\nbool GpuExecutor::HostMemoryRegister(void* location, uint64_t size) {\n  if (location == nullptr || size == 0) {\n    LOG(WARNING) << \"attempting to register null or zero-sized memory: \"\n                 << location << \"; size \" << size;\n  }\n  VLOG(2) << \"registering \" << location << \" size \" << size;\n  return GpuDriver::HostRegister(context_, location, size);\n}\n\nbool GpuExecutor::HostMemoryUnregister(void* location) {\n  VLOG(2) << \"unregistering \" << location;\n  return GpuDriver::HostUnregister(context_, location);\n}\n\nbool GpuExecutor::SynchronizeAllActivity() {\n  return GpuDriver::SynchronizeContext(context_);\n}\n\ntsl::Status GpuExecutor::SynchronousMemZero(DeviceMemoryBase* location,\n                                            uint64_t size) {\n  if (reinterpret_cast<uintptr_t>(location->opaque()) % 4 == 0 &&\n      size % 4 == 0) {\n    return GpuDriver::SynchronousMemsetUint32(\n        context_, AsROCmDevicePtr(location), 0x0, size / 4);\n  }\n  return GpuDriver::SynchronousMemsetUint8(context_, AsROCmDevicePtr(location),\n                                           0x0, size);\n}\n\ntsl::Status GpuExecutor::SynchronousMemSet(DeviceMemoryBase* location,\n                                           int value, uint64_t size) {\n  if (reinterpret_cast<uintptr_t>(location->opaque()) % 4 == 0 &&\n      size % 4 == 0) {\n    // hipMemset reinterprets \"value\" as a uint8.\n    uint8 byte_value = static_cast<uint8>(value);\n    uint32 pattern = (byte_value << 24) | (byte_value << 16) |\n                     (byte_value << 8) | byte_value;\n    return GpuDriver::SynchronousMemsetUint32(\n        context_, AsROCmDevicePtr(location), pattern, size / 4);\n  }\n  return GpuDriver::SynchronousMemsetUint8(context_, AsROCmDevicePtr(location),\n                                           value, size);\n}\n\ntsl::Status GpuExecutor::SynchronousMemcpy(DeviceMemoryBase* gpu_dst,\n                                           const void* host_src,\n                                           uint64_t size) {\n  return GpuDriver::SynchronousMemcpyH2D(context_, AsROCmDevicePtr(gpu_dst),\n                                         host_src, size);\n}\n\ntsl::Status GpuExecutor::SynchronousMemcpy(void* host_dst,\n                                           const DeviceMemoryBase& gpu_src,\n                                           uint64_t size) {\n  return GpuDriver::SynchronousMemcpyD2H(context_, host_dst,\n                                         AsROCmDevicePtr(gpu_src), size);\n}\n\ntsl::Status GpuExecutor::SynchronousMemcpyDeviceToDevice(\n    DeviceMemoryBase* gpu_dst, const DeviceMemoryBase& gpu_src, uint64_t size) {\n  return GpuDriver::SynchronousMemcpyD2D(context_, AsROCmDevicePtr(gpu_dst),\n                                         AsROCmDevicePtr(gpu_src), size);\n}\n\ntsl::Status GpuExecutor::MemZero(Stream* stream, DeviceMemoryBase* location,\n                                 uint64_t size) {\n  if (reinterpret_cast<uintptr_t>(location->opaque()) % 4 == 0 &&\n      size % 4 == 0) {\n    return Memset32(stream, location, 0x0, size);\n  } else {\n    return Memset(stream, location, 0x0, size);\n  }\n}\n\ntsl::Status GpuExecutor::Memset(Stream* stream, DeviceMemoryBase* location,\n                                uint8 pattern, uint64_t size) {\n  VLOG(2) << \"enqueueing memset8 operation onto stream \" << stream\n          << \" at location \" << location << \" with size \" << size\n          << \" and pattern \" << std::hex << pattern;\n  return GpuDriver::AsynchronousMemsetUint8(context_, AsROCmDevicePtr(location),\n                                            pattern, size,\n                                            AsGpuStreamValue(stream));\n}\n\ntsl::Status GpuExecutor::Memset32(Stream* stream, DeviceMemoryBase* location,\n                                  uint32 pattern, uint64_t size) {\n  VLOG(2) << \"enqueueing memset32 operation onto stream \" << stream\n          << \" at location \" << location << \" with size \" << size\n          << \" and pattern \" << std::hex << pattern;\n  CHECK(reinterpret_cast<uintptr_t>(location->opaque()) % 4 == 0 &&\n        size % 4 == 0);\n  return GpuDriver::AsynchronousMemsetUint32(\n      context_, AsROCmDevicePtr(location), pattern, size / 4,\n      AsGpuStreamValue(stream));\n}\n\nbool GpuExecutor::Memcpy(Stream* stream, void* host_dst,\n                         const DeviceMemoryBase& gpu_src, uint64_t size) {\n  return GpuDriver::AsynchronousMemcpyD2H(context_, host_dst,\n                                          AsROCmDevicePtr(gpu_src), size,\n                                          AsGpuStreamValue(stream));\n}\n\nbool GpuExecutor::Memcpy(Stream* stream, DeviceMemoryBase* gpu_dst,\n                         const void* host_src, uint64_t size) {\n  return GpuDriver::AsynchronousMemcpyH2D(context_, AsROCmDevicePtr(gpu_dst),\n                                          host_src, size,\n                                          AsGpuStreamValue(stream));\n}\n\nbool GpuExecutor::MemcpyDeviceToDevice(Stream* stream,\n                                       DeviceMemoryBase* gpu_dst,\n                                       const DeviceMemoryBase& gpu_src,\n                                       uint64_t size) {\n  return GpuDriver::AsynchronousMemcpyD2D(context_, AsROCmDevicePtr(gpu_dst),\n                                          AsROCmDevicePtr(gpu_src), size,\n                                          AsGpuStreamValue(stream));\n}\n\nbool GpuExecutor::HostCallback(Stream* stream,\n                               absl::AnyInvocable<tsl::Status() &&> callback) {\n  auto callback_ptr =\n      new absl::AnyInvocable<void() &&>([cb = std::move(callback)]() mutable {\n        tsl::Status s = std::move(cb)();\n        if (!s.ok()) {\n          LOG(WARNING) << \"Host callback failed: \" << s;\n        }\n      });\n  return GpuDriver::AddStreamCallback(context_, AsGpuStreamValue(stream),\n                                      InternalHostCallback, callback_ptr);\n}\n\n/* static */ void GpuExecutor::InternalHostCallback(GpuStreamHandle stream,\n                                                    hipError_t status,\n                                                    void* data) {\n  auto* callback = reinterpret_cast<absl::AnyInvocable<void() &&>*>(data);\n  std::move (*callback)();\n  delete callback;\n}\n\ntsl::Status GpuExecutor::AllocateEvent(Event* event) {\n  return AsGpuEvent(event)->Init();\n}\n\ntsl::Status GpuExecutor::DeallocateEvent(Event* event) {\n  return AsGpuEvent(event)->Destroy();\n}\n\ntsl::Status GpuExecutor::RecordEvent(Stream* stream, Event* event) {\n  return AsGpuEvent(event)->Record(AsGpuStream(stream));\n}\n\ntsl::Status GpuExecutor::WaitForEvent(Stream* stream, Event* event) {\n  if (GpuDriver::WaitStreamOnEvent(context_, AsGpuStream(stream)->gpu_stream(),\n                                   AsGpuEvent(event)->gpu_event())) {\n    return tsl::OkStatus();\n  } else {\n    return tsl::Status{\n        tsl::error::INTERNAL,\n        absl::StrFormat(\"error recording waiting for ROCM event on stream %p\",\n                        stream)};\n  }\n}\n\nEvent::Status GpuExecutor::PollForEventStatus(Event* event) {\n  return AsGpuEvent(event)->PollForStatus();\n}\n\nbool GpuExecutor::AllocateStream(Stream* stream) {\n  absl::MutexLock l(&alive_gpu_streams_mu_);\n  bool out = AsGpuStream(stream)->Init();\n  alive_gpu_streams_[stream->implementation()->GpuStreamHack()] = stream;\n  return out;\n}\n\nvoid GpuExecutor::DeallocateStream(Stream* stream) {\n  GpuStream* rocm_stream = AsGpuStream(stream);\n  absl::MutexLock l(&alive_gpu_streams_mu_);\n  alive_gpu_streams_.erase(rocm_stream->GpuStreamHack());\n  if (!rocm_stream->IsIdle()) {\n    LOG(ERROR) << \"Deallocating stream with pending work\";\n  }\n  rocm_stream->Destroy();\n}\n\nbool GpuExecutor::AllocateTimer(Timer* timer) {\n  return AsGpuTimer(timer)->Init();\n}\n\nvoid GpuExecutor::DeallocateTimer(Timer* timer) {\n  AsGpuTimer(timer)->Destroy();\n}\n\nbool GpuExecutor::CreateStreamDependency(Stream* dependent, Stream* other) {\n  GpuEventHandle other_completed_event = *AsGpuStream(other)->completed_event();\n  bool ok = GpuDriver::RecordEvent(context_, other_completed_event,\n                                   AsGpuStreamValue(other))\n                .ok();\n  if (!ok) {\n    LOG(ERROR) << \"failed to record completion event; \"\n                  \"therefore, failed to create inter-stream dependency\";\n    return false;\n  }\n\n  return GpuDriver::WaitStreamOnEvent(context_, AsGpuStreamValue(dependent),\n                                      other_completed_event);\n}\n\nbool GpuExecutor::StartTimer(Stream* stream, Timer* timer) {\n  return AsGpuTimer(timer)->Start(AsGpuStream(stream));\n}\n\nbool GpuExecutor::StopTimer(Stream* stream, Timer* timer) {\n  return AsGpuTimer(timer)->Stop(AsGpuStream(stream));\n}\n\ntsl::Status GpuExecutor::BlockHostUntilDone(Stream* stream) {\n  return GpuDriver::SynchronizeStream(context_, AsGpuStreamValue(stream));\n}\n\nblas::BlasSupport* GpuExecutor::CreateBlas() {\n  PluginRegistry* registry = PluginRegistry::Instance();\n  tsl::StatusOr<PluginRegistry::BlasFactory> status =\n      registry->GetFactory<PluginRegistry::BlasFactory>(rocm::kROCmPlatformId,\n                                                        plugin_config_.blas());\n  if (!status.ok()) {\n    LOG(ERROR) << \"Unable to retrieve BLAS factory: \"\n               << status.status().error_message();\n    return nullptr;\n  }\n\n  return status.value()(this);\n}\n\ndnn::DnnSupport* GpuExecutor::CreateDnn() {\n  PluginRegistry* registry = PluginRegistry::Instance();\n  tsl::StatusOr<PluginRegistry::DnnFactory> status =\n      registry->GetFactory<PluginRegistry::DnnFactory>(rocm::kROCmPlatformId,\n                                                       plugin_config_.dnn());\n  if (!status.ok()) {\n    LOG(ERROR) << \"Unable to retrieve DNN factory: \"\n               << status.status().error_message();\n    return nullptr;\n  }\n\n  return status.value()(this);\n}\n\nfft::FftSupport* GpuExecutor::CreateFft() {\n  PluginRegistry* registry = PluginRegistry::Instance();\n  tsl::StatusOr<PluginRegistry::FftFactory> status =\n      registry->GetFactory<PluginRegistry::FftFactory>(rocm::kROCmPlatformId,\n                                                       plugin_config_.fft());\n  if (!status.ok()) {\n    LOG(ERROR) << \"Unable to retrieve FFT factory: \"\n               << status.status().error_message();\n    return nullptr;\n  }\n\n  return status.value()(this);\n}\n\nrng::RngSupport* GpuExecutor::CreateRng() {\n  PluginRegistry* registry = PluginRegistry::Instance();\n  tsl::StatusOr<PluginRegistry::RngFactory> status =\n      registry->GetFactory<PluginRegistry::RngFactory>(rocm::kROCmPlatformId,\n                                                       plugin_config_.rng());\n  if (!status.ok()) {\n    LOG(ERROR) << \"Unable to retrieve RNG factory: \"\n               << status.status().error_message();\n    return nullptr;\n  }\n\n  return status.value()(this);\n}\n\n// TODO(rspringer): Remove in b/18544742.\nbool GpuExecutor::SupportsDnn() const { return true; }\n\nbool GpuExecutor::CanEnablePeerAccessTo(StreamExecutorInterface* other) {\n  GpuExecutor* rocm_other = static_cast<GpuExecutor*>(other);\n  return GpuDriver::CanEnablePeerAccess(context_, rocm_other->context_);\n}\n\ntsl::Status GpuExecutor::EnablePeerAccessTo(StreamExecutorInterface* other) {\n  GpuExecutor* rocm_other = static_cast<GpuExecutor*>(other);\n  return GpuDriver::EnablePeerAccess(context_, rocm_other->context_);\n}\n\nbool GpuExecutor::DeviceMemoryUsage(int64_t* free, int64_t* total) const {\n  return GpuDriver::GetDeviceMemoryInfo(context_, free, total);\n}\n\nbool GpuExecutor::GetSymbol(const string& symbol_name,\n                            ModuleHandle module_handle, void** mem,\n                            size_t* bytes) {\n  absl::MutexLock lock{&in_memory_modules_mu_};\n  if (static_cast<bool>(module_handle)) {\n    auto it = gpu_binary_to_module_.find(module_handle.id());\n    CHECK(it != gpu_binary_to_module_.end());\n    if (GpuDriver::GetModuleSymbol(\n            context_, it->second.first, symbol_name.c_str(),\n            reinterpret_cast<hipDeviceptr_t*>(mem), bytes)) {\n      return true;\n    }\n  }\n\n  for (auto& it : gpu_binary_to_module_) {\n    if (GpuDriver::GetModuleSymbol(\n            context_, it.second.first, symbol_name.c_str(),\n            reinterpret_cast<hipDeviceptr_t*>(mem), bytes)) {\n      return true;\n    }\n  }\n\n  LOG(INFO) << \"Falied to find symbol in any modules: \" << symbol_name;\n  return false;\n}\n\nbool FillBlockDimLimit(GpuDeviceHandle device, BlockDim* block_dim_limit) {\n  // The BlockDim name is a mismatch against these GRID_DIM_* queries because\n  // we use BlockDims to express the dimensions of blocks within a grid\n  // (as opposed to ThreadDim which expresses the dimensions of threads\n  // within a block).\n  int x, y, z;\n  if (!GpuDriver::GetGridLimits(&x, &y, &z, device)) {\n    return false;\n  }\n\n  block_dim_limit->x = x;\n  block_dim_limit->y = y;\n  block_dim_limit->z = z;\n  return true;\n}\n\nbool GpuExecutor::SupportsBlas() const { return true; }\n\nbool GpuExecutor::SupportsFft() const { return true; }\n\nbool GpuExecutor::SupportsRng() const { return true; }\n\nstd::unique_ptr<internal::EventInterface>\nGpuExecutor::CreateEventImplementation() {\n  return std::unique_ptr<internal::EventInterface>(new GpuEvent(this));\n}\n\nstd::unique_ptr<internal::KernelInterface>\nGpuExecutor::CreateKernelImplementation() {\n  return std::unique_ptr<internal::KernelInterface>(new GpuKernel());\n}\n\nstd::unique_ptr<internal::StreamInterface>\nGpuExecutor::GetStreamImplementation() {\n  return std::unique_ptr<internal::StreamInterface>(new GpuStream(this));\n}\n\nstd::unique_ptr<internal::TimerInterface>\nGpuExecutor::GetTimerImplementation() {\n  return std::unique_ptr<internal::TimerInterface>(new GpuTimer(this));\n}\n\nvoid* GpuExecutor::GpuContextHack() { return context_; }\n\nGpuContext* GpuExecutor::gpu_context() { return context_; }\n\n// Attempts to read the NUMA node corresponding to the GPU device's PCI bus out\n// of SysFS. Returns -1 if it cannot.\n//\n// For anything more complicated/prod-focused than this, you'll likely want to\n// turn to gsys' topology modeling.\nstatic int TryToReadNumaNode(const string& pci_bus_id, int device_ordinal) {\n  VLOG(2) << \"trying to read NUMA node for device ordinal: \" << device_ordinal;\n  static const int kUnknownNumaNode = -1;\n\n  if (pci_bus_id.empty()) {\n    LOG(INFO) << \"no PCI bus ID for device ordinal: \" << device_ordinal;\n    return kUnknownNumaNode;\n  }\n\n  std::string filename =\n      absl::StrFormat(\"/sys/bus/pci/devices/%s/numa_node\", pci_bus_id);\n\n  // We have to use fopen/fread here so that the device properties can be\n  // populated before InitGoogle procedure has been completed (at which point we\n  // could use the file::* utilities).\n  FILE* file = fopen(filename.c_str(), \"r\");\n  if (file == nullptr) {\n    LOG(INFO) << \"could not open file to read NUMA node: \" << filename\n              << \"\\nYour kernel may have been built without NUMA support.\";\n    return kUnknownNumaNode;\n  }\n\n  std::string content;\n  char buf[32];\n  size_t did_read = fread(buf, sizeof(buf[0]), sizeof(buf) - 1, file);\n  buf[did_read] = '\\0';\n  content = buf;\n\n  int32_t value;\n  if (absl::SimpleAtoi(content, &value)) {\n    if (value < 0) {  // See http://b/18228951 for details on this path.\n      LOG(INFO) << \"successful NUMA node read from SysFS had negative value (\"\n                << value\n                << \"), but there must be at least one NUMA node\"\n                   \", so returning NUMA node zero\";\n      fclose(file);\n      return 0;\n    }\n    fclose(file);\n    return value;\n  }\n\n  LOG(WARNING)\n      << \"could not convert SysFS file contents to integral NUMA node value: \"\n      << content;\n\n  fclose(file);\n  return kUnknownNumaNode;\n}\n\ntsl::StatusOr<std::unique_ptr<DeviceDescription>>\nGpuExecutor::CreateDeviceDescription(int device_ordinal) {\n  GpuDeviceHandle device;\n  auto status = GpuDriver::GetDevice(device_ordinal, &device);\n  if (!status.ok()) {\n    return status;\n  }\n\n  int version;\n  status = GpuDriver::GetGpuISAVersion(&version, device);\n  if (!status.ok()) {\n    return status;\n  }\n\n  std::string gcn_arch_name;\n  status = GpuDriver::GetGpuGCNArchName(device, &gcn_arch_name);\n  if (!status.ok()) {\n    return status;\n  }\n\n  internal::DeviceDescriptionBuilder builder;\n\n  {\n    int driver_version = 0;\n    (void)GpuDriver::GetDriverVersion(&driver_version);\n    string augmented_driver_version = absl::StrFormat(\n        \"%d (%s)\", driver_version,\n        rocm::DriverVersionStatusToString(Diagnostician::FindDsoVersion())\n            .c_str());\n    builder.set_driver_version(augmented_driver_version);\n  }\n\n  {\n    string pci_bus_id = GpuDriver::GetPCIBusID(device);\n\n    // Lower the hex characters to match sysfs.\n    pci_bus_id = absl::AsciiStrToLower(pci_bus_id);\n    builder.set_pci_bus_id(pci_bus_id);\n\n    // Read the NUMA node corresponding to the PCI bus ID out of sysfs.\n    int numa_node = TryToReadNumaNode(pci_bus_id, device_ordinal);\n    builder.set_numa_node(numa_node);\n  }\n\n  hipDeviceProp_t prop;\n  if (GpuDriver::GetDeviceProperties(&prop, device_ordinal)) {\n    builder.set_threads_per_block_limit(prop.maxThreadsPerBlock);\n\n    ThreadDim thread_dim_limit;\n    thread_dim_limit.x = prop.maxThreadsDim[0];\n    thread_dim_limit.y = prop.maxThreadsDim[1];\n    thread_dim_limit.z = prop.maxThreadsDim[2];\n    builder.set_thread_dim_limit(thread_dim_limit);\n\n    float clock_rate_ghz = static_cast<float>(prop.clockRate) / 1e6;\n    builder.set_clock_rate_ghz(clock_rate_ghz);\n\n    // mem_bandwidth = 2 * mem_bus_width_in_bytes * mem_clock_rate_in_hz\n    int64_t memory_bandwidth = 2 * (int64_t(prop.memoryBusWidth) / 8) *\n                               (int64_t(prop.memoryClockRate) * 1000);\n    builder.set_memory_bandwidth(memory_bandwidth);\n  }\n\n  {\n    bool ecc_enabled = false;\n    (void)GpuDriver::IsEccEnabled(device, &ecc_enabled);\n    builder.set_ecc_enabled(ecc_enabled);\n  }\n\n  uint64_t device_memory_size = -1;\n  (void)GpuDriver::GetDeviceTotalMemory(device, &device_memory_size);\n  builder.set_device_memory_size(device_memory_size);\n\n  {\n    BlockDim block_dim_limit;\n    FillBlockDimLimit(device, &block_dim_limit);\n    builder.set_block_dim_limit(block_dim_limit);\n  }\n\n  {\n    string device_name;\n    TF_RETURN_IF_ERROR(GpuDriver::GetDeviceName(device, &device_name));\n    builder.set_name(device_name);\n  }\n\n  builder.set_platform_version(\n      absl::StrCat(\"AMDGPU ISA version: \", gcn_arch_name));\n\n  // TODO(leary) should be a way to query this from the driver, but this is\n  // unlikely to change for us any time soon.\n  builder.set_device_address_bits(64);\n\n  builder.set_device_vendor(\"Advanced Micro Devices, Inc\");\n  builder.set_rocm_compute_capability(gcn_arch_name);\n\n  builder.set_shared_memory_per_core(\n      GpuDriver::GetMaxSharedMemoryPerCore(device).value());\n  builder.set_shared_memory_per_block(\n      GpuDriver::GetMaxSharedMemoryPerBlock(device).value());\n  int core_count = GpuDriver::GetMultiprocessorCount(device).value();\n  builder.set_core_count(core_count);\n  builder.set_threads_per_core_limit(\n      GpuDriver::GetMaxThreadsPerMultiprocessor(device).value());\n  builder.set_registers_per_block_limit(\n      GpuDriver::GetMaxRegistersPerBlock(device).value());\n  builder.set_threads_per_warp(\n      GpuDriver::GetThreadsPerWarp(device).value());\n  builder.set_registers_per_core_limit(64 * 1024);\n\n  int cc_major = 0;\n  int cc_minor = 0;\n  GpuDriver::GetComputeCapability(&cc_major, &cc_minor, device).IgnoreError();\n\n  // It would be better to use the PCI device ID or some other truly unique\n  // identifier for the GPU model.  But getting this requires using NVML or\n  // other hacks, which we don't have access to in OSS TensorFlow.\n  //\n  // Alternatively you might be tempted to use GpuDriver::GetDeviceName as a\n  // unique identifier, but this is not stable across GPU VBIOS versions.\n  //\n  // TODO(jlebar): This really should be more unique.  In CUDA land, we mix in\n  // the clock speed and L2 cache size.\n  builder.set_model_str(absl::StrFormat(\"cc_%d.%d with %dB RAM, %d cores\",\n                                        cc_major, cc_minor, device_memory_size,\n                                        core_count));\n\n  return builder.Build();\n}\n\n}  // namespace gpu\n\n}  // namespace stream_executor\n\nREGISTER_MODULE_INITIALIZER(rocm_gpu_executor, {});"