"/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/compiler/xla/stream_executor/rocm/rocm_platform.h\"\n\n#include <memory>\n\n#include \"absl/base/call_once.h\"\n#include \"absl/strings/str_format.h\"\n#include \"tensorflow/compiler/xla/stream_executor/gpu/gpu_driver.h\"\n#include \"tensorflow/compiler/xla/stream_executor/gpu/gpu_executor.h\"\n#include \"tensorflow/compiler/xla/stream_executor/lib/error.h\"\n#include \"tensorflow/compiler/xla/stream_executor/lib/initialize.h\"\n#include \"tensorflow/compiler/xla/stream_executor/rocm/rocm_platform_id.h\"\n\nnamespace stream_executor {\nnamespace gpu {\n\nROCmPlatform::ROCmPlatform()\n    : name_(\"ROCM\"), min_numa_node_(0), limit_numa_node_(0) {}\n\nROCmPlatform::~ROCmPlatform() {}\n\n// Due to legacy issues in user code, we can't currently call InpectNumaNodes\n// at module initialization time, because non-GPU programs still include this\n// plugin via various methods, so instead, it has to be init-on-reference.\nvoid ROCmPlatform::InspectNumaNodes() {\n  // To get NUMA node information, we need to create all executors, so we can\n  // examine their device descriptions to see their bus assignments.\n  absl::once_flag once;\n  absl::call_once(once, [&] {\n    StreamExecutorConfig config;\n    for (int i = 0; i < VisibleDeviceCount(); i++) {\n      config.ordinal = i;\n      StreamExecutor* exec = GetExecutor(config).value();\n      if (i == 0) {\n        // NUMA nodes may not start at 0, so set the minimum node  based on the\n        // first executor we see.\n        min_numa_node_ = exec->GetDeviceDescription().numa_node();\n        limit_numa_node_ = min_numa_node_ + 1;\n      } else {\n        min_numa_node_ =\n            std::min(min_numa_node_, exec->GetDeviceDescription().numa_node());\n        limit_numa_node_ = std::max(\n            limit_numa_node_, exec->GetDeviceDescription().numa_node() + 1);\n      }\n    }\n  });\n}\n\nint ROCmPlatform::BusCount() {\n  InspectNumaNodes();\n  return limit_numa_node_ - min_numa_node_;\n}\n\nint ROCmPlatform::DeviceToBus(int device_ordinal) {\n  StreamExecutorConfig config;\n  config.ordinal = device_ordinal;\n  StreamExecutor* exec = GetExecutor(config).value();\n  return exec->GetDeviceDescription().numa_node() - min_numa_node_;\n}\n\ntsl::StatusOr<StreamExecutor*> ROCmPlatform::FirstExecutorForBus(\n    int bus_ordinal) {\n  InspectNumaNodes();\n  CHECK_LT(bus_ordinal, BusCount()) << \"bus ordinal out of available range\";\n  for (int i = 0; i < VisibleDeviceCount(); i++) {\n    if (DeviceToBus(i) == bus_ordinal) {\n      StreamExecutorConfig config;\n      config.ordinal = i;\n      return GetExecutor(config).value();\n    }\n  }\n\n  return tsl::Status{\n      tsl::error::NOT_FOUND,\n      absl::StrFormat(\"Executor for bus %d not found.\", bus_ordinal)};\n}\n\nPlatform::Id ROCmPlatform::id() const { return rocm::kROCmPlatformId; }\n\nint ROCmPlatform::VisibleDeviceCount() const {\n  // Throw away the result - it logs internally, and this [containing] function\n  // isn't in the path of user control. It's safe to call this > 1x.\n\n  if (!gpu::GpuDriver::Init().ok()) {\n    return -1;\n  }\n\n  return GpuDriver::GetDeviceCount();\n}\n\nconst string& ROCmPlatform::Name() const { return name_; }\n\ntsl::StatusOr<std::unique_ptr<DeviceDescription>>\nROCmPlatform::DescriptionForDevice(int ordinal) const {\n  return GpuExecutor::CreateDeviceDescription(ordinal);\n}\n\ntsl::StatusOr<StreamExecutor*> ROCmPlatform::ExecutorForDevice(int ordinal) {\n  StreamExecutorConfig config;\n  config.ordinal = ordinal;\n  config.plugin_config = PluginConfig();\n  config.device_options = DeviceOptions::Default();\n  return GetExecutor(config);\n}\n\ntsl::StatusOr<StreamExecutor*> ROCmPlatform::ExecutorForDeviceWithPluginConfig(\n    int device_ordinal, const PluginConfig& plugin_config) {\n  StreamExecutorConfig config;\n  config.ordinal = device_ordinal;\n  config.plugin_config = plugin_config;\n  config.device_options = DeviceOptions::Default();\n  return GetExecutor(config);\n}\n\ntsl::StatusOr<StreamExecutor*> ROCmPlatform::GetExecutor(\n    const StreamExecutorConfig& config) {\n  if (config.gpu_stream) {\n    // If the GPU stream was provided, it's not possible to get-or-create a\n    // stream with a required pointer: so we are looking for previously\n    // allocated streams.\n    return executor_cache_.Get(config);\n  }\n  return executor_cache_.GetOrCreate(\n      config, [&]() { return GetUncachedExecutor(config); });\n}\n\ntsl::StatusOr<std::unique_ptr<StreamExecutor>>\nROCmPlatform::GetUncachedExecutor(const StreamExecutorConfig& config) {\n  auto executor = std::make_unique<StreamExecutor>(\n      this, std::make_unique<GpuExecutor>(config.plugin_config),\n      config.ordinal);\n  auto init_status = executor->Init(config.device_options);\n  if (!init_status.ok()) {\n    return tsl::Status{\n        tsl::error::INTERNAL,\n        absl::StrFormat(\n            \"failed initializing StreamExecutor for ROCM device ordinal %d: %s\",\n            config.ordinal, init_status.ToString().c_str())};\n  }\n\n  return std::move(executor);\n}\n\nvoid ROCmPlatform::RegisterTraceListener(\n    std::unique_ptr<TraceListener> listener) {\n  LOG(FATAL) << \"not yet implemented: register ROCM trace listener\";\n}\n\nvoid ROCmPlatform::UnregisterTraceListener(TraceListener* listener) {\n  LOG(FATAL) << \"not yet implemented: unregister ROCM trace listener\";\n}\n\n}  // namespace gpu\n\nstatic void InitializeROCmPlatform() {\n  // Disabling leak checking, MultiPlatformManager does not destroy its\n  // registered platforms.\n  auto status = MultiPlatformManager::PlatformWithName(\"ROCM\");\n  if (!status.ok()) {\n    std::unique_ptr<gpu::ROCmPlatform> platform(new gpu::ROCmPlatform);\n    TF_CHECK_OK(MultiPlatformManager::RegisterPlatform(std::move(platform)));\n  }\n}\n\n}  // namespace stream_executor\n\nREGISTER_MODULE_INITIALIZER(rocm_platform,\n                            stream_executor::InitializeROCmPlatform());\n\nDECLARE_MODULE_INITIALIZER(multi_platform_manager);\n// Note that module initialization sequencing is not supported in the\n// open-source project, so this will be a no-op there.\nREGISTER_MODULE_INITIALIZER_SEQUENCE(rocm_platform, multi_platform_manager);"