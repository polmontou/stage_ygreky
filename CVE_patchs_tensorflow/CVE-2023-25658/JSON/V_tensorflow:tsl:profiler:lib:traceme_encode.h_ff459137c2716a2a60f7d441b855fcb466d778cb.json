"/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#ifndef TENSORFLOW_TSL_PROFILER_LIB_TRACEME_ENCODE_H_\n#define TENSORFLOW_TSL_PROFILER_LIB_TRACEME_ENCODE_H_\n\n#include <string.h>\n\n#include <initializer_list>\n#include <string>\n\n#include \"absl/strings/match.h\"\n#include \"absl/strings/str_cat.h\"\n#include \"absl/strings/string_view.h\"\n#include \"tensorflow/tsl/platform/logging.h\"\n#include \"tensorflow/tsl/platform/macros.h\"\n\nnamespace tsl {\nnamespace profiler {\n\n// An argument passed to TraceMeEncode.\nstruct TraceMeArg {\n  // This constructor is required because absl::AlphaNum is non-copyable.\n  template <typename Value>\n  TraceMeArg(absl::string_view k, Value v) : key(k), value(v) {}\n\n  TF_DISALLOW_COPY_AND_ASSIGN(TraceMeArg);\n\n  absl::string_view key;\n  absl::AlphaNum value;\n};\n\nnamespace traceme_internal {\n\n// Copies the contents of str to the address pointed by out.\n// Returns the address after the copy.\n// REQUIRED: The address range [out, out + str.size()] must have been allocated.\nTF_ATTRIBUTE_ALWAYS_INLINE inline char* Append(char* out,\n                                               absl::string_view str) {\n  DCHECK(!absl::StrContains(str, '#'))\n      << \"'#' is not a valid character in TraceMeEncode\";\n  const size_t str_size = str.size();\n  if (TF_PREDICT_TRUE(str_size > 0)) {\n    memcpy(out, str.data(), str_size);\n    out += str_size;\n  }\n  return out;\n}\n\n// Appends args encoded as TraceMe metadata to name.\nTF_ATTRIBUTE_ALWAYS_INLINE inline std::string AppendArgs(\n    std::string name, std::initializer_list<TraceMeArg> args) {\n  if (TF_PREDICT_TRUE(args.size() > 0)) {\n    const auto old_size = name.size();\n    auto new_size = old_size + args.size() * 2 + 1;\n    for (const auto& arg : args) {\n      new_size += arg.key.size() + arg.value.size();\n    }\n    name.resize(new_size);\n    char* const begin = &name[0];\n    char* out = begin + old_size;\n    *out++ = '#';\n    for (const auto& arg : args) {\n      out = Append(out, arg.key);\n      *out++ = '=';\n      out = Append(out, arg.value.Piece());\n      *out++ = ',';\n    }\n    *(out - 1) = '#';\n    DCHECK_EQ(out, begin + new_size);\n  }\n  return name;\n}\n\n// Appends new_metadata to the metadata part of name.\nTF_ATTRIBUTE_ALWAYS_INLINE inline void AppendMetadata(\n    std::string* name, absl::string_view new_metadata) {\n  if (!TF_PREDICT_FALSE(new_metadata.empty())) {\n    if (!name->empty() && name->back() == '#') {  // name already has metadata\n      name->back() = ',';\n      if (TF_PREDICT_TRUE(new_metadata.front() == '#')) {\n        new_metadata.remove_prefix(1);\n      }\n    }\n    name->append(new_metadata.data(), new_metadata.size());\n  }\n}\n\n}  // namespace traceme_internal\n\n// Encodes an event name and arguments into TraceMe metadata.\n// Use within a lambda to avoid expensive operations when tracing is disabled.\n// Example Usage:\n//   TraceMe trace_me([value1]() {\n//     return TraceMeEncode(\"my_trace\", {{\"key1\", value1}, {\"key2\", 42}});\n//   });\nTF_ATTRIBUTE_ALWAYS_INLINE inline std::string TraceMeEncode(\n    std::string name, std::initializer_list<TraceMeArg> args) {\n  return traceme_internal::AppendArgs(std::move(name), args);\n}\nTF_ATTRIBUTE_ALWAYS_INLINE inline std::string TraceMeEncode(\n    absl::string_view name, std::initializer_list<TraceMeArg> args) {\n  return traceme_internal::AppendArgs(std::string(name), args);\n}\nTF_ATTRIBUTE_ALWAYS_INLINE inline std::string TraceMeEncode(\n    const char* name, std::initializer_list<TraceMeArg> args) {\n  return traceme_internal::AppendArgs(std::string(name), args);\n}\n\n// Encodes arguments into TraceMe metadata.\n// Use within a lambda to avoid expensive operations when tracing is disabled.\n// Example Usage:\n//   TraceMe trace_me(\"my_trace\");\n//   ...\n//   trace_me.AppendMetadata([value1]() {\n//     return TraceMeEncode({{\"key1\", value1}, {\"key2\", 42}});\n//   });\nTF_ATTRIBUTE_ALWAYS_INLINE inline std::string TraceMeEncode(\n    std::initializer_list<TraceMeArg> args) {\n  return traceme_internal::AppendArgs(std::string(), args);\n}\n\n// Concatenates op_name and op_type.\nTF_ATTRIBUTE_ALWAYS_INLINE inline std::string TraceMeOp(\n    absl::string_view op_name, absl::string_view op_type) {\n  return absl::StrCat(op_name, \":\", op_type);\n}\n\nTF_ATTRIBUTE_ALWAYS_INLINE inline std::string TraceMeOp(const char* op_name,\n                                                        const char* op_type) {\n  return absl::StrCat(op_name, \":\", op_type);\n}\n\nTF_ATTRIBUTE_ALWAYS_INLINE inline std::string TraceMeOp(\n    std::string&& op_name, absl::string_view op_type) {\n  absl::StrAppend(&op_name, \":\", op_type);\n  return op_name;\n}\n\n// Concatenates op_name and op_type.\nTF_ATTRIBUTE_ALWAYS_INLINE inline std::string TraceMeOpOverride(\n    absl::string_view op_name, absl::string_view op_type) {\n  return absl::StrCat(\"#tf_op=\", op_name, \":\", op_type, \"#\");\n}\n\nTF_ATTRIBUTE_ALWAYS_INLINE inline std::string TraceMeOpOverride(\n    const char* op_name, const char* op_type) {\n  return absl::StrCat(\"#tf_op=\", op_name, \":\", op_type, \"#\");\n}\n\n}  // namespace profiler\n}  // namespace tsl\n\n#endif  // TENSORFLOW_TSL_PROFILER_LIB_TRACEME_ENCODE_H_"