"diff --git a/tensorflow/core/kernels/dynamic_stitch_op.cc b/tensorflow/core/kernels/dynamic_stitch_op.cc\nindex b47180ef831..23fc151b4eb 100644\n--- a/tensorflow/core/kernels/dynamic_stitch_op.cc\n+++ b/tensorflow/core/kernels/dynamic_stitch_op.cc\n@@ -97,6 +97,17 @@ class DynamicStitchOpImplBase : public OpKernel {\n \n     *first_dim_size = max_index + 1;\n \n+    for (const Tensor& indices : *indices_inputs) {\n+      auto indices_vec = indices.flat<int32>();\n+\n+      for (int i = 0; i < indices_vec.size(); i++) {\n+        int32_t index = internal::SubtleMustCopy(indices_vec(i));\n+        OP_REQUIRES(\n+            c, FastBoundsCheck(index, *first_dim_size),\n+            errors::InvalidArgument(\"indices[\", i, \"] is out of range\"));\n+      }\n+    }\n+\n     // Validate that data[i].shape = indices[i].shape + constant\n     OP_REQUIRES_OK(c, c->input_list(\"data\", data_inputs));\n     const Tensor& data0 = (*data_inputs)[0];\n@@ -265,9 +276,6 @@ class DynamicStitchOpImplCPU : public DynamicStitchOpImplBase<T> {\n           const T* data_base = data_flat.data();\n           for (int i = 0; i < indices_vec.size(); i++) {\n             int32_t index = internal::SubtleMustCopy(indices_vec(i));\n-            OP_REQUIRES(\n-                c, FastBoundsCheck(index, first_dim_size),\n-                errors::InvalidArgument(\"indices[\", i, \"] is out of range\"));\n             memcpy(merged_base + index * slice_size, data_base + i * slice_size,\n                    slice_bytes);\n           }\n@@ -277,9 +285,6 @@ class DynamicStitchOpImplCPU : public DynamicStitchOpImplBase<T> {\n             // Copy slice data[i] to merged[indices[i]]\n             Eigen::DSizes<Eigen::DenseIndex, 2> data_indices(i, 0);\n             int32_t index = internal::SubtleMustCopy(indices_vec(i));\n-            OP_REQUIRES(\n-                c, FastBoundsCheck(index, first_dim_size),\n-                errors::InvalidArgument(\"indices[\", i, \"] is out of range\"));\n             Eigen::DSizes<Eigen::DenseIndex, 2> merged_indices(index, 0);\n             merged_flat.slice(merged_indices, sizes) =\n                 data_flat.slice(data_indices, sizes);"