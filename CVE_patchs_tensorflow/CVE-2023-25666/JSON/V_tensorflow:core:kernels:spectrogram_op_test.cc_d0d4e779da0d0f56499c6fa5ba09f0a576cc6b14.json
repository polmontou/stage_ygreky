"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#define EIGEN_USE_THREADS\n\n#include <functional>\n#include <memory>\n#include <vector>\n\n#include \"tensorflow/cc/client/client_session.h\"\n#include \"tensorflow/cc/ops/audio_ops.h\"\n#include \"tensorflow/cc/ops/const_op.h\"\n#include \"tensorflow/cc/ops/math_ops.h\"\n#include \"tensorflow/core/framework/tensor_testutil.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/framework/types.pb.h\"\n#include \"tensorflow/core/kernels/ops_util.h\"\n#include \"tensorflow/core/lib/core/status_test_util.h\"\n#include \"tensorflow/core/platform/test.h\"\n\nnamespace tensorflow {\nnamespace ops {\nnamespace {\n\nTEST(SpectrogramOpTest, SimpleTest) {\n  Scope root = Scope::NewRootScope();\n\n  Tensor audio_tensor(DT_FLOAT, TensorShape({8, 1}));\n  test::FillValues<float>(&audio_tensor,\n                          {-1.0f, 0.0f, 1.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f});\n\n  Output audio_const_op = Const(root.WithOpName(\"audio_const_op\"),\n                                Input::Initializer(audio_tensor));\n\n  AudioSpectrogram spectrogram_op =\n      AudioSpectrogram(root.WithOpName(\"spectrogram_op\"), audio_const_op, 8, 1);\n\n  TF_ASSERT_OK(root.status());\n\n  ClientSession session(root);\n  std::vector<Tensor> outputs;\n\n  TF_EXPECT_OK(session.Run(ClientSession::FeedType(),\n                           {spectrogram_op.spectrogram}, &outputs));\n\n  const Tensor& spectrogram_tensor = outputs[0];\n\n  EXPECT_EQ(3, spectrogram_tensor.dims());\n  EXPECT_EQ(5, spectrogram_tensor.dim_size(2));\n  EXPECT_EQ(1, spectrogram_tensor.dim_size(1));\n  EXPECT_EQ(1, spectrogram_tensor.dim_size(0));\n\n  test::ExpectTensorNear<float>(\n      spectrogram_tensor,\n      test::AsTensor<float>({0, 1, 2, 1, 0}, TensorShape({1, 1, 5})), 1e-3);\n}\n\nTEST(SpectrogramOpTest, SquaredTest) {\n  Scope root = Scope::NewRootScope();\n\n  Tensor audio_tensor(DT_FLOAT, TensorShape({8, 1}));\n  test::FillValues<float>(&audio_tensor,\n                          {-1.0f, 0.0f, 1.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f});\n\n  Output audio_const_op = Const(root.WithOpName(\"audio_const_op\"),\n                                Input::Initializer(audio_tensor));\n\n  AudioSpectrogram spectrogram_op =\n      AudioSpectrogram(root.WithOpName(\"spectrogram_op\"), audio_const_op, 8, 1,\n                       AudioSpectrogram::Attrs().MagnitudeSquared(true));\n\n  TF_ASSERT_OK(root.status());\n\n  ClientSession session(root);\n  std::vector<Tensor> outputs;\n\n  TF_EXPECT_OK(session.Run(ClientSession::FeedType(),\n                           {spectrogram_op.spectrogram}, &outputs));\n\n  const Tensor& spectrogram_tensor = outputs[0];\n\n  EXPECT_EQ(3, spectrogram_tensor.dims());\n  EXPECT_EQ(5, spectrogram_tensor.dim_size(2));\n  EXPECT_EQ(1, spectrogram_tensor.dim_size(1));\n  EXPECT_EQ(1, spectrogram_tensor.dim_size(0));\n\n  test::ExpectTensorNear<float>(\n      spectrogram_tensor,\n      test::AsTensor<float>({0, 1, 4, 1, 0}, TensorShape({1, 1, 5})), 1e-3);\n}\n\nTEST(SpectrogramOpTest, MultichannelTest) {\n  Scope root = Scope::NewRootScope();\n\n  const int audio_size = 8;\n  const int channel_size = 2;\n  Tensor audio_tensor(DT_FLOAT, TensorShape({audio_size, channel_size}));\n  test::FillValues<float>(\n      &audio_tensor, {-1.0f, -1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,\n                      -1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f});\n\n  Output audio_const_op = Const(root.WithOpName(\"audio_const_op\"),\n                                Input::Initializer(audio_tensor));\n\n  AudioSpectrogram spectrogram_op =\n      AudioSpectrogram(root.WithOpName(\"spectrogram_op\"), audio_const_op,\n                       audio_size, channel_size);\n\n  TF_ASSERT_OK(root.status());\n\n  ClientSession session(root);\n  std::vector<Tensor> outputs;\n\n  TF_EXPECT_OK(session.Run(ClientSession::FeedType(),\n                           {spectrogram_op.spectrogram}, &outputs));\n\n  const Tensor& spectrogram_tensor = outputs[0];\n\n  EXPECT_EQ(3, spectrogram_tensor.dims());\n  EXPECT_EQ(5, spectrogram_tensor.dim_size(2));\n  EXPECT_EQ(1, spectrogram_tensor.dim_size(1));\n  EXPECT_EQ(channel_size, spectrogram_tensor.dim_size(0));\n\n  for (int channel = 0; channel < channel_size; channel++) {\n    test::ExpectTensorNear<float>(\n        spectrogram_tensor.SubSlice(channel),\n        test::AsTensor<float>({0, 1, 2, 1, 0}, TensorShape({1, 5})), 1e-3);\n  }\n}\n\n}  // namespace\n}  // namespace ops\n}  // namespace tensorflow"