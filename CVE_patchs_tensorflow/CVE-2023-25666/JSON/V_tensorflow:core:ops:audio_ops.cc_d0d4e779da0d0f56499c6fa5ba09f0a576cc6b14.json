"/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n#include \"tensorflow/core/lib/core/bits.h\"\n\nnamespace tensorflow {\n\nnamespace {\n\nusing shape_inference::DimensionHandle;\nusing shape_inference::InferenceContext;\nusing shape_inference::ShapeHandle;\n\nStatus DecodeWavShapeFn(InferenceContext* c) {\n  ShapeHandle unused;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 0, &unused));\n\n  DimensionHandle channels_dim;\n  int32_t desired_channels;\n  TF_RETURN_IF_ERROR(c->GetAttr(\"desired_channels\", &desired_channels));\n  if (desired_channels == -1) {\n    channels_dim = c->UnknownDim();\n  } else {\n    if (desired_channels < 0) {\n      return errors::InvalidArgument(\"channels must be non-negative, got \",\n                                     desired_channels);\n    }\n    channels_dim = c->MakeDim(desired_channels);\n  }\n  DimensionHandle samples_dim;\n  int32_t desired_samples;\n  TF_RETURN_IF_ERROR(c->GetAttr(\"desired_samples\", &desired_samples));\n  if (desired_samples == -1) {\n    samples_dim = c->UnknownDim();\n  } else {\n    if (desired_samples < 0) {\n      return errors::InvalidArgument(\"samples must be non-negative, got \",\n                                     desired_samples);\n    }\n    samples_dim = c->MakeDim(desired_samples);\n  }\n  c->set_output(0, c->MakeShape({samples_dim, channels_dim}));\n  c->set_output(1, c->Scalar());\n  return OkStatus();\n}\n\nStatus EncodeWavShapeFn(InferenceContext* c) {\n  ShapeHandle unused;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 2, &unused));\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n  c->set_output(0, c->Scalar());\n  return OkStatus();\n}\n\nStatus SpectrogramShapeFn(InferenceContext* c) {\n  ShapeHandle input;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 2, &input));\n  int32_t window_size;\n  TF_RETURN_IF_ERROR(c->GetAttr(\"window_size\", &window_size));\n  int32_t stride;\n  TF_RETURN_IF_ERROR(c->GetAttr(\"stride\", &stride));\n\n  DimensionHandle input_length = c->Dim(input, 0);\n  DimensionHandle input_channels = c->Dim(input, 1);\n\n  DimensionHandle output_length;\n  if (!c->ValueKnown(input_length)) {\n    output_length = c->UnknownDim();\n  } else {\n    const int64_t input_length_value = c->Value(input_length);\n    const int64_t length_minus_window = (input_length_value - window_size);\n    int64_t output_length_value;\n    if (length_minus_window < 0) {\n      output_length_value = 0;\n    } else {\n      output_length_value = 1 + (length_minus_window / stride);\n    }\n    output_length = c->MakeDim(output_length_value);\n  }\n\n  DimensionHandle output_channels =\n      c->MakeDim(1 + NextPowerOfTwo(window_size) / 2);\n  c->set_output(0,\n                c->MakeShape({input_channels, output_length, output_channels}));\n  return OkStatus();\n}\n\nStatus MfccShapeFn(InferenceContext* c) {\n  ShapeHandle spectrogram;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 3, &spectrogram));\n  ShapeHandle unused;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n\n  int32_t dct_coefficient_count;\n  TF_RETURN_IF_ERROR(\n      c->GetAttr(\"dct_coefficient_count\", &dct_coefficient_count));\n\n  DimensionHandle spectrogram_channels = c->Dim(spectrogram, 0);\n  DimensionHandle spectrogram_length = c->Dim(spectrogram, 1);\n\n  DimensionHandle output_channels = c->MakeDim(dct_coefficient_count);\n\n  c->set_output(0, c->MakeShape({spectrogram_channels, spectrogram_length,\n                                 output_channels}));\n  return OkStatus();\n}\n\n}  // namespace\n\nREGISTER_OP(\"DecodeWav\")\n    .Input(\"contents: string\")\n    .Attr(\"desired_channels: int = -1\")\n    .Attr(\"desired_samples: int = -1\")\n    .Output(\"audio: float\")\n    .Output(\"sample_rate: int32\")\n    .SetShapeFn(DecodeWavShapeFn);\n\nREGISTER_OP(\"EncodeWav\")\n    .Input(\"audio: float\")\n    .Input(\"sample_rate: int32\")\n    .Output(\"contents: string\")\n    .SetShapeFn(EncodeWavShapeFn);\n\nREGISTER_OP(\"AudioSpectrogram\")\n    .Input(\"input: float\")\n    .Attr(\"window_size: int\")\n    .Attr(\"stride: int\")\n    .Attr(\"magnitude_squared: bool = false\")\n    .Output(\"spectrogram: float\")\n    .SetShapeFn(SpectrogramShapeFn);\n\nREGISTER_OP(\"Mfcc\")\n    .Input(\"spectrogram: float\")\n    .Input(\"sample_rate: int32\")\n    .Attr(\"upper_frequency_limit: float = 4000\")\n    .Attr(\"lower_frequency_limit: float = 20\")\n    .Attr(\"filterbank_channel_count: int = 40\")\n    .Attr(\"dct_coefficient_count: int = 13\")\n    .Output(\"output: float\")\n    .SetShapeFn(MfccShapeFn);\n\n}  // namespace tensorflow"