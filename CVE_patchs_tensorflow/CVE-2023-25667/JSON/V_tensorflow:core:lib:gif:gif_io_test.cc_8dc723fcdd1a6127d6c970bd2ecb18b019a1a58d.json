"/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/lib/gif/gif_io.h\"\n\n#include \"tensorflow/core/lib/png/png_io.h\"\n#include \"tensorflow/core/platform/env.h\"\n#include \"tensorflow/core/platform/test.h\"\n\nnamespace tensorflow {\nnamespace gif {\nnamespace {\n\nconst char kTestData[] = \"tensorflow/core/lib/gif/testdata/\";\n\nstruct DecodeGifTestCase {\n  const string filepath;\n  const int num_frames;\n  const int width;\n  const int height;\n  const int channels;\n};\n\nvoid ReadFileToStringOrDie(Env* env, const string& filename, string* output) {\n  TF_CHECK_OK(ReadFileToString(env, filename, output));\n}\n\nvoid TestDecodeGif(Env* env, DecodeGifTestCase testcase) {\n  string gif;\n  ReadFileToStringOrDie(env, testcase.filepath, &gif);\n\n  // Decode gif image data.\n  std::unique_ptr<uint8[]> imgdata;\n  int nframes, w, h, c;\n  string error_string;\n  imgdata.reset(gif::Decode(\n      gif.data(), gif.size(),\n      [&](int frame_cnt, int width, int height, int channels) -> uint8* {\n        nframes = frame_cnt;\n        w = width;\n        h = height;\n        c = channels;\n        return new uint8[frame_cnt * height * width * channels];\n      },\n      &error_string));\n  ASSERT_NE(imgdata, nullptr);\n  // Make sure the decoded information matches the ground-truth image info.\n  ASSERT_EQ(nframes, testcase.num_frames);\n  ASSERT_EQ(w, testcase.width);\n  ASSERT_EQ(h, testcase.height);\n  ASSERT_EQ(c, testcase.channels);\n}\n\nTEST(GifTest, Gif) {\n  Env* env = Env::Default();\n  const string testdata_path = kTestData;\n  std::vector<DecodeGifTestCase> testcases(\n      {// file_path, num_of_channels, width, height, channels\n       {testdata_path + \"lena.gif\", 1, 51, 26, 3},\n       {testdata_path + \"optimized.gif\", 12, 20, 40, 3},\n       {testdata_path + \"red_black.gif\", 1, 16, 16, 3},\n       {testdata_path + \"scan.gif\", 12, 20, 40, 3},\n       {testdata_path + \"squares.gif\", 2, 16, 16, 3}});\n\n  for (const auto& tc : testcases) {\n    TestDecodeGif(env, tc);\n  }\n}\n\nvoid TestDecodeAnimatedGif(Env* env, const uint8* gif_data,\n                           const string& png_filepath, int frame_idx) {\n  string png;  // ground-truth\n  ReadFileToStringOrDie(env, png_filepath, &png);\n\n  // Compare decoded gif to ground-truth image frames in png format.\n  png::DecodeContext decode;\n  png::CommonInitDecode(png, 3, 8, &decode);\n  const int width = static_cast<int>(decode.width);\n  const int height = static_cast<int>(decode.height);\n  std::unique_ptr<uint8[]> png_imgdata(\n      new uint8[height * width * decode.channels]);\n  png::CommonFinishDecode(reinterpret_cast<png_bytep>(png_imgdata.get()),\n                          decode.channels * width * sizeof(uint8), &decode);\n\n  int frame_len = width * height * decode.channels;\n  int gif_idx = frame_len * frame_idx;\n  for (int i = 0; i < frame_len; i++) {\n    ASSERT_EQ(gif_data[gif_idx + i], png_imgdata[i]);\n  }\n}\n\nTEST(GifTest, AnimatedGif) {\n  Env* env = Env::Default();\n  const string testdata_path = kTestData;\n\n  // Read animated gif file once.\n  string gif;\n  ReadFileToStringOrDie(env, testdata_path + \"pendulum_sm.gif\", &gif);\n\n  std::unique_ptr<uint8[]> gif_imgdata;\n  int nframes, w, h, c;\n  string error_string;\n  gif_imgdata.reset(gif::Decode(\n      gif.data(), gif.size(),\n      [&](int num_frames, int width, int height, int channels) -> uint8* {\n        nframes = num_frames;\n        w = width;\n        h = height;\n        c = channels;\n        return new uint8[num_frames * height * width * channels];\n      },\n      &error_string));\n\n  TestDecodeAnimatedGif(env, gif_imgdata.get(),\n                        testdata_path + \"pendulum_sm_frame0.png\", 0);\n  TestDecodeAnimatedGif(env, gif_imgdata.get(),\n                        testdata_path + \"pendulum_sm_frame1.png\", 1);\n  TestDecodeAnimatedGif(env, gif_imgdata.get(),\n                        testdata_path + \"pendulum_sm_frame2.png\", 2);\n}\n\nvoid TestExpandAnimations(Env* env, const string& filepath) {\n  string gif;\n  ReadFileToStringOrDie(env, filepath, &gif);\n\n  std::unique_ptr<uint8[]> imgdata;\n  string error_string;\n  int nframes;\n  // `expand_animations` is set to true by default. Set to false.\n  bool expand_animations = false;\n  imgdata.reset(gif::Decode(\n      gif.data(), gif.size(),\n      [&](int frame_cnt, int width, int height, int channels) -> uint8* {\n        nframes = frame_cnt;\n        return new uint8[frame_cnt * height * width * channels];\n      },\n      &error_string, expand_animations));\n\n  // Check that only 1 frame is being decoded.\n  ASSERT_EQ(nframes, 1);\n}\n\nTEST(GifTest, ExpandAnimations) {\n  Env* env = Env::Default();\n  const string testdata_path = kTestData;\n\n  // Test all animated gif test images.\n  TestExpandAnimations(env, testdata_path + \"scan.gif\");\n  TestExpandAnimations(env, testdata_path + \"pendulum_sm.gif\");\n  TestExpandAnimations(env, testdata_path + \"squares.gif\");\n}\n\nvoid TestInvalidGifFormat(const string& header_bytes) {\n  std::unique_ptr<uint8[]> imgdata;\n  string error_string;\n  int nframes;\n  imgdata.reset(gif::Decode(\n      header_bytes.data(), header_bytes.size(),\n      [&](int frame_cnt, int width, int height, int channels) -> uint8* {\n        nframes = frame_cnt;\n        return new uint8[frame_cnt * height * width * channels];\n      },\n      &error_string));\n\n  // Check that decoding image formats other than gif throws an error.\n  string err_msg = \"failed to open gif file\";\n  ASSERT_EQ(error_string.substr(0, 23), err_msg);\n}\n\nTEST(GifTest, BadGif) {\n  // Input header bytes of other image formats to gif decoder.\n  TestInvalidGifFormat(\"\\x89\\x50\\x4E\\x47\\x0D\\x0A\\x1A\\x0A\");  // png\n  TestInvalidGifFormat(\"\\x42\\x4d\");                          // bmp\n  TestInvalidGifFormat(\"\\xff\\xd8\\xff\");                      // jpeg\n  TestInvalidGifFormat(\"\\x49\\x49\\x2A\\x00\");                  // tiff\n}\n\n}  // namespace\n}  // namespace gif\n}  // namespace tensorflow"