"diff --git a/tensorflow/compiler/tf2xla/kernels/pooling_ops.cc b/tensorflow/compiler/tf2xla/kernels/pooling_ops.cc\nindex 7f0d712f13d..64351c6a741 100644\n--- a/tensorflow/compiler/tf2xla/kernels/pooling_ops.cc\n+++ b/tensorflow/compiler/tf2xla/kernels/pooling_ops.cc\n@@ -33,15 +33,41 @@ limitations under the License.\n #include \"tensorflow/compiler/xla/util.h\"\n #include \"tensorflow/core/framework/bounds_check.h\"\n #include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/op_requires.h\"\n #include \"tensorflow/core/framework/register_types.h\"\n #include \"tensorflow/core/framework/tensor.h\"\n #include \"tensorflow/core/platform/errors.h\"\n #include \"tensorflow/core/util/determinism.h\"\n #include \"tensorflow/core/util/tensor_format.h\"\n+#include \"tensorflow/tsl/platform/errors.h\"\n \n namespace tensorflow {\n namespace {\n \n+template <typename T>\n+static Status ValidateKernelSizes(const T& ksizes) {\n+  for (size_t i = 0; i < ksizes.size(); ++i) {\n+    if (ksizes[i] <= 0) {\n+      return errors::InvalidArgument(\n+          \"Sliding window ksize field for dimension \", i,\n+          \" must be positive but is \", ksizes[i]);\n+    }\n+  }\n+  return OkStatus();\n+}\n+\n+template <typename T>\n+static Status ValidateStrides(const T& strides) {\n+  for (size_t i = 0; i < strides.size(); ++i) {\n+    if (strides[i] <= 0) {\n+      return errors::InvalidArgument(\n+          \"Sliding window stride field for dimension \", i,\n+          \" must be positive but is \", strides[i]);\n+    }\n+  }\n+  return OkStatus();\n+}\n+\n // Superclass of pooling ops.\n class PoolingOp : public XlaOpKernel {\n  public:\n@@ -83,50 +109,54 @@ class PoolingOp : public XlaOpKernel {\n \n  protected:\n   StatusOr<std::vector<int64_t>> GetKernelSize(XlaOpKernelContext* ctx) {\n-    if (ctx->num_inputs() == 1) {\n-      return ksize_;\n-    }\n-    const TensorShape ksize_shape = ctx->InputShape(1);\n-    // Validate input sizes.\n-    if (!TensorShapeUtils::IsVector(ksize_shape)) {\n-      return errors::InvalidArgument(\"ksize must be a vector, not shape \",\n-                                     ksize_shape.DebugString());\n-    }\n-    if (ksize_shape.num_elements() != num_dims()) {\n-      return errors::InvalidArgument(\n-          \"Sliding window ksize field must \"\n-          \"specify \",\n-          num_dims(), \" dimensions\");\n-    }\n     std::vector<int64_t> ksize;\n-    auto status = ctx->ConstantInputAsIntVector(1, &ksize);\n-    if (!status.ok()) {\n-      return status;\n+    if (ctx->num_inputs() == 1) {\n+      ksize = ksize_;\n+    } else {\n+      const TensorShape ksize_shape = ctx->InputShape(1);\n+      // Validate input sizes.\n+      if (!TensorShapeUtils::IsVector(ksize_shape)) {\n+        return errors::InvalidArgument(\"ksize must be a vector, not shape \",\n+                                       ksize_shape.DebugString());\n+      }\n+      if (ksize_shape.num_elements() != num_dims()) {\n+        return errors::InvalidArgument(\n+            \"Sliding window ksize field must \"\n+            \"specify \",\n+            num_dims(), \" dimensions\");\n+      }\n+      auto status = ctx->ConstantInputAsIntVector(1, &ksize);\n+      if (!status.ok()) {\n+        return status;\n+      }\n     }\n+    TF_RETURN_IF_ERROR(ValidateKernelSizes(ksize));\n     return ksize;\n   }\n \n   StatusOr<std::vector<int64_t>> GetStride(XlaOpKernelContext* ctx) {\n-    if (ctx->num_inputs() == 1) {\n-      return stride_;\n-    }\n-    const TensorShape stride_shape = ctx->InputShape(2);\n-    // Validate input sizes.\n-    if (!TensorShapeUtils::IsVector(stride_shape)) {\n-      return errors::InvalidArgument(\"stride must be a vector, not shape \",\n-                                     stride_shape.DebugString());\n-    }\n-    if (stride_shape.num_elements() != num_dims()) {\n-      return errors::InvalidArgument(\n-          \"Sliding window stride field must \"\n-          \"specify \",\n-          num_dims(), \" dimensions\");\n-    }\n     std::vector<int64_t> stride;\n-    auto status = ctx->ConstantInputAsIntVector(2, &stride);\n-    if (!status.ok()) {\n-      return status;\n+    if (ctx->num_inputs() == 1) {\n+      stride = stride_;\n+    } else {\n+      const TensorShape stride_shape = ctx->InputShape(2);\n+      // Validate input sizes.\n+      if (!TensorShapeUtils::IsVector(stride_shape)) {\n+        return errors::InvalidArgument(\"stride must be a vector, not shape \",\n+                                       stride_shape.DebugString());\n+      }\n+      if (stride_shape.num_elements() != num_dims()) {\n+        return errors::InvalidArgument(\n+            \"Sliding window stride field must \"\n+            \"specify \",\n+            num_dims(), \" dimensions\");\n+      }\n+      auto status = ctx->ConstantInputAsIntVector(2, &stride);\n+      if (!status.ok()) {\n+        return status;\n+      }\n     }\n+    TF_RETURN_IF_ERROR(ValidateStrides(stride));\n     return stride;\n   }\n \n@@ -355,10 +385,12 @@ class MaxPoolGradOp : public XlaOpKernel {\n                 errors::InvalidArgument(\"Sliding window ksize field must \"\n                                         \"specify \",\n                                         num_dims(), \" dimensions\"));\n+    OP_REQUIRES_OK(ctx, ValidateKernelSizes(ksize_));\n     OP_REQUIRES(ctx, stride_.size() == num_dims(),\n                 errors::InvalidArgument(\"Sliding window strides field must \"\n                                         \"specify \",\n                                         num_dims(), \" dimensions\"));\n+    OP_REQUIRES_OK(ctx, ValidateStrides(stride_));\n \n     const TensorShape tensor_in_shape = ctx->InputShape(0);\n     const TensorShape tensor_out_shape = ctx->InputShape(1);\n@@ -446,11 +478,13 @@ class AvgPoolGradOp : public XlaOpKernel {\n                 errors::InvalidArgument(\"Sliding window ksize field must \"\n                                         \"specify \",\n                                         num_dims(), \" dimensions\"));\n+    OP_REQUIRES_OK(ctx, ValidateKernelSizes(ksize_));\n     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"strides\", &stride_));\n     OP_REQUIRES(ctx, stride_.size() == num_dims(),\n                 errors::InvalidArgument(\"Sliding window strides field must \"\n                                         \"specify \",\n                                         num_dims(), \" dimensions\"));\n+    OP_REQUIRES_OK(ctx, ValidateStrides(stride_));\n     OP_REQUIRES_OK(ctx, ctx->GetAttr(\"padding\", &padding_));\n     OP_REQUIRES(ctx, padding_ != EXPLICIT,\n                 errors::Unimplemented(\n@@ -579,10 +613,12 @@ class MaxPoolGradGradOp : public XlaOpKernel {\n                 errors::InvalidArgument(\"Sliding window ksize field must \"\n                                         \"specify \",\n                                         num_dims(), \" dimensions\"));\n+    OP_REQUIRES_OK(ctx, ValidateKernelSizes(ksize_));\n     OP_REQUIRES(ctx, stride_.size() == num_dims(),\n                 errors::InvalidArgument(\"Sliding window strides field must \"\n                                         \"specify \",\n                                         num_dims(), \" dimensions\"));\n+    OP_REQUIRES_OK(ctx, ValidateStrides(stride_));\n \n     const TensorShape tensor_in_shape = ctx->InputShape(0);\n     const TensorShape tensor_out_shape = ctx->InputShape(1);"