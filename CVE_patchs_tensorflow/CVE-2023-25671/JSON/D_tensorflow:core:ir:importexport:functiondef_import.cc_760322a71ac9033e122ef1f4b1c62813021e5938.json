"diff --git a/tensorflow/core/ir/importexport/functiondef_import.cc b/tensorflow/core/ir/importexport/functiondef_import.cc\nindex 96cdb5767b5..d1d54b24788 100644\n--- a/tensorflow/core/ir/importexport/functiondef_import.cc\n+++ b/tensorflow/core/ir/importexport/functiondef_import.cc\n@@ -86,11 +86,11 @@ class ValueMapManager {\n     return ::tensorflow::OkStatus();\n   }\n \n-  Value GetValueOrCreatePlaceholder(StringRef full_name) {\n+  tensorflow::StatusOr<Value> GetValueOrCreatePlaceholder(StringRef full_name) {\n     StringRef node_name;\n     StringRef output_name = \"\";\n     bool is_control_dep = full_name[0] == '^';\n-    int output_num = 0;\n+    size_t output_num = 0;\n     if (is_control_dep) full_name = full_name.drop_front();\n     {\n       size_t colon_sep = full_name.find_first_of(':');\n@@ -105,8 +105,16 @@ class ValueMapManager {\n         // NOLINTNEXTLINE: type matching the API taking a reference.\n         unsigned long long value;\n         if (!llvm::getAsUnsignedInteger(output_name.drop_front(colon_sep + 1),\n-                                        10, value))\n-          output_num = value;\n+                                        10, value)) {\n+          if (LLVM_LIKELY(\n+                  value <=\n+                  std::numeric_limits<llvm::SmallVectorSizeType<Value>>::max() -\n+                      1))\n+            output_num = value;\n+          else\n+            return InvalidArgument(\"Output index \", value,\n+                                   \" is invalid (too large)\");\n+        }\n         output_name = output_name.take_front(colon_sep);\n       }\n     }\n@@ -171,8 +179,9 @@ Status ImportNodes(ValueMapManager value_manager,\n     for (const std::string& input : node.input()) {\n       if (input.empty())\n         return InvalidArgument(\"Node '\", node.name(), \"' has an empty input\");\n-      state.operands.push_back(\n-          value_manager.GetValueOrCreatePlaceholder(input));\n+      TF_ASSIGN_OR_RETURN(Value value,\n+                          value_manager.GetValueOrCreatePlaceholder(input));\n+      state.operands.push_back(value);\n     }\n     // Retrieve the entry in the nodes_map for this node and infer the result\n     // count from what was inferred during the first traversal above.\n@@ -470,8 +479,9 @@ Status ImportGenericFunction(\n       return InvalidArgument(\"Function '\", func.signature().name(),\n                              \"' has empty result name\");\n     }\n-    ret_vals[position->second] =\n-        value_manager.GetValueOrCreatePlaceholder(ret_val.second);\n+    TF_ASSIGN_OR_RETURN(\n+        ret_vals[position->second],\n+        value_manager.GetValueOrCreatePlaceholder(ret_val.second));\n   }\n   for (const auto& ret_val : func.control_ret()) {\n     auto position = control_output_to_position.find(ret_val.first);\n@@ -485,8 +495,8 @@ Status ImportGenericFunction(\n       return InvalidArgument(\"Function '\", func.signature().name(),\n                              \"' has empty control result name\");\n     }\n-    Value result = value_manager.GetValueOrCreatePlaceholder(\n-        (Twine(\"^\") + ret_val.second).str());\n+    TF_ASSIGN_OR_RETURN(Value result, value_manager.GetValueOrCreatePlaceholder(\n+                                          (Twine(\"^\") + ret_val.second).str()));\n     if (!result.getType().isa<ControlType>())\n       return InvalidArgument(\"failed to map returned value \", ret_val.second,\n                              \", isn't a control output\");"