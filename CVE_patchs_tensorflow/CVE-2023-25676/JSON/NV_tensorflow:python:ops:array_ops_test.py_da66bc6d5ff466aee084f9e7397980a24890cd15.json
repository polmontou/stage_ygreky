"# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for array operations.\"\"\"\n\nfrom tensorflow.python.eager import backprop\nfrom tensorflow.python.eager import def_function\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import tensor_spec\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.ops import random_ops\nfrom tensorflow.python.platform import test\n\n\nclass ArrayOpTest(test.TestCase):\n\n  def testGatherGradHasPartialStaticShape(self):\n    # Create a tensor with an unknown dim 1.\n    x = random_ops.random_normal([4, 10, 10])\n    x = array_ops.gather(\n        x,\n        array_ops.reshape(array_ops.where_v2(x[0, :, 0] > 0.5), [-1]),\n        axis=1)\n    x.shape.assert_is_compatible_with([4, None, 10])\n\n    with backprop.GradientTape() as tape:\n      tape.watch(x)\n      a = array_ops.gather(array_ops.gather(x, [0, 1]), [0, 1])\n    grad_a = tape.gradient(a, x)\n    with backprop.GradientTape() as tape:\n      tape.watch(x)\n      b = array_ops.gather(array_ops.gather(x, [2, 3], axis=2), [0, 1])\n    grad_b = tape.gradient(b, x)\n\n    # We make sure that the representation of the shapes are correct; the shape\n    # equality check will always eval to false due to the shapes being partial.\n    grad_a.shape.assert_is_compatible_with([None, None, 10])\n    grad_b.shape.assert_is_compatible_with([4, None, 10])\n\n  def testReshapeShapeInference(self):\n    # Create a tensor with an unknown dim 1.\n    x = random_ops.random_normal([4, 10, 10])\n    x = array_ops.gather(\n        x,\n        array_ops.reshape(array_ops.where_v2(x[0, :, 0] > 0.5), [-1]),\n        axis=1)\n    x.shape.assert_is_compatible_with([4, None, 10])\n    a = array_ops.reshape(x, array_ops.shape(x))\n    a.shape.assert_is_compatible_with([4, None, 10])\n    b = array_ops.reshape(x, math_ops.cast(array_ops.shape(x), dtypes.int64))\n    b.shape.assert_is_compatible_with([4, None, 10])\n\n    # We do not shape-infer across a tf.cast into anything that's not tf.int32\n    # or tf.int64, since they might end up mangling the shape.\n    c = array_ops.reshape(\n        x,\n        math_ops.cast(\n            math_ops.cast(array_ops.shape(x), dtypes.float32), dtypes.int32))\n    c.shape.assert_is_compatible_with([None, None, None])\n\n  def testEmptyMeshgrid(self):\n    self.assertEqual(array_ops.meshgrid(), [])\n\n  def testSlicedPartialShapeInference(self):\n\n    @def_function.function(autograph=False)\n    def g(x):\n      return array_ops.zeros([array_ops.shape(x)[0]])\n\n    conc = g.get_concrete_function(tensor_spec.TensorSpec([10, None]))\n    self.assertAllEqual(conc.output_shapes.as_list(), [10])\n\n  def testIdentityOnSlicedPartialShapeInference(self):\n\n    @def_function.function(autograph=False)\n    def g(x):\n      return array_ops.zeros([array_ops.identity(array_ops.shape(x)[0])])\n\n    conc = g.get_concrete_function(tensor_spec.TensorSpec([10, None]))\n    self.assertAllEqual(conc.output_shapes.as_list(), [10])\n\n  @test_util.run_in_graph_and_eager_modes\n  def testParallelConcatFailsWithRankZeroShape(self):\n    op = array_ops.ParallelConcat\n    para = {\"shape\": 0, \"values\": [1]}\n\n    def func():\n      y = op(**para)\n      return y\n\n    with self.assertRaisesRegex(\n        Exception, \"(rank|dimension) of .* must be greater than .* 0\"\n    ):\n      func()\n\n\nif __name__ == \"__main__\":\n  test.main()"