"/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/framework/bfloat16.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/kernels/fill_functor.h\"\n#include \"tensorflow/core/kernels/inplace_ops_functor.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n\nnamespace tensorflow {\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\nnamespace functor {\n\ntemplate <typename Device, typename T>\nStatus DoParallelConcatUpdate(const Device& d, const Tensor& value, int32_t loc,\n                              Tensor* output) {\n  auto Tvalue = value.shaped<T, 2>({1, value.NumElements()});\n  auto Toutput = output->flat_outer_dims<T>();\n  auto nrows = Toutput.dimension(0);\n  auto r = (loc % nrows + nrows) % nrows;  // Guard index range.\n  Toutput.template chip<0>(r).device(d) = Tvalue.template chip<0>(0);\n  return OkStatus();\n}\n\ntemplate <>\nStatus DoParallelConcat(const CPUDevice& d, const Tensor& value, int32_t loc,\n                        Tensor* output) {\n  CHECK_EQ(value.dtype(), output->dtype());\n  switch (value.dtype()) {\n#define CASE(type)                  \\\n  case DataTypeToEnum<type>::value: \\\n    return DoParallelConcatUpdate<CPUDevice, type>(d, value, loc, output);\n    TF_CALL_POD_TYPES(CASE);\n    TF_CALL_tstring(CASE);\n    TF_CALL_variant(CASE);\n#undef CASE\n    default:\n      return errors::InvalidArgument(\"Unsupported data type: \",\n                                     DataTypeString(value.dtype()));\n  }\n}\n\n}  // end namespace functor\n\nnamespace {\n\ntemplate <typename Device>\nclass ParallelConcatUpdate : public OpKernel {\n public:\n  explicit ParallelConcatUpdate(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"loc\", &loc_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    auto value = ctx->input(0);\n    // Value should be at least rank 1. Also the 0th dimension should be\n    // at least loc_.\n    OP_REQUIRES(ctx, value.dims() >= 1,\n                errors::InvalidArgument(\"value should be at least rank 1.\"));\n    OP_REQUIRES(\n        ctx, value.dim_size(0) > loc_,\n        errors::InvalidArgument(\"0th dimension of value = \", value.dim_size(0),\n                                \" is less than loc_=\", loc_));\n\n    auto update = ctx->input(1);\n\n    OP_REQUIRES(\n        ctx, value.dims() == update.dims(),\n        errors::InvalidArgument(\"value and update shape doesn't match: \",\n                                value.shape().DebugString(), \" vs. \",\n                                update.shape().DebugString()));\n    for (int i = 1; i < value.dims(); ++i) {\n      OP_REQUIRES(\n          ctx, value.dim_size(i) == update.dim_size(i),\n          errors::InvalidArgument(\"value and update shape doesn't match \",\n                                  value.shape().DebugString(), \" vs. \",\n                                  update.shape().DebugString()));\n    }\n    OP_REQUIRES(ctx, 1 == update.dim_size(0),\n                errors::InvalidArgument(\"update shape doesn't match: \",\n                                        update.shape().DebugString()));\n\n    Tensor output = value;  // This creates an alias intentionally.\n    const auto& d = ctx->eigen_device<Device>();\n    OP_REQUIRES_OK(\n        ctx, ::tensorflow::functor::DoParallelConcat(d, update, loc_, &output));\n    ctx->set_output(0, output);\n  }\n\n private:\n  int32 loc_;\n};\n\ntemplate <typename Device, typename T>\nclass ParallelConcatStart : public OpKernel {\n public:\n  explicit ParallelConcatStart(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"shape\", &shape_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    Tensor* out = nullptr;\n    // We do not know whether the output will be used on GPU. Setting it to be\n    // gpu-compatible for now.\n    AllocatorAttributes attr;\n    attr.set_gpu_compatible(true);\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, shape_, &out, attr));\n  }\n\n private:\n  TensorShape shape_;\n};\n\nclass FailureKernel : public OpKernel {\n public:\n  explicit FailureKernel(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx,\n                   errors::Internal(\"Found instance of parallel_stack which \"\n                                    \"could not be properly replaced.\"));\n  }\n\n  void Compute(OpKernelContext*) override {}\n};\n\n#define REGISTER(type)                                    \\\n  REGISTER_KERNEL_BUILDER(Name(\"_ParallelConcatUpdate\")   \\\n                              .Device(DEVICE_CPU)         \\\n                              .TypeConstraint<type>(\"T\"), \\\n                          ParallelConcatUpdate<CPUDevice>);\nTF_CALL_POD_STRING_TYPES(REGISTER)\n#undef REGISTER\n\n#define REGISTER_EMPTY(type)                                  \\\n  REGISTER_KERNEL_BUILDER(Name(\"_ParallelConcatStart\")        \\\n                              .Device(DEVICE_CPU)             \\\n                              .TypeConstraint<type>(\"dtype\"), \\\n                          ParallelConcatStart<CPUDevice, type>)\n\nTF_CALL_POD_STRING_TYPES(REGISTER_EMPTY)\n#undef REGISTER_EMPTY\n\n#define REGISTER_PARALLEL_CONCAT(type)                                     \\\n  REGISTER_KERNEL_BUILDER(                                                 \\\n      Name(\"ParallelConcat\").Device(DEVICE_CPU).TypeConstraint<type>(\"T\"), \\\n      FailureKernel);\nTF_CALL_POD_STRING_TYPES(REGISTER_PARALLEL_CONCAT);\n#undef REGISTER_PARALLEL_CONCAT\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntypedef Eigen::GpuDevice GPUDevice;\n\n#define REGISTER_PARALLEL_CONCAT_START(type)                  \\\n  REGISTER_KERNEL_BUILDER(Name(\"_ParallelConcatStart\")        \\\n                              .Device(DEVICE_GPU)             \\\n                              .TypeConstraint<type>(\"dtype\"), \\\n                          ParallelConcatStart<GPUDevice, type>);\nTF_CALL_GPU_NUMBER_TYPES(REGISTER_PARALLEL_CONCAT_START);\n#undef REGISTER_PARALLEL_CONCAT_START\n\n#define REGISTER_PARALLEL_CONCAT(type)                                     \\\n  REGISTER_KERNEL_BUILDER(                                                 \\\n      Name(\"ParallelConcat\").Device(DEVICE_GPU).TypeConstraint<type>(\"T\"), \\\n      FailureKernel);\nTF_CALL_GPU_NUMBER_TYPES(REGISTER_PARALLEL_CONCAT);\n#undef REGISTER_PARALLEL_CONCAT\n\n#define REGISTER(type)                                    \\\n  REGISTER_KERNEL_BUILDER(Name(\"_ParallelConcatUpdate\")   \\\n                              .Device(DEVICE_GPU)         \\\n                              .TypeConstraint<type>(\"T\"), \\\n                          ParallelConcatUpdate<GPUDevice>);\nTF_CALL_GPU_NUMBER_TYPES(REGISTER);\n#undef REGISTER\n\n// Register versions that operate on int32 data on the CPU even though the op\n// has been placed on the GPU\n\nREGISTER_KERNEL_BUILDER(Name(\"_ParallelConcatUpdate\")\n                            .Device(DEVICE_GPU)\n                            .HostMemory(\"value\")\n                            .HostMemory(\"update\")\n                            .HostMemory(\"output\")\n                            .TypeConstraint<int32>(\"T\"),\n                        ParallelConcatUpdate<CPUDevice>);\n#endif\n\nclass InplaceOpBase : public OpKernel {\n public:\n  explicit InplaceOpBase(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    auto x = ctx->input(0);\n    auto i = ctx->input(1);\n    auto v = ctx->input(2);\n\n    OP_REQUIRES(ctx, TensorShapeUtils::IsVector(i.shape()),\n                errors::InvalidArgument(\"i must be a vector. \",\n                                        i.shape().DebugString()));\n    OP_REQUIRES(ctx, x.dims() == v.dims(),\n                errors::InvalidArgument(\n                    \"x and v shape doesn't match (ranks differ): \",\n                    x.shape().DebugString(), \" vs. \", v.shape().DebugString()));\n    for (int i = 1; i < x.dims(); ++i) {\n      OP_REQUIRES(\n          ctx, x.dim_size(i) == v.dim_size(i),\n          errors::InvalidArgument(\"x and v shape doesn't match at index \", i,\n                                  \" : \", x.shape().DebugString(), \" vs. \",\n                                  v.shape().DebugString()));\n    }\n    OP_REQUIRES(ctx, i.dim_size(0) == v.dim_size(0),\n                errors::InvalidArgument(\n                    \"i and x shape doesn't match at index 0: \",\n                    i.shape().DebugString(), \" vs. \", v.shape().DebugString()));\n\n    Tensor y = x;  // This creates an alias intentionally.\n    // Skip processing if tensors are empty.\n    if (x.NumElements() > 0 && v.NumElements() > 0) {\n      OP_REQUIRES_OK(ctx, DoCompute(ctx, i, v, &y));\n    }\n    ctx->set_output(0, y);\n  }\n\n protected:\n  virtual Status DoCompute(OpKernelContext* ctx, const Tensor& i,\n                           const Tensor& v, Tensor* y) = 0;\n};\n\n}  // end namespace\n\nnamespace functor {\n\ntemplate <typename T>\nvoid DoInplaceOp(const CPUDevice& d, InplaceOpType op, const Tensor& i,\n                 const Tensor& v, Tensor* y) {\n  auto Ti = i.flat<int32>();\n  auto Tv = v.flat_outer_dims<T>();\n  auto Ty = y->flat_outer_dims<T>();\n  auto nrows = Ty.dimension(0);\n  for (int64_t j = 0; j < Ti.size(); ++j) {\n    auto r = (Ti(j) % nrows + nrows) % nrows;  // Guard index range.\n    switch (op) {\n      case I_UPDATE:\n        Ty.template chip<0>(r).device(d) = Tv.template chip<0>(j);\n        break;\n      case I_ADD:\n        Ty.template chip<0>(r).device(d) += Tv.template chip<0>(j);\n        break;\n      case I_SUB:\n        Ty.template chip<0>(r).device(d) -= Tv.template chip<0>(j);\n        break;\n    }\n  }\n}\n\n// String type only supports inplace update.\nvoid DoInplaceStringUpdateOp(const CPUDevice& d, const Tensor& i,\n                             const Tensor& v, Tensor* y) {\n  auto Ti = i.flat<int32>();\n  auto Tv = v.flat_outer_dims<tstring>();\n  auto Ty = y->flat_outer_dims<tstring>();\n  auto nrows = Ty.dimension(0);\n  for (int64_t j = 0; j < Ti.size(); ++j) {\n    auto r = (Ti(j) % nrows + nrows) % nrows;  // Guard index range.\n    Ty.template chip<0>(r).device(d) = Tv.template chip<0>(j);\n  }\n}\n\ntemplate <>\nStatus DoInplace(const CPUDevice& device, InplaceOpType op, const Tensor& i,\n                 const Tensor& v, Tensor* y) {\n  CHECK_EQ(v.dtype(), y->dtype());\n  if (op == I_UPDATE) {\n    if (v.dtype() == DT_STRING) {\n      DoInplaceStringUpdateOp(device, i, v, y);\n      return OkStatus();\n    } else if (v.dtype() == DT_BOOL) {\n      DoInplaceOp<bool>(device, op, i, v, y);\n      return OkStatus();\n    }\n  }\n  switch (v.dtype()) {\n#define CASE(type)                          \\\n  case DataTypeToEnum<type>::value:         \\\n    DoInplaceOp<type>(device, op, i, v, y); \\\n    break;\n    TF_CALL_NUMBER_TYPES(CASE);\n#undef CASE\n    default:\n      return errors::InvalidArgument(\"Unsupported data type: \",\n                                     DataTypeString(v.dtype()));\n  }\n  return OkStatus();\n}\n\n}  // end namespace functor\n\nnamespace {\ntemplate <typename Device, functor::InplaceOpType op>\nclass InplaceOp : public InplaceOpBase {\n public:\n  explicit InplaceOp(OpKernelConstruction* ctx) : InplaceOpBase(ctx) {}\n\n protected:\n  Status DoCompute(OpKernelContext* ctx, const Tensor& i, const Tensor& v,\n                   Tensor* y) override {\n    const auto& d = ctx->eigen_device<Device>();\n    return ::tensorflow::functor::DoInplace(d, op, i, v, y);\n  }\n};\n\nclass CopyOpBase : public OpKernel {\n public:\n  explicit CopyOpBase(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    auto x = ctx->input(0);\n    Tensor* y;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, x.shape(), &y));\n    OP_REQUIRES_OK(ctx, DoCompute(ctx, x, y));\n  }\n\n protected:\n  virtual Status DoCompute(OpKernelContext* ctx, const Tensor& x,\n                           Tensor* y) = 0;\n};\n\ntemplate <typename Device>\nclass CopyOp : public CopyOpBase {\n public:\n  explicit CopyOp(OpKernelConstruction* ctx) : CopyOpBase(ctx) {}\n\n protected:\n  Status DoCompute(OpKernelContext* ctx, const Tensor& x, Tensor* y) override {\n    const auto& d = ctx->eigen_device<Device>();\n    return ::tensorflow::functor::DoCopy(d, x, y);\n  }\n};\n\n}  // end namespace\n\nnamespace functor {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\ntemplate <>\nStatus DoCopy(const CPUDevice& device, const Tensor& x, Tensor* y) {\n  CHECK_EQ(x.dtype(), y->dtype());\n  switch (x.dtype()) {\n#define CASE(type)                                   \\\n  case DataTypeToEnum<type>::value:                  \\\n    y->flat<type>().device(device) = x.flat<type>(); \\\n    break;\n\n    TF_CALL_NUMBER_TYPES(CASE);\n    TF_CALL_bool(CASE);\n    TF_CALL_tstring(CASE);\n#undef CASE\n    default:\n      return errors::InvalidArgument(\"Unsupported data type: \",\n                                     DataTypeString(x.dtype()));\n  }\n  return OkStatus();\n}\n\n}  // end namespace functor\n\nnamespace {\ntemplate <typename Device, typename T>\nclass EmptyOp : public OpKernel {\n public:\n  explicit EmptyOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"init\", &init_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape = ctx->input(0);\n    OP_REQUIRES(\n        ctx, TensorShapeUtils::IsVector(shape.shape()),\n        errors::InvalidArgument(\"shape must be a vector of int32, got shape \",\n                                shape.shape().DebugString()));\n    auto dims = shape.flat<int32>();\n    TensorShape out_shape;\n    OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(\n                            reinterpret_cast<const int32*>(dims.data()),\n                            dims.size(), &out_shape));\n    Tensor* out = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, out_shape, &out));\n\n    if (init_) {\n      functor::SetZeroFunctor<Device, T>()(ctx->eigen_device<Device>(),\n                                           out->flat<T>());\n    }\n  }\n\n private:\n  bool init_;\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"InplaceUpdate\").Device(DEVICE_CPU),\n                        InplaceOp<CPUDevice, functor::I_UPDATE>);\nREGISTER_KERNEL_BUILDER(Name(\"InplaceAdd\").Device(DEVICE_CPU),\n                        InplaceOp<CPUDevice, functor::I_ADD>);\nREGISTER_KERNEL_BUILDER(Name(\"InplaceSub\").Device(DEVICE_CPU),\n                        InplaceOp<CPUDevice, functor::I_SUB>);\nREGISTER_KERNEL_BUILDER(Name(\"DeepCopy\").Device(DEVICE_CPU), CopyOp<CPUDevice>);\n\n#define REGISTER_EMPTY(type, dev)                             \\\n  REGISTER_KERNEL_BUILDER(Name(\"Empty\")                       \\\n                              .Device(DEVICE_##dev)           \\\n                              .HostMemory(\"shape\")            \\\n                              .TypeConstraint<type>(\"dtype\"), \\\n                          EmptyOp<dev##Device, type>)\n\nREGISTER_EMPTY(float, CPU)\nREGISTER_EMPTY(bfloat16, CPU)\nREGISTER_EMPTY(double, CPU)\nREGISTER_EMPTY(Eigen::half, CPU)\nREGISTER_EMPTY(tstring, CPU)\nREGISTER_EMPTY(int32, CPU)\nREGISTER_EMPTY(int64_t, CPU)\nREGISTER_EMPTY(bool, CPU)\nREGISTER_EMPTY(uint8, CPU)\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntypedef Eigen::GpuDevice GPUDevice;\n\n#define REGISTER(TYPE)                                                    \\\n  REGISTER_KERNEL_BUILDER(                                                \\\n      Name(\"InplaceUpdate\").Device(DEVICE_GPU).TypeConstraint<TYPE>(\"T\"), \\\n      InplaceOp<GPUDevice, functor::I_UPDATE>);                           \\\n  REGISTER_KERNEL_BUILDER(                                                \\\n      Name(\"InplaceAdd\").Device(DEVICE_GPU).TypeConstraint<TYPE>(\"T\"),    \\\n      InplaceOp<GPUDevice, functor::I_ADD>);                              \\\n  REGISTER_KERNEL_BUILDER(                                                \\\n      Name(\"InplaceSub\").Device(DEVICE_GPU).TypeConstraint<TYPE>(\"T\"),    \\\n      InplaceOp<GPUDevice, functor::I_SUB>);                              \\\n  REGISTER_KERNEL_BUILDER(                                                \\\n      Name(\"DeepCopy\").Device(DEVICE_GPU).TypeConstraint<TYPE>(\"T\"),      \\\n      CopyOp<GPUDevice>);\n\nREGISTER_KERNEL_BUILDER(\n    Name(\"InplaceUpdate\").Device(DEVICE_GPU).TypeConstraint<bool>(\"T\"),\n    InplaceOp<GPUDevice, functor::I_UPDATE>);\nREGISTER(float);\nREGISTER(double);\nREGISTER(Eigen::half);\nREGISTER(Eigen::bfloat16);\nREGISTER(int64_t);\n\nREGISTER_EMPTY(float, GPU);\nREGISTER_EMPTY(double, GPU);\nREGISTER_EMPTY(Eigen::half, GPU);\nREGISTER_EMPTY(Eigen::bfloat16, GPU);\nREGISTER_EMPTY(int64_t, GPU);\nREGISTER_EMPTY(int32, GPU);\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\nREGISTER_KERNEL_BUILDER(Name(\"InplaceUpdate\")\n                            .Device(DEVICE_DEFAULT)\n                            .HostMemory(\"x\")\n                            .HostMemory(\"i\")\n                            .HostMemory(\"v\")\n                            .HostMemory(\"y\")\n                            .TypeConstraint<int32>(\"T\"),\n                        InplaceOp<CPUDevice, functor::I_UPDATE>);\nREGISTER_KERNEL_BUILDER(Name(\"InplaceAdd\")\n                            .Device(DEVICE_DEFAULT)\n                            .HostMemory(\"x\")\n                            .HostMemory(\"i\")\n                            .HostMemory(\"v\")\n                            .HostMemory(\"y\")\n                            .TypeConstraint<int32>(\"T\"),\n                        InplaceOp<CPUDevice, functor::I_ADD>);\nREGISTER_KERNEL_BUILDER(Name(\"InplaceSub\")\n                            .Device(DEVICE_DEFAULT)\n                            .HostMemory(\"x\")\n                            .HostMemory(\"i\")\n                            .HostMemory(\"v\")\n                            .HostMemory(\"y\")\n                            .TypeConstraint<int32>(\"T\"),\n                        InplaceOp<CPUDevice, functor::I_SUB>);\n\nREGISTER_KERNEL_BUILDER(Name(\"DeepCopy\")\n                            .Device(DEVICE_DEFAULT)\n                            .HostMemory(\"x\")\n                            .HostMemory(\"y\")\n                            .TypeConstraint<int32>(\"T\"),\n                        CopyOp<CPUDevice>);\n\n}  // end namespace\n}  // end namespace tensorflow"